#
# compiler flag for diagshell and apollo ASIC driver under x86 CYGWIN platform
#

include $(PRODUCTDIR)/.config
include $(LINUXDIR)/.config

CONFIG_SDK_APOLLO=n
CONFIG_SDK_APOLLOMP=y
CONFIG_SDK_RTL9601B=n

# CONFIG_PLATFORM_MODE could be CONFIG_PC_FPGA_MDIO_MODE: PC access FPGA through MDIO
# CONFIG_PLATFORM_MODE could be CONFIG_SOC_FPGA_MDIO_MODE: SoC access FPGA through MDIO
# CONFIG_PLATFORM_MODE could be CONFIG_FPGA_SPI_MODE: SoC access FPGA through SPI
# CONFIG_PLATFORM_MODE could be CONFIG_FPGA_I2C_MODE: SoC access FPGA through SPI and I2C
# CONFIG_PLATFORM_MODE could be CONFIG_FPGA_SPI_L34_MODE: SoC access FPGA through SPI for L34 platform
# CONFIG_PLATFORM_MODE could be CONFIG_VIRTUAL_DRV_MODE: PC simulation
# CONFIG_PLATFORM_MODE could be CONFIG_RLX_MODE: PC access ASIC through RLX probe
# CONFIG_PLATFORM_MODE could be CONFIG_SOC_MODE: run in SoC through memory access
# CONFIG_PLATFORM_MODE could be CONFIG_SOC_VIRTUAL_DRV_MODE: run in SoC asic register is virtual ram
CONFIG_PLATFORM_MODE=CONFIG_SOC_MODE

#CONFIG_MODULE_BUILD_IN=y
#CONFIG_CHECK_BUILD_MODE=y

### user mode rtk API ###
CONFIG_RTK_USER_MODE=y

ifneq ($(CONFIG_RTK_USER_MODE),y)
PON_CFLAGS +=-DCONFIG_RTK_USER_MODE
endif
### voip init or not ###
#CONFIG_RTK_VOIP_INIT=y

### l34 feature ###
#CONFIG_RTK_L34_ENABLE=y

#CONFIG_RTK_L34_DEMO=n

#ifeq ($(CONFIG_RTK_L34_ENABLE),y)
#PON_CFLAGS += -DCONFIG_RTK_L34_ENABLE=1
#else
#PON_CFLAGS += -DCONFIG_RTK_L34_ENABLE=0
#endif

#ifeq ($(CONFIG_RTK_L34_DEMO),y)
#PON_CFLAGS += -DCONFIG_RTK_L34_DEMO
#endif
#ifeq ($(CONFIG_RTK_USER_MODE),y)
#PON_CFLAGS += -DCONFIG_SDK_USER_MODE
#endif

#@@ GPON version config ###
CONFIG_GPON_VERSION=2

export CONFIG_GPON_VERSION
PON_CFLAGS +=-DCONFIG_GPON_VERSION=$(CONFIG_GPON_VERSION)

# CONFIG_DIAGSHELL_MODE could be CONFIG_DIAGSHELL_RAW: build raw driver access mode diagshell
#                                CONFIG_DIAGSHELL_RTK: build RTK API mode diagshell
CONFIG_DIAGSHELL_MODE=CONFIG_DIAGSHELL_RTK

export CONFIG_SDK_APOLLO CONFIG_SDK_APOLLOMP CONFIG_SDK_RTL9601B

PON_CFLAGS += -DRTK_X86_CLE -DNO_MIB_SEPARATE


ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_PC_FPGA_MDIO_MODE)
#CYGWIN X86 MDIO access
  PON_CFLAGS +=  -DCYGWIN_MDIO_IO -DFPGA_DEFINED -DCONFIG_PC_FPGA_MDIO_MODE
  ifeq ($(CONFIG_SDK_KERNEL_LINUX_KERNEL_MODE),y)
    PON_CFLAGS +=  -DLINUX_KERNEL_MDIO_IO
  endif
endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_SOC_FPGA_MDIO_MODE)
  PON_CFLAGS +=  -DFPGA_DEFINED -DOLD_FPGA_DEFINED -DCONFIG_SOC_DEPEND_FEATURE -DCONFIG_SOC_FPGA_MDIO_MODE
  ifeq ($(CONFIG_SDK_KERNEL_LINUX_KERNEL_MODE),y)
    PON_CFLAGS +=  -DLINUX_KERNEL_MDIO_IO
  endif
endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_FPGA_SPI_MODE)
# MDIO access
  PON_CFLAGS +=  -DFPGA_DEFINED -DCONFIG_SOC_DEPEND_FEATURE -DCONFIG_FPGA_SPI_MODE
  ifeq ($(CONFIG_SDK_KERNEL_LINUX_KERNEL_MODE),y)
    PON_CFLAGS +=  -DLINUX_KERNEL_MDIO_IO -DLINUX_KERNEL_SPI_IO
  endif
endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_FPGA_I2C_MODE)
# MDIO access
  PON_CFLAGS +=  -DFPGA_DEFINED -DCONFIG_SOC_DEPEND_FEATURE -DCONFIG_FPGA_SPI_MODE
  ifeq ($(CONFIG_SDK_KERNEL_LINUX_KERNEL_MODE),y)
    PON_CFLAGS +=  -DLINUX_KERNEL_MDIO_IO -DLINUX_KERNEL_SPI_IO -DLINUX_KERNEL_SPI_IO_6266 -DLINUX_KERNEL_I2C_IO
  endif
endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_FPGA_SPI_L34_MODE)
# MDIO access
  PON_CFLAGS +=  -DFPGA_DEFINED -DCONFIG_FPGA_SPI_L34_MODE
  ifeq ($(CONFIG_SDK_KERNEL_LINUX_KERNEL_MODE),y)
    PON_CFLAGS +=  -DLINUX_KERNEL_MDIO_IO -DLINUX_KERNEL_SPI_IO -DRTL_SPI_SLOW_CLK
  endif
endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_VIRTUAL_DRV_MODE)
# MDIO access
    PON_CFLAGS +=  -DCONFIG_SDK_ASICDRV_TEST -DRTL_CYGWIN_EMULATE -DCONFIG_VIRTUAL_DRV_MODE
endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_RLX_MODE)
# MDIO access
    PON_CFLAGS +=  -DRTL_RLX_IO
    endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_SOC_MODE)
# MDIO access
  PON_CFLAGS += -DCONFIG_SOC_DEPEND_FEATURE -DCONFIG_SOC_MODE
endif

ifeq ($(CONFIG_PLATFORM_MODE),CONFIG_SOC_VIRTUAL_DRV_MODE)
# MDIO access
  PON_CFLAGS += -DCONFIG_SDK_ASICDRV_TEST -DCONFIG_SOC_ASICDRV_TEST -DCONFIG_SOC_VIRTUAL_DRV_MODE
endif



ifeq ($(CONFIG_SDK_KERNEL_LINUX_KERNEL_MODE),y)
PON_CFLAGS +=  -DCONFIG_SDK_KERNEL_LINUX
endif


### HAL Setting ###
ifeq ($(CONFIG_SDK_APOLLO),y)
PON_CFLAGS += -DCONFIG_SDK_APOLLO
endif

ifeq ($(CONFIG_SDK_APOLLOMP),y)
PON_CFLAGS += -DCONFIG_SDK_APOLLOMP
endif


ifeq ($(CONFIG_SDK_RTL9601B),y)
PON_CFLAGS += -DCONFIG_SDK_RTL9601B
endif


### Force Probe setting, should only one line be un-comment ###
#PON_CFLAGS += -DFORCE_PROBE_APOLLO
#PON_CFLAGS += -DFORCE_PROBE_APOLLO_REV_B
#PON_CFLAGS += -DFORCE_PROBE_APOLLOMP
#PON_CFLAGS += -DFORCE_PROBE_APOLLOMP_REV_B
#PON_CFLAGS += -DFORCE_PROBE_RTL9601B



### For debug ###
#PON_CFLAGS += -DCONFIG_SDK_DEBUG


### pure h/w verify, not init asic by S/W###
#PON_CFLAGS += -DCONFIG_PURE_HW_INIT


### BEN mode selection: single end or differential ###
PON_CFLAGS += -DCONFIG_BEN_SINGLE_END
#PON_CFLAGS += -DCONFIG_BEN_DIFFERENTIAL


######################################
###    featrue select part
######################################

### for gpon feature

#CONFIG_GPON_FEATURE=y
#ifeq ($(CONFIG_GPON_FEATURE),y)
#PON_CFLAGS += -DCONFIG_GPON_FEATURE
#endif

#CONFIG_RTK_OMCI=y
#ifeq ($(CONFIG_RTK_OMCI),y)
#PON_CFLAGS += -DCONFIG_RTK_OMCI
#endif
### for classfication feature
PON_CFLAGS += -DCONFIG_CLASSFICATION_FEATURE



### for epon feature

#CONFIG_EPON_FEATURE=y
#ifeq ($(CONFIG_EPON_FEATURE),y)
#PON_CFLAGS += -DCONFIG_EPON_FEATURE
#endif

