cscope 15 $HOME/BG/bg_develop/product/bg/drv/hal/switch               0000920679
	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_convert.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"hÆ_comm⁄.h
"

24 
	~<löux/°rög.h
>

26 #ifde‡
UT_TEST


27 
	~<°dio.h
>

28 
	~<°rög.h
>

46 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
)

48 
UINT32
 
uiP‹tId
 = 
PORTID
(
uiPhyID
);

49 
UINT32
 
uiChùID
 = 
CHIPID
(
uiPhyID
);

51 if(
uiChùID
 >
MAX_CHIP_NUM
)

53  
FALSE
;

56 if(
uiP‹tId
 >
g_szChùMaxP‹t
[
uiChùID
])

58  
FALSE
;

62  
TRUE
;

81 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
)

83 i‡(!
IsVÆidLgcP‹t
(
ucLogicP‹t
)) {

84 
ASSERT
(
IsVÆidLgcP‹t
(
ucLogicP‹t
));

85  
INVALID_PORT
;

87  
PORT_PHYID
(
ucLogicP‹t
);

105 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
)

107 
p‹t_num_t
 
Õ‹t
 = 
INVALID_PORT
;

108 
UINT32
 
ulChùId
 = 0;

109 
UINT32
 
ulid
 = 0;

110 
UINT32
 
ulP‹tSèπ
 = 0;

112 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

113 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

114  
INVALID_PORT
;

117 
ulChùId
 = 
CHIPID
(
uiPhyId
);

118 
ulid
=0; ulid<
ulChùId
; ulid++)

120 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulid
];

123 
Õ‹t
 = 
TOLGCPORT
(
ulP‹tSèπ
 + 
PORTID
(
uiPhyId
));

124 if(
STACK_PORT
 =
Õ‹t
)

126  
INVALID_PORT
;

130  
Õ‹t
;

151 
SëPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

153 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

154 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

157 if(
NULL
 =
phyPMask_±r
) {

158 
ASSERT
(
NULL
 !
phyPMask_±r
);

162 
PORTMASK_PORT_SET
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId));

182 
CÃPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

184 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

185 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

188 if(
NULL
 =
phyPMask_±r
) {

189 
ASSERT
(
NULL
 !
phyPMask_±r
);

193 
PORTMASK_PORT_CLEAR
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId));

212 
CÃPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

214 
UINT32
 
chùId
 = 0;

216 if(
NULL
 =
phyPMask_±r
) {

217 
ASSERT
(
NULL
 !
phyPMask_±r
);

221 
chùId
=0; chùId<
CHIP_NO
; chipId++)

223 
PORTMASK_RESET
(
CHIPNMASK
(
chùId
, 
phyPMask_±r
));

242 
SëPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

244 
p‹t_num_t
 
µ‹t
 = 0;

245 
UINT32
 
chùId
 = 0;

246 
phyid_t
 
uiPhyId
 = 0;

248 if(
NULL
 =
phyPMask_±r
) {

249 
ASSERT
(
NULL
 !
phyPMask_±r
);

253 
mem£t
(
phyPMask_±r
, 0x00, (
phy_pmask_t
));

254 
PhyP‹tF‹
(
chùId
, 
µ‹t
)

256 
uiPhyId
 = 
TOPHYID
(
chùId
, 
µ‹t
);

257 
SëPhyMaskBô
(
uiPhyId
, 
phyPMask_±r
);

259 
PhyMaskAddCpuP‹t
(
phyPMask_±r
);

278 
BOOL
 
T°PhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

280 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

281 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

282  
FALSE
;

284 if(
NULL
 =
phyPMask_±r
) {

285 
ASSERT
(
NULL
 !
phyPMask_±r
);

286  
FALSE
;

289 if(
PORTMASK_IS_PORT_SET
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId)))

291  
TRUE
;

295  
FALSE
;

315 
MaskLogic2Phy
(
logic_pmask_t
 *
lgcPMask_±r
, 
phy_pmask_t
 *
phyPMask_±r
)

317 
p‹t_num_t
 
lP‹tNo
;

318 
phyid_t
 
uiPhyId
;

320 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

322 
ASSERT
(
NULL
 !
phyPMask_±r
);

323 
ASSERT
(
NULL
 !
lgcPMask_±r
);

327 
CÃPhyMaskAŒ
(
phyPMask_±r
);

329 
LgcP‹tF‹
(
lP‹tNo
)

331 if(
T°LgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
))

333 
uiPhyId
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

334 if(
uiPhyId
 =
INVALID_PORT
)

338 
SëPhyMaskBô
(
uiPhyId
 ,
phyPMask_±r
);

360 
MaskPhy2Logic
(
phy_pmask_t
 *
phyPMask_±r
, 
logic_pmask_t
 *
lgcPMask_±r
)

362 
p‹t_num_t
 
lP‹tNo
 = 0;

363 
phyid_t
 
uiPhyId
 = 0;

365 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

367 
ASSERT
(
NULL
 !
phyPMask_±r
);

368 
ASSERT
(
NULL
 !
lgcPMask_±r
);

372 
CÃLgcMaskAŒ
(
lgcPMask_±r
);

374 
LgcP‹tF‹
(
lP‹tNo
)

376 
uiPhyId
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

377 if(
uiPhyId
 =
INVALID_PORT
)

381 if(
T°PhyMaskBô
(
uiPhyId
, 
phyPMask_±r
))

383 
SëLgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
);

406 
INT32
 
GëPhyMskP‹tNum
(
phy_pmask_t
 *
phyPMask_±r
)

408 
INT32
 
num
 = 0;

409 
UINT32
 
chùId
 = 0;

411 
chùId
=0; chùId<
CHIP_NO
; chipId++)

413 
num
 +(
INT32
)
PORTMASK_GET_PORT_COUNT
(
CHIPNMASK
(
chùId
, 
phyPMask_±r
));

416  
num
;

435 
PhyMaskC›y
(
phy_pmask_t
 *
d°Msk
,phy_pmask_à*
§cMsk
)

437 if((
NULL
 =
d°Msk
Ë|| (NULL =
§cMsk
))

439 
ASSERT
(
NULL
 !
d°Msk
);

440 
ASSERT
(
NULL
 !
§cMsk
);

443 
mem˝y
(
d°Msk
,
§cMsk
,(
phy_pmask_t
));

462 
PhyMaskAnd
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

464 
UINT32
 
chùId
 = 0;

466 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

468 
ASSERT
(
NULL
 !
mska
);

469 
ASSERT
(
NULL
 !
mskb
);

473 
chùId
=0; chùId<
CHIP_NO
; chipId++)

475 
PORTMASK_AND
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

495 
PhyMaskOr
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

497 
UINT32
 
chùId
 = 0;

499 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

501 
ASSERT
(
NULL
 !
mska
);

502 
ASSERT
(
NULL
 !
mskb
);

505 
chùId
=0; chùId<
CHIP_NO
; chipId++)

507 
PORTMASK_OR
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

527 
PhyMaskX‹
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

529 
UINT32
 
chùId
 = 0;

531 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

533 
ASSERT
(
NULL
 !
mska
);

534 
ASSERT
(
NULL
 !
mskb
);

537 
chùId
=0; chùId<
CHIP_NO
; chipId++)

539 
PORTMASK_XOR
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

559 
PhyMaskRemove
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

561 
UINT32
 
chùId
 = 0;

563 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

565 
ASSERT
(
NULL
 !
mska
);

566 
ASSERT
(
NULL
 !
mskb
);

569 
chùId
=0; chùId<
CHIP_NO
; chipId++)

571 
PORTMASK_REMOVE
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

591 
PhyMaskNeg©e
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

593 
UINT32
 
chùId
 = 0;

595 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

597 
ASSERT
(
NULL
 !
mska
);

598 
ASSERT
(
NULL
 !
mskb
);

602 
chùId
=0; chùId<
CHIP_NO
; chipId++)

604 
PORTMASK_REVERT
(
CHIPNMASK
(
chùId
, 
mskb
));

606 
PhyMaskC›y
(
mska
, 
mskb
);

624 
PhyMaskAddCpuP‹t
(
phy_pmask_t
 *
mska
)

626 
phyid_t
 
uiPhyId
 = 0;

628 if(
NULL
 =
mska
)

630 
ASSERT
(
NULL
 !
mska
);

633 
uiPhyId
 = 
PORT_PHYID
(
LOGIC_CPU_PORT
);

635 
SëPhyMaskBô
(
uiPhyId
, 
mska
);

653 
PhyMaskRemoveCpuP‹t
(
phy_pmask_t
 *
mska
)

655 
phyid_t
 
uiPhyId
 = 0;

657 if(
NULL
 =
mska
)

659 
ASSERT
(
NULL
 !
mska
);

662 
uiPhyId
 = 
PORT_PHYID
(
LOGIC_CPU_PORT
);

664 
CÃPhyMaskBô
(
uiPhyId
, 
mska
);

683 
phyid_t
 
PhyGëSèckP‹t
(
UINT32
 
ulUnô
, UINT32 
ulSèckIndex
)

685 
p‹t_num_t
 
µ‹t
 = 0;

686 
UINT32
 
iM©chC¡
 = 0;

687 
UINT32
 
ulChùId
 = 0;

688 
UINT32
 
ulP‹tSèπ
 = 0;

690 
ulChùId
=0; ulChùId<
ulUnô
; ulChipId++)

692 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulChùId
];

695 
µ‹t
=0;Öp‹t<
g_szChùMaxP‹t
[
ulUnô
];Öport++)

697 if(
STACK_PORT
 =
TOLGCPORT
(
ulP‹tSèπ
+
µ‹t
))

699 
iM©chC¡
++;

700 if(
ulSèckIndex
 =
iM©chC¡
)

702  
TOPHYID
(
ulUnô
, 
µ‹t
);

707  
INVALID_PORT
;

727 
BOOL
 
IsSèckP‹t
(
phyid_t
 
uiPhyId
)

729 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

730 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

731  
FALSE
;

734 if(
STACK_PORT
 =
P‹tPhyID2Logic
(
uiPhyId
))

736  
TRUE
;

740  
FALSE
;

761 
PhyMaskAddSèckP‹t
(
phy_pmask_t
 *
mska
)

763 
UINT32
 
chùId
 = 0;

764 
UINT32
 
ulChùId
 = 0;

765 
UINT32
 
ulP‹tSèπ
 = 0;

766 
p‹t_num_t
 
µ‹t
 = 0;

767 
p‹t_num_t
 
Õ‹t
 = 0;

769 if(
NULL
 =
mska
)

771 
ASSERT
(
NULL
 !
mska
);

775 
PhyP‹tF‹
(
chùId
, 
µ‹t
)

777 
ulP‹tSèπ
 = 0;

778 
ulChùId
=0; ulChùId<
chùId
; ulChipId++)

780 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulChùId
];

782 
Õ‹t
 = 
TOLGCPORT
(
ulP‹tSèπ
 + 
µ‹t
);

783 if(
STACK_PORT
 =
Õ‹t
)

785 
SëPhyMaskBô
(
TOPHYID
(
chùId
, 
µ‹t
), 
mska
);

805 
DRV_RET_E
 
Eº‹Sdk2Drv
(
INT32
 
iEº‹
)

807 
iEº‹
)

809 
SW_FAIL
:

810  
DRV_SDK_GEN_ERROR
;

811 
SW_OK
:

812  
DRV_OK
;

813 
SW_BAD_VALUE
:

814  
DRV_SDK_INVALID_PARA
;

818 
¥ötk
("Eº‹SDK2Drv %d\r\n", 
iEº‹
);

819  
DRV_SDK_GEN_ERROR
;

824 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_acl.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~"Ál_a˛.h
"

26 
	~"Ál_øã.h
"

49 
	#QUEUE_0
 0

	)

50 
	#QUEUE_1
 1

	)

51 
	#QUEUE_2
 2

	)

52 
	#QUEUE_3
 3

	)

53 
	#PRIORITY_0
 0

	)

54 
	#PRIORITY_1
 1

	)

55 
	#PRIORITY_2
 2

	)

56 
	#PRIORITY_3
 3

	)

57 
	#PRIORITY_4
 4

	)

58 
	#PRIORITY_5
 5

	)

59 
	#PRIORITY_6
 6

	)

60 
	#PRIORITY_7
 7

	)

61 
	#CPU_LIMIT_QUEUE1
 32

	)

62 
	#CPU_LIMIT_QUEUE2
 64

	)

63 
	#LIMIT_RATE_BPDU
 32

	)

64 
	#LIMIT_RATE_BROD_ARP
 64

	)

65 
	#LIMIT_RATE_ARP
 256

	)

68 
	#MAX_LIST_ID
 255

	)

69 
	#MAX_POLICER_ID
 31

	)

73 
	eègACL_LIST_ID


75 
ACL_LIST_ID_RATE_LIMIT_0
 = 0,

76 
ACL_LIST_ID_RATE_LIMIT_1
,

77 
ACL_LIST_ID_RATE_LIMIT_2
,

78 
ACL_LIST_ID_RATE_LIMIT_3
,

79 
ACL_LIST_ID_RATE_LIMIT_4
,

80 
ACL_LIST_ID_RATE_LIMIT_5
,

81 
ACL_LIST_ID_RATE_LIMIT_6
,

82 
ACL_LIST_ID_MME_PRI_REMAP
,

83 
ACL_LIST_ID_SWITCH_MAC_PRI_REMAP
,

85 
ACL_LIST_ID_BPDU_MAC_PRI_REMAP
,

86 
ACL_LIST_ID_ARP_TO_CPU
,

87 
ACL_LIST_ID_UNTAGGED_ARP_TO_CPU
,

88 
ACL_LIST_ID_MME_TO_CPU
,

89 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
,

90 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
,

91 
ACL_LIST_ID_UNTAGGED_DHCP_SERVER_TO_CPU
,

92 
ACL_LIST_ID_UNTAGGED_DHCP_CLIENT_TO_CPU
,

95 
ACL_LIST_ID_BPDU_RATE_LIMIT_0
,

96 
ACL_LIST_ID_BPDU_RATE_LIMIT_1
,

97 
ACL_LIST_ID_BROD_ARP_RATE_LIMIT_0
,

98 
ACL_LIST_ID_BROD_ARP_RATE_LIMIT_1
,

100 
ACL_LIST_ID_BUTT


101 } 
	tACL_LIST_ID_E
;

106 
sw_îr‹_t
 
_A˛_ruÀ_øã_limô_£t
(
a_uöt32_t
 
µ‹t
,á_uöt32_à
ul_li°_id
,á_uöt32_à
ul_ruÀ_id
)

108 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

109 
sw_îr‹_t
 
π
 = 
SW_OK
;

110 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

112 i‡(
PHY_PORT_NO
 < 
µ‹t
)

114  
SW_BAD_PARAM
;

117 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

119 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_MAC
;

120 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_POLICER_EN
Ë| (0x1UL << 
FAL_ACL_ACTION_PERMIT
);

121 
a˛_ruÀ
.
pﬁi˚r_±r
 = 
µ‹t
;

123 
π
 = 
Ál_a˛_ruÀ_add
(0, 
ul_li°_id
, 
ul_ruÀ_id
, 
ul_ruÀ_num
, &
a˛_ruÀ
);

124 
SW_RTN_ON_ERROR
(
π
);

126 
π
 = 
Ál_a˛_li°_böd
(0, 
ul_li°_id
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
µ‹t
);

127 
SW_RTN_ON_ERROR
(
π
);

129  
SW_OK
;

132 
sw_îr‹_t
 
_A˛_ruÀ_øã_limô_dñë
(
a_uöt32_t
 
µ‹t
,á_uöt32_à
ul_li°_id
,á_uöt32_à
ul_ruÀ_id
)

134 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

135 
sw_îr‹_t
 
π
 = 
SW_OK
;

137 i‡(
PHY_PORT_NO
 < 
µ‹t
)

139  
SW_BAD_PARAM
;

142 
π
 = 
Ál_a˛_li°_unböd
(0, 
ul_li°_id
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
µ‹t
);

143 
SW_RTN_ON_ERROR
(
π
);

145 
π
 = 
Ál_a˛_ruÀ_dñëe
(0, 
ul_li°_id
, 
ul_ruÀ_id
, 
ul_ruÀ_num
);

146 
SW_RTN_ON_ERROR
(
π
);

148  
SW_OK
;

151 
sw_îr‹_t
 
_A˛_øã_limô_vÆue_£t
(
a_uöt32_t
 
µ‹t
,á_uöt32_à
ul_øã_vÆue
)

153 
a_uöt32_t
 
pﬁi˚r_id
;

154 
Ál_a˛_pﬁi˚r_t
 
a˛_pﬁi˚r
;

156 i‡(
PHY_PORT_NO
 < 
µ‹t
)

158  
SW_BAD_PARAM
;

161 
mem£t
(&
a˛_pﬁi˚r
, 0, (acl_policer));

163 
pﬁi˚r_id
 = 
µ‹t
;

165 
a˛_pﬁi˚r
.
cou¡î_mode
 = 
DISABLE
;

166 
a˛_pﬁi˚r
.
mëî_unô
 = 
FAL_BYTE_BASED
;

167 
a˛_pﬁi˚r
.
cú
 = 
ul_øã_vÆue
;

168 
a˛_pﬁi˚r
.
cbs
 = 128 * 1024;

169 
a˛_pﬁi˚r
.
eú
 = 0;

170 
a˛_pﬁi˚r
.
mëî_öãrvÆ
 = 
FAL_RATE_MI_1MS
;

172 
SW_RTN_ON_ERROR
(
Ál_øã_a˛_pﬁi˚r_£t
(0, 
pﬁi˚r_id
, &
a˛_pﬁi˚r
));

174  
SW_OK
;

177 
sw_îr‹_t
 
_A˛_ruÀ_°‹m_c⁄åﬁ_£t
(
a_uöt32_t
 
µ‹t
,á_uöt32_à
ul_li°_id
,á_uöt32_à
ul_ruÀ_id
)

179 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

180 
sw_îr‹_t
 
π
 = 
SW_OK
;

181 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

183 i‡(
PHY_PORT_NO
 < 
µ‹t
)

185  
SW_BAD_PARAM
;

188 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

190 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_MAC
;

191 
FAL_FIELD_FLG_SET
(
a˛_ruÀ
.
fõld_Êg
, 
FAL_ACL_FIELD_MAC_DA
);

192 
mem£t
(&
a˛_ruÀ
.
de°_mac_vÆ
, 0xFF, (acl_rule.dest_mac_val));

193 
mem£t
(&
a˛_ruÀ
.
de°_mac_mask
, 0xFF, (acl_rule.dest_mac_mask));

194 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_POLICER_EN
Ë| (0x1UL << 
FAL_ACL_ACTION_PERMIT
);

195 
a˛_ruÀ
.
pﬁi˚r_±r
 = 
µ‹t
;

198 
π
 = 
Ál_a˛_ruÀ_add
(0, 
ul_li°_id
, 
ul_ruÀ_id
, 
ul_ruÀ_num
, &
a˛_ruÀ
);

199 
SW_RTN_ON_ERROR
(
π
);

201 
π
 = 
Ál_a˛_li°_böd
(0, 
ul_li°_id
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
µ‹t
);

202 
SW_RTN_ON_ERROR
(
π
);

204  
SW_OK
;

209 
sw_îr‹_t
 
_A˛_ruÀ_udp_p‹t_c›y_to_˝u
(
a_uöt32_t
 
ul_li°_id
,

210 
a_uöt32_t
 
ul_ruÀ_id
,

211 
a_uöt8_t
 
auc_mac
[6],

212 
a_uöt16_t
 
us_vœn_id
,

213 
a_uöt16_t
 
us_§c_p‹t
,

214 
a_uöt16_t
 
us_d°_p‹t
)

216 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

217 
a_uöt8_t
 
auc_zîo_mac
[6] = {0};

218 
sw_îr‹_t
 
π
 = 
SW_OK
;

219 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

221 i‡((
MAX_LIST_ID
 < 
ul_li°_id
) ||

222 (
NULL
 =
auc_mac
) ||

223 (
MAX_VLAN_ID
 < 
us_vœn_id
))

225  
SW_FAIL
;

228 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

230 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_IP4
;

232 i‡(
memcmp
(
auc_mac
,
auc_zîo_mac
,(auc_zero_mac)))

234 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_DA
) % 32));

235 
mem˝y
(
a˛_ruÀ
.
de°_mac_vÆ
.
uc
, 
auc_mac
, 6);

236 
mem£t
(
a˛_ruÀ
.
de°_mac_mask
.
uc
, 0xFF, 6);

239 i‡(0 !
us_vœn_id
)

241 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_VID
) % 32));

242 
a˛_ruÀ
.
vid_vÆ
 = 
us_vœn_id
;

243 
a˛_ruÀ
.
vid_mask
 = 0xFFF;

244 
a˛_ruÀ
.
vid_›
 = 
FAL_ACL_FIELD_MASK
;

247 i‡(0 !
us_§c_p‹t
)

249 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_L4_SPORT
) % 32));

250 
a˛_ruÀ
.
§c_l4p‹t_vÆ
 = 
us_§c_p‹t
;

251 
a˛_ruÀ
.
§c_l4p‹t_mask
 = 0xFFFF;

252 
a˛_ruÀ
.
§c_l4p‹t_›
 = 
FAL_ACL_FIELD_MASK
;

255 i‡(0 !
us_d°_p‹t
)

257 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_L4_DPORT
) % 32));

258 
a˛_ruÀ
.
de°_l4p‹t_vÆ
 = 
us_d°_p‹t
;

259 
a˛_ruÀ
.
de°_l4p‹t_mask
 = 0xFFFF;

260 
a˛_ruÀ
.
de°_l4p‹t_›
 = 
FAL_ACL_FIELD_MASK
;

263 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_IP_PROTO
) % 32));

264 
a˛_ruÀ
.
ù_¥Ÿo_vÆ
 = 17;

265 
a˛_ruÀ
.
ù_¥Ÿo_mask
 = 0xFF;

267 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_PERMIT
Ë| (0x1UL << 
FAL_ACL_ACTION_CPYCPU
);

269 
π
 = 
Ál_a˛_ruÀ_add
(0, 
ul_li°_id
, 
ul_ruÀ_id
, 
ul_ruÀ_num
, &
a˛_ruÀ
);

270 
SW_RTN_ON_ERROR
(
π
);

272  
SW_OK
;

276 
sw_îr‹_t
 
_A˛_ruÀ_¨p_c›y_to_˝u_add
(
a_uöt32_t
 
uiLP‹tMask
, 
a_uöt16_t
 
usMvid
)

278 
a_uöt8_t
 
a_uc_mac
[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

279 
a_uöt32_t
 
uiLP‹tIndex
;

280 
a_uöt32_t
 
uiPP‹tId
;

282 i‡(0 =
uiLP‹tMask
)

284  
SW_OK
;

288 ()
_A˛_ruÀ_ëhty≥_c›y_to_˝u
(
ACL_LIST_ID_ARP_TO_CPU
, 0, 
a_uc_mac
, 
usMvid
, 0x0806, 
PRIORITY_2
);

290 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

292 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

294 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

295 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

299 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

301 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

304  
SW_OK
;

307 
sw_îr‹_t
 
_A˛_ruÀ_¨p_c›y_to_˝u_dñ
(
a_uöt32_t
 
uiLP‹tMask
)

309 
a_uöt32_t
 
uiLP‹tIndex
;

310 
a_uöt32_t
 
uiPP‹tId
;

311 
sw_îr‹_t
 
π
 = 
SW_OK
;

313 i‡(0 =
uiLP‹tMask
)

315  
SW_OK
;

318 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

320 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

322 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

323 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

327 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

329 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

332 ()
Ál_a˛_ruÀ_dñëe
(0, 
ACL_LIST_ID_ARP_TO_CPU
, 0, 1);

334  
SW_OK
;

337 
sw_îr‹_t
 
_A˛_ruÀ_udp_p‹t_c›y_to_˝u_add
(
a_uöt32_t
 
uiLP‹tMask
, 
a_uöt16_t
 
usMvid
)

339 
a_uöt8_t
 
a_uc_mac
[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

340 
a_uöt32_t
 
uiLP‹tIndex
;

341 
a_uöt32_t
 
uiPP‹tId
;

343 i‡(0 =
uiLP‹tMask
)

345  
SW_OK
;

351 
mem£t
(
a_uc_mac
, 0, 6);

352 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u
(
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 0, 
a_uc_mac
, 0, 67, 68);

353 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 3);

354 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 4);

355 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 6);

357 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u
(
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 0, 
a_uc_mac
, 0, 68, 67);

358 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 3);

359 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 4);

360 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 6);

363 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u
(
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 0, 
a_uc_mac
, 
usMvid
, 67, 68);

364 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u
(
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 0, 
a_uc_mac
, 
usMvid
, 68, 67);

366 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

368 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

370 i‡(!(
IS_CABLE_PORT
(
uiLP‹tIndex
)))

372 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

373 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

374 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

379 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

381 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

382 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

386  
SW_OK
;

389 
sw_îr‹_t
 
_A˛_ruÀ_udp_p‹t_c›y_to_˝u_dñ
(
a_uöt32_t
 
uiLP‹tMask
)

391 
a_uöt32_t
 
uiLP‹tIndex
;

392 
a_uöt32_t
 
uiPP‹tId
;

393 
sw_îr‹_t
 
π
 = 
SW_OK
;

395 i‡(0 =
uiLP‹tMask
)

397  
SW_OK
;

400 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

402 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

408 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

409 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

410 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

414 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

416 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

417 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

420 ()
Ál_a˛_ruÀ_dñëe
(0, 
ACL_LIST_ID_DHCP_SERVER_TO_CPU
, 0, 1);

421 ()
Ál_a˛_ruÀ_dñëe
(0, 
ACL_LIST_ID_DHCP_CLIENT_TO_CPU
, 0, 1);

423  
SW_OK
;

426 
_A˛_ruÀ_ch™ge
(
a_uöt32_t
 
uiDñLP‹tMask
,á_uöt32_à
uiAddLP‹tMask
, 
a_uöt16_t
 
usMvid
)

428 i‡(0 !
uiDñLP‹tMask
)

430 ()
_A˛_ruÀ_¨p_c›y_to_˝u_dñ
(
uiDñLP‹tMask
);

431 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u_dñ
(
uiDñLP‹tMask
);

434 i‡(0 !
uiAddLP‹tMask
)

436 ()
_A˛_ruÀ_¨p_c›y_to_˝u_add
(
uiAddLP‹tMask
, 
usMvid
);

437 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u_add
(
uiAddLP‹tMask
, 
usMvid
);

443 
sw_îr‹_t
 
_A˛_ruÀ_u¡agged_¨p_c›y_to_˝u_add
(
a_uöt32_t
 
uiLP‹tMask
)

445 
a_uöt8_t
 
a_uc_mac
[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

446 
a_uöt16_t
 
us_mvid
;

447 
a_uöt32_t
 
uiLP‹tIndex
;

448 
a_uöt32_t
 
uiPP‹tId
;

450 i‡(0 =
uiLP‹tMask
)

452  
SW_OK
;

455 
us_mvid
 = 0;

458 ()
_A˛_ruÀ_ëhty≥_c›y_to_˝u
(
ACL_LIST_ID_UNTAGGED_ARP_TO_CPU
, 0, 
a_uc_mac
, 
us_mvid
, 0x0806, 
PRIORITY_2
);

460 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

462 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

464 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

465 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_UNTAGGED_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

469 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

471 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_UNTAGGED_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

474  
SW_OK
;

477 
sw_îr‹_t
 
_A˛_ruÀ_u¡agged_¨p_c›y_to_˝u_dñ
(
a_uöt32_t
 
uiLP‹tMask
)

479 
sw_îr‹_t
 
π
 = 
SW_OK
;

480 
a_uöt32_t
 
uiLP‹tIndex
;

481 
a_uöt32_t
 
uiPP‹tId
;

483 i‡(0 =
uiLP‹tMask
)

485  
SW_OK
;

488 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

490 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

492 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

493 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_UNTAGGED_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

497 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

499 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_UNTAGGED_ARP_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

502 ()
Ál_a˛_ruÀ_dñëe
(0, 
ACL_LIST_ID_UNTAGGED_ARP_TO_CPU
, 0, 1);

504  
SW_OK
;

507 
sw_îr‹_t
 
_A˛_ruÀ_u¡agged_udp_p‹t_c›y_to_˝u_add
(
a_uöt32_t
 
uiLP‹tMask
)

509 
a_uöt8_t
 
a_uc_mac
[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

510 
a_uöt16_t
 
us_mvid
 = 1;

511 
a_uöt32_t
 
uiLP‹tIndex
;

512 
a_uöt32_t
 
uiPP‹tId
;

514 
us_mvid
 = 0;

516 i‡(0 =
uiLP‹tMask
)

518  
SW_OK
;

521 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u
(
ACL_LIST_ID_UNTAGGED_DHCP_SERVER_TO_CPU
, 0, 
a_uc_mac
, 
us_mvid
, 67, 68);

522 ()
_A˛_ruÀ_udp_p‹t_c›y_to_˝u
(
ACL_LIST_ID_UNTAGGED_DHCP_CLIENT_TO_CPU
, 0, 
a_uc_mac
, 
us_mvid
, 68, 67);

524 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

526 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

528 i‡(!(
IS_CABLE_PORT
(
uiLP‹tIndex
)))

530 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

531 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

532 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

537 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

539 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

540 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

543  
SW_OK
;

546 
sw_îr‹_t
 
_A˛_ruÀ_u¡agged_udp_p‹t_c›y_to_˝u_dñ
(
a_uöt32_t
 
uiLP‹tMask
)

548 
sw_îr‹_t
 
π
 = 
SW_OK
;

549 
a_uöt32_t
 
uiLP‹tIndex
;

550 
a_uöt32_t
 
uiPP‹tId
;

552 i‡(0 =
uiLP‹tMask
)

554  
SW_OK
;

557 
uiLP‹tIndex
 = 1; uiLP‹tIndex <
MAX_PORT_NUM
; uiLPortIndex++)

559 i‡(
uiLP‹tMask
 & (1UL << 
uiLP‹tIndex
))

565 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹tIndex
);

566 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

567 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

571 i‡(
uiLP‹tMask
 & (1UL << 
LOGIC_UPLINK_PORT
))

573 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_SERVER_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

574 ()
Ál_a˛_li°_unböd
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_CLIENT_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
PHY_UPLINK_PORT
);

577 ()
Ál_a˛_ruÀ_dñëe
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_SERVER_TO_CPU
, 0, 1);

578 ()
Ál_a˛_ruÀ_dñëe
(0, 
ACL_LIST_ID_UNTAGGED_DHCP_CLIENT_TO_CPU
, 0, 1);

580  
SW_OK
;

583 
_A˛_ruÀ_u¡agged_ch™ge
(
a_uöt32_t
 
uiDñLP‹tMask
,á_uöt32_à
uiAddLP‹tMask
)

585 i‡(0 !
uiDñLP‹tMask
)

587 ()
_A˛_ruÀ_u¡agged_¨p_c›y_to_˝u_dñ
(
uiDñLP‹tMask
);

588 ()
_A˛_ruÀ_u¡agged_udp_p‹t_c›y_to_˝u_dñ
(
uiDñLP‹tMask
);

591 i‡(0 !
uiAddLP‹tMask
)

593 ()
_A˛_ruÀ_u¡agged_¨p_c›y_to_˝u_add
(
uiAddLP‹tMask
);

594 ()
_A˛_ruÀ_u¡agged_udp_p‹t_c›y_to_˝u_add
(
uiAddLP‹tMask
);

602 
sw_îr‹_t
 
_A˛_ruÀ_ëhty≥_to_queue_¸óã
(
a_uöt32_t
 
ul_li°_id
,

603 
a_uöt32_t
 
ul_ruÀ_id
, 
a_uöt16_t
 
us_ëhty≥
, 
a_uöt8_t
 
uc_queue
)

605 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

606 
sw_îr‹_t
 
π
 = 
SW_OK
;

607 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

609 i‡((
MAX_LIST_ID
 < 
ul_li°_id
) ||

610 (7 < 
uc_queue
))

612  
SW_FAIL
;

615 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

617 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_MAC
;

618 
a˛_ruÀ
.
fõld_Êg
[0] = (0x1UL << ((
FAL_ACL_FIELD_MAC_ETHTYPE
) % 32));

619 
a˛_ruÀ
.
ëhty≥_vÆ
 = 
us_ëhty≥
;

620 
a˛_ruÀ
.
ëhty≥_mask
 = 0xFFFF;

621 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_REMARK_QUEUE
Ë| (0x1UL << 
FAL_ACL_ACTION_PERMIT
);

622 
a˛_ruÀ
.
queue
 = 
uc_queue
;

624 
π
 = 
Ál_a˛_ruÀ_add
(0, 
ul_li°_id
, 
ul_ruÀ_id
, 
ul_ruÀ_num
, &
a˛_ruÀ
);

625 
SW_RTN_ON_ERROR
(
π
);

627  
SW_OK
;

630 
sw_îr‹_t
 
_A˛_ruÀ_dmaˇddr_to_queue_¸óã
(
a_uöt32_t
 
ul_li°_id
,

631 
a_uöt32_t
 
ul_ruÀ_id
, 
a_uöt8_t
 
auc_mac
[6],á_uöt8_à
uc_queue
)

633 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

634 
sw_îr‹_t
 
π
 = 
SW_OK
;

635 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

637 i‡((
MAX_LIST_ID
 < 
ul_li°_id
) ||

638 (
NULL
 =
auc_mac
) ||

639 (7 < 
uc_queue
))

641  
SW_FAIL
;

644 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

646 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_MAC
;

647 
a˛_ruÀ
.
fõld_Êg
[0] = (0x1UL << ((
FAL_ACL_FIELD_MAC_DA
) % 32));

648 
mem˝y
(
a˛_ruÀ
.
de°_mac_vÆ
.
uc
, 
auc_mac
, 6);

649 
mem£t
(
a˛_ruÀ
.
de°_mac_mask
.
uc
, 0xFF, 6);

650 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_REMARK_QUEUE
Ë| (0x1UL << 
FAL_ACL_ACTION_PERMIT
);

651 
a˛_ruÀ
.
queue
 = 
uc_queue
;

653 
π
 = 
Ál_a˛_ruÀ_add
(0, 
ul_li°_id
, 
ul_ruÀ_id
, 
ul_ruÀ_num
, &
a˛_ruÀ
);

654 
SW_RTN_ON_ERROR
(
π
);

656  
SW_OK
;

662 
sw_îr‹_t
 
_A˛_ruÀ_ëhty≥_c›y_to_˝u
(
a_uöt32_t
 
ul_li°_id
,

663 
a_uöt32_t
 
ul_ruÀ_id
,

664 
a_uöt8_t
 
auc_mac
[6],

665 
a_uöt16_t
 
us_vœn_id
,

666 
a_uöt16_t
 
us_ëhty≥
,

667 
a_uöt8_t
 
uc_¥i‹ôy
)

669 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

670 
a_uöt8_t
 
auc_zîo_mac
[6] = {0};

671 
sw_îr‹_t
 
π
 = 
SW_OK
;

672 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

674 i‡((
MAX_LIST_ID
 < 
ul_li°_id
) ||

675 (
NULL
 =
auc_mac
) ||

676 (
MAX_VLAN_ID
 < 
us_vœn_id
))

678  
SW_FAIL
;

681 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

683 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_MAC
;

685 i‡(
memcmp
(
auc_mac
,
auc_zîo_mac
,(auc_zero_mac)))

687 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_DA
) % 32));

688 
mem˝y
(
a˛_ruÀ
.
de°_mac_vÆ
.
uc
, 
auc_mac
, 6);

689 
mem£t
(
a˛_ruÀ
.
de°_mac_mask
.
uc
, 0xFF, 6);

692 i‡(0 !
us_vœn_id
)

694 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_VID
) % 32));

695 
a˛_ruÀ
.
vid_vÆ
 = 
us_vœn_id
;

696 
a˛_ruÀ
.
vid_mask
 = 0xFFF;

697 
a˛_ruÀ
.
vid_›
 = 
FAL_ACL_FIELD_MASK
;

700 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_ETHTYPE
) % 32));

701 
a˛_ruÀ
.
ëhty≥_vÆ
 = 
us_ëhty≥
;

702 
a˛_ruÀ
.
ëhty≥_mask
 = 0xFFFF;

703 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_PERMIT
Ë| (0x1UL << 
FAL_ACL_ACTION_CPYCPU
);

705 i‡(
ISVALID_PORT_PRIORITY
(
uc_¥i‹ôy
))

707 
a˛_ruÀ
.
queue
 = 
uc_¥i‹ôy
;

708 
a˛_ruÀ
.
a˘i⁄_Êg
 |(0x1UL << 
FAL_ACL_ACTION_REMARK_QUEUE
);

711 
π
 = 
Ál_a˛_ruÀ_add
(0, 
ul_li°_id
, 
ul_ruÀ_id
, 
ul_ruÀ_num
, &
a˛_ruÀ
);

712 
SW_RTN_ON_ERROR
(
π
);

714  
SW_OK
;

719 
sw_îr‹_t
 
_A˛_pﬁi˚r_£t
(
a_uöt32_t
 
pﬁi˚r_id
,á_uöt32_à
øã_vÆue
)

721 
Ál_a˛_pﬁi˚r_t
 
a˛_pﬁi˚r
;

723 
mem£t
(&
a˛_pﬁi˚r
, 0, (acl_policer));

725 
a˛_pﬁi˚r
.
cou¡î_mode
 = 
DISABLE
;

726 
a˛_pﬁi˚r
.
mëî_unô
 = 
FAL_BYTE_BASED
;

727 
a˛_pﬁi˚r
.
cú
 = 
øã_vÆue
;

728 
a˛_pﬁi˚r
.
cbs
 = 32 * 1024;

729 
a˛_pﬁi˚r
.
eú
 = 0;

730 
a˛_pﬁi˚r
.
mëî_öãrvÆ
 = 
FAL_RATE_MI_1MS
;

732 
SW_RTN_ON_ERROR
(
Ál_øã_a˛_pﬁi˚r_£t
(0, 
pﬁi˚r_id
, &
a˛_pﬁi˚r
));

733  
SW_OK
;

736 
sw_îr‹_t
 
_A˛_ruÀ_bpdu_limô_vÆue_£t
(
a_uöt32_t
 
uiLP‹t
,á_uöt32_à
uiLi°Id
,á_uöt32_à
pﬁi˚r_±r
)

738 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

739 
a_uöt32_t
 
uiPP‹tId
;

740 
a_uöt8_t
 
auc_mac
[6] = {0x01,0x80,0xC2,0x00,0x00,0x00};

741 
sw_îr‹_t
 
π
 = 
SW_OK
;

742 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

744 i‡(
MAX_PORT_NUM
 < 
uiLP‹t
)

746  
SW_FAIL
;

750 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

752 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_MAC
;

753 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_DA
) % 32));

754 
mem˝y
(
a˛_ruÀ
.
de°_mac_vÆ
.
uc
, 
auc_mac
, 6);

755 
mem£t
(
a˛_ruÀ
.
de°_mac_mask
.
uc
, 0xFF, 6);

757 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_POLICER_EN
Ë| (0x1UL << 
FAL_ACL_ACTION_PERMIT
);

758 
a˛_ruÀ
.
pﬁi˚r_±r
 =Öolicer_ptr;

760 
π
 = 
Ál_a˛_ruÀ_add
(0, 
uiLi°Id
, 0, 
ul_ruÀ_num
, &
a˛_ruÀ
);

761 i‡(
SW_OK
 !
π
)

763  
SW_FAIL
;

766 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

767 
π
 = 
Ál_a˛_li°_böd
(0, 
uiLi°Id
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

768 i‡(
SW_OK
 !
π
)

770  
SW_FAIL
;

773  
SW_OK
;

776 
sw_îr‹_t
 
_A˛_ruÀ_¨p_limô_vÆue_£t
(
a_uöt32_t
 
uiLP‹t
,á_uöt32_à
uiLi°Id
,á_uöt32_à
pﬁi˚r_±r
)

778 
a_uöt32_t
 
ul_ruÀ_num
 = 1;

779 
a_uöt32_t
 
uiPP‹tId
;

780 
a_uöt8_t
 
auc_mac
[6] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

781 
sw_îr‹_t
 
π
 = 
SW_OK
;

782 
Ál_a˛_ruÀ_t
 
a˛_ruÀ
;

784 i‡(
MAX_PORT_NUM
 < 
uiLP‹t
)

786  
SW_FAIL
;

790 
mem£t
(&
a˛_ruÀ
, 0, (acl_rule));

792 
a˛_ruÀ
.
ruÀ_ty≥
 = 
FAL_ACL_RULE_MAC
;

793 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_DA
) % 32));

794 
mem˝y
(
a˛_ruÀ
.
de°_mac_vÆ
.
uc
, 
auc_mac
, 6);

795 
mem£t
(
a˛_ruÀ
.
de°_mac_mask
.
uc
, 0xFF, 6);

797 
a˛_ruÀ
.
fõld_Êg
[0] |(0x1UL << ((
FAL_ACL_FIELD_MAC_ETHTYPE
) % 32));

798 
a˛_ruÀ
.
ëhty≥_vÆ
 = 0x0806;

799 
a˛_ruÀ
.
ëhty≥_mask
 = 0xFFFF;

800 
a˛_ruÀ
.
a˘i⁄_Êg
 = (0x1UL << 
FAL_ACL_ACTION_POLICER_EN
Ë| (0x1UL << 
FAL_ACL_ACTION_PERMIT
);

801 
a˛_ruÀ
.
pﬁi˚r_±r
 =Öolicer_ptr;

803 
π
 = 
Ál_a˛_ruÀ_add
(0, 
uiLi°Id
, 0, 
ul_ruÀ_num
, &
a˛_ruÀ
);

804 i‡(
SW_OK
 !
π
)

806  
SW_FAIL
;

809 
uiPP‹tId
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

810 
π
 = 
Ál_a˛_li°_böd
(0, 
uiLi°Id
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹tId
);

812 i‡(
SW_OK
 !
π
)

814  
SW_FAIL
;

817  
SW_OK
;

837 
DRV_RET_E
 
HÆ_A˛Inô
()

839 
UINT32
 
uiPP‹t
;

840 
a_uöt8_t
 
a_uc_mac
[6] = {0};

842 ()
Ál_a˛_°©us_£t
(0, 
A_TRUE
);

845 ()
Ál_a˛_li°_¸ót
(0, 
ACL_LIST_ID_MME_PRI_REMAP
, 1);

846 ()
_A˛_ruÀ_ëhty≥_to_queue_¸óã
(
ACL_LIST_ID_MME_PRI_REMAP
, 0, 0x88E1, 7);

847 
uiPP‹t
 = 0; uiPPort < 5; uiPPort++)

849 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_MME_PRI_REMAP
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹t
);

854 ()
Ál_a˛_li°_¸ót
(0, 
ACL_LIST_ID_SWITCH_MAC_PRI_REMAP
, 2);

855 ()
_A˛_ruÀ_dmaˇddr_to_queue_¸óã
(
ACL_LIST_ID_SWITCH_MAC_PRI_REMAP
, 0, 
a_uc_mac
, 7);

856 
uiPP‹t
 = 1; uiPPort < 7; uiPPort++)

858 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_SWITCH_MAC_PRI_REMAP
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹t
);

866 
mem£t
(
a_uc_mac
, 0xFF, 6);

867 ()
Ál_a˛_li°_¸ót
(0, 
ACL_LIST_ID_MME_TO_CPU
, 0);

868 ()
_A˛_ruÀ_ëhty≥_c›y_to_˝u
(
ACL_LIST_ID_MME_TO_CPU
, 0, 
a_uc_mac
, 0, 0x88E1, 
PRIORITY_7
);

869 
uiPP‹t
 = 1; uiPPort <= 4; uiPPort++)

871 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_MME_TO_CPU
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹t
);

875 ()
Ál_a˛_li°_¸ót
(0, 
ACL_LIST_ID_BPDU_MAC_PRI_REMAP
, 3);

876 
a_uc_mac
[0] = 0x01;

877 
a_uc_mac
[1] = 0x80;

878 
a_uc_mac
[2] = 0xc2;

879 
a_uc_mac
[3] = 0x00;

880 
a_uc_mac
[4] = 0x00;

881 
a_uc_mac
[5] = 0x00;

882 ()
_A˛_ruÀ_dmaˇddr_to_queue_¸óã
(
ACL_LIST_ID_BPDU_MAC_PRI_REMAP
, 0, 
a_uc_mac
, 
PRIORITY_4
);

883 
uiPP‹t
 = 1; uiPPort <= 6; uiPPort++)

885 ()
Ál_a˛_li°_böd
(0, 
ACL_LIST_ID_BPDU_MAC_PRI_REMAP
, 
FAL_ACL_DIREC_IN
, 
FAL_ACL_BIND_PORT
, 
uiPP‹t
);

888 ()
Ál_a˛_li°_¸ót
(0, 
ACL_LIST_ID_BPDU_RATE_LIMIT_0
, 0);

889 ()
Ál_a˛_li°_¸ót
(0, 
ACL_LIST_ID_BROD_ARP_RATE_LIMIT_0
, 0);

890 ()
_A˛_pﬁi˚r_£t
(
MAX_POLICER_ID
, 
LIMIT_RATE_BPDU
);

891 ()
_A˛_pﬁi˚r_£t
(
MAX_POLICER_ID
-1, 
LIMIT_RATE_BROD_ARP
);

892 
uiPP‹t
 = 1; uiPPort <= 6; uiPPort++)

894 ()
_A˛_ruÀ_bpdu_limô_vÆue_£t
(
uiPP‹t
, 
ACL_LIST_ID_BPDU_RATE_LIMIT_0
, 
MAX_POLICER_ID
);

895 ()
_A˛_ruÀ_¨p_limô_vÆue_£t
(
uiPP‹t
, 
ACL_LIST_ID_BROD_ARP_RATE_LIMIT_0
, 
MAX_POLICER_ID
-1);

899  
DRV_OK
;

903 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_aggr.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

76 
DRV_RET_E
 
HÆ_SëAggrMode
(
UINT32
 
ulMode
)

78 ()
ulMode
;

80  
DRV_OK
;

100 
DRV_RET_E
 
HÆ_SëAggrGroup
(
agg_gΩ_num_t
 
gΩNum
, 
logic_pmask_t
 
°LgcMask
)

102 ()
gΩNum
;

103 ()
°LgcMask
;

105  
DRV_OK
;

108 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_cablediag.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~<löux/dñay.h
>

26 
	~<löux/°rög.h
>

81 
DRV_RET_E
 
HÆ_GëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
)

84 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

85 
UINT32
 
unô
;

86 
UINT16
 
uiLí
;

87 
UINT16
 
uiResiduÀ
;

89 
UINT32
 
i
;

90 
logic_pmask_t
 
Õ‹tMask
;

91 
phy_pmask_t
 
°PhyMask
;

92 
INT
 
ªtVÆ
;

93 
πk_π˘Resu…_t
 
°Rt˘Resu…
;

95 if(
p°Düg
 =
NULL
)

97  
DRV_ERR_PARA
;

100 if(!
IsVÆidLgcP‹t
(
Õ‹t
))

102  
DRV_ERR_PARA
;

105 
mem£t
(
p°Düg
, 0, (
ˇbÀ_düg_t
));

106 
mem£t
(&
°Rt˘Resu…
, 0, (
πk_π˘Resu…_t
));

107 
CÃLgcMaskAŒ
(&
Õ‹tMask
);

108 
SëLgcMaskBô
(
Õ‹t
, &
Õ‹tMask
);

109 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

110 
unô
 = 
P‹tLogci2ChùId
(
Õ‹t
);

112 
MaskLogic2Phy
(&
Õ‹tMask
, &
°PhyMask
);

113 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

114 
ªtVÆ
 = 
πk_p‹t_π˘E«bÀ_£t
(
unô
, &
CHIPNMASK
(unô, &
°PhyMask
));

115 #ñi‡
deföed
(
CHIPSET_RTL8305
)

116 
ªtVÆ
 = 
πk_p‹t_π˘E«bÀ_£t
(
CHIPNMASK
(0, &
°PhyMask
));

118 if(
ªtVÆ
 !
RT_ERR_OK
)

120  
DRV_ERR_UNKNOW
;

125 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

126 
ªtVÆ
 = 
πk_p‹t_π˘Resu…_gë
(
unô
, 
P‹tLogic2PhyP‹tId
(
Õ‹t
), &
°Rt˘Resu…
);

127 #ñi‡
deföed
(
CHIPSET_RTL8305
)

128 
ªtVÆ
 = 
πk_p‹t_π˘Resu…_gë
(
P‹tLogic2PhyP‹tId
(
Õ‹t
), &
°Rt˘Resu…
);

130 if(
ªtVÆ
 =
RT_ERR_PHY_RTCT_NOT_FINISH
)

132 
m¶ìp
(1000);

134 }
ªtVÆ
 =
RT_ERR_PHY_RTCT_NOT_FINISH
);

135 if(
ªtVÆ
 !
RT_ERR_OK
)

137  
DRV_ERR_UNKNOW
;

140 
p°Düg
->
°©e
 = 
CABLE_STATE_OK
;

141 
p°Düg
->
fuzz_Àn
 = 5;

142 if((
°Rt˘Resu…
.
lökTy≥
 =
PORT_SPEED_10M
Ë|| (°Rt˘Resu….lökTy≥ =
PORT_SPEED_100M
))

144 
p°Düg
->
≈aús
 = 2;

145 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

146 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
„_ªsu…
.
rxLí
);

147 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
„_ªsu…
.
txLí
);

148 if(
°Rt˘Resu…
.
„_ªsu…
.
isRxSh‹t
)

150 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

151 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

153 if(
°Rt˘Resu…
.
„_ªsu…
.
isTxSh‹t
)

155 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

156 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

158 if(
°Rt˘Resu…
.
„_ªsu…
.
isRxO≥n
)

160 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

161 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

163 if(
°Rt˘Resu…
.
„_ªsu…
.
isTxO≥n
)

165 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

166 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

168 #ñi‡
deföed
(
CHIPSET_RTL8305
)

169 
p°Düg
->
≈aús
 = 4;

170 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lALí
);

171 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBLí
);

172 
p°Düg
->
∑ú_Àn
[2] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCLí
);

173 
p°Düg
->
∑ú_Àn
[3] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDLí
);

174 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lASh‹t
)

176 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

177 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

179 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBSh‹t
)

181 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

182 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

184 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCSh‹t
)

186 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_SHORT
;

187 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

189 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDSh‹t
)

191 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_SHORT
;

192 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

194 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lAO≥n
)

196 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

197 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

199 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBO≥n
)

201 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

202 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

204 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCO≥n
)

206 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_OPEN
;

207 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

209 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDO≥n
)

211 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_OPEN
;

212 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

216 if(
°Rt˘Resu…
.
lökTy≥
 =
PORT_SPEED_1000M
)

218 
p°Düg
->
≈aús
 = 4;

219 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

220 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lALí
);

221 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lBLí
);

222 
p°Düg
->
∑ú_Àn
[2] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lCLí
);

223 
p°Düg
->
∑ú_Àn
[3] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lDLí
);

224 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lASh‹t
)

226 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

227 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

229 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lBSh‹t
)

231 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

232 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

234 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lCSh‹t
)

236 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_SHORT
;

237 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

239 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lDSh‹t
)

241 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_SHORT
;

242 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

244 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lAO≥n
)

246 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

247 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

249 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lBO≥n
)

251 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

252 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

254 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lCO≥n
)

256 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_OPEN
;

257 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

259 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lDO≥n
)

261 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_OPEN
;

262 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

264 #ñi‡
deföed
(
CHIPSET_RTL8305
)

265 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lALí
);

266 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBLí
);

267 
p°Düg
->
∑ú_Àn
[2] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCLí
);

268 
p°Düg
->
∑ú_Àn
[3] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDLí
);

269 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lASh‹t
)

271 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

272 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

274 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBSh‹t
)

276 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

277 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

279 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCSh‹t
)

281 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_SHORT
;

282 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

284 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDSh‹t
)

286 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_SHORT
;

287 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

289 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lAO≥n
)

291 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

292 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

294 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBO≥n
)

296 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

297 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

299 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCO≥n
)

301 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_OPEN
;

302 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

304 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDO≥n
)

306 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_OPEN
;

307 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

313  
DRV_ERR_UNKNOW
;

315 
i
 = 0; i < (
p°Düg
->
≈aús
); i++)

317 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

318 
uiLí
 = (
p°Düg
->
∑ú_Àn
[
i
])/100;

319 
uiResiduÀ
 = (
p°Düg
->
∑ú_Àn
[
i
])%100;

320 if(
uiResiduÀ
 >= 50)

322 
uiLí
++;

324 
p°Düg
->
∑ú_Àn
[
i
] = 
uiLí
;

325 #ñi‡
deföed
(
CHIPSET_RTL8305
)

326 
p°Düg
->
∑ú_Àn
[
i
] = (
UINT16
)((pstDiag->pair_len[i] * 25)/1000);

330  
DRV_OK
;

334 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_dispatch.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~"hÆ_comm⁄.h
"

26 
	~"Ál.h
"

47 
DRV_RET_E
 
HÆ_soc_ªg_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 *
pulD©a
)

49 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

51  
DRV_ERR_PARA
;

53 i‡(
NULL
 =
pulD©a
)

55  
DRV_ERR_PARA
;

58 i‡(
SW_OK
 !
Ál_ªg_gë
(
ulChùNum
, 
ulRegIndex
, (
UINT8
 *)
pulD©a
, 4))

60  
DRV_ERR_UNKNOW
;

63  
DRV_OK
;

84 
DRV_RET_E
 
HÆ_soc_ªg_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 
ulD©a
)

86 
UINT8
 
ucVÆue
[4];

88 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

90  
DRV_ERR_PARA
;

93 
ucVÆue
[0] = (
ulD©a
 >> 24) & 0xFF;

94 
ucVÆue
[1] = (
ulD©a
 >> 16) & 0xFF;

95 
ucVÆue
[2] = (
ulD©a
 >> 8) & 0xFF;

96 
ucVÆue
[3] = 
ulD©a
 & 0xFF;

97 i‡(
SW_OK
 !
Ál_ªg_£t
(
ulChùNum
, 
ulRegIndex
, 
ucVÆue
, 4))

99  
DRV_ERR_UNKNOW
;

102  
DRV_OK
;

123 
DRV_RET_E
 
HÆ_soc_mem_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32* 
pulE¡ryD©a
)

125 #ifde‡
CHIPSET_RTL8328


126 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

128  
DRV_ERR_PARA
;

131 i‡(
NULL
 =
pulE¡ryD©a
)

133  
DRV_ERR_PARA
;

136 i‡(
RT_ERR_OK
 !
èbÀ_ªad
(
ulChùNum
, 
ulTabÀ
, 
ulAddr
, 
pulE¡ryD©a
))

138  
DRV_ERR_UNKNOW
;

140 #ñi‡
deföed
(
CHIPSET_RTL8305
)

142 
ulChùNum
 = ulChipNum;

143 
ulTabÀ
 = ulTable;

144 
ulAddr
 = ulAddr;

145 
pulE¡ryD©a
 =ÖulEntryData;

147  
DRV_OK
;

169 
DRV_RET_E
 
HÆ_soc_mem_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32* 
pulE¡ryD©a
)

171 #ifde‡
CHIPSET_RTL8328


172 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

174  
DRV_ERR_PARA
;

177 i‡(
NULL
 =
pulE¡ryD©a
)

179  
DRV_ERR_PARA
;

182 i‡(
RT_ERR_OK
 !
èbÀ_wrôe
(
ulChùNum
, 
ulTabÀ
, 
ulAddr
, 
pulE¡ryD©a
))

184  
DRV_ERR_UNKNOW
;

186 #ñi‡
deföed
(
CHIPSET_RTL8305
)

188 
ulChùNum
 = ulChipNum;

189 
ulTabÀ
 = ulTable;

190 
ulAddr
 = ulAddr;

191 
pulE¡ryD©a
 =ÖulEntryData;

193  
DRV_OK
;

213 
DRV_RET_E
 
HÆ_GëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 *
pulD©a
)

215 #ifde‡
CHIPSET_RTL8328


216 i‡(
NULL
 =
pulD©a
)

218  
DRV_ERR_PARA
;

221 *
pulD©a
 = *(
UINT32
 *)
ulCpuAddr
;

224 
ulCpuAddr
 = ulCpuAddr;

225 
pulD©a
 =ÖulData;

227  
DRV_OK
;

247 
DRV_RET_E
 
HÆ_SëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 
ulD©a
)

249 #ifde‡
CHIPSET_RTL8328


250 *(
UINT32
 *)
ulCpuAddr
 = 
ulD©a
;

253 
ulCpuAddr
 = ulCpuAddr;

254 
ulD©a
 = ulData;

256  
DRV_OK
;

259 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_gpio.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~<löux/°rög.h
>

24 
	~<πk/p‹t.h
>

25 
	~<πk/swôch.h
>

26 
	~"hÆ_comm⁄.h
"

27 
	~<comm⁄/π_îr‹.h
>

28 
	~"drv/gpio/gpio.h
"

61 
gpioID
 
gpioM≠
[
GPIO_INTERNAL_PIN_END
+1]=

63 
GPIO_ID
(
GPIO_PORT_A
, 0),

64 
GPIO_ID
(
GPIO_PORT_A
, 1),

65 
GPIO_ID
(
GPIO_PORT_A
, 2),

66 
GPIO_ID
(
GPIO_PORT_A
, 3),

67 
GPIO_ID
(
GPIO_PORT_A
, 4),

68 
GPIO_ID
(
GPIO_PORT_A
, 5),

69 
GPIO_ID
(
GPIO_PORT_A
, 6),

70 
GPIO_ID
(
GPIO_PORT_A
, 7),

71 
GPIO_ID
(
GPIO_PORT_B
, 0),

72 
GPIO_ID
(
GPIO_PORT_B
, 1),

73 
GPIO_ID
(
GPIO_PORT_B
, 2),

74 
GPIO_ID
(
GPIO_PORT_B
, 3),

75 
GPIO_ID
(
GPIO_PORT_B
, 4),

76 
GPIO_ID
(
GPIO_PORT_B
, 5),

77 
GPIO_ID
(
GPIO_PORT_B
, 6),

78 
GPIO_ID
(
GPIO_PORT_B
, 7),

79 
GPIO_ID
(
GPIO_PORT_C
, 0),

80 
GPIO_ID
(
GPIO_PORT_C
, 1),

81 
GPIO_ID
(
GPIO_PORT_C
, 2),

82 
GPIO_ID
(
GPIO_PORT_C
, 3),

83 
GPIO_ID
(
GPIO_PORT_C
, 4),

84 
GPIO_ID
(
GPIO_PORT_C
, 5),

85 
GPIO_ID
(
GPIO_PORT_C
, 6),

86 
GPIO_ID
(
GPIO_PORT_C
, 7),

87 
GPIO_ID
(
GPIO_PORT_D
, 0),

88 
GPIO_ID
(
GPIO_PORT_D
, 1),

89 
GPIO_ID
(
GPIO_PORT_D
, 2),

90 
GPIO_ID
(
GPIO_PORT_D
, 3),

91 
GPIO_ID
(
GPIO_PORT_D
, 4),

92 
GPIO_ID
(
GPIO_PORT_D
, 5),

93 
GPIO_ID
(
GPIO_PORT_D
, 6),

94 
GPIO_ID
(
GPIO_PORT_D
, 7),

95 
GPIO_ID
(
GPIO_PORT_E
, 0),

96 
GPIO_ID
(
GPIO_PORT_E
, 1),

97 
GPIO_ID
(
GPIO_PORT_E
, 2),

98 
GPIO_ID
(
GPIO_PORT_E
, 3),

99 
GPIO_ID
(
GPIO_PORT_E
, 4),

100 
GPIO_ID
(
GPIO_PORT_E
, 5),

101 
GPIO_ID
(
GPIO_PORT_E
, 6),

102 
GPIO_ID
(
GPIO_PORT_E
, 7),

103 
GPIO_ID
(
GPIO_PORT_F
, 0),

104 
GPIO_ID
(
GPIO_PORT_F
, 1),

105 
GPIO_ID
(
GPIO_PORT_F
, 2),

106 
GPIO_ID
(
GPIO_PORT_F
, 3),

107 
GPIO_ID
(
GPIO_PORT_F
, 4),

108 
GPIO_ID
(
GPIO_PORT_F
, 5),

109 
GPIO_ID
(
GPIO_PORT_F
, 6),

110 
GPIO_ID
(
GPIO_PORT_F
, 7),

111 
GPIO_ID
(
GPIO_PORT_G
, 0),

112 
GPIO_ID
(
GPIO_PORT_G
, 1),

113 
GPIO_ID
(
GPIO_PORT_G
, 2),

114 
GPIO_ID
(
GPIO_PORT_G
, 3),

115 
GPIO_ID
(
GPIO_PORT_G
, 4),

116 
GPIO_ID
(
GPIO_PORT_G
, 5),

117 
GPIO_ID
(
GPIO_PORT_G
, 6),

118 
GPIO_ID
(
GPIO_PORT_G
, 7),

122 
öt32
 
DrvPö_To_RtkPö
(
GPIO_PIN_E
 
gpio_pö
, 
gpioID
 *
pGpioId
)

124 if(
NULL
 =
pGpioId
)

126  
RT_ERR_INPUT
;

129 
gpio_pö
)

131 
GPIO_PIN_SFP_SCL
:

132 *
pGpioId
 = 
gpioM≠
[
B4
];

134 
GPIO_PIN_SFP0_SDA
:

135 *
pGpioId
 = 
gpioM≠
[
B5
];

137 
GPIO_PIN_SFP1_SDA
:

138 *
pGpioId
 = 
gpioM≠
[
B6
];

140 
GPIO_PIN_WATCHDOG
:

141 *
pGpioId
 = 
gpioM≠
[
B7
];

144  
RT_ERR_INPUT
;

147  
RT_ERR_OK
;

167 
DRV_RET_E
 
HÆ_GpioInô
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_CONTROL_E
 
gpio_˘l
, 
GPIO_DIRECTION_E
 
gpio_dú
)

169 
gpioID
 
gpioId
;

170 
drv_gpio_c⁄åﬁ_t
 
fun˘i⁄
;

171 
drv_gpio_dúe˘i⁄_t
 
dúe˘i⁄
;

172 
öt32
 
iRv
 = 
RT_ERR_OK
;

174 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

175 if(
RT_ERR_OK
 !
iRv
)

177  
Eº‹Sdk2Drv
(
iRv
);

180 
gpio_˘l
)

182 
GPIO_PIN_CTRLFUNC_NORMAL
:

183 
fun˘i⁄
 = 
GPIO_CTRLFUNC_NORMAL
;

185 
GPIO_PIN_CTRLFUNC_DEDICATE_PERIPHERAL
:

186 
fun˘i⁄
 = 
GPIO_CTRLFUNC_DEDICATE_PERIPHERAL
;

189  
DRV_ERR_PARA
;

192 
gpio_dú
)

194 
GPIO_PIN_DIR_IN
:

195 
dúe˘i⁄
 = 
GPIO_DIR_IN
;

197 
GPIO_PIN_DIR_OUT
:

198 
dúe˘i⁄
 = 
GPIO_DIR_OUT
;

201  
DRV_ERR_PARA
;

204 
iRv
 = 
drv_gpio_öô
(
gpioId
, 
fun˘i⁄
, 
dúe˘i⁄
, 
GPIO_INT_DISABLE
);

206  
Eº‹Sdk2Drv
(
iRv
);

226 
DRV_RET_E
 
HÆ_GpioD©aSë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 
gpio_d©a
)

228 
gpioID
 
gpioId
;

229 
öt32
 
iRv
 = 
RT_ERR_OK
;

231 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

232 if(
RT_ERR_OK
 !
iRv
)

234  
Eº‹Sdk2Drv
(
iRv
);

237 if(
gpio_d©a
 >
GPIO_PIN_DATA_END
)

239  
DRV_ERR_PARA
;

242 
iRv
 = 
drv_gpio_d©aBô_£t
(
gpioId
, (
uöt32
)
gpio_d©a
);

244  
Eº‹Sdk2Drv
(
iRv
);

262 
DRV_RET_E
 
HÆ_GpioD©aGë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 *
pgpio_d©a
)

264 
gpioID
 
gpioId
;

265 
öt32
 
iRv
 = 
RT_ERR_OK
;

267 if(
NULL
 =
pgpio_d©a
)

269  
DRV_ERR_PARA
;

272 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

273 if(
RT_ERR_OK
 !
iRv
)

275  
Eº‹Sdk2Drv
(
iRv
);

278 
iRv
 = 
drv_gpio_d©aBô_gë
(
gpioId
, (
uöt32
 *)
pgpio_d©a
);

280  
Eº‹Sdk2Drv
(
iRv
);

300 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Së
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 
gpio_dú
)

302 
gpioID
 
gpioId
;

303 
drv_gpio_dúe˘i⁄_t
 
dúe˘i⁄
;

304 
öt32
 
iRv
 = 
RT_ERR_OK
;

306 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

307 if(
RT_ERR_OK
 !
iRv
)

309  
Eº‹Sdk2Drv
(
iRv
);

312 
gpio_dú
)

314 
GPIO_PIN_DIR_IN
:

315 
dúe˘i⁄
 = 
GPIO_DIR_IN
;

317 
GPIO_PIN_DIR_OUT
:

318 
dúe˘i⁄
 = 
GPIO_DIR_OUT
;

321  
DRV_ERR_PARA
;

324 
iRv
 = 
drv_gpio_dúe˘i⁄Bô_£t
(
gpioId
, 
dúe˘i⁄
);

326  
Eº‹Sdk2Drv
(
iRv
);

344 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Gë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 *
pgpio_dú
)

346 
gpioID
 
gpioId
;

347 
öt32
 
iRv
 = 
RT_ERR_OK
;

348 
drv_gpio_dúe˘i⁄_t
 
dúe˘i⁄
;

350 if(
NULL
 =
pgpio_dú
)

352  
DRV_ERR_PARA
;

355 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

356 if(
RT_ERR_OK
 !
iRv
)

358  
Eº‹Sdk2Drv
(
iRv
);

361 
iRv
 = 
drv_gpio_dúe˘i⁄Bô_gë
(
gpioId
, &
dúe˘i⁄
);

362 if(
RT_ERR_OK
 !
iRv
)

364  
Eº‹Sdk2Drv
(
iRv
);

367 
dúe˘i⁄
)

369 
GPIO_DIR_IN
:

370 *
pgpio_dú
 = 
GPIO_PIN_DIR_IN
;

372 
GPIO_DIR_OUT
:

373 *
pgpio_dú
 = 
GPIO_PIN_DIR_OUT
;

376  
DRV_ERR_UNKNOW
;

379  
DRV_OK
;

382 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_ieee8023az.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

29 
	~<löux/•ölock_ty≥s.h
>

30 
	~<löux/•ölock.h
>

31 
	~<löux/¶ab.h
>

32 
	~"πk_≠i.h
"

33 
	~"πk_≠i_ext.h
"

34 
	~"πl8367b_asicdrv_gªí.h
"

88 
DRV_RET_E
 
HÆ_SëEEEByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
)

90 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

91 
UINT32
 
unô
;

93 
p‹t_num_t
 
Õ‹t
;

94 
phyid_t
 
phyid
;

95 
INT32
 
ªtVÆ
 = 
RT_ERR_OK
;

96 
UINT32
 
uiVÆ
 = 0;

98 if(
∂p‹tMask
 =
NULL
)

100  
DRV_ERR_PARA
;

103 
IfLgcMaskSë
(
∂p‹tMask
, 
Õ‹t
)

105 
phyid
 = 
P‹tLogic2PhyID
(
Õ‹t
);

106 (
VOID
Ë
HÆ_GëP‹tLökupTy≥
(
phyid
, &
uiVÆ
);

107 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

108 
unô
 = 
CHIPID
(
phyid
);

111 if(
uiVÆ
 !
HAL_PORT_LINKUP_TYPE_FIBER_UP
)

113 if(
íabÀ
 =
TRUE
)

116 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

117 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
unô
, 
PORTID
(
phyid
), 
ENABLED
);

118 #ñi‡
deföed
(
CHIPSET_RTL8305
)

119 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
PORTID
(
phyid
), 
ENABLED
);

124 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

125 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
unô
, 
PORTID
(
phyid
), 
DISABLED
);

126 #ñi‡
deföed
(
CHIPSET_RTL8305
)

127 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
PORTID
(
phyid
), 
DISABLED
);

133 if(
ªtVÆ
 !
RT_ERR_OK
)

135  
DRV_ERR_UNKNOW
;

138  
DRV_OK
;

159 
DRV_RET_E
 
HÆ_SëAutoPwrDwnByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
)

161 
UINT32
 
unô
;

162 
phy_pmask_t
 
°PhyMask
;

163 
πk_p‹t_t
 
µ‹t
;

164 
INT32
 
ªtVÆ
;

166 if(
∂p‹tMask
 =
NULL
)

168  
DRV_ERR_PARA
;

171 
MaskLogic2Phy
(
∂p‹tMask
, &
°PhyMask
);

172 
IfPhyMaskSë
(&
°PhyMask
, 
unô
, 
µ‹t
)

174 if(
íabÀ
 =
TRUE
)

176 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

177 
ªtVÆ
 = 
πk_p‹t_gªíE«bÀ_£t
(
unô
, 
µ‹t
, 
ENABLED
);

178 if(
ªtVÆ
 !
RT_ERR_OK
)

180  
DRV_ERR_UNKNOW
;

182 #ñi‡
deföed
(
CHIPSET_RTL8305
)

183 i‡((
ªtVÆ
 = 
πl8367b_£tAsicGªíEthî√t
(
ENABLED
))!=
RT_ERR_OK
)

184  
DRV_ERR_UNKNOW
;

185 i‡((
ªtVÆ
 = 
πl8367b_£tAsicPowîSavög
(
µ‹t
,
ENABLED
))!=
RT_ERR_OK
)

186  
DRV_ERR_UNKNOW
;

191 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

192 
ªtVÆ
 = 
πk_p‹t_gªíE«bÀ_£t
(
unô
, 
µ‹t
, 
DISABLED
);

193 if(
ªtVÆ
 !
RT_ERR_OK
)

195  
DRV_ERR_UNKNOW
;

197 #ñi‡
deföed
(
CHIPSET_RTL8305
)

198 
ªtVÆ
 = 
πl8367b_£tAsicGªíEthî√t
(
DISABLED
);

199 i‡(
ªtVÆ
!=
RT_ERR_OK
)

200  
DRV_ERR_UNKNOW
;

201 i‡((
ªtVÆ
 = 
πl8367b_£tAsicPowîSavög
(
µ‹t
,
DISABLED
))!=
RT_ERR_OK
)

202  
DRV_ERR_UNKNOW
;

207  
DRV_OK
;

212 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_init.c

18 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~<löux/°rög.h
>

26 
	~"hÆ_comm⁄.h
"

27 
	~"öô/ssdk_öô.h
"

28 
	~"Ál_vœn.h
"

39 
HÆ_CpuRegAc˚ssInô
();

40 
HÆ_MdioRegi°îInô
();

41 
HÆ_MdioRegi°îRód
(
devi˚Addr
,
ªgAddr
,*
d©a0
);

42 
HÆ_MdioRegi°îWrôe
(
devi˚Addr
,
ªgAddr
,
d©a0
);

69 
DRV_RET_E
 
HÆ_SwôchInô
()

72 
sw_îr‹_t
 
	gπ_vÆ
;

74 
ssdk_öô_cfg
 
	gcfg
 = 
def_öô_cfg
;

76 
HÆ_CpuRegAc˚ssInô
();

77 
HÆ_MdioRegi°îInô
();

78 
mem£t
(&
cfg
, 0, (
ssdk_öô_cfg
));

80 
	gcfg
.
	g˝u_mode
 = 
HSL_CPU_2
;

81 
	gcfg
.
	gªg_mode
 = 
HSL_MDIO
;

83 
	gcfg
.
	gchù_ty≥
=
CHIP_ISIS
;

84 
	gcfg
.
	gªg_func
.
	gmdio_£t
 = 
HÆ_MdioRegi°îWrôe
;

85 
	gcfg
.
	gªg_func
.
	gmdio_gë
 = 
HÆ_MdioRegi°îRód
;

88 
	gπ_vÆ
 = 
ssdk_öô
(0, &
cfg
);

89 i‡(
	gπ_vÆ
 !
SW_OK
)

91 
aos_¥ötk
("ssdk_öôÑëu∫Éº‹!Éº‹ codê%d\n",
π_vÆ
);

92  
	gπ_vÆ
;

95 
Ál_vœn_¸óã
(0, 1);

107 
HÆ_A˛Inô
();

109 
¥ötk
("Hal_SwitchInit succeed\r\n");

111  
	gDRV_OK
;

118 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_mac.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~"hÆ_comm⁄.h
"

25 
	~"Ál_fdb.h
"

27 
	~<löux/•ölock_ty≥s.h
>

28 
	~<löux/•ölock.h
>

29 
	~<asm/uac˚ss.h
>

45 
UINT32
 
_HÆ_MacCom∑ª
(
mac_addªss_t
 
addªss_1
, mac_addªss_à
addªss_2
);

55 
mac_dump_uˇ°_èb_t
 
_mac_uˇ°_íåy_dump
[
CHIP_NO
][
MAX_ARL_TABLE
];

56 
mac_dump_uˇ°_lök_t
 
_mac_uˇ°_dump_lök
[
CHIP_NO
][
MAX_ARL_TABLE
];

57 
mac_dump_uˇ°_èb_t
 
_mac_uˇ°_íåy_dump_s‹ãd
[
MAX_ARL_TABLE
];

58 
mac_dump_uˇ°_lök_t
 *
p°MacUˇ°DumpLökHód
 = 
NULL
;

59 
mac_mˇ°_t
 
_mac_mˇ°_íåy_dump
[
MAX_MULTICAST_ENTRY
];

60 
UINT32
 
ulMacMˇ°Cou¡
 = 0, 
ulMacMac°Inôed
 = 0;

62 
UINT32
 
ulMacDumpInôed
 = 0;

64 
•ölock_t
 
_•ö_hÆ_mac_lock
 = 
SPIN_LOCK_UNLOCKED
;

66 
UINT32
 
ulMacCuºítIndex
 = 0;

76 
	#DRV_MAC_DUMP_NUMBER_PER_ROLL
 2000

	)

77 
	#SPIN_HAL_MAC_LOCK
 
	`•ö_lock
(&
_•ö_hÆ_mac_lock
)

	)

78 
	#SPIN_HAL_MAC_UNLOCK
 
	`•ö_u∆ock
(&
_•ö_hÆ_mac_lock
)

	)

82 
	#düg_¥ötf
 
¥ötk


	)

84 
	#düg_¥ötf
(
fmt
, ...)

	)

89 
DUMP_LINK_INSERT_PRE
(
mac_dump_uˇ°_lök_t
 *
_dump_lök_cur
, mac_dump_uˇ°_lök_à*
_dump_lök_ö£π
)

91 if(
p°MacUˇ°DumpLökHód
 =
_dump_lök_cur
)

94 
p°MacUˇ°DumpLökHód
 = 
_dump_lök_ö£π
;

95 
_dump_lök_ö£π
->
p°MacDumpLökPª
 = 
NULL
;

96 
_dump_lök_ö£π
->
p°MacDumpLökNext
 = 
_dump_lök_cur
;

97 
_dump_lök_cur
->
p°MacDumpLökPª
 = 
_dump_lök_ö£π
;

102 
_dump_lök_ö£π
->
p°MacDumpLökPª
 = 
_dump_lök_cur
->pstMacDumpLinkPre;

103 
_dump_lök_ö£π
->
p°MacDumpLökNext
 = 
_dump_lök_cur
;

104 if(
NULL
 !
_dump_lök_cur
->
p°MacDumpLökPª
)

106 
_dump_lök_cur
->
p°MacDumpLökPª
->
p°MacDumpLökNext
 = 
_dump_lök_ö£π
;

108 
_dump_lök_cur
->
p°MacDumpLökPª
 = 
_dump_lök_ö£π
;

112 
DUMP_LINK_REMOVE
(
UINT32
 
_unô
, UINT32 
_ödex
)

114 if(
_mac_uˇ°_íåy_dump
[
_unô
][
_ödex
].
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
)

116 if(
p°MacUˇ°DumpLökHód
 !&(
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
]))

119 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökPª
->
p°MacDumpLökNext
 =

120 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
;

121 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
->
p°MacDumpLökPª
 =

122 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökPª
;

127 
p°MacUˇ°DumpLökHód
 = 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
;

128 if(
NULL
 !
p°MacUˇ°DumpLökHód
)

130 
p°MacUˇ°DumpLökHód
->
p°MacDumpLökPª
 = 
NULL
;

133 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökPª
 = 
NULL
;

134 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
 = 
NULL
;

135 
_mac_uˇ°_íåy_dump
[
_unô
][
_ödex
].
Êag
 = 0;

156 
DRV_RET_E
 
HÆ_SëCpuP‹tMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
)

158 
ulE«bÀ
 = ulEnable;

160  
DRV_SDK_CHIP_NOT_SUPPORTED
;

181 
DRV_RET_E
 
HÆ_SëMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
, 
logic_pmask_t
 
°P‹tMask
)

183 
p‹t_num_t
 
Õ‹t
;

184 
sw_îr‹_t
 
iRë
 = 
SW_OK
;

186 
LgcP‹tF‹
(
Õ‹t
)

188 if(
T°LgcMaskBô
(
Õ‹t
, &
°P‹tMask
))

190 if(
MAC_LEARN_FWD_ENABLED
 =
ulE«bÀ
)

192 
iRë
 = 
Ál_fdb_p‹t_À¨n_£t
(
P‹tLogci2ChùId
(
Õ‹t
), 
P‹tLogic2PhyP‹tId
÷p‹t), 
A_TRUE
);

193 i‡(
SW_OK
 !
iRë
)

195  
DRV_SDK_GEN_ERROR
;

197 
iRë
 = 
Ál_p‹t_fdb_À¨n_limô_£t
(
P‹tLogci2ChùId
(
Õ‹t
), 
P‹tLogic2PhyP‹tId
÷p‹t), 
A_FALSE
, 
MAX_ARL_LEARN_LIMIT
);

198 i‡(
SW_OK
 !
iRë
)

200  
DRV_SDK_GEN_ERROR
;

202 
iRë
 = 
Ál_p‹t_fdb_À¨n_ex˚ed_cmd_£t
(
P‹tLogci2ChùId
(
Õ‹t
), 
P‹tLogic2PhyP‹tId
÷p‹t), 
FAL_MAC_FRWRD
);

203 i‡(
SW_OK
 !
iRë
)

205  
DRV_SDK_GEN_ERROR
;

208 if(
MAC_LEARN_FWD_DISABLED
 =
ulE«bÀ
)

210 
iRë
 = 
Ál_fdb_p‹t_À¨n_£t
(
P‹tLogci2ChùId
(
Õ‹t
), 
P‹tLogic2PhyP‹tId
÷p‹t), 
A_FALSE
);

211 i‡(
SW_OK
 !
iRë
)

213  
DRV_SDK_GEN_ERROR
;

215 
iRë
 = 
Ál_p‹t_fdb_À¨n_limô_£t
(
P‹tLogci2ChùId
(
Õ‹t
), 
P‹tLogic2PhyP‹tId
÷p‹t), 
A_TRUE
, 0);

216 i‡(
SW_OK
 !
iRë
)

218  
DRV_SDK_GEN_ERROR
;

220 
iRë
 = 
Ál_p‹t_fdb_À¨n_ex˚ed_cmd_£t
(
P‹tLogci2ChùId
(
Õ‹t
), 
P‹tLogic2PhyP‹tId
÷p‹t), 
FAL_MAC_DROP
);

221 i‡(
SW_OK
 !
iRë
)

223  
DRV_SDK_GEN_ERROR
;

228  
DRV_ERR_PARA
;

233  
DRV_OK
;

255 
DRV_RET_E
 
HÆ_GëMacLó∫E«bÀ
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulE«bÀ
)

257 
sw_îr‹_t
 
iRë
;

258 
a_boﬁ_t
 
bE«bÀ
;

260 if(!
VALID_PORT
(
ulLgcP‹t
))

262  
DRV_ERR_PARA
;

264 if(
NULL
 =
pulE«bÀ
)

266  
DRV_ERR_PARA
;

269 
iRë
 = 
Ál_fdb_p‹t_À¨n_gë
(
P‹tLogci2ChùId
(
ulLgcP‹t
), 
P‹tLogic2PhyP‹tId
(ulLgcP‹t), &
bE«bÀ
);

270 i‡(
SW_OK
 !
iRë
)

272  
DRV_SDK_GEN_ERROR
;

275 if(
A_FALSE
 =
bE«bÀ
)

277 *
pulE«bÀ
 = 
MAC_LEARN_FWD_DISABLED
;

281 *
pulE«bÀ
 = 
MAC_LEARN_FWD_ENABLED
;

284  
DRV_OK
;

306 
DRV_RET_E
 
HÆ_SëMacCpuMacAdd
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addªss
)

308 
UINT32
 
ulUnô
;

309 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

311 if(!
VALID_VLAN_ID
(
tdVid
))

313  
DRV_ERR_PARA
;

316 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

317 
mem˝y
(
°FdbE¡ry
.
addr
.
uc
, 
mac_addªss
, (
mac_addªss_t
));

318 
°FdbE¡ry
.
fid
 = (
a_uöt16_t
)
tdVid
;

319 
°FdbE¡ry
.
°©ic_í
 = 
A_TRUE
;

321 
UnôF‹
(
ulUnô
)

324 if(
SW_OK
 !
Ál_fdb_add
(
ulUnô
, &
°FdbE¡ry
))

326  
DRV_ERR_UNKNOW
;

330  
DRV_OK
;

353 
DRV_RET_E
 
HÆ_SëMacFlushUˇ°Mac
(
mac_dñëe_t
 
°MacDñëe
)

355 
p‹t_num_t
 
Õ‹t
;

356 
a_uöt32_t
 
Êag
 = 0;

357 
UINT32
 
unô
;

358 
Ál_fdb_íåy_t
 
°MacE¡ry
;

361 if((
ENABLE
 =
°MacDñëe
.
ÊushByTunk
Ë|| (ENABLE =°MacDñëe.
ÊushByVid
))

363  
DRV_SDK_CHIP_NOT_SUPPORTED
;

366 if(
ENABLE
 =
°MacDñëe
.
ÊushSèticAddr
)

368 
Êag
 = 
FAL_FDB_DEL_STATIC
;

372 if(
ENABLE
 =
°MacDñëe
.
ÊushAŒ
)

374 
UnôF‹
(
unô
)

376 if(
SW_OK
 !
Ál_fdb_dñ_Æl
(
unô
, 
Êag
))

378  
DRV_ERR_UNKNOW
;

382  
DRV_OK
;

386 if(
ENABLE
 =
°MacDñëe
.
ÊushByVid
)

388 if(!
VALID_VLAN_ID
(
°MacDñëe
.
vid
))

390  
DRV_ERR_PARA
;

395 if(
ENABLE
 =
°MacDñëe
.
ÊushByP‹t
)

397 if(!
VALID_PORT
(
°MacDñëe
.
p‹t
))

399  
DRV_ERR_PARA
;

401 if(
SW_OK
 !
Ál_fdb_dñ_by_p‹t
(
P‹tLogci2ChùId
(
°MacDñëe
.
p‹t
), 
P‹tLogic2PhyP‹tId
(°MacDñëe.p‹t), 
Êag
))

403  
DRV_ERR_UNKNOW
;

408 if(
ENABLE
 =
°MacDñëe
.
ÊushByMac
)

410 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

411 
mem˝y
(
°MacE¡ry
.
addr
.
uc
, 
°MacDñëe
.
macAddr
, (
mac_addªss_t
));

412 
°MacE¡ry
.
fid
 = 
°MacDñëe
.
vid
;

413 
UnôF‹
(
unô
)

415 ()
Ál_fdb_dñ_by_mac
(
unô
, &
°MacE¡ry
);

419  
DRV_OK
;

440 
DRV_RET_E
 
HÆ_SëMacAddUˇ°Mac
(
mac_uˇ°_t
 
°MacUˇ°
)

442 
UINT32
 
unô
;

443 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

446 if(!
VALID_VLAN_ID
(
°MacUˇ°
.
tdVid
) && (0 != stMacUcast.tdVid))

448  
DRV_ERR_PARA
;

451 if(
IS_MULTICAST
(
°MacUˇ°
.
mac_addr
))

454  
DRV_ERR_PARA
;

458 if(
°MacUˇ°
.
ucIsAggr
)

460  
DRV_ERR_PARA
;

463 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

464 
mem˝y
(
°FdbE¡ry
.
addr
.
uc
, 
°MacUˇ°
.
mac_addr
, (stMacUcast.mac_addr));

465 
°FdbE¡ry
.
fid
 = (
a_uöt16_t
)
°MacUˇ°
.
tdVid
;

467 if(
°MacUˇ°
.
ucSètic
)

469 
°FdbE¡ry
.
°©ic_í
 = 
A_TRUE
;

473 i‡(
VALID_PORT
(
°MacUˇ°
.
lgcP‹t
))

475 
°FdbE¡ry
.
p‹tm≠_í
 = 
A_FALSE
;

476 
°FdbE¡ry
.
p‹t
.
id
 = 
P‹tLogic2PhyP‹tId
(
°MacUˇ°
.
lgcP‹t
);

479 if(0 =
°MacUˇ°
.
lgcP‹t
)

481 
°FdbE¡ry
.
p‹tm≠_í
 = 
A_TRUE
;

482 
°FdbE¡ry
.
p‹t
.
m≠
 = 0;

483 
°FdbE¡ry
.
dacmd
 = 
FAL_MAC_DROP
;

487  
DRV_ERR_PARA
;

492 
UnôF‹
(
unô
)

494 if(
SW_OK
 !
Ál_fdb_add
(
unô
, &
°FdbE¡ry
))

496  
DRV_ERR_UNKNOW
;

500  
DRV_OK
;

520 
DRV_RET_E
 
HÆ_SëMacDñUˇ°Mac
(
mac_uˇ°_t
 
°MacUˇ°
)

522 
UINT32
 
unô
;

523 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

526 if(!
VALID_VLAN_ID
(
°MacUˇ°
.
tdVid
) && (0 != stMacUcast.tdVid))

528  
DRV_ERR_PARA
;

531 if(
IS_MULTICAST
(
°MacUˇ°
.
mac_addr
))

534  
DRV_ERR_PARA
;

537 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

538 
mem˝y
(
°FdbE¡ry
.
addr
.
uc
, 
°MacUˇ°
.
mac_addr
, (
mac_addªss_t
));

539 
°FdbE¡ry
.
fid
 = 
°MacUˇ°
.
tdVid
;

540 
UnôF‹
(
unô
)

542 ()
Ál_fdb_dñ_by_mac
(
unô
, &
°FdbE¡ry
);

545  
DRV_OK
;

548 
DRV_RET_E
 
_HÆ_MacMˇ°Add
(
mac_mˇ°_t
 *
p°MacMˇ°
)

550 
UINT32
 
i
;

552 if(
ulMacMˇ°Cou¡
 >
MAX_MULTICAST_ENTRY
)

554  
DRV_ERR_UNKNOW
;

556 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

558 if(0 =
_mac_mˇ°_íåy_dump
[
i
].
tdVid
)

560 
_mac_mˇ°_íåy_dump
[
i
].
tdVid
 = 
p°MacMˇ°
->tdVid;

561 
mem˝y
(
_mac_mˇ°_íåy_dump
[
i
].
mac_addr
, 
p°MacMˇ°
->mac_addr, (
mac_addªss_t
));

562 
mem˝y
(&(
_mac_mˇ°_íåy_dump
[
i
].
p‹t_mask
), &(
p°MacMˇ°
->p‹t_mask), (
logic_pmask_t
));

563 
ulMacMˇ°Cou¡
++;

564  
DRV_OK
;

567  
DRV_ERR_UNKNOW
;

570 
DRV_RET_E
 
_HÆ_MacMˇ°Dñ
(
mac_mˇ°_t
 *
p°MacMˇ°
)

572 
UINT32
 
i
;

574 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

576 if(
p°MacMˇ°
->
tdVid
 =
_mac_mˇ°_íåy_dump
[
i
].tdVid)

578 if(!
_HÆ_MacCom∑ª
(
p°MacMˇ°
->
mac_addr
, 
_mac_mˇ°_íåy_dump
[
i
].mac_addr))

580 
mem£t
(&
_mac_mˇ°_íåy_dump
[
i
], 0, (_mac_mcast_entry_dump[i]));

581 
ulMacMˇ°Cou¡
--;

583  
DRV_OK
;

588  
DRV_ERR_UNKNOW
;

591 
DRV_RET_E
 
_HÆ_MacMˇ°Së
(
mac_mˇ°_t
 *
p°MacMˇ°
)

593 
UINT32
 
i
;

595 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

597 if(
p°MacMˇ°
->
tdVid
 =
_mac_mˇ°_íåy_dump
[
i
].tdVid)

599 if(!
_HÆ_MacCom∑ª
(
p°MacMˇ°
->
mac_addr
, 
_mac_mˇ°_íåy_dump
[
i
].mac_addr))

601 
mem˝y
(&(
_mac_mˇ°_íåy_dump
[
i
].
p‹t_mask
), &(
p°MacMˇ°
->p‹t_mask), (
logic_pmask_t
));

602  
DRV_OK
;

606  
DRV_ERR_UNKNOW
;

625 
DRV_RET_E
 
_HÆ_MacMˇ°GëByVid
(
vœn_id_t
 
tdVid
, 
mac_mˇ°_t
 *
p°MacMˇ°
)

627 
UINT32
 
i
;

629 i‡(
NULL
 =
p°MacMˇ°
)

631  
DRV_ERR_UNKNOW
;

634 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

636 if(
tdVid
 =
_mac_mˇ°_íåy_dump
[
i
].tdVid)

638 
mem˝y
(
p°MacMˇ°
, &
_mac_mˇ°_íåy_dump
[
i
], (
mac_mˇ°_t
));

639  
DRV_OK
;

642  
DRV_NULL_POINTER
;

661 
DRV_RET_E
 
_HÆ_MacMˇ°GëByMac
(
mac_addªss_t
 
tdMac
, 
mac_mˇ°_t
 *
p°MacMˇ°
)

663 
UINT32
 
i
;

665 i‡((
NULL
 =
tdMac
Ë|| (NULL =
p°MacMˇ°
))

667  
DRV_ERR_UNKNOW
;

670 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

672 if(!
_HÆ_MacCom∑ª
(
tdMac
, 
_mac_mˇ°_íåy_dump
[
i
].
mac_addr
))

674 
mem˝y
(
p°MacMˇ°
, &
_mac_mˇ°_íåy_dump
[
i
], (
mac_mˇ°_t
));

675  
DRV_OK
;

678  
DRV_ERR_UNKNOW
;

699 
DRV_RET_E
 
HÆ_SëMacAddMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

701 
UINT32
 
unô
;

702 
phy_pmask_t
 
phy_mask
;

703 
sw_îr‹_t
 
iRë
;

704 
Ál_pbmp_t
 
°P‹tMask
;

705 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

707 
MaskLogic2Phy
(&(
°MacMˇ°
.
p‹t_mask
), &
phy_mask
);

709 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

710 
mem˝y
(
°FdbE¡ry
.
addr
.
uc
, 
°MacMˇ°
.
mac_addr
, (stMacMcast.mac_addr));

711 
°FdbE¡ry
.
fid
 = 
°MacMˇ°
.
tdVid
;

712 
°FdbE¡ry
.
p‹tm≠_í
 = 
A_TRUE
;

714 
UnôF‹
(
unô
)

716 
mem˝y
(&
°FdbE¡ry
.
p‹t
.
m≠
, &
phy_mask
.
pmask
[
unô
], (
°P‹tMask
));

718 if(
SW_OK
 !
Ál_fdb_add
(
unô
, &
°FdbE¡ry
))

720  
DRV_ERR_UNKNOW
;

724 
SPIN_HAL_MAC_LOCK
;

725 if(!
ulMacMac°Inôed
)

727 
mem£t
(
_mac_mˇ°_íåy_dump
, 0, (_mac_mcast_entry_dump));

728 
ulMacMac°Inôed
 = 1;

731 ()
_HÆ_MacMˇ°Add
(&
°MacMˇ°
);

732 
SPIN_HAL_MAC_UNLOCK
;

734  
DRV_OK
;

755 
DRV_RET_E
 
HÆ_SëMacDñMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

757 
UINT32
 
unô
;

758 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

760 if(!
VALID_VLAN_ID
(
°MacMˇ°
.
tdVid
))

762  
DRV_ERR_PARA
;

765 if(!
IS_MULTICAST
(
°MacMˇ°
.
mac_addr
))

768  
DRV_ERR_PARA
;

771 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

772 
mem˝y
(
°FdbE¡ry
.
addr
.
uc
, 
°MacMˇ°
.
mac_addr
, (stMacMcast.mac_addr));

773 
°FdbE¡ry
.
fid
 = 
°MacMˇ°
.
tdVid
;

774 
UnôF‹
(
unô
)

776 ()
Ál_fdb_dñ_by_mac
(
unô
, &
°FdbE¡ry
);

779 
SPIN_HAL_MAC_LOCK
;

780 if(!
ulMacMac°Inôed
)

782 
mem£t
(
_mac_mˇ°_íåy_dump
, 0, (_mac_mcast_entry_dump));

783 
ulMacMac°Inôed
 = 1;

785 ()
_HÆ_MacMˇ°Dñ
(&
°MacMˇ°
);

786 
SPIN_HAL_MAC_UNLOCK
;

788  
DRV_OK
;

809 
DRV_RET_E
 
HÆ_SëMacAgeTime
(
UINT32
 
ulSec⁄d
)

811 
UINT32
 
ulUnô
;

813 
UnôF‹
(
ulUnô
)

815 if(
SW_OK
 !
Ál_fdb_age_time_£t
(
ulUnô
, &
ulSec⁄d
))

817  
DRV_ERR_PARA
;

821  
DRV_OK
;

841 
DRV_RET_E
 
HÆ_SëMacLó∫Limô
(
UINT32
 
ulLgcP‹t
, UINT32 
uLlimô
, UINT32 
ulDisF‹w¨d
)

843 
Ál_p‹t_t
 
p‹t
;

844 
UINT32
 
unô
;

845 
Ál_fwd_cmd_t
 
a˘i⁄
;

846 
UINT32
 
uiMacC¡
 = 0;

848 if(!
VALID_PORT
(
ulLgcP‹t
))

850  
DRV_ERR_PARA
;

853 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
ulLgcP‹t
);

854 
unô
 = 
P‹tLogci2ChùId
(
ulLgcP‹t
);

856 
uiMacC¡
 = 
uLlimô
;

858 if(
DIS_ARL_LEARN_LIMIT
 =
uiMacC¡
)

860 
uiMacC¡
 = 
MAX_ARL_LEARN_LIMIT
;

864 if((
uLlimô
 =
DIS_ARL_LEARN_LIMIT
Ë&& (
DISABLE
 =
ulDisF‹w¨d
))

866 ()
Ál_p‹t_fdb_À¨n_limô_£t
(
unô
, 
p‹t
, 
A_FALSE
, 
uiMacC¡
);

867  
DRV_OK
;

871 ()
Ál_p‹t_fdb_À¨n_limô_£t
(
unô
, 
p‹t
, 
A_TRUE
, 
uiMacC¡
);

874 if(
DISABLE
 =
ulDisF‹w¨d
)

877 
a˘i⁄
 = 
FAL_MAC_FRWRD
;

882 
a˘i⁄
 = 
FAL_MAC_DROP
;

884 ()
Ál_p‹t_fdb_À¨n_ex˚ed_cmd_£t
(
unô
, 
p‹t
, 
a˘i⁄
);

886  
DRV_OK
;

909 
DRV_RET_E
 
HÆ_GëMacUˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
)

911 
UINT32
 
unô
;

912 
Ál_p‹t_t
 
Õ‹t
;

913 
Ál_fdb_íåy_t
 
°Uˇ°Addr
;

915 if(!
VALID_VLAN_ID
(
tdVid
))

917  
DRV_ERR_PARA
;

919 if(
NULL
 =
p°MacUˇ°
)

921  
DRV_ERR_PARA
;

924 
mem£t
(&
°Uˇ°Addr
, 0, (stUcastAddr));

925 
mem˝y
(
°Uˇ°Addr
.
addr
.
uc
, 
mac_addr
, (
mac_addªss_t
));

926 
°Uˇ°Addr
.
fid
 = 
tdVid
;

928 
mem£t
(
p°MacUˇ°
, 0, (
mac_uˇ°_t
));

929 
mem˝y
(
p°MacUˇ°
->
mac_addr
, mac_addr, (
mac_addªss_t
));

930 
p°MacUˇ°
->
tdVid
 = (
vœn_id_t
)tdVid;

932 
UnôF‹
(
unô
)

934 if(
SW_OK
 =
Ál_fdb_föd
(
unô
, &
°Uˇ°Addr
))

936 if(0 =
°Uˇ°Addr
.
p‹t
.
m≠
)

939 
p°MacUˇ°
->
lgcP‹t
 = 0;

944 
LgcP‹tF‹
(
Õ‹t
)

946 if(
°Uˇ°Addr
.
p‹t
.
m≠
 & (1UL << 
P‹tLogic2PhyP‹tId
(
Õ‹t
)))

948 if(0 =
p°MacUˇ°
->
lgcP‹t
)

950 
p°MacUˇ°
->
lgcP‹t
 = 
Õ‹t
;

954  
DRV_ERR_MAC_ADDR_MULTPORT_EXIST
;

958 if(0 =
p°MacUˇ°
->
lgcP‹t
)

964 if(
A_TRUE
 =
°Uˇ°Addr
.
°©ic_í
)

966 
p°MacUˇ°
->
ucSètic
 = 
TRUE
;

968  
DRV_OK
;

971  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

993 
DRV_RET_E
 
HÆ_GëMacMˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
)

995 
UINT32
 
unô
;

996 
phy_pmask_t
 
°PhyMask
;

997 
UINT8
 
ucGëMac
 = 0;

998 
Ál_fdb_íåy_t
 
°Mˇ°Addr
;

1000 if(!
VALID_VLAN_ID
(
tdVid
))

1002  
DRV_ERR_PARA
;

1004 if(
NULL
 =
p°MacMˇ°
)

1006  
DRV_ERR_PARA
;

1009 
mem£t
(&
°Mˇ°Addr
, 0, (stMcastAddr));

1010 
mem˝y
(
°Mˇ°Addr
.
addr
.
uc
, 
mac_addr
, (
mac_addªss_t
));

1011 
°Mˇ°Addr
.
fid
 = 
tdVid
;

1013 
p°MacMˇ°
->
tdVid
 = (
vœn_id_t
)tdVid;

1014 
mem˝y
(
p°MacMˇ°
->
mac_addr
, mac_addr, (mac_addr));

1015 
UnôF‹
(
unô
)

1017 if(
SW_OK
 =
Ál_fdb_föd
(
unô
, &
°Mˇ°Addr
))

1019 
mem˝y
(&
°PhyMask
.
pmask
[
unô
], &(
°Mˇ°Addr
.
p‹t
.
m≠
), (
Ál_pbmp_t
));

1020 
ucGëMac
 = 1;

1024 if(
ucGëMac
)

1026 
MaskPhy2Logic
(&
°PhyMask
, &(
p°MacMˇ°
->
p‹t_mask
));

1027  
DRV_OK
;

1031  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

1054 
DRV_RET_E
 
HÆ_SëMacSëMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

1056 
UINT32
 
unô
;

1057 
phy_pmask_t
 
phy_mask
;

1058 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

1060 
MaskLogic2Phy
(&(
°MacMˇ°
.
p‹t_mask
), &
phy_mask
);

1062 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

1063 
mem˝y
(
°FdbE¡ry
.
addr
.
uc
, 
°MacMˇ°
.
mac_addr
, (stMacMcast.mac_addr));

1064 
°FdbE¡ry
.
fid
 = 
°MacMˇ°
.
tdVid
;

1065 
°FdbE¡ry
.
p‹tm≠_í
 = 
A_TRUE
;

1067 
UnôF‹
(
unô
)

1069 
mem˝y
(&
°FdbE¡ry
.
p‹t
.
m≠
, &
CHIPNMASK
(
unô
, &
phy_mask
), (
Ál_pbmp_t
));

1071 if(
SW_OK
 !
Ál_fdb_add
(
unô
, &
°FdbE¡ry
))

1073  
DRV_ERR_UNKNOW
;

1076 
SPIN_HAL_MAC_LOCK
;

1077 if(!
ulMacMac°Inôed
)

1079 
mem£t
(
_mac_mˇ°_íåy_dump
, 0, (_mac_mcast_entry_dump));

1080 
ulMacMac°Inôed
 = 1;

1082 ()
_HÆ_MacMˇ°Së
(&
°MacMˇ°
);

1083 
SPIN_HAL_MAC_UNLOCK
;

1085  
DRV_OK
;

1105 
DRV_RET_E
 
HÆ_SëMacLookFaûFrd
(
logic_pmask_t
 
°P‹tMask
)

1108 
UINT32
 
unô
;

1109 
phy_pmask_t
 
°PhyMask
;

1111 
MaskLogic2Phy
(&
°P‹tMask
, &
°PhyMask
);

1112 
UnôF‹
(
unô
)

1114 if(
SW_OK
 !
πk_l2_lookupMissFloodP‹tMask_£t
(
unô
, &
CHIPNMASK
(unô, &
°PhyMask
)))

1117  
DRV_ERR_UNKNOW
;

1122  
DRV_OK
;

1125 
mem˝y
(&
°P‹tMask
, &stPortMask, (stPortMask));

1126  
DRV_ERR_PARA
;

1147 
DRV_RET_E
 
HÆ_GëMacLó∫Cou¡
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulCou¡
)

1149 if(!
VALID_PORT
(
ulLgcP‹t
))

1151  
DRV_ERR_PARA
;

1154 if(
NULL
 =
pulCou¡
)

1156  
DRV_ERR_PARA
;

1160  
DRV_SDK_GEN_ERROR
;

1180 
UINT32
 
_HÆ_MacCom∑ª
(
mac_addªss_t
 
addªss_1
, mac_addªss_à
addªss_2
)

1182 
UINT32
 
i
;

1184 
i
 = 0; i< 
MAC_ADDR_LEN
; i++)

1186 if(
addªss_1
[
i
] !
addªss_2
[i])

1192 if(
MAC_ADDR_LEN
 =
i
)

1217 
_HÆ_In£πUˇ°MacE¡ry
(
UINT32
 
ulUnô
, UINT32 
ulIndex
)

1219 
mac_dump_uˇ°_lök_t
 *
p°DumpLökCur
;

1220 
mac_dump_uˇ°_èb_t
 *
p°DumpTabCur
;

1221 
mac_dump_uˇ°_èb_t
 *
p°MacDump
;

1222 
mac_dump_uˇ°_lök_t
 *
p°DumpLökIn£π
;

1223 
UINT32
 
i
;

1226 
p°DumpLökIn£π
 = &
_mac_uˇ°_dump_lök
[
ulUnô
][
ulIndex
];

1227 
p°MacDump
 = &
_mac_uˇ°_íåy_dump
[
ulUnô
][
ulIndex
];

1228 
p°DumpLökIn£π
->
p°MacDump
 =ÖstMacDump;

1231 if(
NULL
 !
p°MacUˇ°DumpLökHód
)

1233 
p°DumpLökCur
 = 
p°MacUˇ°DumpLökHód
;

1235 
NULL
 !
p°DumpLökCur
)

1237 
p°DumpTabCur
 = 
p°DumpLökCur
->
p°MacDump
;

1240 if(!(
p°DumpTabCur
->
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
))

1243 
p°DumpLökCur
 =Ö°DumpLökCur->
p°MacDumpLökNext
;

1248 
i
 = 0; i< 
MAC_ADDR_LEN
; i++)

1250 if(
p°DumpTabCur
->
mac_addr
[
i
] !
p°MacDump
->mac_addr[i])

1256 if(
MAC_ADDR_LEN
 =
i
)

1259 
DUMP_LINK_INSERT_PRE
(
p°DumpLökCur
, 
p°DumpLökIn£π
);

1262 if(
p°DumpTabCur
->
mac_addr
[
i
] > 
p°MacDump
->mac_addr[i])

1265 
DUMP_LINK_INSERT_PRE
(
p°DumpLökCur
, 
p°DumpLökIn£π
);

1271 if(
NULL
 =
p°DumpLökCur
->
p°MacDumpLökNext
)

1274 
p°DumpLökCur
->
p°MacDumpLökNext
 = 
p°DumpLökIn£π
;

1275 
p°DumpLökIn£π
->
p°MacDumpLökPª
 = 
p°DumpLökCur
;

1276 
p°DumpLökIn£π
->
p°MacDumpLökNext
 = 
NULL
;

1280 
p°DumpLökCur
 =Ö°DumpLökCur->
p°MacDumpLökNext
;

1287 
p°MacUˇ°DumpLökHód
 = 
p°DumpLökIn£π
;

1288 
p°MacUˇ°DumpLökHód
->
p°MacDump
 =ÖstMacDump;

1289 
p°MacUˇ°DumpLökHód
->
p°MacDumpLökPª
 = 
NULL
;

1290 
p°MacUˇ°DumpLökHód
->
p°MacDumpLökNext
 = 
NULL
;

1314 
UINT32
 
_HÆ_Uˇ°Com∑ª
(UINT32 
ulUnô
, 
πk_l2_uˇ°Addr_t
 *
p°RtkUˇ°
, 
mac_dump_uˇ°_èb_t
 *
p°DumpTab
, UINT32 *
pulRe‰eshO∆y
)

1316 
UINT8
 
ucIsAggr
 = 0, 
ucIsAggrPª
 = 0;

1317 
vœn_id_t
 
tdVid
;

1318 
UINT8
 
ucIsSètic
 = 0, 
ucIsSèticPª
 = 0;

1322 *
pulRe‰eshO∆y
 = 1;

1324 
tdVid
 = (
vœn_id_t
)
p°RtkUˇ°
->
cvid
;

1325 if(
tdVid
 !
p°DumpTab
->
vid
)

1331 if(
_HÆ_MacCom∑ª
(
p°RtkUˇ°
->
mac
.
o˘ë
, 
p°DumpTab
->
mac_addr
))

1333 *
pulRe‰eshO∆y
 = 0;

1338 if(
ENABLED
 =
p°RtkUˇ°
->
is_°©ic
)

1340 
ucIsSètic
 = 1;

1342 if(
p°DumpTab
->
Êag
 & 
DRV_MAC_DUMP_FLAG_STATIC
)

1344 
ucIsSèticPª
 = 1;

1346 if(
ucIsSètic
 !
ucIsSèticPª
)

1351 if(
p°DumpTab
->
Êag
 & 
DRV_MAC_DUMP_FLAG_AGGR
)

1353 
ucIsAggrPª
 = 1;

1355 if(
ucIsAggr
 !
ucIsAggrPª
)

1361 if(0 !
p°DumpTab
->
Õ‹t
)

1363 if(
ENABLED
 =
p°RtkUˇ°
->
da_block
)

1370 if(!
ucIsAggr
)

1372 if(
p°DumpTab
->
Õ‹t
 !
P‹tPhyID2Logic
(
TOPHYID
(
ulUnô
, 
p°RtkUˇ°
->
p‹t
)))

1399 
DRV_RET_E
 
_HAL_GëBôNum
(
UINT32
 
uiMask
, UINT32 *
pBôNum
)

1401 
UINT32
 
i
;

1402 
UINT32
 
uiBôNum
 = 8 * (
uiMask
);

1404 i‡(
NULL
 =
pBôNum
)

1406  
DRV_ERR_PARA
;

1409 *
pBôNum
 = 0xFFFFFFFF;

1410 
i
 = 0; i < 
uiBôNum
; i++)

1412 i‡(
uiMask
 & (1U << 
i
))

1414 *
pBôNum
 = 
i
;

1419  
DRV_OK
;

1447 
DRV_RET_E
 
_HÆ_DumpUCa°MacE¡ry
(
UINT32
 
ulUnô
, UINT32 
ulSèπIndex
, UINT32 
ulEndIndex
)

1450 
UINT32
 
ulIndex
;

1451 
mac_dump_uˇ°_èb_t
 *
p°MacDump
;

1452 
UINT32
 
ulRe‰eshO∆y
 = 0;

1453 
πk_l2_addr_èbÀ_t
 
°RtkMacE¡ry
;

1454 
πk_l2_uˇ°Addr_t
 
°RtkMac
;

1456 if(
ulEndIndex
 <
ulSèπIndex
)

1458  
DRV_ERR_PARA
;

1461 if(
ulSèπIndex
 >
MAX_ARL_TABLE
)

1463  
DRV_ERR_PARA
;

1466 if(
ulEndIndex
 > 
MAX_ARL_TABLE
)

1468 
ulEndIndex
 = 
MAX_ARL_TABLE
;

1471 if(
ulUnô
 >
CHIP_NO
)

1473  
DRV_ERR_PARA
;

1476 
ulIndex
 = 
ulSèπIndex
; ulIndex < 
ulEndIndex
; ulIndex++)

1478 
°RtkMacE¡ry
.
ödex
 = (
πk_öt32
)
ulIndex
;

1479 if(
SW_OK
 =
πk_l2_íåy_gë
(&
°RtkMacE¡ry
))

1482 i‡(0 =(
°RtkMacE¡ry
.
mac
.
o˘ë
[0] & 0x01))

1484 
SPIN_HAL_MAC_LOCK
;

1485 
ulRe‰eshO∆y
 = 0;

1486 
p°MacDump
 = &(
_mac_uˇ°_íåy_dump
[
ulUnô
][
ulIndex
]);

1489 if(
p°MacDump
->
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
)

1491 
mem£t
(&
°RtkMac
, 0, (stRtkMac));

1492 
mem˝y
(&
°RtkMac
.
mac
, &
°RtkMacE¡ry
.mac, (stRtkMac.mac));

1493 
°RtkMac
.
cvid
 = 
°RtkMacE¡ry
.cvid;

1494 
°RtkMac
.
ivl
 = 
°RtkMacE¡ry
.ivl;

1495 
°RtkMac
.
fid
 = 
°RtkMacE¡ry
.fid;

1496 
°RtkMac
.
is_°©ic
 = stRtkMac.is_static;

1498 i‡(0 =
°RtkMacE¡ry
.
p‹tmask
)

1500 
°RtkMac
.
da_block
 = 
ENABLED
;

1504 ()
_HAL_GëBôNum
(
°RtkMacE¡ry
.
p‹tmask
, &
°RtkMac
.
p‹t
);

1505 
°RtkMac
.
da_block
 = 
DISABLED
;

1509 if(
_HÆ_Uˇ°Com∑ª
(
ulUnô
, &
°RtkMac
, 
p°MacDump
, &
ulRe‰eshO∆y
))

1511 if(!
ulRe‰eshO∆y
)

1514 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1519 
SPIN_HAL_MAC_UNLOCK
;

1526 
p°MacDump
->
Êag
 = 0;

1530 if(0 =
°RtkMacE¡ry
.
p‹tmask
)

1533 
p°MacDump
->
Õ‹t
 = 0;

1534 
p°MacDump
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1538 
UINT32
 
uiPhyId
;

1539 ()
_HAL_GëBôNum
(
°RtkMacE¡ry
.
p‹tmask
, &
uiPhyId
);

1540 
p°MacDump
->
Õ‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

1541 if((
INVALID_PORT
 !
p°MacDump
->
Õ‹t
Ë&& (
LOGIC_CPU_PORT
 !=ÖstMacDump->lport))

1543 
p°MacDump
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1547 if(
p°MacDump
->
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
)

1549 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1550 
p°MacDump
->
Êag
 = 0;

1553 
SPIN_HAL_MAC_UNLOCK
;

1559 if(
ENABLED
 =
°RtkMacE¡ry
.
is_°©ic
)

1562 
p°MacDump
->
Êag
 |
DRV_MAC_DUMP_FLAG_STATIC
;

1565 
mem˝y
(
p°MacDump
->
mac_addr
, 
°RtkMacE¡ry
.
mac
.
o˘ë
, (
mac_addªss_t
));

1566 
p°MacDump
->
vid
 = (
vœn_id_t
)
°RtkMacE¡ry
.
cvid
;

1567 if(!
ulRe‰eshO∆y
)

1570 
_HÆ_In£πUˇ°MacE¡ry
(
ulUnô
, 
ulIndex
);

1573 
SPIN_HAL_MAC_UNLOCK
;

1579 
SPIN_HAL_MAC_LOCK
;

1580 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1581 
SPIN_HAL_MAC_UNLOCK
;

1588 
SPIN_HAL_MAC_LOCK
;

1589 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1590 
SPIN_HAL_MAC_UNLOCK
;

1594  
DRV_OK
;

1612 
DRV_RET_E
 
HÆ_Re‰eshUCa°
(
UINT32
 
ulI¡îvÆ
)

1614 
UINT32
 
ulUnô
;

1617 if(
ulI¡îvÆ
 > 
MAX_ARL_TABLE
)

1619 
ulI¡îvÆ
 = 
MAX_ARL_TABLE
;

1622 if(!
ulI¡îvÆ
)

1624 
ulI¡îvÆ
 = 
DRV_MAC_DUMP_NUMBER_PER_ROLL
;

1626 if(!
ulMacDumpInôed
)

1628 
mem£t
(
_mac_uˇ°_dump_lök
, 0, (_mac_ucast_dump_link));

1629 
mem£t
(
_mac_uˇ°_íåy_dump
, 0, (
_mac_uˇ°_dump_lök
));

1630 
p°MacUˇ°DumpLökHód
 = 
NULL
;

1631 
ulMacDumpInôed
 = 1;

1634 
UnôF‹
(
ulUnô
)

1636 ()
_HÆ_DumpUCa°MacE¡ry
(
ulUnô
, 
ulMacCuºítIndex
, ulMacCuºítIndex+
ulI¡îvÆ
);

1637 
ulMacCuºítIndex
 +
ulI¡îvÆ
;

1638 if(
ulMacCuºítIndex
 >
MAX_ARL_TABLE
)

1641 
ulMacCuºítIndex
 = 0;

1645  
DRV_OK
;

1667 
DRV_RET_E
 
HÆ_GëMacUˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

1670 
mac_dump_uˇ°_èb_t
 *
p°U£rUˇ°Dump
;

1671 
UINT32
 
ulIndex
, 
cou¡
 = 0, 
unô
;

1672 
mac_dump_uˇ°_èb_t
 
°Uˇ°DumpTmp
;

1673 
UINT32
 
uiPhyId
;

1674 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

1676 if(
NULL
 =
pulCou¡Out
)

1678  
DRV_ERR_PARA
;

1681 
mem£t
(&
°Uˇ°DumpTmp
, 0, (stUcastDumpTmp));

1682 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

1685 
p°U£rUˇ°Dump
 = (
mac_dump_uˇ°_èb_t
 *)
u£rPoöãr
;

1687 *
pulCou¡Out
 = 0;

1689 
UnôF‹
(
unô
)

1691 
ulIndex
 = 0; ulIndex < 
MAX_ARL_TABLE
; ulIndex++)

1694 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulIndex
;

1695 i‡(
SW_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

1698 if(0 =(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01))

1701 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

1703 
°Uˇ°DumpTmp
.
Õ‹t
 = 0;

1704 
°Uˇ°DumpTmp
.
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1708 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

1709 i‡(!
IsVÆidPhyID
(
uiPhyId
))

1711  
DRV_ERR_UNKNOW
;

1713 
°Uˇ°DumpTmp
.
Õ‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

1714 if((
INVALID_PORT
 !
°Uˇ°DumpTmp
.
Õ‹t
Ë&& (
LOGIC_CPU_PORT
 != stUcastDumpTmp.lport))

1716 
°Uˇ°DumpTmp
.
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1726 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

1728 
°Uˇ°DumpTmp
.
Êag
 |
DRV_MAC_DUMP_FLAG_STATIC
;

1731 
mem˝y
(
°Uˇ°DumpTmp
.
mac_addr
, 
°MacE¡ry
.
mac
.
o˘ë
, (
mac_addªss_t
));

1732 
°Uˇ°DumpTmp
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

1735 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

1737 ()
c›y_to_u£r
(
p°U£rUˇ°Dump
, &
°Uˇ°DumpTmp
, (
mac_dump_uˇ°_èb_t
));

1742 ()
mem˝y
(
p°U£rUˇ°Dump
, &
°Uˇ°DumpTmp
, (
mac_dump_uˇ°_èb_t
));

1745 
p°U£rUˇ°Dump
++;

1746 
cou¡
++;

1752 *
pulCou¡Out
 = 
cou¡
;

1754  
DRV_OK
;

1776 
DRV_RET_E
 
HÆ_GëMacNextVÆidUˇ°
(
UINT32
 
uiSèπIndex
, 
mac_dump_uˇ°_èb_t
* 
p°Uˇ°E¡ry
, UINT32 *
puiCuºítIndex
)

1779 
UINT32
 
ulIndex
, 
unô
;

1780 
UINT32
 
uiPhyId
;

1781 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

1783 if(
uiSèπIndex
 >
MAX_ARL_TABLE_INDEX
)

1785  
DRV_ERR_PARA
;

1788 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

1790 
ulIndex
 = 
uiSèπIndex
; ulIndex < 
MAX_ARL_TABLE_INDEX
; ulIndex++)

1792 
unô
 = 
ulIndex
/
MAX_ARL_TABLE
;

1793 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulIndex
;

1794 i‡(
SW_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

1797 if(0 =(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01))

1800 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

1803 
p°Uˇ°E¡ry
->
Õ‹t
 = 0;

1804 
p°Uˇ°E¡ry
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1808 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

1809 i‡(!
IsVÆidPhyID
(
uiPhyId
))

1811  
DRV_ERR_UNKNOW
;

1814 
p°Uˇ°E¡ry
->
Õ‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

1815 if((
INVALID_PORT
 !
p°Uˇ°E¡ry
->
Õ‹t
Ë&& (
LOGIC_CPU_PORT
 !=ÖstUcastEntry->lport))

1817 
p°Uˇ°E¡ry
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1826 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

1829 
p°Uˇ°E¡ry
->
Êag
 |
DRV_MAC_DUMP_FLAG_STATIC
;

1832 
mem˝y
(
p°Uˇ°E¡ry
->
mac_addr
, 
°MacE¡ry
.
mac
.
o˘ë
, (
mac_addªss_t
));

1833 
p°Uˇ°E¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

1834 *
puiCuºítIndex
 = 
ulIndex
;

1836  
DRV_OK
;

1841  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

1862 
DRV_RET_E
 
HÆ_GëMacMˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

1864 
mac_mˇ°_t
 *
p°U£rMacMˇ°
;

1866 if(
NULL
 =
pulCou¡Out
)

1868  
DRV_ERR_PARA
;

1870 
p°U£rMacMˇ°
 = (
mac_mˇ°_t
 *)
u£rPoöãr
;

1872 
SPIN_HAL_MAC_LOCK
;

1873 if(
ulMacMˇ°Cou¡
)

1876 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

1879 
c›y_to_u£r
(
p°U£rMacMˇ°
, 
_mac_mˇ°_íåy_dump
, (
mac_mˇ°_t
)*
MAX_MULTICAST_ENTRY
);

1883 ()
mem˝y
(
p°U£rMacMˇ°
, 
_mac_mˇ°_íåy_dump
, (
mac_mˇ°_t
)*
MAX_MULTICAST_ENTRY
);

1887 *
pulCou¡Out
 = 
ulMacMˇ°Cou¡
;

1888 
SPIN_HAL_MAC_UNLOCK
;

1890  
DRV_OK
;

1911 
DRV_RET_E
 
HÆ_GëMacNextVÆidMˇ°
(
UINT32
 
uiSèπIndex
, 
mac_mˇ°_t
* 
p°Mˇ°E¡ry
, UINT32 *
puiCuºítIndex
)

1913 
UINT32
 
uiIndex
;

1915 if(
NULL
 =
p°Mˇ°E¡ry
)

1917  
DRV_ERR_PARA
;

1920 if(
NULL
 =
puiCuºítIndex
)

1922  
DRV_ERR_PARA
;

1925 if(
uiSèπIndex
 >
MAX_MULTICAST_ENTRY
)

1927  
DRV_ERR_PARA
;

1930 if(0 =
ulMacMˇ°Cou¡
)

1932  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

1935 
uiIndex
 = 
uiSèπIndex
; uiSèπIndex < 
MAX_MULTICAST_ENTRY
; uiStartIndex++)

1937 
SPIN_HAL_MAC_LOCK
;

1938 if(0 !
_mac_mˇ°_íåy_dump
[
uiIndex
].
tdVid
)

1940 
mem˝y
(
p°Mˇ°E¡ry
, &
_mac_mˇ°_íåy_dump
[
uiIndex
], (
mac_mˇ°_t
));

1941 *
puiCuºítIndex
 = 
uiIndex
;

1942 
SPIN_HAL_MAC_UNLOCK
;

1943  
DRV_OK
;

1945 
SPIN_HAL_MAC_UNLOCK
;

1948  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

1969 
DRV_RET_E
 
HÆ_GëMacUˇ°DumpS‹ãd
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

1971 
mac_dump_uˇ°_èb_t
 *
p°U£rUˇ°Dump
;

1972 
mac_dump_uˇ°_èb_t
 *
p°Uˇ°DumpS‹t
;

1973 
mac_dump_uˇ°_lök_t
 *
p°MacDumpLöt
;

1974 
UINT32
 
i
, 
cou¡
 = 0;

1976 if(
NULL
 =
pulCou¡Out
)

1978  
DRV_ERR_PARA
;

1982 
p°U£rUˇ°Dump
 = (
mac_dump_uˇ°_èb_t
 *)
u£rPoöãr
;

1984 
p°Uˇ°DumpS‹t
 = &(
_mac_uˇ°_íåy_dump_s‹ãd
[0]);

1985 *
pulCou¡Out
 = 0;

1987 
SPIN_HAL_MAC_LOCK
;

1988 
p°MacDumpLöt
 = 
p°MacUˇ°DumpLökHód
;

1989 
i
 = 0; i < 
MAX_ARL_TABLE
; i++)

1991 if(
NULL
 !
p°MacDumpLöt
)

1993 if(
NULL
 !
p°MacDumpLöt
->
p°MacDump
)

1995 
mem˝y
(
p°Uˇ°DumpS‹t
, 
p°MacDumpLöt
->
p°MacDump
, (
mac_dump_uˇ°_èb_t
));

1996 
cou¡
++;

1998 
p°Uˇ°DumpS‹t
++;

2000 
p°MacDumpLöt
 =Ö°MacDumpLöt->
p°MacDumpLökNext
;

2004 *
pulCou¡Out
 = 
cou¡
;

2009 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

2012 ()
c›y_to_u£r
(
p°U£rUˇ°Dump
, &(
_mac_uˇ°_íåy_dump_s‹ãd
[0]), (
mac_dump_uˇ°_èb_t
)*
cou¡
);

2016 ()
mem˝y
(
p°U£rUˇ°Dump
, &(
_mac_uˇ°_íåy_dump_s‹ãd
[0]), (
mac_dump_uˇ°_èb_t
)*
cou¡
);

2019 
SPIN_HAL_MAC_UNLOCK
;

2020 *
pulCou¡Out
 = 
cou¡
;

2022  
DRV_OK
;

2044 
DRV_RET_E
 
HÆ_SëMacTøpToCpu
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
)

2047 
p‹t_num_t
 
lgcP‹t
;

2048 
sw_îr‹_t
 
tdRtkRë
;

2049 
πk_igmp_ty≥_t
 
íRtkFømeTy≥
;

2050 
πk_å≠_igmp_a˘i⁄_t
 
íRtkA˘i⁄
;

2052 if(
¥i‹ôy
 >
QOS_MAX_INTERNAL_PRIORITY
)

2054  
DRV_ERR_PARA
;

2057 
°TøpSë
.
‰ameTy≥
)

2059 
FRAME_TRAP_TYPE_RIP
:

2060 
FRAME_TRAP_TYPE_ICMP
:

2061 
FRAME_TRAP_TYPE_ICMPV6
:

2062 
FRAME_TRAP_TYPE_ARP
:

2063  
DRV_ERR_PARA
;

2064 
FRAME_TRAP_TYPE_MLD
:

2065 
íRtkFømeTy≥
 = 
IGMP_MLD
;

2067 
FRAME_TRAP_TYPE_IGMP
:

2068 
íRtkFømeTy≥
 = 
IGMP_IPV4
;

2070 
FRAME_TRAP_TYPE_BGP
:

2071 
FRAME_TRAP_TYPE_OSPFV2
:

2072 
FRAME_TRAP_TYPE_OSPFV3
:

2073 
FRAME_TRAP_TYPE_SNMP
:

2074 
FRAME_TRAP_TYPE_SSH
:

2075 
FRAME_TRAP_TYPE_FTP
:

2076 
FRAME_TRAP_TYPE_TFTP
:

2077 
FRAME_TRAP_TYPE_TELNET
:

2078 
FRAME_TRAP_TYPE_HTTP
:

2079 
FRAME_TRAP_TYPE_HTTPS
:

2080 
FRAME_TRAP_TYPE_DHCPV6
:

2081 
FRAME_TRAP_TYPE_DHCP
:

2082 
FRAME_TRAP_TYPE_DOT1X
:

2083 
FRAME_TRAP_TYPE_BPDU
:

2085  
DRV_ERR_PARA
;

2088 
°TøpSë
.
å≠A˘i⁄
)

2090 
FRAME_TRAP_ACTION_FORWARD
:

2091 
íRtkA˘i⁄
 = 
IGMP_ACTION_FORWARD
;

2093 
FRAME_TRAP_ACTION_DROP
:

2094 
íRtkA˘i⁄
 = 
IGMP_ACTION_DROP
;

2096 
FRAME_TRAP_ACTION_TRAP2CPU
:

2097 
íRtkA˘i⁄
 = 
IGMP_ACTION_TRAP2CPU
;

2099 
FRAME_TRAP_ACTION_COPY2CPU
:

2100 
FRAME_TRAP_ACTION_TO_GUESTVLAN
:

2101 
FRAME_TRAP_ACTION_FLOOD_IN_VLAN
:

2102 
FRAME_TRAP_ACTION_FLOOD_IN_ALL_PORT
:

2103 
FRAME_TRAP_ACTION_FLOOD_IN_ROUTER_PORTS
:

2105  
DRV_ERR_PARA
;

2109 if(0 =
Õ‹t
)

2111 
LgcP‹tF‹
(
lgcP‹t
)

2113 
tdRtkRë
 = 
πk_å≠_igmpCålPktA˘i⁄_£t
(
íRtkFømeTy≥
, 
íRtkA˘i⁄
);

2114 i‡(
SW_OK
 !
tdRtkRë
)

2116  
DRV_SDK_GEN_ERROR
;

2120 if(
VALID_PORT
(
Õ‹t
))

2122 
tdRtkRë
 = 
πk_å≠_igmpCålPktA˘i⁄_£t
(
íRtkFømeTy≥
, 
íRtkA˘i⁄
);

2123 i‡(
SW_OK
 !
tdRtkRë
)

2125  
DRV_SDK_GEN_ERROR
;

2130  
DRV_ERR_PARA
;

2134  
DRV_OK
;

2155 
DRV_RET_E
 
HÆ_GëMacFödC⁄Êi˘Mac
(
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
)

2158 
mem˝y
(&
°MacOp
, &stMacOp, (stMacOp));

2159 
p°MacOp
 =ÖstMacOp;

2162  
DRV_ERR_UNKNOW
;

2184 
DRV_RET_E
 
HÆ_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
)

2186 
UINT32
 
unô
;

2187 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

2188 
Ál_fwd_cmd_t
 
A˘i⁄
;

2190 if(
uiIndex
 > 0x2f)

2192  
DRV_ERR_PARA
;

2195 if(
¥i‹ôy
 >
QOS_MAX_INTERNAL_PRIORITY
)

2197  
DRV_ERR_PARA
;

2200 
a˘i⁄
)

2202 
PASS_TYPE_CPU_ONLY
:

2203 
A˘i⁄
 = 
FAL_MAC_RDT_TO_CPU
;

2205 
PASS_TYPE_ALLPORTS
:

2206 
A˘i⁄
 = 
FAL_MAC_CPY_TO_CPU
;

2208 
PASS_TYPE_CPU_EXCLUDE
:

2209 
A˘i⁄
 = 
FAL_MAC_FRWRD
;

2211 
PASS_TYPE_DROP
:

2213 
A˘i⁄
 = 
FAL_MAC_CPY_TO_CPU
;

2216  
DRV_ERR_PARA
;

2219 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

2220 
°FdbE¡ry
.
addr
.
uc
[0] = 0x01;

2221 
°FdbE¡ry
.
addr
.
uc
[1] = 0x80;

2222 
°FdbE¡ry
.
addr
.
uc
[2] = 0xc2;

2223 
°FdbE¡ry
.
addr
.
uc
[3] = 0x00;

2224 
°FdbE¡ry
.
addr
.
uc
[4] = 0x00;

2225 
°FdbE¡ry
.
addr
.
uc
[5] = (
UINT8
)
uiIndex
;

2226 
°FdbE¡ry
.
dacmd
 = 
A˘i⁄
;

2227 
°FdbE¡ry
.
da_¥i_í
 = 
A_TRUE
;

2228 
°FdbE¡ry
.
da_queue
 = 
¥i‹ôy
;

2229 
°FdbE¡ry
.
°©ic_í
 = 
A_TRUE
;

2231 
UnôF‹
(
unô
)

2233 i‡(
SW_OK
 !
Ál_fdb_ªsv_add
(
unô
, &
°FdbE¡ry
))

2235  
DRV_SDK_GEN_ERROR
;

2239  
DRV_OK
;

2261 
DRV_RET_E
 
HÆ_GëMacByIndex
(
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 * 
p°TmpMacE¡ry
)

2264 
UINT32
 
unô
;

2265 
UINT32
 
uiPhyId
;

2266 
phy_pmask_t
 
°PhyMask
;

2267 
πk_mac_t
 
°RtkBrodMac
;

2268 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

2270 if((
ulSèπIdx
 > 
MAX_ARL_TABLE
)

2271 || (
NULL
 =
p°TmpMacE¡ry
))

2273  
DRV_ERR_PARA
;

2276 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

2277 
mem£t
(&
°RtkBrodMac
, 0xFF, (stRtkBrodMac));

2279 
UnôF‹
(
unô
)

2281 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulSèπIdx
;

2282 i‡(
SW_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

2284 
mem£t
(
p°TmpMacE¡ry
, 0, (
mac_comm⁄_t
));

2287 if(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01)

2289 
p°TmpMacE¡ry
->
ucMacTy≥
 = 
MAC_UCAST
;

2291 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

2293 
p°TmpMacE¡ry
->
p‹t
 = 0;

2297 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

2298 i‡(!
IsVÆidPhyID
(
uiPhyId
))

2300  
DRV_ERR_UNKNOW
;

2302 
p°TmpMacE¡ry
->
p‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

2303 if((
INVALID_PORT
 =
p°TmpMacE¡ry
->
p‹t
) ||

2304 (
LOGIC_CPU_PORT
 =
p°TmpMacE¡ry
->
p‹t
))

2311 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2314 
p°TmpMacE¡ry
->
ucSètic
 = 
TRUE
;

2317 
mem˝y
(
p°TmpMacE¡ry
->
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2318 
p°TmpMacE¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2320  
DRV_OK
;

2323 i‡(
memcmp
(&
°RtkBrodMac
, &
°MacE¡ry
.
mac
, (stRtkBrodMac)))

2325 
p°TmpMacE¡ry
->
ucMacTy≥
 = 
MAC_BROAD
;

2327 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2329 
p°TmpMacE¡ry
->
ucSètic
 = 
TRUE
;

2332 
mem˝y
(
p°TmpMacE¡ry
->
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2333 
p°TmpMacE¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2336 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2337 
MaskPhy2Logic
(&
°PhyMask
, &(
p°TmpMacE¡ry
->
p‹t_mask
));

2339  
DRV_OK
;

2344 
p°TmpMacE¡ry
->
ucMacTy≥
 = 
MAC_MCAST
;

2347 
p°TmpMacE¡ry
->
ucSètic
 = 
TRUE
;

2349 
mem˝y
(
p°TmpMacE¡ry
->
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2350 
p°TmpMacE¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2353 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2354 
MaskPhy2Logic
(&
°PhyMask
, &(
p°TmpMacE¡ry
->
p‹t_mask
));

2356  
DRV_OK
;

2361  
DRV_ERR_UNKNOW
;

2384 
DRV_RET_E
 
HÆ_GëMacM‹eByIndex
(
UINT32
 
ulSèπIdx
, UINT32 
ulGëCou¡
, 
ULONG
 
u£rPoöãr
, UINT32* 
pulCou¡Out
, UINT32* 
pulNextIdx
, UINT32 
ulPD©aTy≥
)

2388 
mac_comm⁄_t
 * 
p°U£rMacDump
;

2389 
UINT32
 
unô
;

2390 
UINT32
 
uiPhyId
;

2391 
UINT32
 
ulIndex
, 
ulLo›C¡
 = 0, 
ulFödCou¡
 = 0;

2392 
phy_pmask_t
 
°PhyMask
;

2393 
mac_comm⁄_t
 
°TmpMacE¡ry
;

2394 
πk_mac_t
 
°RtkBrodMac
;

2395 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

2397 if((
ulSèπIdx
 > 
MAX_ARL_TABLE
Ë|| (
ulGëCou¡
 < 1)

2398 || (
NULL
 =
pulCou¡Out
Ë|| (NULL =
pulNextIdx
))

2400  
DRV_ERR_PARA
;

2403 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

2404 
mem£t
(&
°RtkBrodMac
, 0xFF, (stRtkBrodMac));

2406 
ulLo›C¡
 = 
ulGëCou¡
;

2408 
p°U£rMacDump
 = (
mac_comm⁄_t
 *)
u£rPoöãr
;

2409 *
pulCou¡Out
 = 0;

2410 *
pulNextIdx
 = 0;

2412 
UnôF‹
(
unô
)

2414 
ulIndex
 = 
ulSèπIdx
;

2415 (
ulFödCou¡
 < 
ulLo›C¡
Ë&& (
ulIndex
 < 
MAX_ARL_TABLE
);

2416 
ulIndex
++)

2418 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulSèπIdx
;

2419 i‡(
SW_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

2421 
mem£t
(&
°TmpMacE¡ry
, 0, (
mac_comm⁄_t
));

2424 if(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01)

2426 
°TmpMacE¡ry
.
ucMacTy≥
 = 
MAC_UCAST
;

2428 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

2430 
°TmpMacE¡ry
.
p‹t
 = 0;

2434 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

2435 i‡(!
IsVÆidPhyID
(
uiPhyId
))

2437  
DRV_ERR_UNKNOW
;

2439 
°TmpMacE¡ry
.
p‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

2440 if((
INVALID_PORT
 =
°TmpMacE¡ry
.
p‹t
)

2441 || (
LOGIC_CPU_PORT
 =
°TmpMacE¡ry
.
p‹t
))

2448 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2451 
°TmpMacE¡ry
.
ucSètic
 = 
TRUE
;

2454 
mem˝y
(
°TmpMacE¡ry
.
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2455 
°TmpMacE¡ry
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2458 
°TmpMacE¡ry
.
ulL2Idx
 = 
ulIndex
;

2461 i‡(!
memcmp
(&
°RtkBrodMac
, &
°MacE¡ry
.
mac
, (stRtkBrodMac)))

2463 
°TmpMacE¡ry
.
ucMacTy≥
 = 
MAC_BROAD
;

2465 i‡(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2467 
°TmpMacE¡ry
.
ucSètic
 = 
TRUE
;

2470 
mem˝y
(
°TmpMacE¡ry
.
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2471 
°TmpMacE¡ry
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2474 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2475 
MaskPhy2Logic
(&
°PhyMask
, &(
°TmpMacE¡ry
.
p‹t_mask
));

2478 
°TmpMacE¡ry
.
ulL2Idx
 = 
ulIndex
;

2483 
°TmpMacE¡ry
.
ucMacTy≥
 = 
MAC_MCAST
;

2486 
°TmpMacE¡ry
.
ucSètic
 = 
TRUE
;

2488 
mem˝y
(
°TmpMacE¡ry
.
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2489 
°TmpMacE¡ry
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2492 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2493 
MaskPhy2Logic
(&
°PhyMask
, &(
°TmpMacE¡ry
.
p‹t_mask
));

2496 
°TmpMacE¡ry
.
ulL2Idx
 = 
ulIndex
;

2500 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

2502 ()
c›y_to_u£r
(
p°U£rMacDump
, &
°TmpMacE¡ry
, (
mac_comm⁄_t
));

2507 ()
mem˝y
(
p°U£rMacDump
, &
°TmpMacE¡ry
, (
mac_comm⁄_t
));

2510 
p°U£rMacDump
++;

2511 
ulFödCou¡
++;

2516 *
pulCou¡Out
 = 
ulFödCou¡
;

2517 *
pulNextIdx
 = 
ulIndex
;

2519  
DRV_OK
;

2539 
DRV_RET_E
 
HÆ_GëMacExa˘
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 *
p°TmpMac
)

2541 
UINT32
 
unô
;

2542 
p‹t_num_t
 
Õ‹t
;

2543 
phy_pmask_t
 
°PhyMask
;

2544 
Ál_fdb_íåy_t
 
°FdbE¡ry
;

2546 if(!
VALID_VLAN_ID
(
tdVid
))

2548  
DRV_ERR_PARA
;

2550 if(
NULL
 =
p°TmpMac
)

2552  
DRV_ERR_PARA
;

2556 
mem£t
(
p°TmpMac
, 0, (
mac_comm⁄_t
));

2557 
mem˝y
(
p°TmpMac
->
mac
, 
mac_addr
, (
mac_addªss_t
));

2558 
p°TmpMac
->
vid
 = (
vœn_id_t
)
tdVid
;

2561 
mem£t
(&
°FdbE¡ry
, 0, (stFdbEntry));

2562 
mem˝y
(
°FdbE¡ry
.
addr
.
uc
, 
mac_addr
, (
mac_addªss_t
));

2563 
°FdbE¡ry
.
fid
 = 
tdVid
;

2565 
UnôF‹
(
unô
)

2567 if(
SW_OK
 =
Ál_fdb_föd
(
unô
, &
°FdbE¡ry
))

2570 if(0 =
°FdbE¡ry
.
p‹t
.
m≠
)

2572 
p°TmpMac
->
p‹t
 = 0;

2577 
LgcP‹tF‹
(
Õ‹t
)

2579 if(
°FdbE¡ry
.
p‹t
.
m≠
 & (1UL << 
P‹tLogic2PhyP‹tId
(
Õ‹t
)))

2581 if(0 =
p°TmpMac
->
p‹t
)

2583 
p°TmpMac
->
p‹t
 = 
Õ‹t
;

2587  
DRV_ERR_MAC_ADDR_MULTPORT_EXIST
;

2591 if(0 =
p°TmpMac
->
p‹t
)

2597 if(
A_TRUE
 =
°FdbE¡ry
.
°©ic_í
)

2599 
p°TmpMac
->
ucSètic
 = 
TRUE
;

2602  
DRV_OK
;

2607 
°FdbE¡ry
.
is_mu…iˇ°
 = 
A_TRUE
;

2609 
UnôF‹
(
unô
)

2611 if(
SW_OK
 =
Ál_fdb_föd
(
unô
, &
°FdbE¡ry
))

2613 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &
°FdbE¡ry
.
p‹t
.
m≠
, (
Ál_pbmp_t
));

2614 
MaskPhy2Logic
(&
°PhyMask
, &(
p°TmpMac
->
p‹t_mask
));

2615 
p°TmpMac
->
ucSètic
 = 
TRUE
;

2616  
DRV_OK
;

2620  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

2638 
DRV_RET_E
 
HÆ_GëMˇ°Cou¡
(
UINT32
 * 
pulMˇ°Cou¡
)

2640 
SPIN_HAL_MAC_LOCK
;

2641 *
pulMˇ°Cou¡
 = 
ulMacMˇ°Cou¡
;

2642 
SPIN_HAL_MAC_UNLOCK
;

2644  
DRV_OK
;

2664 
DRV_RET_E
 
HÆ_SëMˇ°LookupMissDr›
(
UINT32
 
ulE«bÀ
)

2666 
UINT32
 
unô
;

2667 
UINT32
 
uiLP‹t
;

2668 
UINT32
 
uiPP‹t
;

2669 
a_boﬁ_t
 
°A˘i⁄
;

2671 if((
DISABLE
 !
ulE«bÀ
Ë&& (
ENABLE
 != ulEnable))

2673  
DRV_ERR_PARA
;

2676 if(
DISABLE
 =
ulE«bÀ
)

2679 
°A˘i⁄
 = 
A_FALSE
;

2685 
°A˘i⁄
 = 
A_TRUE
;

2688 
UnôF‹
(
unô
)

2690 
LgcP‹tF‹
(
uiLP‹t
)

2692 
uiPP‹t
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

2693 i‡(
INVALID_PORT
 =
uiPP‹t
)

2698 if(
SW_OK
 !
Ál_p‹t_unk_mc_fûãr_£t
(
unô
, 
uiPP‹t
, 
°A˘i⁄
))

2700  
DRV_SDK_GEN_ERROR
;

2705  
DRV_OK
;

2724 
DRV_RET_E
 
HÆ_SëUnKnowIp4Mˇ°A˘
(
MCAST_UNKNOW_ACT_E
 
íA˘Mode
)

2726 
íA˘Mode
 =ÉnActMode;

2728  
DRV_ERR_PARA
;

2749 
DRV_RET_E
 
HÆ_SëIgmpPktA˘i⁄
(
UINT32
 
ulA˘i⁄
)

2751 
ulA˘i⁄
 = ulAction;

2752  
DRV_OK
;

2756 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_mirror.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~"Ál_múr‹.h
"

79 
DRV_RET_E
 
HÆ_SëMúr‹Group
(
p‹t_num_t
 
múr‹De°P‹t
, 
logic_pmask_t
 
ögªssMask
,Üogic_pmask_à
egªssMask
)

81 
p‹t_num_t
 
Õ‹t
;

82 
phyid_t
 
phyid
;

83 
sw_îr‹_t
 
iRv
;

85 if(!
IsVÆidLgcP‹t
(
múr‹De°P‹t
))

87  
DRV_INVALID_LPORT
;

90 
phyid
 = 
P‹tLogic2PhyID
(
múr‹De°P‹t
);

91 
iRv
 = 
Ál_múr_™Æysis_p‹t_£t
(
CHIPID
(
phyid
), 
PORTID
(phyid));

92 if(
SW_OK
 !
iRv
)

94  
Eº‹Sdk2Drv
(
iRv
);

97 
LgcP‹tF‹
(
Õ‹t
)

99 
phyid
 = 
P‹tLogic2PhyID
(
Õ‹t
);

101 
iRv
 = 
Ál_múr_p‹t_ö_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
T°LgcMaskBô
(
Õ‹t
, &
ögªssMask
Ë? 
A_TRUE
 : 
A_FALSE
);

102 i‡(
SW_OK
 !
iRv
)

104  
Eº‹Sdk2Drv
(
iRv
);

106 
iRv
 = 
Ál_múr_p‹t_eg_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
T°LgcMaskBô
(
Õ‹t
, &
egªssMask
Ë? 
A_TRUE
 : 
A_FALSE
);

107 i‡(
SW_OK
 !
iRv
)

109  
Eº‹Sdk2Drv
(
iRv
);

113  
DRV_OK
;

117 
HÆ_InôMúr‹A˛GΩ
()

123 
DRV_RET_E
 
HÆ_SëMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
, 
UINT32
 *
puiMúr‹GΩId
)

125  
DRV_OK
;

129 
DRV_RET_E
 
HÆ_DñMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
)

131  
DRV_OK
;

134 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_port.c

17 #ifde‡ 
__˝lu•lus


20 
	~<löux/kî√l.h
>

21 
	~<löux/dñay.h
>

22 
	~<mw_ty≥.h
>

23 
	~"drv_pub.h
"

24 
	~"drv_ªq.h
"

25 
	~<löux/°rög.h
>

26 
	~"hÆ_comm⁄.h
"

27 
	~<löux/•ölock_ty≥s.h
>

28 
	~<löux/•ölock.h
>

29 
	~<löux/¶ab.h
>

31 
	~"Ál_p‹t_˘æ.h
"

32 
	~"Ál_p‹tvœn.h
"

33 
	~"Ál_qos.h
"

34 
	~"Ál_misc.h
"

35 
	~"Ál_Àd.h
"

57 
COMBO_PORT_CONFIG_S
 
g_°ComboP‹tCfg
[
LOGIC_PORT_NO
+1][
PORT_TYPE_ALL
];

59 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

62 
•ölock_t
 
_•ö_hÆ_p‹t_lock
 = 
SPIN_LOCK_UNLOCKED
;

75 
	#AR_MAX_PACKET_LEN
 16000

	)

76 
	#AR_NORMAL_PACKET_LEN
 1522

	)

77 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

80 
	#SPIN_HAL_PORT_LOCK
 
	`•ö_lock
(&
_•ö_hÆ_p‹t_lock
)

	)

81 
	#SPIN_HAL_PORT_UNLOCK
 
	`•ö_u∆ock
(&
_•ö_hÆ_p‹t_lock
)

	)

85 #ifde‡
RTK_PORT_DEBUG_SUPPORT


86 
	#RTK_PORT_DEBUG
 
π_log_¥ötf


	)

88 
	#RTK_PORT_DEBUG
(
fmt
,
¨g
...)

	)

110 
DRV_RET_E
 
HÆ_GëP‹tLökupTy≥
(
phyid_t
 
phyid
, 
UINT32
 *
pulLökupTy≥
)

112 
INT32
 
iRv
 = 
SW_OK
;

113 
a_boﬁ_t
 
bSètus
;

115 
UINT32
 
uiChùId
 = 0;

116 
UINT32
 
uiP‹tId
 = 0;

118 if(
NULL
 =
pulLökupTy≥
)

120  
DRV_ERR_PARA
;

123 
uiChùId
 = 
CHIPID
(
phyid
);

124 
uiP‹tId
 = 
PORTID
(
phyid
);

125 
iRv
 = 
Ál_p‹t_lök_°©us_gë
(
uiChùId
,
uiP‹tId
,&
bSètus
);

127 if((
SW_OK
 !
iRv
Ë|| (
TRUE
 !
bSètus
))

129 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_DOWN
;

130  
DRV_OK
;

134 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_COPPER_UP
;

138  
DRV_OK
;

158 
DRV_RET_E
 
HÆ_SëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPrio
)

160 
phyid_t
 
phyid
 = 0;

161 
INT32
 
iRv
 = 
SW_OK
;

163 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

165  
DRV_INVALID_LPORT
;

167 i‡(!
ISVALID_PORT_PRIORITY
(
uiPrio
))

169  
DRV_INVALID_PRIORITY_VALUE
;

172 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

173 
iRv
 = 
Ál_qos_p‹t_deÁu…_˝ri_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
uiPrio
);

174  
Eº‹Sdk2Drv
(
iRv
);

193 
DRV_RET_E
 
HÆ_SëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMdix
)

195 
INT32
 
iRv
 = 
SW_OK
;

196 
phyid_t
 
phyid
 = 0;

197 
Ál_p‹t_¸ossovî_t
 
phymdix
 = 0;

199 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

201  
DRV_INVALID_LPORT
;

203 
uiMdix
)

205 
PORT_MDI_AUTO
:

206 
phymdix
 = 
FAL_CROSSOVER_AUTO
;

208 
PORT_MDI_ACROSS
:

209 
phymdix
 = 
FAL_CROSSOVER_MDIX
;

211 
PORT_MDI_NORMAL
:

212 
phymdix
 = 
FAL_CROSSOVER_MDI
;

215  
DRV_INVALID_MDI_VALUE
;

218 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

220 
iRv
 = 
Ál_p‹t_¸ossovî_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
phymdix
);

222  
Eº‹Sdk2Drv
(
iRv
);

242 
DRV_RET_E
 
HÆ_SëP‹tE«bÀ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
)

244 
phyid_t
 
phyid
 = 0;

245 
a_boﬁ_t
 
íabÀ
 = 
A_FALSE
;

246 
sw_îr‹_t
 
iRv
 = 
SW_OK
;

248 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

250  
DRV_INVALID_LPORT
;

253 if(!
ISVALID_ADMIN_VALUE
(
uiE«bÀ
))

255  
DRV_INVALID_ADMIN_VALUE
;

258 
uiE«bÀ
)

260 
PORT_ADMIN_DISABLE
:

261 
íabÀ
 = 
A_FALSE
;

263 
PORT_ADMIN_ENABLE
:

264 
íabÀ
 = 
A_TRUE
;

267  
DRV_INVALID_ADMIN_VALUE
;

270 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

271 
iRv
 = 
Ál_p‹t_íabÀ_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íabÀ
);

272  
Eº‹Sdk2Drv
(
iRv
);

292 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiJumbo
)

294 
phyid_t
 
phyid
 = 0;

295 
INT32
 
iRv
 = 
SW_OK
;

296 
UINT32
 
uiLí
 = 0;

298 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

300  
DRV_INVALID_LPORT
;

303 if(!
ISVALID_JUMBO_VALUE
(
uiJumbo
))

305  
DRV_INVALID_JUMBO_VALUE
;

307 
uiLí
 = (
uiJumbo
 =
PORT_JUMBO_ENABLE
)? 
AR_MAX_PACKET_LEN
 : 
AR_NORMAL_PACKET_LEN
;

309 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

310 
iRv
 = 
Ál_‰ame_max_size_£t
(
CHIPID
(
phyid
), 
uiLí
);

312  
Eº‹Sdk2Drv
(
iRv
);

329 
DRV_RET_E
 
HÆ_SëCPUP‹tJumbo
(
UINT32
 
uiLí
)

331 
INT32
 
iRv
 = 
SW_OK
;

332 
uiLí
 = uiLen;

334  
Eº‹Sdk2Drv
(
iRv
);

353 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
)

355 
phyid_t
 
phyid
 = 0;

356 
UINT32
 
uiChùId
 = 0;

357 
UINT32
 
uiP‹tId
 = 0;

358 
a_boﬁ_t
 
íabÀ
 = 
A_FALSE
;

359 
INT32
 
iRv
 = 
SW_OK
;

361 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

363  
DRV_INVALID_LPORT
;

366 
uiSèã
)

368 
TRUE
:

369 
íabÀ
 = 
A_TRUE
;

371 
FALSE
:

372 
íabÀ
 = 
A_FALSE
;

375  
DRV_INVALID_STATE
;

378 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

379 
uiChùId
 = 
CHIPID
(
phyid
);

380 
uiP‹tId
 = 
PORTID
(
phyid
);

381 
iRv
 = 
Ál_p‹t_rxmac_°©us_£t
(
uiChùId
, 
uiP‹tId
, 
íabÀ
);

382 if(
SW_OK
 !
iRv
)

384  
Eº‹Sdk2Drv
(
iRv
);

386 
iRv
 = 
Ál_p‹t_txmac_°©us_£t
(
uiChùId
, 
uiP‹tId
, 
íabÀ
);

388  
Eº‹Sdk2Drv
(
iRv
);

408 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAbûôy
, UINT32 
uiP‹tTy≥
)

410 
phyid_t
 
phyid
 = 0;

411 
INT32
 
iRv
 = 
SW_OK
;

412 
UINT32
 
autﬂdv
 = 0;

414 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

416  
DRV_INVALID_LPORT
;

418 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

420  
DRV_ERR_PARA
;

423 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

425 if(
uiAbûôy
 & 
PORT_ABIL_10MB_HD
){

426 
autﬂdv
 |
FAL_PHY_ADV_10T_HD
;

429 if(
uiAbûôy
 & 
PORT_ABIL_10MB_FD
){

430 
autﬂdv
 |
FAL_PHY_ADV_10T_FD
;

433 if(
uiAbûôy
 & 
PORT_ABIL_100MB_HD
){

434 
autﬂdv
 |
FAL_PHY_ADV_100TX_HD
;

437 if(
uiAbûôy
 & 
PORT_ABIL_100MB_FD
){

438 
autﬂdv
 |
FAL_PHY_ADV_100TX_FD
;

445 if(
uiAbûôy
 & 
PORT_ABIL_1000MB_FD
){

446 
autﬂdv
 |
FAL_PHY_ADV_1000T_FD
;

451 if(
uiAbûôy
 & 
PORT_ABIL_PAUSE_TX
){

452 
autﬂdv
 |
FAL_PHY_ADV_PAUSE
;

456 if(
uiAbûôy
 & 
PORT_ABIL_PAUSE_RX
){

457 
autﬂdv
 |
FAL_PHY_ADV_ASY_PAUSE
;

460 
iRv
 = 
Ál_p‹t_aut⁄eg_adv_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
autﬂdv
);

462  
Eº‹Sdk2Drv
(
iRv
);

482 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAut⁄
, UINT32 
uiP‹tTy≥
)

484 
phyid_t
 
phyid
 = 0;

485 
INT32
 
iRv
 = 
SW_OK
;

487 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

489  
DRV_INVALID_LPORT
;

492 
uiP‹tTy≥
= uiPortType;

494 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

495 
uiAut⁄
)

497 
TRUE
:

498 
iRv
 = 
Ál_p‹t_aut⁄eg_íabÀ
(
CHIPID
(
phyid
), 
PORTID
(phyid));

500 
FALSE
:

501 
iRv
 = 
Ál_p‹t_aut⁄eg_dißbÀ
(
CHIPID
(
phyid
), 
PORTID
(phyid));

504  
DRV_INVALID_STATE
;

507  
Eº‹Sdk2Drv
(
iRv
);

528 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
, UINT32 
uiP‹tTy≥
)

530 
phyid_t
 
phyid
 = 0;

531 
UINT32
 
uiChùId
 = 0;

532 
UINT32
 
uiP‹tId
 = 0;

533 
INT32
 
iRv
 = 
SW_OK
;

534 
Ál_p‹t_•ìd_t
 
S≥ed
 = 
FAL_SPEED_10
;

536 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

538  
DRV_INVALID_LPORT
;

541 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

543  
DRV_ERR_PARA
;

546 
uiS≥ed
)

548 
PORT_SPEED_10
:

549 
S≥ed
 = 
FAL_SPEED_10
;

551 
PORT_SPEED_100
:

552 
S≥ed
 = 
FAL_SPEED_100
;

554 
PORT_SPEED_1000
:

555 
S≥ed
 = 
FAL_SPEED_1000
;

558  
DRV_INVALID_SPEED_VALUE
;

561 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

562 
uiChùId
 = 
CHIPID
(
phyid
);

563 
uiP‹tId
 = 
PORTID
(
phyid
);

565 
iRv
 = 
Ál_p‹t_•ìd_£t
(
uiChùId
, 
uiP‹tId
, 
S≥ed
);

567  
Eº‹Sdk2Drv
(
iRv
);

589 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
, UINT32 
uiP‹tTy≥
)

591 
phyid_t
 
phyid
 = 0;

592 
UINT32
 
uiChùId
 = 0;

593 
UINT32
 
uiP‹tId
 = 0;

594 
INT32
 
iRv
 = 
SW_OK
;

595 
Ál_p‹t_du∂ex_t
 
eDu∂ex
 = 
FAL_HALF_DUPLEX
;

597 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

599  
DRV_INVALID_LPORT
;

602 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

604  
DRV_ERR_PARA
;

607 
uiDu∂ex
)

609 
PORT_DUPLEX_FULL
:

610 
eDu∂ex
 = 
FAL_FULL_DUPLEX
;

612 
PORT_DUPLEX_HALF
:

613 
eDu∂ex
 = 
FAL_HALF_DUPLEX
;

616  
DRV_INVALID_DUPLEX_VALUE
;

619 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

620 
uiChùId
 = 
CHIPID
(
phyid
);

621 
uiP‹tId
 = 
PORTID
(
phyid
);

623 
iRv
 = 
Ál_p‹t_du∂ex_£t
(
uiChùId
, 
uiP‹tId
, 
eDu∂ex
);

625  
Eº‹Sdk2Drv
(
iRv
);

650 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPau£Tx
, UINT32 
uiPau£Rx
)

652 
phyid_t
 
phyid
 = 0;

653 
a_boﬁ_t
 
íabÀ
 = 
A_FALSE
;

654 
INT32
 
iRv
 = 
SW_OK
;

656 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

658  
DRV_INVALID_LPORT
;

661 if((
TRUE
 =
uiPau£Tx
Ë&& (TRUE =
uiPau£Rx
))

663 
íabÀ
 = 
A_TRUE
;

667 
íabÀ
 = 
A_FALSE
;

670 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

671 
iRv
 = 
Ál_p‹t_Êow˘æ_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íabÀ
);

673 if(
SW_OK
 =
iRv
)

675 
iRv
 = 
Ál_p‹t_Êow˘æ_f‹˚mode_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íabÀ
);

678  
Eº‹Sdk2Drv
(
iRv
);

697 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p°P‹tMask
)

699 
p‹t_num_t
 
lgcP‹t
 = 0;

700 
phyid_t
 
phyid
 = 0;

701 
logic_pmask_t
 
°TmpLogicMask
;

702 
phy_pmask_t
 
°PhyMask
;

703 
phy_pmask_t
 
°AŒPhyMask
;

704 
INT32
 
iRv
 = 
SW_OK
;

706 if(
NULL
 =
p°P‹tMask
)

708  
DRV_ERR_PARA
;

711 
CÃLgcMaskAŒ
(&
°TmpLogicMask
);

712 
CÃPhyMaskAŒ
(&
°PhyMask
);

713 
SëPhyMaskAŒ
(&
°AŒPhyMask
);

716 
LgcP‹tF‹
(
lgcP‹t
)

718 if(!
T°LgcMaskBô
(
lgcP‹t
, 
p°P‹tMask
))

720 
SëLgcMaskBô
(
lgcP‹t
, &
°TmpLogicMask
);

724 
MaskLogic2Phy
(&
°TmpLogicMask
, &
°PhyMask
);

725 
PhyMaskAddCpuP‹t
(&
°PhyMask
);

726 
PhyMaskAddSèckP‹t
(&
°PhyMask
);

728 
LgcP‹tF‹
(
lgcP‹t
)

730 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

732 if(
T°LgcMaskBô
(
lgcP‹t
, 
p°P‹tMask
))

734 
iRv
 = 
Ál_p‹tvœn_membî_upd©e
(
CHIPID
(
phyid
), 
PORTID
’hyid),
CHIPNMASK
(CHIPID’hyid), &
°PhyMask
));

735 if(
iRv
 !
SW_OK
)

737  
Eº‹Sdk2Drv
(
iRv
);

742 
iRv
 = 
Ál_p‹tvœn_membî_upd©e
(
CHIPID
(
phyid
), 
PORTID
’hyid),
CHIPNMASK
(CHIPID’hyid), &
°AŒPhyMask
));

743 if(
iRv
 !
SW_OK
)

745  
Eº‹Sdk2Drv
(
iRv
);

750  
DRV_OK
;

770 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMedium
)

772  
DRV_ERR_UNKNOW
;

790 
UINT32
 
HÆ_GëP‹tTy≥
(
p‹t_num_t
 
lgcP‹t
)

792  
DRV_ERR_UNKNOW
;

813 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMedium
)

815  
DRV_ERR_UNKNOW
;

835 
DRV_RET_E
 
HÆ_GëP‹tCuºítLök
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLök
)

837 
phyid_t
 
phyid
 = 0;

838 
a_boﬁ_t
 
bSètus
;

840 
INT32
 
iRv
 = 
SW_OK
;

842 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

844  
DRV_INVALID_LPORT
;

846 if(
puiLök
 =
NULL
)

848  
DRV_ERR_PARA
;

850 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

851 
iRv

Ál_p‹t_lök_°©us_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),&
bSètus
);

853 if(
iRv
 =
SW_OK
)

855 if(
TRUE
 ==
bSètus
)

857 *
puiLök
=
PORT_LINK_UP
;

861 *
puiLök
=
PORT_LINK_DOWN
;

865  
Eº‹Sdk2Drv
(
iRv
);

884 
DRV_RET_E
 
HÆ_GëP‹tLökMask
(
logic_pmask_t
 *
p°P‹tMask
)

886 
p‹t_num_t
 
uiP‹t
;

887 
phyid_t
 
phyid
 = 0;

888 
a_boﬁ_t
 
bSètus
;

889 
INT32
 
iRv
 = 
SW_OK
;

891 if(
NULL
 =
p°P‹tMask
)

893  
DRV_ERR_PARA
;

895 
LgcP‹tF‹
(
uiP‹t
)

897 
phyid
 = 
P‹tLogic2PhyID
(
uiP‹t
);

898 
iRv
 = 
Ál_p‹t_lök_°©us_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),&
bSètus
);

899 if(
iRv
 =
SW_OK
)

901 if(
TRUE
==
bSètus
)

903 
SëLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

907 
CÃLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

912  
Eº‹Sdk2Drv
(
iRv
);

915  
DRV_OK
;

933 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p°P‹tMask
)

936  
DRV_OK
;

956 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiAbûôy
, UINT32 
uiP‹tTy≥
)

958 
phyid_t
 
phyid
 = 0;

959 
INT32
 
iRv
 = 
SW_OK
;

960 
UINT32
 
uiAbûôy
 = 0;

962 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

964  
DRV_INVALID_LPORT
;

966 if(
puiAbûôy
 =
NULL
)

968  
DRV_ERR_PARA
;

970 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

972  
DRV_ERR_PARA
;

975 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

976 
iRv
 = 
Ál_p‹t_aut⁄eg_adv_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),&
uiAbûôy
);

977 if(
SW_OK
 !
iRv
)

979  
Eº‹Sdk2Drv
(
iRv
);

982 *
puiAbûôy
 = 0;

983 if(
FAL_PHY_ADV_10T_HD
 & 
uiAbûôy
)

985 *
puiAbûôy
 |
PORT_ABIL_10MB_HD
;

988 if(
FAL_PHY_ADV_10T_FD
 & 
uiAbûôy
)

990 *
puiAbûôy
 |
PORT_ABIL_10MB_FD
;

993 if(
FAL_PHY_ADV_100TX_HD
 & 
uiAbûôy
)

995 *
puiAbûôy
 |
PORT_ABIL_100MB_HD
;

998 if(
FAL_PHY_ADV_100TX_FD
 & 
uiAbûôy
)

1000 *
puiAbûôy
 |
PORT_ABIL_100MB_HD
;

1003 if(
FAL_PHY_ADV_1000T_FD
 & 
uiAbûôy
)

1005 *
puiAbûôy
 |
PORT_ABIL_1000MB_FD
;

1008 if(
FAL_PHY_ADV_PAUSE
 & 
uiAbûôy
)

1010 *
puiAbûôy
 |
PORT_ABIL_PAUSE_TX
;

1013 if(
FAL_PHY_ADV_ASY_PAUSE
 & 
uiAbûôy
)

1015 *
puiAbûôy
 |
PORT_ABIL_PAUSE_RX
;

1018  
DRV_OK
;

1037 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
)

1039 
phyid_t
 
phyid
 = 0;

1040 
INT32
 
iRv
 = 
SW_OK
;

1041 
Ál_p‹t_•ìd_t
 
íS≥ed
 = 0;

1043 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1045  
DRV_INVALID_LPORT
;

1047 if(
NULL
 =
puiS≥ed
)

1049  
DRV_ERR_PARA
;

1051 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1052 
iRv
 = 
Ál_p‹t_•ìd_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
íS≥ed
);

1054 if(
SW_OK
 =
iRv
)

1056 
íS≥ed
)

1058 
FAL_SPEED_10
:

1060 *
puiS≥ed
=
PORT_SPEED_10
;

1063 
FAL_SPEED_100
:

1065 *
puiS≥ed
=
PORT_SPEED_100
;

1068 
FAL_SPEED_1000
:

1070 *
puiS≥ed
=
PORT_SPEED_1000
;

1074  
DRV_SDK_GEN_ERROR
;

1078  
Eº‹Sdk2Drv
(
iRv
);

1097 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
)

1099 
phyid_t
 
phyid
 = 0;

1100 
INT32
 
iRv
 = 
SW_OK
;

1101 
Ál_p‹t_du∂ex_t
 
íDu∂ex
 = 0;

1103 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1105  
DRV_INVALID_LPORT
;

1107 if(
puiDu∂ex
 =
NULL
)

1109  
DRV_ERR_PARA
;

1112 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1113 
iRv
 = 
Ál_p‹t_du∂ex_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
íDu∂ex
);

1114 if(
SW_OK
 =
iRv
)

1116 
íDu∂ex
)

1118 
FAL_HALF_DUPLEX
:

1120 *
puiDu∂ex
=
PORT_DUPLEX_HALF
;

1123 
FAL_FULL_DUPLEX
:

1125 *
puiDu∂ex
=
PORT_DUPLEX_FULL
;

1129  
DRV_SDK_GEN_ERROR
;

1133  
Eº‹Sdk2Drv
(
iRv
);

1152 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
)

1154 
phyid_t
 
phyid
 = 0;

1155 
Ál_p‹t_¸ossovî_t
 
phyMdix
 = 0;

1156 
INT32
 
iRv
 = 
SW_OK
;

1158 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1160  
DRV_INVALID_LPORT
;

1163 if(
puiMdix
 =
NULL
)

1165  
DRV_ERR_PARA
;

1168 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1170 
iRv
 = 
Ál_p‹t_¸ossovî_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
phyMdix
);

1172 if(
SW_OK
 =
iRv
)

1174 
phyMdix
)

1176 
FAL_CROSSOVER_AUTO
:

1177 *
puiMdix
 = 
PORT_MDI_AUTO
;

1179 
FAL_CROSSOVER_MDIX
:

1180 *
puiMdix
 = 
PORT_MDI_ACROSS
;

1182 
FAL_CROSSOVER_MDI
:

1183 *
puiMdix
 = 
PORT_MDI_NORMAL
;

1186  
DRV_INVALID_MDI_VALUE
;

1190  
Eº‹Sdk2Drv
(
iRv
);

1210 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiPrio
)

1212 
phyid_t
 
phyid
 = 0;

1213 
UINT32
 
uiPrio
 = 0;

1214 
INT32
 
iRv
 = 
SW_OK
;

1216 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1218  
DRV_INVALID_LPORT
;

1220 if(
puiPrio
 =
NULL
)

1222  
DRV_ERR_PARA
;

1225 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1226 
iRv
 = 
Ál_qos_p‹t_deÁu…_˝ri_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
uiPrio
);

1227 if(
iRv
 =
SW_OK
)

1229 *
puiPrio
 = 
uiPrio
;

1232  
Eº‹Sdk2Drv
(
iRv
);

1251 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiFlow˘æ
)

1253 
phyid_t
 
phyid
 = 0;

1254 
INT32
 
iRv
 = 
SW_OK
;

1255 
a_boﬁ_t
 
íabÀ
 = 
A_FALSE
;

1257 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1259  
DRV_INVALID_LPORT
;

1261 if(
puiFlow˘æ
 =
NULL
)

1263  
DRV_ERR_PARA
;

1266 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1267 
iRv
 = 
Ál_p‹t_Êow˘æ_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),&
íabÀ
);

1268 if(
iRv
 =
SW_OK
)

1270 if(
íabÀ
 =
A_FALSE
)

1272 *
puiFlow˘æ
 = 
PORT_FLOWCTRL_DISABLE
;

1274 if(
íabÀ
 =
A_TRUE
)

1276 *
puiFlow˘æ
 = 
PORT_FLOWCTRL_ENABLE
;

1280 
iRv
 = 
DRV_SDK_GEN_ERROR
;

1283  
Eº‹Sdk2Drv
(
iRv
);

1302 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiJumbo
)

1304 
phyid_t
 
phyid
 = 0;

1305 
INT32
 
iRv
 = 
SW_OK
;

1306 
UINT32
 
ulLí
 = 0;

1308 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1310  
DRV_INVALID_LPORT
;

1312 if(
puiJumbo
 =
NULL
)

1314  
DRV_ERR_PARA
;

1317 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1318 
iRv
 = 
Ál_‰ame_max_size_gë
(
CHIPID
(
phyid
),&
ulLí
);

1319 if(
SW_OK
 =
iRv
)

1321 if(
AR_NORMAL_PACKET_LEN
 !
ulLí
)

1323 *
puiJumbo
 = 
PORT_JUMBO_ENABLE
;

1327 *
puiJumbo
 = 
PORT_JUMBO_DISABLE
;

1330  
Eº‹Sdk2Drv
(
iRv
);

1349 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLí
)

1351 
phyid_t
 
phyid
 = 0;

1352 
INT32
 
iRv
 = 
SW_OK
;

1353 
UINT32
 
ulLí
 = 0;

1355 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1357  
DRV_INVALID_LPORT
;

1359 if(
puiLí
 =
NULL
)

1361  
DRV_ERR_PARA
;

1364 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1365 
iRv
 = 
Ál_‰ame_max_size_gë
(
CHIPID
(
phyid
),&
ulLí
);

1366 if(
SW_OK
 =
iRv
)

1368 *
puiLí
 = 
ulLí
;

1372 *
puiLí
 = 0;

1375  
Eº‹Sdk2Drv
(
iRv
);

1394 
DRV_RET_E
 
HÆ_P‹tLedInô
()

1396 
Àd_˘æ_∑âîn_t
 
phy4_Àd0_∑âîn_bak
, 
phy4_Àd1_∑âîn_bak
, 
phy4_Àd2_∑âîn_bak
, 
phy4_Àd0_∑âîn
, 
phy4_Àd1_∑âîn
, 
phy4_Àd2_∑âîn
;

1397 
Àd_˘æ_∑âîn_t
 
phy0_3_Àd0_∑âîn_bak
, 
phy0_3_Àd1_∑âîn_bak
, 
phy0_3_Àd2_∑âîn_bak
, 
phy0_3_Àd0_∑âîn
, 
phy0_3_Àd1_∑âîn
, 
phy0_3_Àd2_∑âîn
;

1399 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn_bak
);

1400 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn_bak
);

1401 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn_bak
);

1402 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn_bak
);

1403 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn_bak
);

1404 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn_bak
);

1406 
phy4_Àd0_∑âîn
 = 
phy4_Àd0_∑âîn_bak
;

1407 
phy4_Àd1_∑âîn
 = 
phy4_Àd1_∑âîn_bak
;

1408 
phy4_Àd2_∑âîn
 = 
phy4_Àd2_∑âîn_bak
;

1409 
phy0_3_Àd0_∑âîn
 = 
phy0_3_Àd0_∑âîn_bak
;

1410 
phy0_3_Àd1_∑âîn
 = 
phy0_3_Àd1_∑âîn_bak
;

1411 
phy0_3_Àd2_∑âîn
 = 
phy0_3_Àd2_∑âîn_bak
;

1413 
phy4_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

1414 
phy4_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

1415 
phy4_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

1416 
phy0_3_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

1417 
phy0_3_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

1418 
phy0_3_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

1419 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn
);

1420 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn
);

1421 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn
);

1422 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn
);

1423 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn
);

1424 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn
);

1425 
mdñay
(500);

1427 
phy4_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

1428 
phy4_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

1429 
phy4_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

1430 
phy0_3_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

1431 
phy0_3_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

1432 
phy0_3_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

1433 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn
);

1434 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn
);

1435 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn
);

1436 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn
);

1437 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn
);

1438 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn
);

1439 
mdñay
(500);

1441 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn_bak
);

1442 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn_bak
);

1443 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn_bak
);

1444 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn_bak
);

1445 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn_bak
);

1446 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn_bak
);

1447  
DRV_OK
;

1467 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
)

1469 
INT32
 
iRv
 = 
SW_OK
;

1471  
Eº‹Sdk2Drv
(
iRv
);

1490 
DRV_RET_E
 
HÆ_SëI¡î«lLo›back
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
)

1492 
INT32
 
iRv
 = 
SW_OK
;

1494  
Eº‹Sdk2Drv
(
iRv
);

1500 
DRV_RET_E
 
HÆ_SëPhyReg
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
ªg
, UINT32 
vÆue
)

1502 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

1503 
UINT32
 
qˇ_phy_id
;

1504 
sw_îr‹_t
 
qˇ_sw_îr
;

1506 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1508  
DRV_INVALID_LPORT
;

1511 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1512 
h¶_p‹t_¥›_gë_phyid
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
qˇ_phy_id
);

1513 
qˇ_sw_îr
 = 
Ál_phy_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
qˇ_phy_id
, 
ªg
, 
vÆue
);

1514  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1517 
DRV_RET_E
 
HÆ_GëPhyReg
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
* 
p_vÆue
, UINT32 
ªg
)

1519 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

1520 
UINT32
 
qˇ_phy_id
;

1521 
sw_îr‹_t
 
qˇ_sw_îr
;

1522 
UINT16
 
ªg_vÆue
;

1524 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1526  
DRV_INVALID_LPORT
;

1529 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1530 
h¶_p‹t_¥›_gë_phyid
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
qˇ_phy_id
);

1531 
qˇ_sw_îr
 = 
Ál_phy_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
qˇ_phy_id
, 
ªg
, &
ªg_vÆue
);

1532 if(
SW_OK
 =
qˇ_sw_îr
)

1534 *
p_vÆue
 = (
UINT32
)
ªg_vÆue
;

1536  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1539 
DRV_RET_E
 
HÆ_SëP‹tMdix
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
mdix
)

1541 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

1542 
UINT32
 
qˇ_phy_mdix
;

1543 
sw_îr‹_t
 
qˇ_sw_îr
;

1545 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1547  
DRV_INVALID_LPORT
;

1550 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1551 
mdix
)

1553 
PORT_MDI_AUTO
:

1554 
qˇ_phy_mdix
 = qca_phy_mdix;

1556 
PORT_MDI_ACROSS
:

1557 
qˇ_phy_mdix
 = qca_phy_mdix;

1559 
PORT_MDI_NORMAL
:

1560 
qˇ_phy_mdix
 = qca_phy_mdix;

1563  
DRV_INVALID_MDI_VALUE
;

1567 
qˇ_sw_îr
 = 
SW_OK
;

1568  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1571 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_mdix
)

1573 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

1574 
UINT32
 
qˇ_phy_mdix
;

1575 
sw_îr‹_t
 
qˇ_sw_îr
;

1577 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1579  
DRV_INVALID_LPORT
;

1582 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1585 
qˇ_sw_îr
 = 
SW_OK
;

1586 if(
SW_OK
 !
qˇ_sw_îr
)

1588  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1590 
qˇ_phy_mdix
)

1593 *
p_mdix
 = 
PORT_MDI_AUTO
;

1596 *
p_mdix
 = 
PORT_MDI_ACROSS
;

1599 *
p_mdix
 = 
PORT_MDI_NORMAL
;

1602  
DRV_INVALID_MDI_VALUE
;

1604  
DRV_OK
;

1607 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
•ìd
, UINT32 
p‹t_ty≥
)

1609 
phyid_t
 
qˇ_sw_p‹t_id
;

1610 
UINT32
 
ﬁd_abûôy
, 
√w_abûôy
;

1611 
sw_îr‹_t
 
qˇ_sw_îr
;

1613 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1615  
DRV_INVALID_LPORT
;

1618 
p‹t_ty≥
;

1619 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1620 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
ﬁd_abûôy
);

1621 if(
SW_OK
 !
qˇ_sw_îr
)

1623  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1626 
√w_abûôy
 = 0;

1627 if(
FAL_PHY_ADV_PAUSE
 & 
ﬁd_abûôy
)

1629 
√w_abûôy
 |
FAL_PHY_ADV_PAUSE
;

1632 if(
FAL_PHY_ADV_ASY_PAUSE
 & 
ﬁd_abûôy
)

1634 
√w_abûôy
 |
FAL_PHY_ADV_ASY_PAUSE
;

1637 
•ìd
)

1639 
PORT_SPEED_10
:

1640 
√w_abûôy
 |
FAL_PHY_ADV_10T_HD
 | 
FAL_PHY_ADV_10T_FD
;

1642 
PORT_SPEED_100
:

1643 
√w_abûôy
 |
FAL_PHY_ADV_100TX_HD
 | 
FAL_PHY_ADV_100TX_FD
;

1645 
PORT_SPEED_1000
:

1646 
√w_abûôy
 |
FAL_PHY_ADV_1000T_FD
;

1649  
DRV_INVALID_SPEED_VALUE
;

1651 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
√w_abûôy
);

1652  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1655 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_•ìd
)

1657 
phyid_t
 
qˇ_sw_p‹t_id
;

1658 
Ál_p‹t_•ìd_t
 
qˇ_sw_p‹t_•ìd
;

1659 
sw_îr‹_t
 
qˇ_sw_îr
;

1661 
ASSERT
(!
p_•ìd
);

1662 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1664  
DRV_INVALID_LPORT
;

1667 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1668 
qˇ_sw_îr
 = 
Ál_p‹t_•ìd_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
qˇ_sw_p‹t_•ìd
);

1669 if(
SW_OK
 !
qˇ_sw_îr
)

1671  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1674 
qˇ_sw_p‹t_•ìd
)

1676 
FAL_SPEED_10
:

1677 *
p_•ìd
 = 
PORT_SPEED_10
;

1679 
FAL_SPEED_100
:

1680 *
p_•ìd
 = 
PORT_SPEED_100
;

1682 
FAL_SPEED_1000
:

1683 *
p_•ìd
 = 
PORT_SPEED_1000
;

1686 
qˇ_sw_hÆ_dbg
("\n%s@%d Unknow¿p‹à•ìd %d", 
__FILE__
, 
__LINE__
, 
qˇ_sw_p‹t_•ìd
);

1687  
DRV_INVALID_SPEED_VALUE
;

1689  
DRV_OK
;

1692 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
du∂ex
, UINT32 
p‹t_ty≥
)

1694 
phyid_t
 
qˇ_sw_p‹t_id
;

1695 
UINT32
 
ﬁd_abûôy
, 
√w_abûôy
;

1696 
sw_îr‹_t
 
qˇ_sw_îr
;

1698 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1700  
DRV_INVALID_LPORT
;

1703 
p‹t_ty≥
;

1704 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1705 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
ﬁd_abûôy
);

1706 if(
SW_OK
 !
qˇ_sw_îr
)

1708  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1711 
√w_abûôy
 = 0;

1712 if(
FAL_PHY_ADV_PAUSE
 & 
ﬁd_abûôy
)

1714 
√w_abûôy
 |
FAL_PHY_ADV_PAUSE
;

1717 if(
FAL_PHY_ADV_ASY_PAUSE
 & 
ﬁd_abûôy
)

1719 
√w_abûôy
 |
FAL_PHY_ADV_ASY_PAUSE
;

1722 
du∂ex
)

1724 
PORT_DUPLEX_HALF
:

1725 
√w_abûôy
 |
FAL_PHY_ADV_10T_HD
 | 
FAL_PHY_ADV_100TX_HD
;

1727 
PORT_DUPLEX_FULL
:

1728 
√w_abûôy
 |
FAL_PHY_ADV_10T_FD
 | 
FAL_PHY_ADV_100TX_FD
 | 
FAL_PHY_ADV_1000T_FD
;

1731  
DRV_INVALID_DUPLEX_VALUE
;

1733 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
√w_abûôy
);

1734  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1737 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_du∂ex
)

1739 
phyid_t
 
qˇ_sw_p‹t_id
;

1740 
Ál_p‹t_•ìd_t
 
qˇ_sw_p‹t_du∂ex
;

1741 
sw_îr‹_t
 
qˇ_sw_îr
;

1743 
ASSERT
(!
p_du∂ex
);

1744 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1746  
DRV_INVALID_LPORT
;

1750 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1751 
qˇ_sw_îr
 = 
Ál_p‹t_•ìd_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
qˇ_sw_p‹t_du∂ex
);

1752 if(
SW_OK
 !
qˇ_sw_îr
)

1754  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1757 
qˇ_sw_p‹t_du∂ex
)

1759 
FAL_FULL_DUPLEX
:

1760 *
p_du∂ex
 = 
PORT_DUPLEX_FULL
;

1762 
FAL_HALF_DUPLEX
:

1763 *
p_du∂ex
 = 
PORT_DUPLEX_HALF
;

1766 
qˇ_sw_hÆ_dbg
("\n%s@%d Unknow¿p‹àdu∂ex %d", 
__FILE__
, 
__LINE__
, 
qˇ_sw_p‹t_du∂ex
);

1767  
DRV_INVALID_DUPLEX_VALUE
;

1769  
DRV_OK
;

1772 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
∑u£_tx
, UINT32 
∑u£_rx
)

1774 
phyid_t
 
qˇ_sw_p‹t_id
;

1775 
boﬁ
 
Êow_˘æ_íabÀ
;

1776 
sw_îr‹_t
 
qˇ_sw_îr
;

1778 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1780  
DRV_INVALID_LPORT
;

1783 if((
TRUE
 =
∑u£_tx
Ë&& (TRUE =
∑u£_rx
))

1785 
Êow_˘æ_íabÀ
 = 
TRUE
;

1789 
Êow_˘æ_íabÀ
 = 
FALSE
;

1793 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1794 
qˇ_sw_îr
 = 
Ál_p‹t_Êow˘æ_f‹˚mode_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
TRUE
);

1795 if(
SW_OK
 !
qˇ_sw_îr
)

1797  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1800 
qˇ_sw_îr
 = 
Ál_p‹t_Êow˘æ_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
Êow_˘æ_íabÀ
);

1801  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1804 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_Êow_˘æ
)

1806 
phyid_t
 
qˇ_sw_p‹t_id
;

1807 
boﬁ
 
Êow_˘æ
;

1808 
sw_îr‹_t
 
qˇ_sw_îr
;

1810 
ASSERT
(
p_Êow_˘æ
);

1811 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1813  
DRV_INVALID_LPORT
;

1816 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1817 
qˇ_sw_îr
 = 
Ál_p‹t_Êow˘æ_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
Êow_˘æ
);

1818 if(
SW_OK
 =
qˇ_sw_îr
)

1820 if(
TRUE
 =
Êow_˘æ
)

1822 *
p_Êow_˘æ
 = 
PORT_FLOWCTRL_ENABLE
;

1826 *
p_Êow_˘æ
 = 
PORT_FLOWCTRL_DISABLE
;

1829  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1832 
DRV_RET_E
 
HÆ_SëP‹tSpdlx
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
•ìd_du∂ex
)

1834 
phyid_t
 
qˇ_sw_p‹t_id
;

1835 
UINT32
 
ﬁd_abûôy
, 
√w_abûôy
;

1836 
sw_îr‹_t
 
qˇ_sw_îr
;

1838 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1840  
DRV_INVALID_LPORT
;

1843 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1844 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
ﬁd_abûôy
);

1845 if(
SW_OK
 !
qˇ_sw_îr
)

1847  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1850 
√w_abûôy
 = 0;

1851 if(
FAL_PHY_ADV_PAUSE
 & 
ﬁd_abûôy
)

1853 
√w_abûôy
 |
FAL_PHY_ADV_PAUSE
;

1856 if(
FAL_PHY_ADV_ASY_PAUSE
 & 
ﬁd_abûôy
)

1858 
√w_abûôy
 |
FAL_PHY_ADV_ASY_PAUSE
;

1861 
•ìd_du∂ex
)

1863 
PORT_10HALF
:

1864 
√w_abûôy
 |
FAL_PHY_ADV_10T_HD
;

1866 
PORT_10FULL
:

1867 
√w_abûôy
 |
FAL_PHY_ADV_10T_FD
;

1869 
PORT_10AUTO
:

1870 
√w_abûôy
 |
FAL_PHY_ADV_10T_HD
 | 
FAL_PHY_ADV_10T_FD
;

1872 
PORT_100HALF
:

1873 
√w_abûôy
 |
FAL_PHY_ADV_100TX_HD
;

1875 
PORT_100FULL
:

1876 
√w_abûôy
 |
FAL_PHY_ADV_100TX_FD
;

1878 
PORT_100AUTO
:

1879 
√w_abûôy
 |
FAL_PHY_ADV_100TX_HD
 | 
FAL_PHY_ADV_100TX_FD
;

1881 
PORT_1000FULL
:

1882 
PORT_1000AUTO
:

1883 
√w_abûôy
 |
FAL_PHY_ADV_1000T_FD
;

1885 
PORT_AUTOHALF
:

1886 
√w_abûôy
 |
FAL_PHY_ADV_10T_HD
 | 
FAL_PHY_ADV_100TX_HD
;

1888 
PORT_AUTOFULL
:

1889 
√w_abûôy
 |
FAL_PHY_ADV_10T_FD
 | 
FAL_PHY_ADV_100TX_FD
 | 
FAL_PHY_ADV_1000T_FD
;

1891 
PORT_AUTOAUTO
:

1892 
√w_abûôy
 |
FAL_PHY_ADV_10T_HD
 | 
FAL_PHY_ADV_10T_FD
 | 
FAL_PHY_ADV_100TX_HD
 | 
FAL_PHY_ADV_100TX_FD
 | 
FAL_PHY_ADV_1000T_FD
;

1895  
DRV_INVALID_SPDUP_VALUE
;

1897 
g_•ìd_du∂ex
[
logiˇl_p‹t
] = 
•ìd_du∂ex
;

1898 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
√w_abûôy
);

1899  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1902 
DRV_RET_E
 
HÆ_GëSpdlxSë
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
* 
p_•ìd_du∂ex
)

1904 
UINT32
 
autﬂdv
 = 0;

1905 
phyid_t
 
qˇ_sw_p‹t_id
;

1906 
sw_îr‹_t
 
qˇ_sw_îr
;

1908 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1910  
DRV_INVALID_LPORT
;

1913 *
p_•ìd_du∂ex
 = 
g_•ìd_du∂ex
[
logiˇl_p‹t
];

1914  
DRV_OK
;

1917 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
abûôy
, UINT32 
p‹t_ty≥
)

1919 
UINT32
 
autﬂdv
 = 0;

1920 
phyid_t
 
qˇ_sw_p‹t_id
;

1921 
sw_îr‹_t
 
qˇ_sw_îr
;

1923 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1925  
DRV_INVALID_LPORT
;

1928 
p‹t_ty≥
;

1930 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1932 if(
PORT_ABIL_10MB_HD
 & 
abûôy
)

1934 
autﬂdv
 |
FAL_PHY_ADV_10T_HD
;

1937 if(
PORT_ABIL_10MB_FD
 & 
abûôy
)

1939 
autﬂdv
 |
FAL_PHY_ADV_10T_FD
;

1942 if(
PORT_ABIL_100MB_HD
 & 
abûôy
)

1944 
autﬂdv
 |
FAL_PHY_ADV_100TX_HD
;

1947 if(
PORT_ABIL_100MB_FD
 & 
abûôy
)

1949 
autﬂdv
 |
FAL_PHY_ADV_100TX_FD
;

1952 if(
PORT_ABIL_1000MB_FD
 & 
abûôy
)

1954 
autﬂdv
 |
FAL_PHY_ADV_1000T_FD
;

1957 if(
PORT_ABIL_PAUSE_TX
 & 
abûôy
)

1959 
autﬂdv
 |
FAL_PHY_ADV_PAUSE
;

1962 if(
PORT_ABIL_PAUSE_RX
 & 
abûôy
)

1964 
autﬂdv
 |
FAL_PHY_ADV_ASY_PAUSE
;

1967 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
autﬂdv
);

1968  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1971 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_abûôy
, UINT32 
p‹t_ty≥
)

1973 
UINT32
 
autﬂdv
 = 0;

1974 
phyid_t
 
qˇ_sw_p‹t_id
;

1975 
sw_îr‹_t
 
qˇ_sw_îr
;

1977 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

1979  
DRV_INVALID_LPORT
;

1982 
p‹t_ty≥
;

1984 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

1985 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_adv_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
autﬂdv
);

1986 if(
SW_OK
 !
qˇ_sw_îr
)

1988  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

1991 *
p_abûôy
 = 0;

1992 if(
FAL_PHY_ADV_10T_HD
 & 
autﬂdv
)

1994 *
p_abûôy
 |
PORT_ABIL_10MB_HD
;

1997 if(
FAL_PHY_ADV_10T_FD
 & 
autﬂdv
)

1999 *
p_abûôy
 |
PORT_ABIL_10MB_FD
;

2002 if(
FAL_PHY_ADV_100TX_HD
 & 
autﬂdv
)

2004 *
p_abûôy
 |
PORT_ABIL_100MB_HD
;

2007 if(
FAL_PHY_ADV_100TX_FD
 & 
autﬂdv
)

2009 *
p_abûôy
 |
PORT_ABIL_100MB_HD
;

2012 if(
FAL_PHY_ADV_1000T_FD
 & 
autﬂdv
)

2014 *
p_abûôy
 |
PORT_ABIL_1000MB_FD
;

2017 if(
FAL_PHY_ADV_PAUSE
 & 
autﬂdv
)

2019 *
p_abûôy
 |
PORT_ABIL_PAUSE_TX
;

2022 if(
FAL_PHY_ADV_ASY_PAUSE
 & 
autﬂdv
)

2024 *
p_abûôy
 |
PORT_ABIL_PAUSE_RX
;

2027  
DRV_OK
;

2030 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
auto_√g
, UINT32 
p‹t_ty≥
)

2032 
phyid_t
 
qˇ_sw_p‹t_id
;

2033 
sw_îr‹_t
 
qˇ_sw_îr
;

2035 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2037  
DRV_INVALID_LPORT
;

2040 
p‹t_ty≥
;

2042 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2043 if(
TRUE
 =
auto_√g
)

2045 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_íabÀ
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qca_sw_port_id));

2051 
qˇ_sw_îr
 = 
SW_OK
;

2053  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2056 
DRV_RET_E
 
HÆ_Re°¨tP‹tNeg
(
p‹t_num_t
 
logiˇl_p‹t
)

2058 
phyid_t
 
qˇ_sw_p‹t_id
;

2059 
sw_îr‹_t
 
qˇ_sw_îr
;

2061 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2063  
DRV_INVALID_LPORT
;

2066 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2067 
qˇ_sw_îr
 = 
Ál_p‹t_aut⁄eg_ª°¨t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qca_sw_port_id));

2068  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2071 
DRV_RET_E
 
HÆ_SëI¡î«lLo›back
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
íabÀ
)

2073 
phyid_t
 
qˇ_sw_p‹t_id
;

2074 
DRV_RET_E
 
rc
;

2075 
lo›_back
;

2076 
sw_îr‹_t
 
qˇ_sw_îr
;

2078 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2080  
DRV_INVALID_LPORT
;

2083 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2084 
íabÀ
)

2086 
PORT_LOOPBACK_DISABLE
:

2087 
lo›_back
 = 0;

2089 
PORT_LOOPBACK_ENABLE
:

2090 
lo›_back
 = 1;

2093  
DRV_INVALID_LOOPBACK_VALUE
;

2097 
qˇ_sw_îr
 = 
SW_OK
;

2098  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2101 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p_logiˇl_p‹t_m≠
)

2103 
p‹t_num_t
 
logiˇl_p‹t
 = 0;

2104 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2105 
logic_pmask_t
 
°TmpLogicMask
;

2106 
phy_pmask_t
 
°PhyMask
;

2107 
phy_pmask_t
 
°AŒPhyMask
;

2108 
sw_îr‹_t
 
qˇ_sw_îr
;

2110 if(
NULL
 =
p_logiˇl_p‹t_m≠
)

2112  
DRV_ERR_PARA
;

2115 
CÃLgcMaskAŒ
(&
°TmpLogicMask
);

2116 
CÃPhyMaskAŒ
(&
°PhyMask
);

2117 
SëPhyMaskAŒ
(&
°AŒPhyMask
);

2119 
LgcMaskC›y
(&
g_logiˇl_p‹t_isﬁ©e_m≠
, 
p_logiˇl_p‹t_m≠
);

2122 
LgcP‹tF‹
(
logiˇl_p‹t
)

2124 if(!
T°LgcMaskBô
(
logiˇl_p‹t
, 
p_logiˇl_p‹t_m≠
))

2126 
SëLgcMaskBô
(
logiˇl_p‹t
, &
°TmpLogicMask
);

2130 
MaskLogic2Phy
(&
°TmpLogicMask
, &
°PhyMask
);

2131 
PhyMaskAddCpuP‹t
(&
°PhyMask
);

2132 
PhyMaskAddSèckP‹t
(&
°PhyMask
);

2134 
LgcP‹tF‹
(
logiˇl_p‹t
)

2136 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2138 if(
T°LgcMaskBô
(
logiˇl_p‹t
, 
p_logiˇl_p‹t_m≠
))

2140 
qˇ_sw_îr
 = 
Ál_p‹tvœn_membî_upd©e
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
°PhyMask
);

2144 
qˇ_sw_îr
 = 
Ál_p‹tvœn_membî_upd©e
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
°AŒPhyMask
);

2146 if(
SW_OK
 !
qˇ_sw_îr
)

2148  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2152  
DRV_OK
;

2155 
DRV_RET_E
 
HÆ_GëIsﬁ©eSë
(
logic_pmask_t
 *
p_logiˇl_p‹t_m≠
)

2157 
LgcMaskC›y
(
p_logiˇl_p‹t_m≠
, &
g_logiˇl_p‹t_isﬁ©e_m≠
);

2158  
DRV_OK
;

2161 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
jumbo
)

2163 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2164 
UINT32
 
max_‰ame_Àn
 = 0;

2165 
sw_îr‹_t
 
qˇ_sw_îr
;

2167 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2169  
DRV_INVALID_LPORT
;

2172 if(!
ISVALID_JUMBO_VALUE
(
jumbo
))

2174  
DRV_INVALID_JUMBO_VALUE
;

2176 
max_‰ame_Àn
 = (
PORT_JUMBO_ENABLE
 =
jumbo
)? 
QCA_SW_MAX_FRAME_LEN
 : 
QCA_SW_NORMAL_FRAME_LEN
;

2178 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2179 
qˇ_sw_îr
 = 
Ál_‰ame_max_size_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
max_‰ame_Àn
);

2180  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2183 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_jumbo
)

2185 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2186 
UINT32
 
max_‰ame_Àn
;

2187 
sw_îr‹_t
 
qˇ_sw_îr
;

2189 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2191  
DRV_INVALID_LPORT
;

2194 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2195 
qˇ_sw_îr
 = 
Ál_‰ame_max_size_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), &
max_‰ame_Àn
);

2196 if(
SW_OK
 =
qˇ_sw_îr
)

2198 if(
QCA_SW_NORMAL_FRAME_LEN
 !
max_‰ame_Àn
)

2200 *
p_jumbo
 = 
PORT_JUMBO_ENABLE
;

2204 *
p_jumbo
 = 
PORT_JUMBO_DISABLE
;

2207  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2210 
DRV_RET_E
 
HÆ_SëCPUP‹tJumbo
(
UINT32
 
‰ame_Àn
)

2212 
sw_îr‹_t
 
qˇ_sw_îr
;

2214 
qˇ_sw_îr
 = 
Ál_‰ame_max_size_£t
(
CHIPID
(
PORT_PHYID
(
LOGIC_CPU_PORT
)), 
‰ame_Àn
);

2215  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2218 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_max_‰ame_Àn
)

2220 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2221 
sw_îr‹_t
 
qˇ_sw_îr
;

2223 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2225  
DRV_INVALID_LPORT
;

2228 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2229 
qˇ_sw_îr
 = 
Ál_‰ame_max_size_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
p_max_‰ame_Àn
);

2230  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2233 
DRV_RET_E
 
HÆ_SëP‹tPri‹ôy
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
¥i
)

2235 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2236 
sw_îr‹_t
 
qˇ_sw_îr
;

2238 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2240  
DRV_INVALID_LPORT
;

2243 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2244 
qˇ_sw_îr
 = 
Ál_qos_p‹t_deÁu…_˝ri_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
¥i
);

2245  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2248 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_¥i
)

2250 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2251 
sw_îr‹_t
 
qˇ_sw_îr
;

2253 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2255  
DRV_INVALID_LPORT
;

2258 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2259 
qˇ_sw_îr
 =
Ál_qos_p‹t_deÁu…_˝ri_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
p_¥i
);

2260  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2263 
DRV_RET_E
 
HÆ_SëP‹tE«bÀ
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
íabÀ
)

2266 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2267 
mode
;

2268 
sw_îr‹_t
 
qˇ_sw_îr
;

2270 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2272  
DRV_INVALID_LPORT
;

2275 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2276 
íabÀ
)

2278 
PORT_ADMIN_ENABLE
:

2279 
mode
 = 1;

2281 
PORT_ADMIN_DISABLE
;

2282 
mode
 = 0;

2285  
DRV_INVALID_ADMIN_VALUE
;

2289 
qˇ_sw_îr
 = 
SW_OK
;

2290  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2293 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
°©e
)

2295 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2296 
mode
;

2297 
sw_îr‹_t
 
qˇ_sw_îr
;

2299 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2301  
DRV_INVALID_LPORT
;

2304 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2305 
°©e
)

2307 
PORT_ADMIN_ENABLE
:

2308 
mode
 = 1;

2310 
PORT_ADMIN_DISABLE
;

2311 
mode
 = 0;

2314  
DRV_INVALID_ADMIN_VALUE
;

2319 
qˇ_sw_îr
 = 
SW_OK
;

2320  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2323 
DRV_RET_E
 
HÆ_GëP‹tCuºítLök
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
p_lök
)

2325 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2326 
lök_°©us
;

2327 
sw_îr‹_t
 
qˇ_sw_îr
;

2329 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

2331  
DRV_INVALID_LPORT
;

2334 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

2337 
qˇ_sw_îr
 = 
SW_OK
;

2338 if(
SW_OK
 !
qˇ_sw_îr
)

2340  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2343 if(
lök_°©us
)

2345 *
p_lök
 = 
PORT_LINK_UP
;

2349 *
p_lök
 = 
PORT_LINK_DOWN
;

2351  
DRV_OK
;

2354 
DRV_RET_E
 
HÆ_GëP‹tLökMask
(
logic_pmask_t
 *
p_logiˇl_p‹t_m≠
)

2356 
p‹t_num_t
 
logiˇl_p‹t_idx
;

2357 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

2358 
lök_°©us
;

2359 
sw_îr‹_t
 
qˇ_sw_îr
;

2361 
ASSERT
(
p_logiˇl_p‹t_m≠
);

2362 
LgcP‹tF‹
(
logiˇl_p‹t_idx
)

2364 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t_idx
);

2367 
qˇ_sw_îr
 = 
SW_OK
;

2368 if(
SW_OK
 =
qˇ_sw_îr
)

2370 if(
lök_°©us
)

2372 
SëLgcMaskBô
(
logiˇl_p‹t_idx
, 
p_logiˇl_p‹t_m≠
);

2376 
CÃLgcMaskBô
(
logiˇl_p‹t_idx
, 
p_logiˇl_p‹t_m≠
);

2381  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2384  
DRV_OK
;

2387 
UINT32
 
HÆ_GëP‹tTy≥
(
p‹t_num_t
 
logiˇl_p‹t
)

2389  
PORT_TYPE_IS_COPPER
;

2392 
DRV_RET_E
 
HÆ_GëP‹tLökupTy≥
(
phyid_t
 
qˇ_sw_p‹t_id
, 
UINT32
 *
p_lökup_ty≥
)

2394 
lök_°©us
;

2395 
sw_îr‹_t
 
qˇ_sw_îr
;

2399 
qˇ_sw_îr
 = 
SW_OK
;

2400 if(
SW_OK
 !
qˇ_sw_îr
)

2402  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

2405 if(
lök_°©us
)

2407 *
p_lökup_ty≥
 = 
HAL_PORT_LINKUP_TYPE_COPPER_UP
;

2411 *
p_lökup_ty≥
 = 
HAL_PORT_LINKUP_TYPE_DOWN
;

2413  
DRV_OK
;

2416 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p_logiˇl_p‹t_m≠
)

2418 
CÃLgcMaskAŒ
(
p_logiˇl_p‹t_m≠
);

2419  
DRV_OK
;

2422 
DRV_RET_E
 
HÆ_FibîP‹tCfgInô
(
p‹t_num_t
 
logiˇl_p‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
)

2424  
DRV_ERR_UNKNOW
;

2427 
DRV_RET_E
 
HÆ_C›≥rP‹tCfgInô
(
p‹t_num_t
 
logiˇl_p‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
)

2429  
DRV_ERR_UNKNOW
;

2432 
DRV_RET_E
 
HÆ_GëFibîS≥ed
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
puiS≥ed
)

2434  
DRV_ERR_UNKNOW
;

2437 
VOID
 
SFP_GëBxTy≥Index
(
UINT8
 *
pucD©a
, 
UINT32
 
ulCodeVÆ
, UINT8 *
pucIndex
)

2439  
DRV_ERR_UNKNOW
;

2442 
BOOL
 
ComboP‹tCfgCh™ge
(
UINT32
 
unô
, UINT32 
phyP‹t
, 
πk_p‹t_medü_t
 
íMedü
)

2444  
DRV_ERR_UNKNOW
;

2447 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
uiMedium
)

2449  
DRV_ERR_UNKNOW
;

2452 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 *
puiMedium
)

2454  
DRV_ERR_UNKNOW
;

2457 
DRV_RET_E
 
HÆ_P‹tLedInô
()

2459 
Àd_˘æ_∑âîn_t
 
phy4_Àd0_∑âîn_bak
, 
phy4_Àd1_∑âîn_bak
, 
phy4_Àd2_∑âîn_bak
, 
phy4_Àd0_∑âîn
, 
phy4_Àd1_∑âîn
, 
phy4_Àd2_∑âîn
;

2460 
Àd_˘æ_∑âîn_t
 
phy0_3_Àd0_∑âîn_bak
, 
phy0_3_Àd1_∑âîn_bak
, 
phy0_3_Àd2_∑âîn_bak
, 
phy0_3_Àd0_∑âîn
, 
phy0_3_Àd1_∑âîn
, 
phy0_3_Àd2_∑âîn
;

2462 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn_bak
);

2463 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn_bak
);

2464 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn_bak
);

2465 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn_bak
);

2466 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn_bak
);

2467 ()
Ál_Àd_˘æ_∑âîn_gë
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn_bak
);

2469 
phy4_Àd0_∑âîn
 = 
phy4_Àd0_∑âîn_bak
;

2470 
phy4_Àd1_∑âîn
 = 
phy4_Àd1_∑âîn_bak
;

2471 
phy4_Àd2_∑âîn
 = 
phy4_Àd2_∑âîn_bak
;

2472 
phy0_3_Àd0_∑âîn
 = 
phy0_3_Àd0_∑âîn_bak
;

2473 
phy0_3_Àd1_∑âîn
 = 
phy0_3_Àd1_∑âîn_bak
;

2474 
phy0_3_Àd2_∑âîn
 = 
phy0_3_Àd2_∑âîn_bak
;

2476 
phy4_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

2477 
phy4_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

2478 
phy4_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

2479 
phy0_3_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

2480 
phy0_3_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

2481 
phy0_3_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_ON
;

2482 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn
);

2483 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn
);

2484 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn
);

2485 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn
);

2486 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn
);

2487 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn
);

2488 
mdñay
(500);

2490 
phy4_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

2491 
phy4_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

2492 
phy4_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

2493 
phy0_3_Àd0_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

2494 
phy0_3_Àd1_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

2495 
phy0_3_Àd2_∑âîn
.
mode
 = 
LED_ALWAYS_OFF
;

2496 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn
);

2497 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn
);

2498 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn
);

2499 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn
);

2500 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn
);

2501 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn
);

2502 
mdñay
(500);

2504 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 0, &
phy4_Àd0_∑âîn_bak
);

2505 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 1, &
phy4_Àd1_∑âîn_bak
);

2506 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_WAN_PORT_GROUP
, 2, &
phy4_Àd2_∑âîn_bak
);

2507 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 0, &
phy0_3_Àd0_∑âîn_bak
);

2508 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 1, &
phy0_3_Àd1_∑âîn_bak
);

2509 ()
Ál_Àd_˘æ_∑âîn_£t
(0, 
LED_LAN_PORT_GROUP
, 2, &
phy0_3_Àd2_∑âîn_bak
);

2510  
DRV_OK
;

2513 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
)

2515  
DRV_ERR_UNKNOW
;

2521 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_qos.c

17 #ifde‡ 
__˝lu•lus


20 
	~<löux/kî√l.h
>

21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~<löux/°rög.h
>

26 
	~"hÆ_comm⁄.h
"

28 
	~"Ál_qos.h
"

29 
	~"Ál_cosm≠.h
"

65 
DRV_RET_E
 
HÆ_SëQosCpuInô
()

67 
UINT32
 
queue_weight
[6];

68 
sw_îr‹_t
 
qˇ_sw_îr
;

70 
queue_weight
[0] = 1;

71 
queue_weight
[1] = 1;

72 
queue_weight
[2] = 1;

73 
queue_weight
[3] = 1;

74 
queue_weight
[4] = 0;

75 
queue_weight
[5] = 0;

76 
qˇ_sw_îr
 = 
Ál_qos_p‹t_sch_mode_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 
FAL_SCH_WRR_MODE
, 
queue_weight
);

77 if(
SW_OK
 !
qˇ_sw_îr
)

79  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

81  
DRV_OK
;

84 
DRV_RET_E
 
HÆ_SëQosInô
()

86 
p‹t_num_t
 
Õ‹t
;

87 
phyid_t
 
qˇ_sw_p‹t_id
;

88 
sw_îr‹_t
 
qˇ_sw_îr
;

90 
LgcP‹tF‹
(
Õ‹t
)

92 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
Õ‹t
);

93 
qˇ_sw_îr
 = 
Ál_qos_p‹t_mode_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
FAL_QOS_UP_MODE
, 1);

94 if(
SW_OK
 !
qˇ_sw_îr
)

96  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

99 
qˇ_sw_îr
 = 
Ál_qos_p‹t_mode_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
FAL_QOS_DSCP_MODE
, 1);

100 if(
SW_OK
 !
qˇ_sw_îr
)

102  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

106 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 0, 0);

107 if(
SW_OK
 !
qˇ_sw_îr
)

109  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

112 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 1, 0);

113 if(
SW_OK
 !
qˇ_sw_îr
)

115  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

118 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 2, 1);

119 if(
SW_OK
 !
qˇ_sw_îr
)

121  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

124 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 3, 1);

125 if(
SW_OK
 !
qˇ_sw_îr
)

127  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

130 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 4, 2);

131 if(
SW_OK
 !
qˇ_sw_îr
)

133  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

136 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 5, 2);

137 if(
SW_OK
 !
qˇ_sw_îr
)

139  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

142 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 6, 3);

143 if(
SW_OK
 !
qˇ_sw_îr
)

145  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

148 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 7, 3);

149 if(
SW_OK
 !
qˇ_sw_îr
)

151  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

154 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 0, 0);

155 if(
SW_OK
 !
qˇ_sw_îr
)

157  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

160 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 1, 0);

161 if(
SW_OK
 !
qˇ_sw_îr
)

163  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

166 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 2, 1);

167 if(
SW_OK
 !
qˇ_sw_îr
)

169  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

172 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 3, 1);

173 if(
SW_OK
 !
qˇ_sw_îr
)

175  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

178 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 4, 2);

179 if(
SW_OK
 !
qˇ_sw_îr
)

181  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

184 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 5, 2);

185 if(
SW_OK
 !
qˇ_sw_îr
)

187  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

190 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 6, 3);

191 if(
SW_OK
 !
qˇ_sw_îr
)

193  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

196 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 7, 3);

197 if(
SW_OK
 !
qˇ_sw_îr
)

199  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

202  
HÆ_SëQosCpuInô
();

205 
DRV_RET_E
 
HÆ_Së1pIngªssPri‹ôyRem≠
(
qos_8021p_to_öçri_t
 
°1pToI¡Pri
)

207 
UINT32
 
¥i1p
, 
ötPri
;

208 
UINT32
 
dp
;

209 
sw_îr‹_t
 
qˇ_sw_îr
;

211 
¥i1p
 = 0;Öri1∞< 
QOS_MAX_1P_PRIORITY
;Öri1p++)

213 if(
°1pToI¡Pri
.
öã∫ÆPri
[
¥i1p
] >
QOS_MAX_INTERNAL_PRIORITY
)

215  
DRV_ERR_PARA
;

218 
¥i1p
 = 0;Öri1∞< 
QOS_MAX_1P_PRIORITY
;Öri1p++)

220 
ötPri
 = 
°1pToI¡Pri
.
öã∫ÆPri
[
¥i1p
];

221 
qˇ_sw_îr
 = 
Ál_cosm≠_up_to_¥i_£t
(0, 
¥i1p
, 
ötPri
);

222 if(
SW_OK
 !
qˇ_sw_îr
)

224  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

227  
DRV_OK
;

230 
DRV_RET_E
 
HÆ_SëCos2QidRem≠
(
qos_8021p_to_öçri_t
 
°1pPri2qid
)

232 
UINT32
 
¥i1p
;

233 
sw_îr‹_t
 
qˇ_sw_îr
;

235 
¥i1p
 = 0;Öri1∞< 
QOS_MAX_1P_PRIORITY
;Öri1p++)

237 if(
°1pPri2qid
.
öã∫ÆPri
[
¥i1p
] >
QOS_MAX_1P_QUEUENO
)

239  
DRV_ERR_PARA
;

243 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_ehqueue_£t
(0, 
¥i1p
, 
°1pPri2qid
.
öã∫ÆPri
[pri1p]);

244 if(
SW_OK
 !
qˇ_sw_îr
)

246  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

249 
qˇ_sw_îr
 = 
Ál_cosm≠_¥i_to_queue_£t
(0, 
¥i1p
, 
°1pPri2qid
.
öã∫ÆPri
[pri1p]);

250 if(
SW_OK
 !
qˇ_sw_îr
)

252  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

256  
DRV_OK
;

259 
DRV_RET_E
 
HÆ_SëDs˝IngªssPri‹ôyRem≠
(
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
)

261 
UINT32
 
¥iDs˝
, 
ötPri
;

262 
UINT32
 
dp
;

263 
sw_îr‹_t
 
qˇ_sw_îr
;

265 
¥iDs˝
 = 0;ÖriDs˝ < 
QOS_MAX_DSCP_PRIORITY
;ÖriDscp++)

267 if(
°Ds˝ToI¡Pri
.
öã∫ÆPri
[
¥iDs˝
] >
QOS_MAX_INTERNAL_PRIORITY
)

269  
DRV_ERR_PARA
;

272 
¥iDs˝
 = 0;ÖriDs˝ < 
QOS_MAX_DSCP_PRIORITY
;ÖriDscp++)

274 
ötPri
 = 
°Ds˝ToI¡Pri
.
öã∫ÆPri
[
¥iDs˝
];

275 
qˇ_sw_îr
 = 
Ál_cosm≠_ds˝_to_¥i_£t
(0, 
¥iDs˝
, 
ötPri
);

276 if(
SW_OK
 !
qˇ_sw_îr
)

278  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

281  
DRV_OK
;

284 
DRV_RET_E
 
HÆ_SëQosTru°Mode
(
UINT32
 
mode
)

286 
p‹t_num_t
 
Õ‹t
;

287 
phyid_t
 
qˇ_sw_p‹t_id
;

288 
sw_îr‹_t
 
qˇ_sw_îr
;

289 
UINT32
 
cos_¥i_£À˘
, 
ds˝_¥i_£À˘
;

291 
mode
)

293 
QOS_COS
:

294 
cos_¥i_£À˘
 = 0;

295 
ds˝_¥i_£À˘
 = 1;

297 
QOS_DSCP
:

298 
cos_¥i_£À˘
 = 1;

299 
ds˝_¥i_£À˘
 = 0;

301 
QOS_PORT
:

302 
cos_¥i_£À˘
 = 0;

303 
ds˝_¥i_£À˘
 = 1;

306  
DRV_ERR_PARA
;

309 
LgcP‹tF‹
(
Õ‹t
)

311 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
Õ‹t
);

312 
qˇ_sw_îr
 = 
Ál_qos_p‹t_mode_¥i_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
FAL_QOS_UP_MODE
, 
cos_¥i_£À˘
);

313 if(
SW_OK
 !
qˇ_sw_îr
)

315  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

318 
qˇ_sw_îr
 = 
Ál_qos_p‹t_mode_¥i_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
FAL_QOS_DSCP_MODE
, 
ds˝_¥i_£À˘
);

319 if(
SW_OK
 !
qˇ_sw_îr
)

321  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

324  
DRV_OK
;

327 
DRV_RET_E
 
HÆ_SëQosQueueSchedul
(
QueueMode_S
 
°QueueScheduÀ
)

329 
p‹t_num_t
 
Õ‹t
;

330 
UINT32
 
i
, 
queue_num
 = 
QUEUE_NUM
;

332 
phyid_t
 
qˇ_sw_p‹t_id
;

333 
UINT32
 
queue_weight
[6] = {0};

334 
Ál_sch_mode_t
 
qˇ_sw_sch_mode
;

335 
sw_îr‹_t
 
qˇ_sw_îr
;

337 
i
 = 0; i < 
queue_num
; i ++)

339 
queue_weight
[
i
] = (
UINT32
)
°QueueScheduÀ
.
Weight
[i];

342 
°QueueScheduÀ
.
QueueMode
)

344 
QUEUE_MODE_HQ_WRR
:

345 
qˇ_sw_sch_mode
 = 
FAL_SCH_MIX_MODE
;

347 
QUEUE_MODE_WFQ
:

349  
DRV_ERR_PARA
;

350 
QUEUE_MODE_WRR
:

351 
qˇ_sw_sch_mode
 = 
FAL_SCH_WRR_MODE
;

354  
DRV_ERR_PARA
;

357 
LgcP‹tF‹
(
Õ‹t
)

359 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
Õ‹t
);

360 
qˇ_sw_îr
 = 
Ál_qos_p‹t_sch_mode_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 
qˇ_sw_sch_mode
, 
queue_weight
);

361 if(
SW_OK
 !
qˇ_sw_îr
)

363  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

366  
DRV_OK
;

371 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_ratelimit.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~"Ál_øã.h
"

40 
DRV_RET_E
 
HÆ_SëR©ñimôCpu
();

61 
DRV_RET_E
 
HÆ_SëR©ñimôInô
()

63 
p‹t_num_t
 
logiˇl_p‹t_idx
;

64 
phyid_t
 
qˇ_sw_p‹t_id
 = 0;

65 
sw_îr‹_t
 
qˇ_sw_îr
;

66 
Ál_egªss_sh≠î_t
 
sh≠î
;

67 
Ál_p‹t_pﬁi˚r_t
 
pﬁi˚r
;

69 
LgcP‹tF‹
(
logiˇl_p‹t_idx
)

71 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t_idx
);

73 
sh≠î
.
mëî_unô
 = 
FAL_BYTE_BASED
;

74 
qˇ_sw_îr
 = 
Ál_øã_p‹t_sh≠î_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), 0, &
sh≠î
);

75 if(
SW_OK
 !
qˇ_sw_îr
)

77  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

80 
pﬁi˚r
.
c_íabÀ
 = 0;

81 
pﬁi˚r
.
e_íabÀ
 = 0;

82 
pﬁi˚r
.
comböe_mode
 = 0;

83 
pﬁi˚r
.
mëî_unô
 = 
FAL_BYTE_BASED
;

84 
pﬁi˚r
.
cﬁ‹_mode
 = 0;

85 
pﬁi˚r
.
cou∂e_Êag
 = 0;

86 
pﬁi˚r
.
deficô_í
 = 0;

87 
pﬁi˚r
.
c_mëî_öãrvÆ
 = 
FAL_RATE_MI_1MS
;

88 
pﬁi˚r
.
e_mëî_öãrvÆ
 = 
FAL_RATE_MI_1MS
;

89 
qˇ_sw_îr
 = 
Ál_øã_p‹t_pﬁi˚r_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
PORTID
(qˇ_sw_p‹t_id), &
pﬁi˚r
);

90 if(
SW_OK
 !
qˇ_sw_îr
)

92  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

95  
DRV_OK
;

98 
DRV_RET_E
 
HÆ_SëR©ñimôCpu
()

100 
Ál_queue_t
 
queue
;

101 
sw_îr‹_t
 
rv
;

102 
Ál_egªss_sh≠î_t
 
sh≠î
;

104 
sh≠î
.
mëî_unô
 = 
FAL_BYTE_BASED
;

105 
sh≠î
.
cú
 = 
CPU_PORT_TOTAL_RATE_LIMIT
;

106 
sh≠î
.
eú
 = 0;

107 
sh≠î
.
cbs
 = 2048;

108 
sh≠î
.
ebs
 = 0;

111 
Ál_øã_p‹t_sh≠î_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 1, &
sh≠î
);

114 
queue
 = 0; queue < 5; queue++)

116 
sh≠î
.
cú
 = 
CPU_QUEUE_RATE_LIMIT
;

117 
rv
 = 
Ál_øã_queue_sh≠î_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 
queue
, 1, (
Ál_egªss_sh≠î_t
 *)&
sh≠î
);

118 i‡(
SW_OK
 !
rv
)

120  
Eº‹Sdk2Drv
(
rv
);

124  
DRV_OK
;

127 
DRV_RET_E
 
HÆ_SëR©ñimôByP‹t
(
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
lP‹tMask
, UINT32 
ulKBps
)

129 
p‹t_num_t
 
Õ‹t
;

130 
Ál_p‹t_t
 
p‹t_id
;

131 
a_uöt32_t
 
chù_id
;

132 
sw_îr‹_t
 
rv
;

133 
Ál_egªss_sh≠î_t
 
sh≠î
;

134 
Ál_p‹t_pﬁi˚r_t
 
pﬁi˚r
;

135 
UINT32
 
øã
 = 
ulKBps
 * 8;

137 
IfLgcMaskSë
(&
lP‹tMask
, 
Õ‹t
)

139 
chù_id
 = 
P‹tLogci2ChùId
(
Õ‹t
);

140 
p‹t_id
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

142 if(0 =
øã
)

145 if(
DRV_RATELIMIT_TX
 =
dúe˘i⁄
)

147 
rv
 = 
Ál_øã_p‹t_sh≠î_£t
(
chù_id
, 
p‹t_id
, 0, &
sh≠î
);

148 i‡(
SW_OK
 !
rv
)

150  
Eº‹Sdk2Drv
(
rv
);

153 if(
DRV_RATELIMIT_RX
 =
dúe˘i⁄
)

156 
rv
 = 
Ál_øã_p‹t_pﬁi˚r_gë
(
chù_id
, 
p‹t_id
, &
pﬁi˚r
);

157 i‡(
SW_OK
 !
rv
)

159  
Eº‹Sdk2Drv
(
rv
);

161 
pﬁi˚r
.
c_íabÀ
 = 0;

162 
rv
 = 
Ál_øã_p‹t_pﬁi˚r_£t
(
chù_id
, 
p‹t_id
, &
pﬁi˚r
);

163 i‡(
SW_OK
 !
rv
)

165  
Eº‹Sdk2Drv
(
rv
);

170  
DRV_ERR_PARA
;

176 if(
DRV_RATELIMIT_TX
 =
dúe˘i⁄
)

178 
sh≠î
.
mëî_unô
 = 
FAL_BYTE_BASED
;

179 
sh≠î
.
cú
 = 
øã
;

180 
sh≠î
.
eú
 = 0;

181 
sh≠î
.
cbs
 = 
øã
 / (8 * 32 * 1000);

182 if(
sh≠î
.
cbs
 < 2048)

184 
sh≠î
.
cbs
 = 2048;

186 
sh≠î
.
ebs
 = 0;

188 
rv
 = 
Ál_øã_p‹t_sh≠î_£t
(
chù_id
, 
p‹t_id
, 0, &
sh≠î
);

189 i‡(
SW_OK
 !
rv
)

191  
Eº‹Sdk2Drv
(
rv
);

194 if(
DRV_RATELIMIT_RX
 =
dúe˘i⁄
)

197 
rv
 = 
Ál_øã_p‹t_pﬁi˚r_gë
(
chù_id
, 
p‹t_id
, &
pﬁi˚r
);

198 i‡(
SW_OK
 !
rv
)

200  
Eº‹Sdk2Drv
(
rv
);

202 
pﬁi˚r
.
c_íabÀ
 = 1;

203 
pﬁi˚r
.
c_øã_Êag
 = 
FAL_INGRESS_POLICING_MUL
 | 
FAL_INGRESS_POLICING_UNI
 | 
FAL_INGRESS_POLICING_UNK_MUL
 \

204 | 
FAL_INGRESS_POLICING_UNK_UNI
 | 
FAL_INGRESS_POLICING_BROAD
 | 
FAL_INGRESS_POLICING_MANAGEMENT
 | 
FAL_INGRESS_POLICING_TCP_CTRL
;

205 
pﬁi˚r
.
cú
 = 
øã
;

206 
pﬁi˚r
.
cbs
 = 
øã
 / ( 8 * 1000);

207 if(
pﬁi˚r
.
cbs
 < 4096)

209 
pﬁi˚r
.
cbs
 = 4096;

211 
rv
 = 
Ál_øã_p‹t_pﬁi˚r_£t
(
chù_id
, 
p‹t_id
, &
pﬁi˚r
);

212 i‡(
SW_OK
 !
rv
)

214  
Eº‹Sdk2Drv
(
rv
);

219  
DRV_ERR_PARA
;

224  
DRV_OK
;

227 
UINT32
 
_HÆ_GëP‹tR©eByPî˚¡age
(
p‹t_num_t
 
Õ‹t
, UINT32 
≥r˚¡age
)

229 
UINT32
 
uiR©e
 = 0, 
uiS≥ed
 = 0;

231 if(
DRV_OK
 =
HÆ_GëP‹tS≥ed
(
Õ‹t
, &
uiS≥ed
))

233 if(
PORT_SPEED_10
 =
uiS≥ed
)

236 
uiR©e
 = 100*
≥r˚¡age
;

238 if(
PORT_SPEED_100
 =
uiS≥ed
)

241 
uiR©e
 = 1000*
≥r˚¡age
;

243 if(
PORT_SPEED_1000
 =
uiS≥ed
)

246 
uiR©e
 = 10000*
≥r˚¡age
;

254  
uiR©e
;

276 
DRV_RET_E
 
HÆ_SëR©ñimôSt‹mCé
(
STORM_CTLTYPE_E
 
˘lTy≥
, 
logic_pmask_t
 
lP‹tMask
, 
STORM_CTLRATE_S
 
°St‹m
)

278 
p‹t_num_t
 
Õ‹t
;

279 
UINT32
 
unô
;

280 
phyid_t
 
phyP‹t
;

281 
UINT32
 
ulR©e
;

282 
sw_îr‹_t
 
rv
 = 0;

283 
Ál_p‹t_pﬁi˚r_t
 
pﬁi˚r
;

285 
ulR©e
 = 
°St‹m
.
vÆue
;

287 
IfLgcMaskSë
(&
lP‹tMask
, 
Õ‹t
)

289 
unô
 = 
P‹tLogci2ChùId
(
Õ‹t
);

290 
phyP‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

291 
rv
 = 
Ál_øã_p‹t_pﬁi˚r_gë
(
unô
, 
phyP‹t
, &
pﬁi˚r
);

292 i‡(
SW_OK
 !
rv
)

294  
Eº‹Sdk2Drv
(
rv
);

296 if((0 =
°St‹m
.
vÆue
)||((100 =°St‹m.vÆueË&& (°St‹m.
øãTy≥
 =
STORM_RATE_PERCENT
)))

299 
pﬁi˚r
.
e_íabÀ
 = 0;

304 
pﬁi˚r
.
e_íabÀ
 = 1;

305 
°St‹m
.
øãTy≥
)

307 
STORM_RATE_KBPS
:

308 
ulR©e
 = 
°St‹m
.
vÆue
 * 8;

310 
STORM_RATE_PERCENT
:

311 
ulR©e
 = 
_HÆ_GëP‹tR©eByPî˚¡age
(
Õ‹t
, 
°St‹m
.
vÆue
);

313 
STORM_RATE_PPS
:

315 
ulR©e
 = 
°St‹m
.
vÆue
 * 700 * 8;

318  
DRV_ERR_PARA
;

321 
pﬁi˚r
.
eú
 = 
ulR©e
;

322 
pﬁi˚r
.
ebs
 = 
ulR©e
 / ( 8 * 1000);

323 if(
pﬁi˚r
.
ebs
 < 4096)

325 
pﬁi˚r
.
ebs
 = 4096;

328 
˘lTy≥
)

330 
STORM_DLF_CTRL
:

331 
pﬁi˚r
.
e_øã_Êag
 |
FAL_INGRESS_POLICING_UNK_UNI
;

333 
STORM_MCAST_CTRL
:

334 
pﬁi˚r
.
e_øã_Êag
 |
FAL_INGRESS_POLICING_UNK_MUL
;

336 
STORM_BCAST_CTRL
:

337 
pﬁi˚r
.
e_øã_Êag
 |
FAL_INGRESS_POLICING_BROAD
;

339 
STORM_ALL_CTRL
:

340 
pﬁi˚r
.
e_øã_Êag
 |
FAL_INGRESS_POLICING_UNK_UNI
 |
FAL_INGRESS_POLICING_UNK_MUL
|
FAL_INGRESS_POLICING_BROAD
;

343  
DRV_ERR_PARA
;

347 
rv
 = 
Ál_øã_p‹t_pﬁi˚r_£t
(
unô
, 
phyP‹t
, &
pﬁi˚r
);

348 if(
SW_OK
 !
rv
)

350  
Eº‹Sdk2Drv
(
rv
);

354  
DRV_OK
;

359 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_rstp.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~"Ál_°p.h
"

51 
DRV_RET_E
 
HÆ_GëSçP‹tSèã
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 * 
p_p‹t_°©e
)

53 
Ál_°p_°©e_t
 
°p_°©e
;

54 
phyid_t
 
qˇ_sw_p‹t_id
;

55 
sw_îr‹_t
 
qˇ_sw_îr
;

57 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

59  
DRV_INVALID_LPORT
;

62 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

63 
qˇ_sw_îr
 = 
Ál_°p_p‹t_°©e_gë
(
CHIPID
(
qˇ_sw_p‹t_id
), 
FAL_SINGLE_STP_ID
, 
PORTID
(qˇ_sw_p‹t_id), &
°p_°©e
);

64 if(
SW_OK
 !
qˇ_sw_îr
)

66  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

69 
°p_°©e
)

71 
FAL_STP_DISABLED
:

72 *
p_p‹t_°©e
 = 
PORT_STATE_DISABLED
;

74 
FAL_STP_BLOKING
:

75 *
p_p‹t_°©e
 = 
PORT_STATE_BLOCKING
;

77 
FAL_STP_LEARNING
:

78 *
p_p‹t_°©e
 = 
PORT_STATE_LEARNING
;

80 
FAL_STP_FARWARDING
:

81 *
p_p‹t_°©e
 = 
PORT_STATE_FORWARDING
;

84  
DRV_ERR_UNKNOW
;

87  
DRV_OK
;

90 
DRV_RET_E
 
HÆ_SëSçP‹tSèã
(
p‹t_num_t
 
logiˇl_p‹t
, 
UINT32
 
p‹t_°©e
)

92 
Ál_°p_°©e_t
 
°p_°©e
;

93 
phyid_t
 
qˇ_sw_p‹t_id
;

94 
sw_îr‹_t
 
qˇ_sw_îr
;

96 if(!
IsVÆidLgcP‹t
(
logiˇl_p‹t
))

98  
DRV_INVALID_LPORT
;

101 
qˇ_sw_p‹t_id
 = 
P‹tLogic2PhyID
(
logiˇl_p‹t
);

104 
p‹t_°©e
)

106 
PORT_STATE_DISABLED
:

107 
°p_°©e
 = 
FAL_STP_DISABLED
;

109 
PORT_STATE_BLOCKING
:

110 
°p_°©e
 = 
FAL_STP_BLOKING
;

112 
PORT_STATE_LEARNING
:

113 
°p_°©e
 = 
FAL_STP_LEARNING
;

115 
PORT_STATE_FORWARDING
:

116 
°p_°©e
 = 
FAL_STP_FARWARDING
;

119  
DRV_ERR_PARA
;

122 
qˇ_sw_îr
 = 
Ál_°p_p‹t_°©e_£t
(
CHIPID
(
qˇ_sw_p‹t_id
), 
FAL_SINGLE_STP_ID
, 
PORTID
(qˇ_sw_p‹t_id), 
°p_°©e
);

123  
Eº‹Sdk2Drv
(
qˇ_sw_îr
);

130 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_special.c

18 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~<löux/°rög.h
>

25 
	~<löux/¶ab.h
>

26 #ifde‡
CHIPSET_RTL8328


27 
	~<πk/vœn.h
>

28 
	~<comm⁄/π_îr‹.h
>

29 
	~<hÆ/mac/ªg.h
>

30 
	~<hÆ/chùdef/esw/πk_esw_ªg_°ru˘.h
>

31 #ñi‡
deföed
(
CHIPSET_RTL8305
)

32 
	~"πk_≠i.h
"

33 
	~"πk_≠i_ext.h
"

35 
	~"hÆ_comm⁄.h
"

70 
DRV_RET_E
 
HÆ_SdkInôS≥cül
(
UINT32
 
unô
)

73 
INT32
 
iRë
 = 0;

77 
iRë
 = 
ªg_fõld_wrôe
(
unô
,
INT_ESW_PACKET_TO_CPU_PORT_FORMAT_CONTROL_RTL8328
,
ESW_TOCPUPKTFMTf
,1);

78 if(
RT_ERR_OK
 !
iRë
)

80 
¥ötk
("%s,%dÉº‹!\n",
__FUNCTION__
,
__LINE__
);

83 
iRë
 = 
πk_vœn_p‹tEgrI¬îTagE«bÀ_£t
(
unô
, 
PHY_CPU_PORTID
, 
ENABLED
);

84 if(
RT_ERR_OK
 !
iRë
)

86 
¥ötk
("%s,%dÉº‹!\n",
__FUNCTION__
,
__LINE__
);

89  
Eº‹Sdk2Drv
(
iRë
);

92 
unô
 = unit;

93  
DRV_OK
;

98 
DRV_RET_E
 
HÆ_SëCpuHódî
(
BOOL
 
bE«bÀ
)

100 #i‡
deföed
(
CHIPSET_RTL8305
)

101 
πk_≠i_ªt_t
 
tdRë
;

102 
πk_íabÀ_t
 
tdE«bÀ
;

105 i‡((
FALSE
 !
bE«bÀ
Ë&& (
TRUE
 != bEnable))

107  
DRV_ERR_PARA
;

109 #i‡
deföed
(
CHIPSET_RTL8305
)

110 i‡(
FALSE
 =
bE«bÀ
)

112 
tdE«bÀ
 = 
DISABLED
;

116 
tdE«bÀ
 = 
ENABLED
;

120 
tdRë
 = 
πk_˝u_ègP‹t_£t
(6, 
CPU_INSERT_TO_TRAPPING
);

121 i‡(
RT_ERR_OK
 !
tdRë
)

123  
DRV_SDK_GEN_ERROR
;

126 
tdRë
 = 
πk_˝u_íabÀ_£t
(
tdE«bÀ
);

127 i‡(
RT_ERR_OK
 !
tdRë
)

129  
DRV_SDK_GEN_ERROR
;

133  
DRV_OK
;

139 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_statistics.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~"Ál_mib.h
"

83 
DRV_RET_E
 
HÆ_GëMibP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
)

85 
phyid_t
 
p‹t
 = 0;

86 
Ál_mib_öfo_t
 
mib_öfo
;

88 if(!
VALID_PORT
(
Õ‹t
))

90  
DRV_ERR_PARA
;

92 if(
NULL
 =
p_uŒSèt
)

94  
DRV_ERR_PARA
;

96 *
p_uŒSèt
 = 0;

97 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

99 
mem£t
(&
mib_öfo
, 0, (
Ál_mib_öfo_t
));

100 ()
Ál_gë_mib_öfo
(
CHIPID
(
p‹t
), 
PORTID
’‹t), &
mib_öfo
);

102 
PktTy≥
)

104 
INOCTETS
:

105 *
p_uŒSèt
 = ((
UINT64
)
mib_öfo
.
RxGoodByã_hi
 << 32)

106 + (
UINT64
)
mib_öfo
.
RxGoodByã_lo
;

108 
INUCAST
:

109 *
p_uŒSèt
 = 
mib_öfo
.
Rx64Byã
 +

110 
mib_öfo
.
Rx128Byã
 +

111 
mib_öfo
.
Rx256Byã
 +

112 
mib_öfo
.
Rx512Byã
 +

113 
mib_öfo
.
Rx1024Byã
 +

114 
mib_öfo
.
Rx1518Byã
 +

115 
mib_öfo
.
RxMaxByã
 -

116 
mib_öfo
.
RxFcsEº
 -

117 
mib_öfo
.
RxAŒignEº
 -

118 
mib_öfo
.
RxFøgmít
 -

119 
mib_öfo
.
RxFøgmít
 -

120 
mib_öfo
.
RxBrﬂd
 -

121 
mib_öfo
.
RxMu…i
 -

122 
mib_öfo
.
RxPau£
;

124 
INNUCAST
:

125 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
RxBrﬂd
 + mib_öfo.
RxMu…i
);

126  
DRV_OK
;

127 
INDISCARDS
:

128 *
p_uŒSèt
 = 
mib_öfo
.
RxOvîFlow
 +

129 
mib_öfo
.
Fûãªd
;

131 
INERRS
:

132 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
RxFcsEº
 +

133 
mib_öfo
.
RxAŒignEº
 +

134 
mib_öfo
.
RxFøgmít
 +

135 
mib_öfo
.
RxTooL⁄g
 +

136 
mib_öfo
.
RxRu¡
);

137  
DRV_OK
;

138 
INUNKNOWN
:

139 *
p_uŒSèt
 = 0;

140 
OUTOCTETS
:

141 *
p_uŒSèt
 = ((
UINT64
)
mib_öfo
.
TxByã_hi
 << 32)

142 + (
UINT64
)
mib_öfo
.
TxByã_lo
;

144 
OUTUCAST
:

145 *
p_uŒSèt
 = 
mib_öfo
.
Tx64Byã
 +

146 
mib_öfo
.
Tx128Byã
 +

147 
mib_öfo
.
Tx256Byã
 +

148 
mib_öfo
.
Tx512Byã
 +

149 
mib_öfo
.
Tx1024Byã
 +

150 
mib_öfo
.
Tx1518Byã
 +

151 
mib_öfo
.
TxMaxByã
 -

152 
mib_öfo
.
TxBrﬂd
 -

153 
mib_öfo
.
TxPau£
 -

154 
mib_öfo
.
TxMu…i
;

156 
OUTNUCAST
:

157 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
TxBrﬂd
 + mib_öfo.
TxMu…i
);

159 
OUTDISCARDS
:

161 *
p_uŒSèt
 = (
UINT64
)(0);

163 
OUTERRS
:

165 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
TxCﬁlisi⁄
 +

166 
mib_öfo
.
TxL©eCﬁ
 + mib_öfo.
TxDe„r
);

168 
OUTQLEN
:

169  
DRV_OK
;

170 
HCINOCTETS
:

171 *
p_uŒSèt
 = ((
UINT64
)
mib_öfo
.
RxGoodByã_hi
 << 32)

172 + (
UINT64
)
mib_öfo
.
RxGoodByã_lo
;

174 
HCINUCAST
:

175 *
p_uŒSèt
 = 
mib_öfo
.
Rx64Byã
 +

176 
mib_öfo
.
Rx128Byã
 +

177 
mib_öfo
.
Rx256Byã
 +

178 
mib_öfo
.
Rx512Byã
 +

179 
mib_öfo
.
Rx1024Byã
 +

180 
mib_öfo
.
Rx1518Byã
 +

181 
mib_öfo
.
RxMaxByã
 -

182 
mib_öfo
.
RxFcsEº
 -

183 
mib_öfo
.
RxAŒignEº
 -

184 
mib_öfo
.
RxFøgmít
 -

185 
mib_öfo
.
RxFøgmít
 -

186 
mib_öfo
.
RxBrﬂd
 -

187 
mib_öfo
.
RxMu…i
 -

188 
mib_öfo
.
RxPau£
;

190 
HCINMCAST
:

191 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
RxMu…i
);

193 
HCINBCAST
:

194 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
RxBrﬂd
);

196 
HCOUTOCTETS
:

197 *
p_uŒSèt
 = ((
UINT64
)
mib_öfo
.
TxByã_hi
 << 32)

198 + (
UINT64
)
mib_öfo
.
TxByã_lo
;

200 
HCOUTUCAST
:

201 *
p_uŒSèt
 = 
mib_öfo
.
Tx64Byã
 +

202 
mib_öfo
.
Tx128Byã
 +

203 
mib_öfo
.
Tx256Byã
 +

204 
mib_öfo
.
Tx512Byã
 +

205 
mib_öfo
.
Tx1024Byã
 +

206 
mib_öfo
.
Tx1518Byã
 +

207 
mib_öfo
.
TxMaxByã
 -

208 
mib_öfo
.
TxBrﬂd
 -

209 
mib_öfo
.
TxPau£
 -

210 
mib_öfo
.
TxMu…i
;

212 
HCOUTMCAST
:

213 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
TxMu…i
);

215 
HCOUTBCAST
:

216 *
p_uŒSèt
 = (
UINT64
)(
mib_öfo
.
TxBrﬂd
);

218 
PORTDELAYEXEEDE_DISCARDS
:

219  
DRV_ERR_PARA
;

220 
PORTMTUEXCEED_DISCARDS
:

221  
DRV_ERR_PARA
;

222 
TPPPORT_IN_FRAMES
:

223 *
p_uŒSèt
 = 
mib_öfo
.
RxRu¡
 +

224 
mib_öfo
.
Rx64Byã
 +

225 
mib_öfo
.
Rx128Byã
 +

226 
mib_öfo
.
Rx256Byã
 +

227 
mib_öfo
.
Rx512Byã
 +

228 
mib_öfo
.
Rx1024Byã
 +

229 
mib_öfo
.
Rx1518Byã
 +

230 
mib_öfo
.
RxMaxByã
 +

231 
mib_öfo
.
RxTooL⁄g
;

233 
TPPORT_OUT_FRAMS
:

234 *
p_uŒSèt
 = 
mib_öfo
.
TxUndîRun
 +

235 
mib_öfo
.
Tx64Byã
 +

236 
mib_öfo
.
Tx128Byã
 +

237 
mib_öfo
.
Tx256Byã
 +

238 
mib_öfo
.
Tx512Byã
 +

239 
mib_öfo
.
Tx1024Byã
 +

240 
mib_öfo
.
Tx1518Byã
 +

241 
mib_öfo
.
TxMaxByã
 +

242 
mib_öfo
.
TxOvîSize
;

244 
PORT_IN_DISCARDS
:

245 *
p_uŒSèt
 +
mib_öfo
.
RxOvîFlow
 + mib_öfo.
Fûãªd
;

247 
DOT3STATSALIGNERR
:

248  
DRV_ERR_PARA
;

249 
DOT3STATSFCSERR
:

250 *
p_uŒSèt
 +
mib_öfo
.
RxFcsEº
;

252 
DOT3STATSSINGLECOLLISION
:

253 *
p_uŒSèt
 +
mib_öfo
.
TxSögÆCﬁ
;

255 
DOT3STATSMULTICOLLISION
:

256 *
p_uŒSèt
 +
mib_öfo
.
TxMu…iCﬁ
;

258 
DOT3STATSSQETESTERR
:

259  
DRV_ERR_PARA
;

260 
DOT3STATSDEFERREDTX
:

261 *
p_uŒSèt
 +
mib_öfo
.
TxDe„r
;

263 
DOT3STATSLATECOLLISION
:

264 *
p_uŒSèt
 +
mib_öfo
.
TxL©eCﬁ
;

266 
DOT3STATSEXCOLLSION
:

267 *
p_uŒSèt
 +
mib_öfo
.
TxAb‹tCﬁ
;;

269 
DOT3STATSINTERMACTXERR
:

270  
DRV_ERR_PARA
;

271 
DOT3STATSCARRIERSENSEERR
:

272  
DRV_ERR_PARA
;

273 
DOT3STATSFRAMETOOLONG
:

274  
DRV_ERR_PARA
;

275 
DOT3STATSINTERMACRXERR
:

276  
DRV_ERR_PARA
;

277 
DOT3STATSSYMBOLERR
:

278  
DRV_ERR_PARA
;

280  
DRV_ERR_PARA
;

283  
DRV_OK
;

301 
DRV_RET_E
 
HÆ_SëMibCou¡Sync
()

304  
DRV_OK
;

325 
DRV_RET_E
 
HÆ_SëMibCou¡Re£t
(
p‹t_num_t
 
Õ‹t
)

327 if(!
VALID_PORT
(
Õ‹t
))

329  
DRV_ERR_PARA
;

333  
DRV_ERR_UNKNOW
;

336  
DRV_OK
;

359 
DRV_RET_E
 
HÆ_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
)

361 
phyid_t
 
p‹t
 = 0;

362 
Ál_mib_öfo_t
 
mib_öfo
;

364 if(!
VALID_PORT
(
Õ‹t
))

366  
DRV_ERR_PARA
;

368 if(
NULL
 =
ªtu∫VÆue
)

370  
DRV_ERR_PARA
;

373 *
ªtu∫VÆue
 = 0;

374 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

375 
mem£t
(&
mib_öfo
, 0, (
Ál_mib_öfo_t
));

376 ()
Ál_gë_mib_öfo
(
CHIPID
(
p‹t
), 
PORTID
’‹t), &
mib_öfo
);

378 
cou¡îName
)

380 
INPUT_TOTAL_PACKETS
:

381 *
ªtu∫VÆue
 = 
mib_öfo
.
RxRu¡
 +

382 
mib_öfo
.
Rx64Byã
 +

383 
mib_öfo
.
Rx128Byã
 +

384 
mib_öfo
.
Rx256Byã
 +

385 
mib_öfo
.
Rx512Byã
 +

386 
mib_öfo
.
Rx1024Byã
 +

387 
mib_öfo
.
Rx1518Byã
 +

388 
mib_öfo
.
RxMaxByã
 +

389 
mib_öfo
.
RxTooL⁄g
;

390  
DRV_OK
;

391 
INPUT_TOTAL_BYTES
:

392 *
ªtu∫VÆue
 = ((
UINT64
)
mib_öfo
.
RxGoodByã_hi
 << 32)

393 + (
UINT64
)
mib_öfo
.
RxGoodByã_lo


394 + (
UINT64
)
mib_öfo
.
RxBadByã_lo


395 + ((
UINT64
)
mib_öfo
.
RxBadByã_hi
 << 32);

396  
DRV_OK
;

397 
INPUT_TOTAL_BROADCASTS
:

398 *
ªtu∫VÆue
 = 
mib_öfo
.
RxBrﬂd
;

399  
DRV_OK
;

400 
INPUT_TOTAL_MULTICASTS
:

401 *
ªtu∫VÆue
 = 
mib_öfo
.
RxMu…i
;

402  
DRV_OK
;

403 
INPUT_ERRORS
:

404 *
ªtu∫VÆue
 = 
mib_öfo
.
RxTooL⁄g


405 + 
mib_öfo
.
RxFøgmít


406 + 
mib_öfo
.
RxRu¡


407 + 
mib_öfo
.
RxAŒignEº


408 + 
mib_öfo
.
RxFcsEº
;

409  
DRV_OK
;

410 
INPUT_PAUSE_PACKETS
:

411 *
ªtu∫VÆue
 = 
mib_öfo
.
RxPau£
;

412  
DRV_OK
;

413 
OUTPUT_TOTAL_PACKETS
:

414 *
ªtu∫VÆue
 = 
mib_öfo
.
TxUndîRun


415 + 
mib_öfo
.
Tx64Byã


416 + 
mib_öfo
.
Tx128Byã


417 + 
mib_öfo
.
Tx256Byã


418 + 
mib_öfo
.
Tx512Byã


419 + 
mib_öfo
.
Tx1024Byã


420 + 
mib_öfo
.
Tx1518Byã


421 + 
mib_öfo
.
TxMaxByã


422 + 
mib_öfo
.
TxOvîSize


423 + 
mib_öfo
.
TxCﬁlisi⁄


424 + 
mib_öfo
.
TxAb‹tCﬁ


425 + 
mib_öfo
.
TxMu…iCﬁ


426 + 
mib_öfo
.
TxSögÆCﬁ


427 + 
mib_öfo
.
TxExcDe„r


428 + 
mib_öfo
.
TxDe„r


429 + 
mib_öfo
.
TxL©eCﬁ
;

430  
DRV_OK
;

431 
OUTPUT_TOTAL_BYTES
:

432 *
ªtu∫VÆue
 = ((
UINT64
)
mib_öfo
.
TxByã_hi
 << 32)

433 + (
UINT64
)
mib_öfo
.
TxByã_lo
;

434  
DRV_OK
;

435 
OUTPUT_TOTAL_BROADCASTS
:

436 *
ªtu∫VÆue
 = 
mib_öfo
.
TxBrﬂd
;

437  
DRV_OK
;

438 
OUTPUT_TOTAL_MULTICASTS
:

439 *
ªtu∫VÆue
 = 
mib_öfo
.
TxMu…i
;

440  
DRV_OK
;

441 
OUTPUT_ERRORS
:

442 *
ªtu∫VÆue
 = 
mib_öfo
.
TxUndîRun


443 + 
mib_öfo
.
TxOvîSize
;

444  
DRV_OK
;

445 
OUTPUT_PAUSE_PACKETS
:

446 *
ªtu∫VÆue
 = 
mib_öfo
.
TxPau£
;

447  
DRV_OK
;

449  
DRV_ERR_PARA
;

473 
DRV_RET_E
 
HÆ_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
°©i°icsName
, 
UINT64
 *
ªtu∫VÆue
)

475 
phyid_t
 
p‹t
 = 0;

476 
Ál_mib_öfo_t
 
mib_öfo
;

477 
UINT64
 
RxUniPktsRegVÆ
=0;

478 
UINT64
 
RxUniEºPkt
 = 0;

480 if(!
VALID_PORT
(
Õ‹t
))

482  
DRV_ERR_PARA
;

484 if(
NULL
 =
ªtu∫VÆue
)

486  
DRV_ERR_PARA
;

489 *
ªtu∫VÆue
 = 0;

490 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

491 
mem£t
(&
mib_öfo
, 0, (
Ál_mib_öfo_t
));

492 ()
Ál_gë_mib_öfo
(
CHIPID
(
p‹t
), 
PORTID
’‹t), &
mib_öfo
);

494 
°©i°icsName
)

497 
RxDr›Pkts
:

498 *
ªtu∫VÆue
 = 
mib_öfo
.
RxOvîFlow


499 + 
mib_öfo
.
Fûãªd
;

501 
RxO˘ës
:

502 *
ªtu∫VÆue
 = ((
UINT64
)
mib_öfo
.
RxGoodByã_hi
 << 32)

503 + (
UINT64
)
mib_öfo
.
RxGoodByã_lo


504 + (
UINT64
)
mib_öfo
.
RxBadByã_lo


505 + ((
UINT64
)
mib_öfo
.
RxBadByã_hi
 << 32);

507 
RxBrﬂdˇ°Pkts
:

508 *
ªtu∫VÆue
 = 
mib_öfo
.
RxBrﬂd
;

510 
RxMu…iˇ°Pkts
:

511 *
ªtu∫VÆue
 = 
mib_öfo
.
RxMu…i
;

513 
RxSACh™ges
:

514  
DRV_ERR_PARA
;

515 
RxUdîsizePkts
:

516 *
ªtu∫VÆue
 = 
mib_öfo
.
RxRu¡
;

518 
RxOvîsizePkts
:

519 *
ªtu∫VÆue
 = 
mib_öfo
.
RxTooL⁄g
;

521 
RxFøgmít
:

522 *
ªtu∫VÆue
 = 
mib_öfo
.
RxFøgmít
;

524 
RxJabbîs
:

525  
DRV_ERR_PARA
;

526 
RxUniˇ°Pkts
:

527 
RxUniPktsRegVÆ
 = 
mib_öfo
.
Rx64Byã
 +

528 
mib_öfo
.
Rx128Byã
 +

529 
mib_öfo
.
Rx256Byã
 +

530 
mib_öfo
.
Rx512Byã
 +

531 
mib_öfo
.
Rx1024Byã
 +

532 
mib_öfo
.
Rx1518Byã
;

534 
RxUniEºPkt
 = 
mib_öfo
.
RxMaxByã
 +

535 
mib_öfo
.
RxFcsEº
 +

536 
mib_öfo
.
RxAŒignEº
 +

537 
mib_öfo
.
RxFøgmít
 +

538 
mib_öfo
.
RxFøgmít
 +

539 
mib_öfo
.
RxBrﬂd
 +

540 
mib_öfo
.
RxMu…i
 +

541 
mib_öfo
.
RxPau£
;

543 
RxUniPktsRegVÆ
 = (RxUniPktsRegVÆ >
RxUniEºPkt
) ? RxUniPktsRegVal - RxUniErrPkt : 0;

544 *
ªtu∫VÆue
 = 
RxUniPktsRegVÆ
;

546 
RxAlignmítEº‹s
:

547 *
ªtu∫VÆue
 = 
mib_öfo
.
RxAŒignEº
;

548  
DRV_ERR_PARA
;

549 
RxFCSEº‹s
:

550 *
ªtu∫VÆue
 = 
mib_öfo
.
RxFcsEº
;

552 
RxGoodO˘ës
:

553 *
ªtu∫VÆue
 = ((
UINT64
)
mib_öfo
.
RxGoodByã_hi
 << 32)

554 + (
UINT64
)
mib_öfo
.
RxGoodByã_lo
;

556 
RxEx˚ssSizeDisc
:

557 *
ªtu∫VÆue
 = 
mib_öfo
.
RxTooL⁄g
;;

559 
RxPau£Pkts
:

560 *
ªtu∫VÆue
 = 
mib_öfo
.
RxPau£
;

562 
RxSymbﬁEº‹s
:

563 *
ªtu∫VÆue
 = 0;

565 
RxQosQPkt
:

566  
DRV_ERR_PARA
;

567 
RxQosQO˘ë
:

568  
DRV_ERR_PARA
;

570 
TxDr›Pkts
:

571 *
ªtu∫VÆue
 = 
mib_öfo
.
TxAb‹tCﬁ


572 + 
mib_öfo
.
TxExcDe„r
;

574 
TxO˘ës
:

575 *
ªtu∫VÆue
 = ((
UINT64
)
mib_öfo
.
TxByã_hi
 << 32)

576 + (
UINT64
)
mib_öfo
.
TxByã_lo
;

578 
TxBrﬂdˇ°Pkts
:

579 *
ªtu∫VÆue
 = 
mib_öfo
.
TxBrﬂd
;

581 
TxMu…iˇ°Pkts
:

582 *
ªtu∫VÆue
 = 
mib_öfo
.
TxMu…i
;

583  
DRV_OK
;

584 
TxCﬁlisi⁄s
:

585 *
ªtu∫VÆue
 = 
mib_öfo
.
TxCﬁlisi⁄
;

587 
TxUniˇ°Pkts
:

588 *
ªtu∫VÆue
 = 
mib_öfo
.
Tx64Byã
 +

589 
mib_öfo
.
Tx128Byã
 +

590 
mib_öfo
.
Tx256Byã
 +

591 
mib_öfo
.
Tx512Byã
 +

592 
mib_öfo
.
Tx1024Byã
 +

593 
mib_öfo
.
Tx1518Byã
 +

594 
mib_öfo
.
TxMaxByã
 -

595 
mib_öfo
.
TxBrﬂd
 -

596 
mib_öfo
.
TxPau£
 -

597 
mib_öfo
.
TxMu…i
;

599 
TxSögÀCﬁlisi⁄
:

600 *
ªtu∫VÆue
 = 
mib_öfo
.
TxSögÆCﬁ
;

602 
TxMu…ùÀCﬁlisi⁄
:

603 *
ªtu∫VÆue
 = 
mib_öfo
.
TxMu…iCﬁ
;

605 
TxDe„ºedTønsmô
:

606 *
ªtu∫VÆue
 = 
mib_öfo
.
TxExcDe„r
;

608 
TxL©eCﬁlisi⁄
:

609 *
ªtu∫VÆue
 = 
mib_öfo
.
TxL©eCﬁ
;

611 
TxPau£Pkts
:

612 *
ªtu∫VÆue
 = 
mib_öfo
.
TxPau£
;

614 
TxFømeInDisc
:

615  
DRV_ERR_PARA
;

616 
TxQoSQPkt
:

617  
DRV_ERR_PARA
;

618 
TxQoSQO˘ë
:

619  
DRV_ERR_PARA
;

620 
Pkt64O˘ës
:

621 *
ªtu∫VÆue
 = 
mib_öfo
.
Tx64Byã
;

623 
Pkt65to127O˘ës
:

624 *
ªtu∫VÆue
 = 
mib_öfo
.
Tx128Byã
;

626 
Pkt128to255O˘ës
:

627 *
ªtu∫VÆue
 = 
mib_öfo
.
Tx256Byã
;

629 
Pkt256to511O˘ës
:

630 *
ªtu∫VÆue
 = 
mib_öfo
.
Tx512Byã
;

632 
Pkt512to1023O˘ës
:

633 *
ªtu∫VÆue
 = 
mib_öfo
.
Tx1024Byã
;

635 
Pkt1024to1522o˘ës
:

636 *
ªtu∫VÆue
 = 
mib_öfo
.
Tx1518Byã
;

638 
RxEºPkts
:

639 *
ªtu∫VÆue
 = 
mib_öfo
.
RxTooL⁄g


640 + 
mib_öfo
.
RxFøgmít


641 + 
mib_öfo
.
RxRu¡


642 + 
mib_öfo
.
RxAŒignEº


643 + 
mib_öfo
.
RxFcsEº
;

645 
TxEºPkts
:

646 *
ªtu∫VÆue
 = 
mib_öfo
.
TxCﬁlisi⁄


647 + 
mib_öfo
.
TxExcDe„r


648 + 
mib_öfo
.
TxL©eCﬁ
;

651  
DRV_ERR_PARA
;

654  
DRV_OK
;

657 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_stub.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 #ifde‡
CHIPSET_RTL8328


26 
	~<comm⁄/îr‹.h
>

27 
	~<comm⁄/π_îr‹.h
>

28 
	~<πk/vœn.h
>

29 
	~<hÆ/comm⁄/hÆ˘æ.h
>

30 #ñi‡
deföed
(
CHIPSET_RTL8305
)

31 
	~"πl8367b_asicdrv_vœn.h
"

32 
	~"πk_≠i.h
"

33 
	~"πk_≠i_ext.h
"

56 
CÃPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
){  ;}

57 
CÃPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
){  ;}

58 
DRV_RET_E
 
Eº‹Sdk2Drv
(
INT32
 
iRtkEº‹
){  
DRV_OK
;}

59 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
){  
TRUE
;}

60 
MaskLogic2Phy
(
logic_pmask_t
 *
lgcPMask_±r
, 
phy_pmask_t
 *
phyPMask_±r
){  ;}

61 
MaskPhy2Logic
(
phy_pmask_t
 *
phyPMask_±r
, 
logic_pmask_t
 *
lgcPMask_±r
){  ;}

62 
PhyMaskAddCpuP‹t
(
phy_pmask_t
 *
mska
){  ;}

63 
PhyMaskAddSèckP‹t
(
phy_pmask_t
 *
mska
){  ;}

64 
PhyMaskAnd
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
){  ;}

65 
PhyMaskC›y
(
phy_pmask_t
 *
d°Msk
,phy_pmask_à*
§cMsk
){  ;}

66 
PhyMaskNeg©e
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
){  ;}

67 
PhyMaskOr
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
){  ;}

68 
PhyMaskRemove
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
){  ;}

69 
PhyMaskRemoveCpuP‹t
(
phy_pmask_t
 *
mska
){  ;}

70 
PhyMaskX‹
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
){  ;}

71 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
){  0;}

72 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
){  0;}

73 
SëPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
){  ;}

74 
SëPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
){  ;}

75 
BOOL
 
T°PhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
){  
TRUE
;}

76 
phyid_t
 
PhyGëSèckP‹t
(
UINT32
 
ulUnô
, UINT32 
ulSèckIndex
){  0;}

77 
BOOL
 
IsSèckP‹t
(
phyid_t
 
uiPhyId
){  
TRUE
;}

84 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiAbûôy
, UINT32 
uiP‹tTy≥
Ë{  
DRV_OK
;}

86 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
Ë{  
DRV_OK
;}

87 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiFlow˘æ
Ë{  
DRV_OK
;}

88 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiJumbo
Ë{  
DRV_OK
;}

89 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLí
Ë{  
DRV_OK
;}

91 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p°P‹tMask
Ë{  
DRV_OK
;}

92 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
Ë{  
DRV_OK
;}

94 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMedium
Ë{  
DRV_OK
;}

95 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMedium
Ë{  
DRV_OK
;}

96 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiPrio
Ë{  
DRV_OK
;}

97 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
Ë{  
DRV_OK
;}

98 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAbûôy
, UINT32 
uiP‹tTy≥
Ë{  
DRV_OK
;}

99 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAut⁄
, UINT32 
uiP‹tTy≥
Ë{  
DRV_OK
;}

100 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
, UINT32 
uiP‹tTy≥
Ë{  
DRV_OK
;}

102 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPau£Tx
, UINT32 
uiPau£Rx
Ë{  
DRV_OK
;}

103 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiJumbo
Ë{  
DRV_OK
;}

106 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
, UINT32 
uiP‹tTy≥
Ë{  
DRV_OK
;}

107 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
Ë{  
DRV_OK
;}

108 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p°P‹tMask
Ë{  
DRV_OK
;}

109 
DRV_RET_E
 
HÆ_P‹tLedInô
(Ë{  
DRV_OK
;}

110 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
Ë{  
DRV_OK
;}

111 
DRV_RET_E
 
HÆ_FibîP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
Ë{  
DRV_OK
;}

112 
DRV_RET_E
 
HÆ_C›≥rP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
Ë{  
DRV_OK
;}

113 
DRV_RET_E
 
HÆ_GëFibîS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
Ë{  
DRV_OK
;}

116 
DRV_RET_E
 
HÆ_SëP‹tSpdlx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSpdlx
Ë{  
DRV_OK
;}

117 
DRV_RET_E
 
HÆ_SëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
ªg_no
, UINT32 
ªg_vÆ
Ë{  
DRV_OK
;}

118 
DRV_RET_E
 
HÆ_GëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
pRegVÆ
, UINT32 
ªg_no
Ë{  
DRV_OK
;}

119 
DRV_RET_E
 
HÆ_GëSpdlxSë
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
uiSpdlx
Ë{  
DRV_OK
;}

120 
DRV_RET_E
 
HÆ_GëIsﬁ©eSë
(
logic_pmask_t
 *
p°P‹tMask
Ë{  
DRV_OK
;}

125 
DRV_RET_E
 
HÆ_SëAggrMode
(
UINT32
 
ulMode
Ë{  
DRV_OK
;}

126 
DRV_RET_E
 
HÆ_SëAggrGroup
(
agg_gΩ_num_t
 
gΩNum
, 
logic_pmask_t
 
°LgcMask
Ë{  
DRV_OK
;}

130 
DRV_RET_E
 
HÆ_GëVœnExi°Num
(
UINT32
 *
puiNum
Ë{  
DRV_OK
;}

131 
DRV_RET_E
 
HÆ_SëVœnMode
(
UINT32
 
ulMode
Ë{  
DRV_OK
;}

132 
DRV_RET_E
 
HÆ_SëVœnE¡ryCª©e
(
UINT32
 
ulVœnE¡ry
Ë{  
DRV_OK
;}

133 
DRV_RET_E
 
HÆ_SëVœnE¡ryDñëe
(
UINT32
 
ulVœnE¡ry
Ë{  
DRV_OK
;}

134 
DRV_RET_E
 
HÆ_SëVœnMembîRemove
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
Ë{  
DRV_OK
;}

135 
DRV_RET_E
 
HÆ_SëVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
Ë{  
DRV_OK
;}

136 
DRV_RET_E
 
HÆ_SëMcVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
Ë{  
DRV_OK
;}

137 
DRV_RET_E
 
HÆ_SëVÆnPvid
(
UINT32
 
ulLgcP‹tNumbî
, UINT32 
ulPvid
Ë{  
DRV_OK
;}

138 
DRV_RET_E
 
HÆ_SëVœnP‹tVœnMembî
(
UINT32
 
ulLgcP‹tNumbî
, 
logic_pmask_t
 
°LgcMask
Ë{  
DRV_OK
;}

139 
DRV_RET_E
 
HÆ_GëVœnMembî
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 * 
p°LgcMask
,Üogic_pmask_à* 
p°LgcMaskU¡ag
Ë{  
DRV_OK
;}

140 
DRV_RET_E
 
HÆ_AddCpuToVœnMembî
(
UINT32
 
ulVœnId
Ë{  
DRV_OK
;}

141 
DRV_RET_E
 
HÆ_RemoveCpuFromVœnMembî
(
UINT32
 
ulVœnId
Ë{  
DRV_OK
;}

143 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
Ë|| deföed(
CONFIG_PRODUCT_CC754E
)

144 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn•Cª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnMode
Ë{  
DRV_OK
;}

145 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn•Dñëe
(
UINT32
 
uiLP‹tId
Ë{  
DRV_OK
;}

146 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTagCª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnCfg
Ë{  
DRV_OK
;}

147 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTagDñëe
(
UINT32
 
uiLP‹tId
Ë{  
DRV_OK
;}

148 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn¶Cª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnMode
Ë{  
DRV_OK
;}

149 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn¶Dñëe
(
UINT32
 
uiLP‹tId
Ë{  
DRV_OK
;}

150 
DRV_RET_E
 
HÆ_CfgP‹tCtcVœnSë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
Ë{  
DRV_OK
;}

151 
DRV_RET_E
 
HÆ_DñP‹tBa£VœnMemb
(
UINT32
 
uiVœnId
, 
logic_pmask_t
 
°LgcMask
Ë{  
DRV_OK
;}

152 
DRV_RET_E
 
HÆ_AddP‹tBa£VœnMemb
(
UINT32
 
uiVœnId
, 
logic_pmask_t
 
°LgcMask
Ë{  
DRV_OK
;}

153 
DRV_RET_E
 
HÆ_AddP‹tBa£VœnMemByIndx
(
UINT32
 
uiE¡ryId
, 
logic_pmask_t
 
°LgcMask
Ë{  
DRV_OK
;}

154 
DRV_RET_E
 
HÆ_DñP‹tBa£VœnMemByIndx
(
UINT32
 
uiE¡ryId
, 
logic_pmask_t
 
°LgcMask
Ë{  
DRV_OK
;}

155 
DRV_RET_E
 
HÆ_CÃP‹tBa£VœnE¡ryByVid
(
UINT32
 
uiVœnId
Ë{  
DRV_OK
;}

156 
DRV_RET_E
 
HÆ_SëP‹tVœnIngªssFûãr
(
UINT32
 
uiLP‹t
, 
BOOL
 
bE«bÀ
Ë{  
DRV_OK
;}

157 
DRV_RET_E
 
HÆ_SëP‹tVœnIngªssMode
–
UINT32
 
uiLP‹t
, 
PORT_INGRESS_MODE_E
 
íIngªssMode
Ë{  
DRV_OK
;}

158 
DRV_RET_E
 
HÆ_SëP‹tVœnEgªssMode
–
UINT32
 
uiLP‹t
, 
PORT_EGRESS_MODE_E
 
íEgªssMode
Ë{  
DRV_OK
;}

159 
DRV_RET_E
 
HÆ_A˛RuÀEm±yNumGë
(
UINT32
 *
pA˛Em±yNum
Ë{  
DRV_OK
;}

160 
DRV_RET_E
 
HÆ_CtcVœnEnoughVœnIdxE¡ryCheck
(
CTC_VLAN_CFG_S
 *
p°VœnMode
, 
UINT32
 *
pbEnough
Ë{  
DRV_OK
;}

163 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcMcVœnCª©e
(
UINT32
 
uiLP‹tId
, UINT32 
uiMcVœn
Ë{  
DRV_OK
;}

164 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcMcVœnDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiMcVœn
Ë{  
DRV_OK
;}

169 
DRV_RET_E
 
HÆ_SëCpuP‹tMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
Ë{  
DRV_OK
;}

170 
DRV_RET_E
 
HÆ_SëMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
, 
logic_pmask_t
 
°P‹tMask
Ë{  
DRV_OK
;}

171 
DRV_RET_E
 
HÆ_GëMacLó∫E«bÀ
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulE«bÀ
Ë{  
DRV_OK
;}

172 
DRV_RET_E
 
HÆ_SëMacCpuMacAdd
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addªss
Ë{  
DRV_OK
;}

173 
DRV_RET_E
 
HÆ_SëMacFlushUˇ°Mac
(
mac_dñëe_t
 
°MacDñëe
Ë{  
DRV_OK
;}

174 
DRV_RET_E
 
HÆ_SëMacAddUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
Ë{  
DRV_OK
;}

175 
DRV_RET_E
 
HÆ_SëMacDñUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
Ë{  
DRV_OK
;}

176 
DRV_RET_E
 
HÆ_SëMacAddMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
Ë{  
DRV_OK
;}

177 
DRV_RET_E
 
HÆ_SëMacDñMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
Ë{  
DRV_OK
;}

178 
DRV_RET_E
 
HÆ_SëMacAgeTime
(
UINT32
 
ulSec⁄d
Ë{  
DRV_OK
;}

179 
DRV_RET_E
 
HÆ_SëMacLó∫Limô
(
UINT32
 
ulLgcP‹t
, UINT32 
uLlimô
, UINT32 
ulDisF‹w¨d
Ë{  
DRV_OK
;}

180 
DRV_RET_E
 
HÆ_GëMacUˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
Ë{  
DRV_OK
;}

181 
DRV_RET_E
 
HÆ_GëMacMˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
Ë{  
DRV_OK
;}

182 
DRV_RET_E
 
HÆ_SëMacSëMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
Ë{  
DRV_OK
;}

183 
DRV_RET_E
 
HÆ_SëMacLookFaûFrd
(
logic_pmask_t
 
°P‹tMask
Ë{  
DRV_OK
;}

184 
DRV_RET_E
 
HÆ_GëMacLó∫Cou¡
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulCou¡
Ë{  
DRV_OK
;}

185 
DRV_RET_E
 
HÆ_Re‰eshUCa°
(
UINT32
 
ulI¡îvÆ
Ë{  
DRV_OK
;}

187 
DRV_RET_E
 
HÆ_GëMacUˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
Ë{  
DRV_OK
;}

188 
DRV_RET_E
 
HÆ_GëMacNextVÆidUˇ°
(
UINT32
 
uiSèπIndex
, 
mac_dump_uˇ°_èb_t
* 
p°Uˇ°E¡ry
, UINT32 *
puiCuºítIndex
Ë{  
DRV_OK
;}

189 
DRV_RET_E
 
HÆ_GëMacMˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
Ë{  
DRV_OK
;}

190 
DRV_RET_E
 
HÆ_GëMacNextVÆidMˇ°
(
UINT32
 
uiSèπIndex
, 
mac_mˇ°_t
* 
p°Mˇ°E¡ry
, UINT32 *
puiCuºítIndex
Ë{  
DRV_OK
;}

191 
DRV_RET_E
 
HÆ_GëMacUˇ°DumpS‹ãd
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
Ë{  
DRV_OK
;}

192 
DRV_RET_E
 
HÆ_SëMacTøpToCpu
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
Ë{  
DRV_OK
;}

193 
DRV_RET_E
 
HÆ_GëMacFödC⁄Êi˘Mac
(
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
Ë{  
DRV_OK
;}

195 
DRV_RET_E
 
HÆ_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
Ë{  
DRV_OK
;}

197 
DRV_RET_E
 
HÆ_GëMacByIndex
(
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 * 
p°TmpMacE¡ry
Ë{  
DRV_OK
;}

198 
DRV_RET_E
 
HÆ_GëMacM‹eByIndex
(
UINT32
 
ulSèπIdx
, UINT32 
ulGëCou¡
,

199 
ULONG
 
u£rPoöãr
, 
UINT32
* 
pulCou¡Out
, UINT32* 
pulNextIdx
, UINT32 
ulPD©aTy≥
Ë{  
DRV_OK
;}

201 
DRV_RET_E
 
HÆ_GëMacExa˘
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 * 
p°TmpMac
Ë{  
DRV_OK
;}

202 
DRV_RET_E
 
HÆ_GëMˇ°Cou¡
(
UINT32
 * 
pulMˇ°Cou¡
Ë{  
DRV_OK
;}

203 
DRV_RET_E
 
HÆ_SëMˇ°LookupMissDr›
(
UINT32
 
ulE«bÀ
Ë{  
DRV_OK
;}

204 
DRV_RET_E
 
HÆ_SëIgmpPktA˘i⁄
(
UINT32
 
ulA˘i⁄
Ë{  
DRV_OK
;}

205 
DRV_RET_E
 
HÆ_SëUnKnowIp4Mˇ°A˘
(
MCAST_UNKNOW_ACT_E
 
íA˘Mode
Ë{  
DRV_OK
;}

209 
DRV_RET_E
 
HÆ_SëMúr‹Group
(
p‹t_num_t
 
múr‹De°P‹t
, 
logic_pmask_t
 
ögªssMask
,Üogic_pmask_à
egªssMask
Ë{  
DRV_OK
;}

210 
HÆ_InôMúr‹A˛GΩ
(Ë{  
DRV_OK
;}

211 
DRV_RET_E
 
HÆ_SëMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
, 
UINT32
 *
puiMúr‹GΩId
Ë{  
DRV_OK
;}

212 
DRV_RET_E
 
HÆ_DñMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
Ë{  
DRV_OK
;}

216 
DRV_RET_E
 
HÆ_GëMibP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
Ë{  
DRV_OK
;}

217 
DRV_RET_E
 
HÆ_SëMibCou¡Sync
(Ë{  
DRV_OK
;}

218 
DRV_RET_E
 
HÆ_SëMibCou¡Re£t
(
p‹t_num_t
 
Õ‹t
Ë{  
DRV_OK
;}

219 
DRV_RET_E
 
HÆ_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
Ë{  
DRV_OK
;}

220 
DRV_RET_E
 
HÆ_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
°©i°icsName
, 
UINT64
 *
ªtu∫VÆue
Ë{  
DRV_OK
;}

223 
DRV_RET_E
 
HÆ_SëR©ñimôInô
(Ë{  
DRV_OK
;}

224 
DRV_RET_E
 
HÆ_SëR©ñimôByP‹t
(
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
lP‹tMask
, UINT32 
ulKBps
Ë{  
DRV_OK
;}

225 
DRV_RET_E
 
HÆ_SëR©ñimôSt‹mCé
(
STORM_CTLTYPE_E
 
˘lTy≥
, 
logic_pmask_t
 
lP‹tMask
, 
STORM_CTLRATE_S
 
°St‹m
Ë{  
DRV_OK
;}

228 
DRV_RET_E
 
HÆ_SëQosInô
(Ë{  
DRV_OK
;}

229 
DRV_RET_E
 
HÆ_Së1pIngªssPri‹ôyRem≠
(
qos_8021p_to_öçri_t
 
°1pToI¡Pri
Ë{  
DRV_OK
;}

230 
DRV_RET_E
 
HÆ_SëDs˝IngªssPri‹ôyRem≠
(
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
Ë{  
DRV_OK
;}

231 
DRV_RET_E
 
HÆ_SëQosTru°Mode
(
UINT32
 
mode
Ë{  
DRV_OK
;}

232 
DRV_RET_E
 
HÆ_SëQosQueueSchedul
(
QueueMode_S
 
°QueueScheduÀ
Ë{  
DRV_OK
;}

233 
DRV_RET_E
 
HÆ_SëCos2QidRem≠
(
qos_8021p_to_öçri_t
 
°1pPri2qid
Ë{  
DRV_OK
;}

239 
DRV_RET_E
 
HÆ_SëEEEByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
Ë{  
DRV_OK
;}

240 
DRV_RET_E
 
HÆ_SëAutoPwrDwnByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
Ë{  
DRV_OK
;}

243 
DRV_RET_E
 
HÆ_GëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
Ë{  
DRV_OK
;}

247 
DRV_RET_E
 
HÆ_GëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 * 
pulSèã
Ë{  
DRV_OK
;}

248 
DRV_RET_E
 
HÆ_SëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulSèã
Ë{  
DRV_OK
;}

252 
DRV_RET_E
 
HÆ_soc_ªg_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 * 
pulD©a
Ë{  
DRV_OK
;}

253 
DRV_RET_E
 
HÆ_soc_ªg_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 
ulD©a
Ë{  
DRV_OK
;}

254 
DRV_RET_E
 
HÆ_soc_mem_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
Ë{  
DRV_OK
;}

255 
DRV_RET_E
 
HÆ_soc_mem_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
Ë{  
DRV_OK
;}

258 #ifde‡
CHIPSET_RTL8328


259 
DRV_RET_E
 
HÆ_GëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 * 
pulD©a
Ë{  
DRV_OK
;}

260 
DRV_RET_E
 
HÆ_SëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 
ulD©a
Ë{  
DRV_OK
;}

273 
DRV_RET_E
 
HÆ_SdkInôS≥cül
(
UINT32
 
unô
Ë{  
DRV_OK
;}

275 
DRV_RET_E
 
HÆ_GpioInô
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_CONTROL_E
 
gpio_˘l
, 
GPIO_DIRECTION_E
 
gpio_dú
Ë{  
DRV_OK
;}

276 
DRV_RET_E
 
HÆ_GpioD©aSë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 
gpio_d©a
Ë{  
DRV_OK
;}

277 
DRV_RET_E
 
HÆ_GpioD©aGë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 *
pgpio_d©a
Ë{  
DRV_OK
;}

278 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Së
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 
gpio_dú
Ë{  
DRV_OK
;}

279 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Gë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 *
pgpio_dú
Ë{  
DRV_OK
;}

281 
DRV_RET_E
 
HÆ_L2£nd
(*
pMsg
,
UINT
 
uiLí
,
l2_£nd_›
 *
pOp
Ë{  
DRV_OK
;}

286 
DRV_RET_E
 
HÆ_I2cFibîInô
(
VOID
Ë{  
DRV_OK
;}

288 
DRV_RET_E
 
HÆ_I2cFibîP‹tRód
(
p‹t_num_t
 
lgcP‹t
, 
UINT16
 
usAddr
, 
UINT8
* 
pucD©a
, 
UINT32
 
ulLí
, UINT32 
ulPD©aTy≥
Ë{  
DRV_OK
;}

291 #ifde‡
CHIPSET_OPL6750


292 
DRV_RET_E
 
HÆ_CpuInô
(Ë{  
DRV_OK
;}

296 
DRV_RET_E
 
HÆ_CfgP‹tCtcVœnGë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
Ë{  
DRV_OK
;}

299 
zj_debug
(
£q_fûe
 *
m
, *
v
){  0;}

302 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_vlan.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~"Ál_vœn.h
"

26 
	~"Ál_p‹tvœn.h
"

28 
	~<löux/•ölock_ty≥s.h
>

29 
	~<löux/•ölock.h
>

30 
	~<asm/uac˚ss.h
>

55 
•ölock_t
 
_•ö_hÆ_vœn_lock
 = 
SPIN_LOCK_UNLOCKED
;

57 
UINT32
 
_hÆ_vœn_num
 = 1;

66 
	#SPIN_HAL_MAC_LOCK
 
	`•ö_lock
(&
_•ö_hÆ_vœn_lock
)

	)

67 
	#SPIN_HAL_MAC_UNLOCK
 
	`•ö_u∆ock
(&
_•ö_hÆ_vœn_lock
)

	)

85 
DRV_RET_E
 
HÆ_GëVœnExi°Num
(
UINT32
 *
puiNum
)

87 if(
NULL
 =
puiNum
)

89  
DRV_ERR_PARA
;

92 
SPIN_HAL_MAC_LOCK
;

93 *
puiNum
 = 
_hÆ_vœn_num
;

94 
SPIN_HAL_MAC_UNLOCK
;

96  
DRV_OK
;

119 
DRV_RET_E
 
HÆ_SëVœnMode
(
UINT32
 
ulMode
)

121 
UINT32
 
ulUnô
, 
ulPP‹t
;

122 
sw_îr‹_t
 
ªt
;

124 
ulMode
)

126 
PVLAN
:

130 
PhyP‹tF‹
(
ulUnô
, 
ulPP‹t
)

132 ()
Ál_p‹t_1qmode_£t
(
ulUnô
, 
ulPP‹t
, 
FAL_1Q_DISABLE
);

136 
QVLAN
:

139 
PhyP‹tF‹
(
ulUnô
, 
ulPP‹t
)

141 ()
Ál_p‹t_1qmode_£t
(
ulUnô
, 
ulPP‹t
, 
FAL_1Q_SECURE
);

145  
DRV_ERR_PARA
;

148  
DRV_OK
;

169 
DRV_RET_E
 
HÆ_SëVœnE¡ryCª©e
(
UINT32
 
ulVœnId
)

171 
UINT32
 
ulUnô
;

172 
sw_îr‹_t
 
ªt
;

174 if(!
VALID_VLAN_ID
(
ulVœnId
))

176  
DRV_ERR_PARA
;

179 
UnôF‹
(
ulUnô
)

181 
ªt
 = 
Ál_vœn_¸óã
(
ulUnô
, 
ulVœnId
);

182 if(
SW_OK
 !
ªt
)

184  
DRV_ERR_UNKNOW
;

186 
ªt
 = 
Ál_vœn_fid_£t
(
ulUnô
, 
ulVœnId
, ulVlanId);

187 if(
SW_OK
 !
ªt
)

189  
DRV_ERR_UNKNOW
;

193 
SPIN_HAL_MAC_LOCK
;

194 
_hÆ_vœn_num
++;

195 
SPIN_HAL_MAC_UNLOCK
;

197  
DRV_OK
;

217 
DRV_RET_E
 
HÆ_SëVœnE¡ryDñëe
(
UINT32
 
ulVœnId
)

219 
UINT32
 
ulUnô
;

220 
sw_îr‹_t
 
ªt
;

222 if(!
VALID_VLAN_ID
(
ulVœnId
))

224  
DRV_ERR_PARA
;

227 
UnôF‹
(
ulUnô
)

229 
ªt
 = 
Ál_vœn_dñëe
(
ulUnô
,
ulVœnId
);

230 if(
SW_OK
 !
ªt
)

232  
DRV_SDK_GEN_ERROR
;

236 
SPIN_HAL_MAC_LOCK
;

237 if(
_hÆ_vœn_num
 > 0)

239 
_hÆ_vœn_num
--;

241 
SPIN_HAL_MAC_UNLOCK
;

243  
DRV_OK
;

264 
DRV_RET_E
 
HÆ_SëVœnMembîRemove
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
)

266 
UINT32
 
ulUnô
;

267 
Ál_p‹t_t
 
ulPP‹t
;

268 
phy_pmask_t
 
°PhyMask
;

270 i‡(!
VALID_VLAN_ID
(
ulVœnId
))

272  
DRV_ERR_PARA
;

275 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

276 
IfPhyMaskSë
(&
°PhyMask
, 
ulUnô
, 
ulPP‹t
)

278 ()
Ál_vœn_membî_dñ
(
ulUnô
, 
ulVœnId
, 
ulPP‹t
);

281  
DRV_OK
;

303 
DRV_RET_E
 
HÆ_SëVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
)

305 
UINT32
 
ulUnô
 = 0;

306 
Ál_p‹t_t
 
ulPP‹t
 = 0;

307 
phy_pmask_t
 
°PhyMask
, 
°PhyMaskU¡ag
;

309 if(!
VALID_VLAN_ID
(
ulVœnId
))

311  
DRV_ERR_PARA
;

313 
CÃPhyMaskAŒ
(&
°PhyMask
);

314 
CÃPhyMaskAŒ
(&
°PhyMaskU¡ag
);

316 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

317 
MaskLogic2Phy
(&
°LgcMaskU¡ag
, &
°PhyMaskU¡ag
);

318 
IfPhyMaskSë
(&
°PhyMask
, 
ulUnô
, 
ulPP‹t
)

320 if(
T°PhyMaskBô
(
ulPP‹t
, &
°PhyMaskU¡ag
))

322 ()
Ál_vœn_membî_add
(
ulUnô
, 
ulVœnId
, 
ulPP‹t
, 
FAL_EG_UNTAGGED
);

326 ()
Ál_vœn_membî_add
(
ulUnô
, 
ulVœnId
, 
ulPP‹t
, 
FAL_EG_TAGGED
);

330  
DRV_OK
;

353 
DRV_RET_E
 
HÆ_SëVœnPvid
(
UINT32
 
ulLgcP‹tNumbî
, UINT32 
ulPvid
)

355 if(!
VALID_VLAN_ID
(
ulPvid
))

357  
DRV_ERR_PARA
;

359 if(!
IsVÆidLgcP‹t
(
ulLgcP‹tNumbî
))

361  
DRV_ERR_PARA
;

364 ()
Ál_p‹t_deÁu…_cvid_£t
(
P‹tLogci2ChùId
(
ulLgcP‹tNumbî
), 
P‹tLogic2PhyP‹tId
(ulLgcP‹tNumbî), 
ulPvid
);

365  
DRV_OK
;

388 
DRV_RET_E
 
HÆ_SëVœnP‹tVœnMembî
(
UINT32
 
ulLgcP‹tNumbî
, 
logic_pmask_t
 
°LgcMask
)

390 
phy_pmask_t
 
°PhyMask
;

391 
UINT32
 
ulUnô
;

393 if(!
IsVÆidLgcP‹t
(
ulLgcP‹tNumbî
))

395  
DRV_ERR_PARA
;

399 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

400 
PhyMaskAddCpuP‹t
(&
°PhyMask
);

401 
PhyMaskAddSèckP‹t
(&
°PhyMask
);

402 
ulUnô
 = 
P‹tLogci2ChùId
(
ulLgcP‹tNumbî
);

403 ()
Ál_p‹tvœn_membî_upd©e
(
ulUnô
, 
P‹tLogic2PhyP‹tId
(
ulLgcP‹tNumbî
), 
CHIPNMASK
(ulUnô, &
°PhyMask
));

405  
DRV_OK
;

409 
DRV_RET_E
 
HÆ_GëVœnMembî
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 *
p°LgcMask
,Üogic_pmask_à*
p°LgcMaskU¡ag
)

411 
UINT32
 
ulUnô
;

412 
phy_pmask_t
 
°PhyMaskTmp
, 
°PhyMaskU¡agTmp
;

413 
sw_îr‹_t
 
ªt
;

414 
Ál_vœn_t
 
°Vœn
;

416 i‡(!
VALID_VLAN_ID
(
ulVœnId
))

418  
DRV_ERR_PARA
;

420 i‡((
NULL
 =
p°LgcMask
Ë|| (NULL =
p°LgcMaskU¡ag
))

422  
DRV_ERR_PARA
;

425 
UnôF‹
(
ulUnô
)

427 
ªt
 = 
Ál_vœn_föd
(
ulUnô
, 
ulVœnId
, &
°Vœn
);

428 i‡(
SW_OK
 !
ªt
)

430  
DRV_SDK_GEN_ERROR
;

432 
mem˝y
(&(
°PhyMaskTmp
.
pmask
[
ulUnô
]), &
°Vœn
.
mem_p‹ts
, (
Ál_pbmp_t
));

433 
mem˝y
(&(
°PhyMaskU¡agTmp
.
pmask
[
ulUnô
]), &
°Vœn
.
u¡agged_p‹ts
, (
Ál_pbmp_t
));

436 
MaskPhy2Logic
(&
°PhyMaskTmp
, 
p°LgcMask
);

437 
MaskPhy2Logic
(&
°PhyMaskU¡agTmp
, 
p°LgcMaskU¡ag
);

439  
DRV_OK
;

458 
DRV_RET_E
 
HÆ_AddCpuToVœnMembî
(
UINT32
 
ulVœnId
)

460 
UINT32
 
ulUnô
 = 0;

462 if(!
VALID_VLAN_ID
(
ulVœnId
))

464  
DRV_ERR_PARA
;

467 
UnôF‹
(
ulUnô
)

469 ()
Ál_vœn_membî_add
(
ulUnô
, 
ulVœnId
, 
PHY_CPU_PORTID
, 
FAL_EG_TAGGED
);

472  
DRV_OK
;

492 
DRV_RET_E
 
HÆ_RemoveCpuFromVœnMembî
(
UINT32
 
ulVœnId
)

494 
UINT32
 
ulUnô
 = 0;

495 
sw_îr‹_t
 
ªt
;

497 if(!
VALID_VLAN_ID
(
ulVœnId
))

499  
DRV_ERR_PARA
;

502 
UnôF‹
(
ulUnô
)

504 
ªt
 = 
Ál_vœn_membî_dñ
(
ulUnô
, 
ulVœnId
, 
PHY_CPU_PORTID
);

505 if(
SW_OK
 !
ªt
)

507  
DRV_SDK_GEN_ERROR
;

511  
DRV_OK
;

530 
DRV_RET_E
 
HÆ_SëVœnP‹tEgªssMode
(
UINT32
 
ulLgcP‹t
, 
P‹tEGMode_t
 
eTagMode
)

532 
sw_îr‹_t
 
ªt
;

533 
Ál_±_1q_egmode_t
 
egmode
;

535 if(
eTagMode
 >
QVLAN_EG_END
)

537  
DRV_ERR_PARA
;

539 if(!
IsVÆidLgcP‹t
(
ulLgcP‹t
))

541  
DRV_ERR_PARA
;

544 
eTagMode
)

546 
QVLAN_EG_UNTAGGED
:

547 
egmode
 = 
FAL_EG_UNTAGGED
;

549 
QVLAN_EG_TAGGED
:

550 
egmode
 = 
FAL_EG_TAGGED
;

552 
QVLAN_EG_TRANSPARENT
:

553 
egmode
 = 
FAL_EG_UNTOUCHED
;

556  
DRV_ERR_PARA
;

559 
ªt
 = 
Ál_p‹t_egvœnmode_£t
(
P‹tLogci2ChùId
(
ulLgcP‹t
),
P‹tLogic2PhyP‹tId
(ulLgcP‹t), 
egmode
);

560 if(
SW_OK
 !
ªt
)

562  
DRV_SDK_GEN_ERROR
;

565  
DRV_OK
;

570 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_l2_tx.c

18 #ifde‡ 
__˝lu•lus


21 
	~<löux/autoc⁄f.h
>

22 
	~<mw_ty≥.h
>

23 
	~<löux/smp_lock.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/√tdevi˚.h
>

27 
	~<löux/ëhîdevi˚.h
>

28 
	~<löux/öô.h
>

29 
	~<löux/¶ab.h
>

30 
	~<löux/¥oc_fs.h
>

31 
	~<löux/£q_fûe.h
>

32 #ifde‡
CHIPSET_RTL8328L


33 
	~<drv/nic/nic.h
>

34 
	~<drv/swc‹e/sys.h
>

36 
	~"drv_pub.h
"

37 
	~"drv_ªq.h
"

38 
	~<löux/if_vœn.h
>

39 
	~"hÆ_comm⁄.h
"

40 #ifde‡
CHIPSET_OPL6750


41 
	~"›l_drv.h
"

44 #ifde‡
CHIPSET_RTL8328L


45 
	#PKTBUF_ALLOC
(
size
Ë
	`kmÆloc
(size, 
GFP_ATOMIC
)

	)

46 
	#PKTBUF_FREE
(
pktbuf
Ë
	`k‰ì
’ktbuf)

	)

48 
	#RESERVE_SPACE
 32

	)

49 
	#MAX_FRAME_LEN
 1518

	)

50 
	#MIN_FRAME_LEN
 60

	)

54 
	#OPL_CPU_IPORT_GBE
 0

	)

55 
	#OPL_CPU_IPORT_PON
 1

	)

56 
	#OPL_CPU_IPORT_INVALID
 0xFF

	)

60 
	#MAX_TABLE_ENTRY_COUNT
 64

	)

61 
	#MAC_TABLE_AGING_TICK
 1

	)

64 
	sègETH_MAC_TABLE_ENTRY


66 
©omic_t
 
ucAge
;

67 
íP‹t
;

68 
usVœn
;

69 
aucMac
[6];

70 } 
	tETH_MAC_TABLE_ENTRY_S
;

72 
ETH_MAC_TABLE_ENTRY_S
 
m_a°DrvMacTabÀ
[
MAX_TABLE_ENTRY_COUNT
];

73 
timî_li°
 
mac_èb_timî
;

75 
•ölock_t
 
mac_èb_lock
=
SPIN_LOCK_UNLOCKED
;

77 #ifde‡
CHIPSET_RTL8328L


78 
UINT32
 
_qosI¡PriToDp
[
QOS_MAX_INTERNAL_PRIORITY
];

95 
l2_tx_ˇŒback
(
uöt32
 
unô
, 
drv_nic_pkt_t
 *
pPackë
, *
pCookõ
)

97 
sk_buff
 *
	gpSkb
;

98 ()
	gunô
;

99 ()
	gpCookõ
;

101 i‡(
	gNULL
 =
pPackë
)

103 
_exô
;

106 
	gpSkb
 = (
sk_buff
 *)(
pPackë
->
buf_id
);

107 i‡(
	gNULL
 =
pSkb
)

109 
PKTBUF_FREE
(
pPackë
);

110 
	g_exô
;

113 
dev_k‰ì_skb_úq
(
pSkb
);

115 
PKTBUF_FREE
(
pPackë
);

116 
	g_exô
:

136 
DRV_RET_E
 
k_l2_£nd_by_p‹t
(
sk_buff
 *
pSkb
, 
l2_£nd_›
 *
›
)

138 
drv_nic_pkt_t
 *
	gpPackë
;

139 
p‹t_num_t
 
	gÕ‹t
=0;

140 
phyid_t
 
	gphyid
 = 0;

142 if(
	gNULL
==
pSkb
 || 
NULL
==
›
)

144  
DRV_ERR_PARA
;

146 if(
	gpSkb
->
	gÀn
>
	gMAX_FRAME_LEN
)

148 
dev_k‰ì_skb
(
pSkb
);

149  
	gDRV_L2_SEND_ERR
;

151 if((
	g›
->
	gucPri‹ôy
!=
L2_NO_PRIORITY
)&&(
›
->
ucPri‹ôy
>
QOS_MAX_INTERNAL_PRIORITY
))

153 
dev_k‰ì_skb
(
pSkb
);

154  
	gDRV_L2_SEND_ERR
;

157 
	gpPackë
 = 
PKTBUF_ALLOC
((
drv_nic_pkt_t
));

158 i‡(
	gNULL
 =
pPackë
)

160 
dev_k‰ì_skb
(
pSkb
);

161  
	gDRV_L2_SEND_ERR
;

164 if(
	g›
->
	gusVid
!=0)

166 
pSkb
=
__vœn_put_èg
’Skb,
›
->
usVid
);

170 
	gpPackë
->
	gas_txèg
 = 1;

174 
	gpPackë
->
	gtx_èg
.
	gd°_p‹t_mask
=0;

175 
IfLgcMaskSë
(&
›
->
p‹tmask
, 
Õ‹t
)

177 
	gphyid
=
P‹tLogic2PhyID
(
Õ‹t
);

178 
	gpPackë
->
	gtx_èg
.
	gd°_p‹t_mask
|=((0x1<<
PORTID
(
phyid
)));

180 
	gpPackë
->
	gtx_èg
.
	gas_d°_p‹t_mask
=1;

181 if(
	g›
->
	gucPri‹ôy
!=
L2_NO_PRIORITY
)

183 
pPackë
->
tx_èg
.
as_¥i‹ôy
=1;

184 
	gpPackë
->
	gtx_èg
.
	gas_p‹t_ªm¨k
=1;

185 
	gpPackë
->
	gtx_èg
.
	g¥i‹ôy
=
›
->
ucPri‹ôy
;

186 
	gpPackë
->
	gtx_èg
.
	gdr›_¥e˚dí˚
=
_qosI¡PriToDp
[
›
->
ucPri‹ôy
];

190 
	gpPackë
->
	gtx_èg
.
	gas_¥i‹ôy
=0;

192 
	gpPackë
->
	gtx_èg
.
	gl2_ªˇlcuœã
=1;

193 
	gpPackë
->
	gtx_èg
.
	gl3_ªˇlcuœã
=0;

194 
	gpPackë
->
	gtx_èg
.
	gl4_ªˇlcuœã
=0;

195 
	gpPackë
->
	gtx_èg
.
	gÊags
=0;

196 if(
	g›
->
	gucLogicE«bÀ
==
L2_LOGIC_ENABLE
)

199 
pPackë
->
tx_èg
.
Êags
|=0x3EFF;

204 
	gpPackë
->
	gtx_èg
.
	gÊags
|=0x80;

208 
	gpPackë
->
	gbuf_id
 = (*)
pSkb
;

209 
	gpPackë
->
	ghód
 = 
pSkb
->
hód
;

210 
	gpPackë
->
	gd©a
 = 
pSkb
->
d©a
;

211 
	gpPackë
->
	gèû
 = 
pSkb
->
èû
;

212 
	gpPackë
->
	gíd
 = 
pSkb
->
íd
;

213 
	gpPackë
->
	gÀngth
 = 
pSkb
->
Àn
;

214 
	gpPackë
->
	g√xt
 = 
NULL
;

215 i‡(
	gRT_ERR_OK
 !
drv_nic_pkt_tx
(
›
->
ucDevid
, 
pPackë
,
l2_tx_ˇŒback
, 
NULL
))

217 
PKTBUF_FREE
(
pPackë
);

218 
dev_k‰ì_skb
(
pSkb
);

219  
	gDRV_L2_SEND_ERR
;

221  
	gDRV_OK
;

225 
⁄u_°¨t_xmô_ù‹t
(
sk_buff
 *
skb
, 
›l_˝u_ù‹t
);

242 
skb_push_qèg
(
sk_buff
 *
pSkb
, 
UINT16
 
usVid
, 
UINT8
 
ucPri‹ôy
)

244 if(
	gusVid
){

246 
skb_push
(
pSkb
, 4);

247 
memmove
(
pSkb
->
d©a
,

248 
pSkb
->
d©a
 + 4,

249 (2 * 
MAC_ADDR_LEN
));

250 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
) = 0x81;

251 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
 + 1) = 0x00;

252 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
 + 2Ë(
uöt8_t
)(((
usVid
 >> 8Ë& 0xFË| (
ucPri‹ôy
 << 5));

253 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
 + 3Ë
usVid
 & 0xFF;

271 
INT32
 
check_add_dñ_πl_hód
(
UINT8
 * 
pBuf
, INT32 
Àn
, 
UINT32
* 
πl_µ‹t
)

273 
UINT8
 *
	gpbufTmp
 = 
NULL
;

274 
RTL_HEADER_S
 
	g°RéHódî
;

275 
INT32
 
	gπl_size
 = (
°RéHódî
);

277 i‡((
	gNULL
 =
pBuf
) ||

278 (60 > 
Àn
) ||

279 (
NULL
 =
πl_µ‹t
))

284 *
	gπl_µ‹t
 = 
OPL_CPU_IPORT_INVALID
;

286 #i‡(1 =
SWITCH_HEADER_POSITION_BEHIND_SRC_MAC
)

289 i‡((0x81 =
pBuf
[12]) && (0x00 ==ÖBuf[13]))

291 
pbufTmp
 = 
pBuf
 + 16;

292 
	gÀn
 -= 4;

296 
	gpbufTmp
 = 
pBuf
 + 12;

299 if((0x88 =
pbufTmp
[0]) && (0x99 ==ÖbufTmp[1])){

300 
mem˝y
((
uöt8_t
 *)&
°RéHódî
, 
pbufTmp
, (
size_t
)
πl_size
);

301 *
	gπl_µ‹t
 = (
UINT32
)
°RéHódî
.
usPP‹tMask
;

303 
mem˝y
(
pbufTmp
,ÖbufTmp+
πl_size
, (
size_t
)((
Àn
 -Ñtl_size) - 12));

305  
	gπl_size
;

309 
	gpbufTmp
 = 
pBuf
 + 
Àn
 - 
πl_size
;

310 if((0x88 =
pbufTmp
[0]) && (0x99 ==ÖbufTmp[1])){

311 
mem˝y
((
uöt8_t
 *)&
°RéHódî
, 
pbufTmp
, (
size_t
)
πl_size
);

312 *
	gπl_µ‹t
 = (
UINT32
)
°RéHódî
.
usPP‹tMask
;

313  
	gπl_size
;

336 
DRV_RET_E
 
HÆ_L2£nd
(*
pMsg
,
UINT
 
uiLí
,
l2_£nd_›
 *
pOp
)

338 #ifde‡
CHIPSET_RTL8305


339 
UINT32
 
	guiLP‹t
;

341 
phyid_t
 
	gphyid
;

342 
sk_buff
 *
	gpSkb
=
NULL
;

343 
RTL_HEADER_S
 
	g°RéHódî
;

344 
	g›l_˝u_ù‹t
;

346 if((
	gNULL
 =
pMsg
Ë|| (0 =
uiLí
Ë|| (
MAX_FRAME_LEN
 < uiLíË|| (
NULL
 =
pOp
))

348  
DRV_ERR_PARA
;

351 
	gpSkb
 = 
Æloc_skb
(
uiLí
+
RESERVE_SPACE
,
GFP_KERNEL
);

352 if(
	gNULL
 =
pSkb
)

354  
DRV_L2_SEND_ERR
;

356 
skb_ª£rve
(
pSkb
, 
RESERVE_SPACE
);

359 if(
c›y_‰om_u£r
(
skb_put
(
pSkb
,
uiLí
),
pMsg
,uiLen))

361 
dev_k‰ì_skb
(
pSkb
);

362  
	gDRV_L2_SEND_ERR
;

366 i‡((0x81 =
pSkb
->
d©a
[12]) && (0x00 ==ÖSkb->data[13]))

368 
UINT16
 
usVœnId
;

369 
	gusVœnId
 = ((
pSkb
->
d©a
[14] & 0xF) << 8) +ÖSkb->data[15];

370 if((0 =
usVœnId
) || (0xFFF == usVlanId))

372 
memmove
(
pSkb
->
d©a
+15,ÖSkb->data+11, 12);

374 
skb_puŒ
(
pSkb
, 4);

376 
	guiLí
 = (
uiLí
 >(
MIN_FRAME_LEN
 + 4))? (uiLen - 4) : MIN_FRAME_LEN;

380 if((
LgcMaskNŸNuŒ
(&(
pOp
->
p‹tmask
))Ë|| (
T°LgcMaskBôNoCheck
((
LOGIC_UPPON_PORT
), (&(pOp->portmask))))){

382 
IfLgcMaskSëNoCheck
(&(
pOp
->
p‹tmask
), 
uiLP‹t
)

385 
skb_push_qèg
(
pSkb
, 
pOp
->
usVid
,ÖOp->
ucPri‹ôy
);

387 i‡(
	gLOGIC_PON_PORT
 =
uiLP‹t
)

389 
›l_˝u_ù‹t
 = 
OPL_CPU_IPORT_PON
;

395 
	g›l_˝u_ù‹t
 = 
OPL_CPU_IPORT_GBE
;

399 
	gphyid
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

400 
mem£t
(&
°RéHódî
, 0, (stRtlHeader));

401 
	g°RéHódî
.
	gusEthTy≥
 = 0x8899;

402 
	g°RéHódî
.
	gucPrŸocﬁ
 = 0x04;

403 
	g°RéHódî
.
	gusPP‹tMask
 = (
UINT16
)(1U << 
phyid
);

407 #i‡(1 =
SWITCH_HEADER_POSITION_BEHIND_SRC_MAC
)

409 
skb_push
(
pSkb
, (
°RéHódî
));

410 
memmove
(
pSkb
->
d©a
,

411 
pSkb
->
d©a
 + (
°RéHódî
),

412 
RTL_HEADER_OFF
);

413 
mem˝y
(
pSkb
->
d©a
 + 
RTL_HEADER_OFF
, &
°RéHódî
, (stRtlHeader));

416 
skb_push
(
pSkb
, (
°RéHódî
));

417 
memmove
(
pSkb
->
d©a
,

418 
pSkb
->
d©a
 + (
°RéHódî
),

419 
uiLí
);

420 
mem˝y
(
pSkb
->
d©a
 + 
uiLí
, &
°RéHódî
, (stRtlHeader));

425 i‡(
⁄u_°¨t_xmô_ù‹t
(
pSkb
, 
›l_˝u_ù‹t
))

427 
dev_k‰ì_skb
(
pSkb
);

428  
	gDRV_L2_SEND_ERR
;

435 
skb_push_qèg
(
pSkb
, 
pOp
->
usVid
,ÖOp->
ucPri‹ôy
);

438 i‡(
⁄u_°¨t_xmô_ù‹t
(
pSkb
, 
OPL_CPU_IPORT_GBE
))

440 
dev_k‰ì_skb
(
pSkb
);

441  
	gDRV_L2_SEND_ERR
;

444  
	gDRV_OK
;

451 #ifde‡
CHIPSET_RTL8328L


452 
sk_buff
 *
	gpSkb
=
NULL
;

454 if(
	gpMsg
==
NULL
 || 0 ==
uiLí
 || NULL =
pOp
)

456  
DRV_ERR_PARA
;

458 
	gpSkb
=
Æloc_skb
(
uiLí
+
RESERVE_SPACE
,
GFP_KERNEL
);

459 if(
	gpSkb
==
NULL
)

461  
DRV_L2_SEND_ERR
;

463 
skb_ª£rve
(
pSkb
, 
CPU_SPACE
);

465 if(
c›y_‰om_u£r
(
skb_put
(
pSkb
,
uiLí
),
pMsg
,uiLen))

467 
dev_k‰ì_skb
(
pSkb
);

468  
	gDRV_L2_SEND_ERR
;

470 
	gpSkb
->
	gnh
.
	gøw
 = 
pSkb
->
d©a
+
ETH_HLEN
;

471 
	gpSkb
->
	gmac
.
	gøw
 =
pSkb
->
d©a
;

472  
k_l2_£nd_by_p‹t
(
pSkb
,
pOp
);

474 #ifde‡
CHIPSET_OPL6750
 && 
CHIPSET_RTL8305


476 
dev_queue_xmô
(
sk_buff
 *
skb
);

478 
UINT32
 
	guiLP‹t
;

479 
phyid_t
 
	gphyid
;

480 
sk_buff
 *
	gpSkb
=
NULL
;

481 
OPL_HEADER_EGRESS_S
 
	g°O∂Hódî
;

482 
RTL_HEADER_S
 
	g°RéHódî
;

484 if((
	gpMsg
 =
NULL
Ë|| (0 ==
uiLí
Ë|| (
MAX_FRAME_LEN
 < uiLíË|| (NULL =
pOp
))

486  
DRV_ERR_PARA
;

489 
	gpSkb
=
Æloc_skb
(
uiLí
+
RESERVE_SPACE
,
GFP_KERNEL
);

490 if(
	gpSkb
==
NULL
)

492  
DRV_L2_SEND_ERR
;

500 
skb_ª£rve
(
pSkb
, 
CPU_SPACE
);

503 if(
c›y_‰om_u£r
(
skb_put
(
pSkb
,
uiLí
),
pMsg
,uiLen))

505 
dev_k‰ì_skb
(
pSkb
);

506  
	gDRV_L2_SEND_ERR
;

510 i‡((0x81 =
pSkb
->
d©a
[12]) && (0x00 ==ÖSkb->data[13]))

512 
UINT16
 
usVœnId
;

513 
	gusVœnId
 = ((
pSkb
->
d©a
[14] & 0xF) << 8) +ÖSkb->data[15];

514 if((0 =
usVœnId
) || (0xFFF == usVlanId))

516 
memmove
(
pSkb
->
d©a
 + 12,ÖSkb->d©®+ 16, 
uiLí
 - 16);

521 
	gpSkb
->
	gèû
 -= 4;

522 
	gpSkb
->
	gÀn
 -= 4;

524 
	guiLí
 = (
uiLí
 >(
MIN_FRAME_LEN
 + 4))? (uiLen - 4) : MIN_FRAME_LEN;

528 
mem£t
(&
°O∂Hódî
, 0, (stOplHeader));

529 
mem£t
(&
°RéHódî
, 0, (stRtlHeader));

531 
IfLgcMaskSë
(&(
pOp
->
p‹tmask
), 
uiLP‹t
)

534 i‡(
	gLOGIC_PON_PORT
 =
uiLP‹t
)

539 
°O∂Hódî
.
ï‹t
 = 1;

546 
	g°O∂Hódî
.
	gï‹t
 = 0;

550 
	gphyid
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

551 
	g°RéHódî
.
	gusPP‹tMask
 |(
UINT16
)(1U << 
phyid
);

556 
mem˝y
(
pSkb
->
hód
, &
°O∂Hódî
, (stOplHeader));

559 
memmove
(
pSkb
->
d©a
 + 
RTL_HEADER_OFF
 + (
°RéHódî
),

560 
pSkb
->
d©a
 + 
RTL_HEADER_OFF
,

561 
uiLí
 - 
RTL_HEADER_OFF
);

562 
mem˝y
(
pSkb
->
d©a
 + 
RTL_HEADER_OFF
, &
°RéHódî
, (stRtlHeader));

563 ()
skb_put
(
pSkb
,(
°RéHódî
));

566 i‡(
	gNET_XMIT_SUCCESS
 !
dev_queue_xmô
(
pSkb
))

568 
dev_k‰ì_skb
(
pSkb
);

569  
	gDRV_L2_SEND_ERR
;

572 
dev_k‰ì_skb
(
pSkb
);

573  
	gDRV_OK
;

580 
HÆ_ã°_L2£nd
(
sk_buff
 *
skb
)

582 
l2_£nd_›
 
	gOp
;

583 
l2_£nd_›
* 
	gpOp
&
Op
;

584 
	gã°_Êag
=0;

586 
	gã°_Êag
++;

587 
	gOp
.
	gp‹tmask
.
	gpbôs
[0] = (1 << 
ã°_Êag
);

588 
	gOp
.
	gusVid
 = 0xF34;

589 
	gOp
.
	gucPri‹ôy
 = 6;

591 
HÆ_L2£nd
(
skb
->
d©a
, skb->
Àn
, 
pOp
);

594 
Drv_MT_Age
(
Êag
)

596 
	gi
 = 0;

597 ()
	gÊag
;

599 
•ö_lock_bh
(&
mac_èb_lock
);

601 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

603 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
)){

604 
©omic_dec
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
);

608 
•ö_u∆ock_bh
(&
mac_èb_lock
);

610 
mod_timî
(&
mac_èb_timî
, 
jiffõs
 + 
MAC_TABLE_AGING_TICK
* 
HZ
);

615 
Drv_MT_CÀ¨
()

617 
	gi
 = 0;

619 
•ö_lock_bh
(&
mac_èb_lock
);

620 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

624 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
)){

625 
©omic_£t
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
, 1);

628 
©omic_£t
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
, 0);

631 
•ö_u∆ock_bh
(&
mac_èb_lock
);

636 
Drv_MT_LookF‹E¡ry
(
aucMac
[6])

638 
	gi
 = 0;

640 i‡(
	gNULL
 =
aucMac
)

645 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

647 i‡–(
	gm_a°DrvMacTabÀ
[
i
].
	gaucMac
[0] =
aucMac
[0])

648 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[1] ==áucMac[1])

649 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[2] ==áucMac[2])

650 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[3] ==áucMac[3])

651 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[4] ==áucMac[4])

652 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[5] ==áucMac[5]))

655 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) > 0)

657  
i
;

681 
Drv_MT_GëP‹tByMac
(
aucMac
[6], 
uöt16_t
* 
pVid
)

683 
	gi
 = 0;

685 i‡(
	gNULL
 =
aucMac
)

687  
OPL_CPU_IPORT_INVALID
;

690 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

692 i‡–(
	gm_a°DrvMacTabÀ
[
i
].
	gaucMac
[0] =
aucMac
[0])

693 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[1] ==áucMac[1])

694 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[2] ==áucMac[2])

695 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[3] ==áucMac[3])

696 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[4] ==áucMac[4])

697 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[5] ==áucMac[5]))

699 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) > 0)

701 * 
pVid
 = 
m_a°DrvMacTabÀ
[
i
].
usVœn
;

702  ()
	gm_a°DrvMacTabÀ
[
i
].
	gíP‹t
;

707  
	gOPL_CPU_IPORT_INVALID
;

710 
Drv_MT_LookF‹Em±yOrOlde°E¡ry
()

712 
	gi
 = 0;

713 
	gmö_ödex
 = 0;

715 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

717 i‡(0 =
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
))

719  
i
;

721 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) <átomic_read(&m_astDrvMacTable[i].ucAge))

723 
	gmö_ödex
 = 
i
;

727  
	gmö_ödex
;

730 
Drv_MT_AddE¡ry
(* 
pucPkt
, 
íP‹t
)

732 
	giIndex
 = -1;

733 * 
	gpucSrcMac
 = 
NULL
;

735 i‡(
	gNULL
 =
pucPkt
)

740 
	gpucSrcMac
 = 
pucPkt
 + 6;

741 if((0xFF =
pucSrcMac
[0]) && (0xFF ==ÖucSrcMac[1]) && (0xFF ==ÖucSrcMac[2]) && \

742 (0xFF =
pucSrcMac
[3]) && (0xFF ==ÖucSrcMac[4]) && (0xFF ==ÖucSrcMac[5]))

748 
	giIndex
 = 
Drv_MT_LookF‹E¡ry
(
pucSrcMac
);

749 i‡((-1 =
iIndex
Ë|| (
MAX_TABLE_ENTRY_COUNT
 <= iIndex))

751 
iIndex
 = 
Drv_MT_LookF‹Em±yOrOlde°E¡ry
();

752 i‡((-1 =
iIndex
Ë|| (iIndex >
MAX_TABLE_ENTRY_COUNT
))

758 
•ö_lock_bh
(&
mac_èb_lock
);

759 
©omic_£t
(&
m_a°DrvMacTabÀ
[
iIndex
].
ucAge
, 0xFF);

761 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gíP‹t
 = (
uöt32_t
)
íP‹t
;

762 i‡((0x81 =
pucPkt
[12]) && (0x00 ==ÖucPkt[13]))

764 
m_a°DrvMacTabÀ
[
iIndex
].
usVœn
 = 
pucPkt
[14] << 8 |ÖucPkt[15];

768 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gusVœn
 = 0;

771 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[0] = 
pucSrcMac
[0];

772 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[1] = 
pucSrcMac
[1];

773 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[2] = 
pucSrcMac
[2];

774 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[3] = 
pucSrcMac
[3];

775 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[4] = 
pucSrcMac
[4];

776 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[5] = 
pucSrcMac
[5];

777 
•ö_u∆ock_bh
(&
mac_èb_lock
);

782 
zj_debug
(
£q_fûe
 *
m
, *
v
)

784 
	gii
;

785 
uöt8_t
* 
	gmac
;

787 ()
	gv
;

789  
	gii
 = 0 ; iò< 
	gMAX_TABLE_ENTRY_COUNT
; ii++ )

791 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
ii
].
ucAge
)){

792 
	gmac
 = 
m_a°DrvMacTabÀ
[
ii
].
aucMac
;

793 
£q_¥ötf
(
m
, "Index=%d, ucAge=%d,mac=%02x:%02x:%02x:%02x:%02x:%02x,ÉnPort=%d,usVlan=%d\n", \

794 
ii
, 
©omic_ªad
(&
m_a°DrvMacTabÀ
[ii].
ucAge
), \

795 
mac
[0],mac[1],mac[2],mac[3],mac[4],mac[5], \

796 
m_a°DrvMacTabÀ
[
ii
].
íP‹t
, m_a°DrvMacTabÀ[ii].
usVœn
);

803 
__öô
 
πl_l2_öô
()

806 
•ö_lock_öô
(&
mac_èb_lock
);

807 
Drv_MT_CÀ¨
();

809 
öô_timî
(&
mac_èb_timî
);

810 
	gmac_èb_timî
.
	gfun˘i⁄
 = 
Drv_MT_Age
;

811 
	gmac_èb_timî
.
	gd©a
 = 0;

812 
mod_timî
(&
mac_èb_timî
, 
jiffõs
 + (
MAC_TABLE_AGING_TICK
 * 
HZ
));

817 
moduÀ_öô
(
πl_l2_öô
);

819 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/hal_common.h

17 #i‚de‡
_HAL_COMMON_H_


18 
	#_HAL_COMMON_H_


	)

20 #ifde‡ 
__˝lu•lus


24 
	~"comm⁄/sw.h
"

25 
	~"Ál/Ál_ty≥.h
"

27 
	~"drv_pub.h
"

29 
	#PHY_CPU_PORTID
 
	`PORTID
(
	`PORT_PHYID
(
LOGIC_CPU_PORT
))

	)

30 
	#PHY_CPU_CHIPID
 
	`CHIPID
(
	`PORT_PHYID
(
LOGIC_CPU_PORT
))

	)

33 
	#HAL_PORT_LINKUP_TYPE_DOWN
 0

	)

34 
	#HAL_PORT_LINKUP_TYPE_COPPER_UP
 1

	)

35 
	#HAL_PORT_LINKUP_TYPE_FIBER_UP
 2

	)

40 
	#PORTMASK_PORT_SET
(
p‹tmask
, 
p‹t
) \

41 ((
p‹tmask
Ë|(1U << (
p‹t
)))

	)

43 
	#PORTMASK_PORT_CLEAR
(
p‹tmask
, 
p‹t
) \

44 ((
p‹tmask
Ë&~(1U << (
p‹t
)))

	)

46 
	#PORTMASK_IS_PORT_SET
(
p‹tmask
, 
p‹t
) \

47 ((
p‹tmask
 & (1 << 
p‹t
)Ë? 1: 0)

	)

48 
	#PORTMASK_IS_PORT_CLEAR
(
p‹tmask
, 
p‹t
) \

49 (!(
p‹tmask
 & (1 << 
p‹t
)))

	)

51 
	#PORTMASK_RESET
(
p‹tmask
) \

52 ((
p‹tmask
Ë0)

	)

54 
	#PORTMASK_GET_PORT_COUNT
(
p‹tmask
Ë0

	)

56 
	#PORTMASK_OR
(
d°P‹tmask
, 
§cP‹tmask
) \

57 ((
d°P‹tmask
Ë|(
§cP‹tmask
))

	)

58 
	#PORTMASK_AND
(
d°P‹tmask
, 
§cP‹tmask
) \

59 ((
d°P‹tmask
Ë&(
§cP‹tmask
))

	)

60 
	#PORTMASK_XOR
(
d°P‹tmask
, 
§cP‹tmask
) \

61 ((
d°P‹tmask
Ë^(
§cP‹tmask
))

	)

62 
	#PORTMASK_REMOVE
(
d°P‹tmask
, 
§cP‹tmask
) \

63 ((
d°P‹tmask
Ë&~(
§cP‹tmask
))

	)

64 
	#PORTMASK_REVERT
(
p‹tmask
) \

65 ((
p‹tmask
Ë~’‹tmask))

	)

68 
	sègPhyMask
{

69 
Ál_pbmp_t
 
pmask
[
CHIP_NO
];

70 }
	tphy_pmask_t
;

72 
	#CHIPNMASK
(
_n
,
_phymask
Ë(((
phy_pmask_t
 *)(_phymask))->
pmask
[(_n)])

	)

73 
	#P‹tLogic2PhyP‹tId
(
_Õ‹t
Ë
	`PORTID
(
	`P‹tLogic2PhyID
((_Õ‹t)))

	)

74 
	#P‹tLogci2ChùId
(
_Õ‹t
Ë
	`CHIPID
(
	`P‹tLogic2PhyID
((_Õ‹t)))

	)

77 
CÃPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
);

78 
CÃPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
);

79 
DRV_RET_E
 
Eº‹Sdk2Drv
(
INT32
 
iRtkEº‹
);

80 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
);

81 
MaskLogic2Phy
(
logic_pmask_t
 *
lgcPMask_±r
, 
phy_pmask_t
 *
phyPMask_±r
);

82 
MaskPhy2Logic
(
phy_pmask_t
 *
phyPMask_±r
, 
logic_pmask_t
 *
lgcPMask_±r
);

83 
PhyMaskAddCpuP‹t
(
phy_pmask_t
 *
mska
);

84 
PhyMaskAddSèckP‹t
(
phy_pmask_t
 *
mska
);

85 
PhyMaskAnd
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

86 
PhyMaskC›y
(
phy_pmask_t
 *
d°Msk
,phy_pmask_à*
§cMsk
);

87 
PhyMaskNeg©e
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

88 
PhyMaskOr
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

89 
PhyMaskRemove
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

90 
PhyMaskRemoveCpuP‹t
(
phy_pmask_t
 *
mska
);

91 
PhyMaskX‹
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

92 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
);

93 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
);

94 
SëPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
);

95 
SëPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
);

96 
BOOL
 
T°PhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
);

97 
phyid_t
 
PhyGëSèckP‹t
(
UINT32
 
ulUnô
, UINT32 
ulSèckIndex
);

98 
BOOL
 
IsSèckP‹t
(
phyid_t
 
uiPhyId
);

102 
UINT32
 
HÆ_GëP‹tTy≥
(
p‹t_num_t
 
lgcP‹t
);

104 
DRV_RET_E
 
HÆ_GëP‹tLökupTy≥
(
phyid_t
 
phyid
, 
UINT32
 *
pulLökupTy≥
);

106 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiAbûôy
, UINT32 
uiP‹tTy≥
);

107 
DRV_RET_E
 
HÆ_GëP‹tCuºítLök
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLök
);

108 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
);

109 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiFlow˘æ
);

110 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiJumbo
);

111 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLí
);

112 
DRV_RET_E
 
HÆ_GëP‹tLökMask
(
logic_pmask_t
 *
p°P‹tMask
);

113 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p°P‹tMask
);

114 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
);

116 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMedium
);

117 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMedium
);

118 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiPrio
);

119 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
);

120 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAbûôy
, UINT32 
uiP‹tTy≥
);

121 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAut⁄
, UINT32 
uiP‹tTy≥
);

122 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
, UINT32 
uiP‹tTy≥
);

123 
DRV_RET_E
 
HÆ_SëP‹tE«bÀ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
);

124 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPau£Tx
, UINT32 
uiPau£Rx
);

125 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiJumbo
);

126 
DRV_RET_E
 
HÆ_SëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMdix
);

127 
DRV_RET_E
 
HÆ_SëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPrio
);

128 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
, UINT32 
uiP‹tTy≥
);

129 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
);

130 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p°P‹tMask
);

131 
DRV_RET_E
 
HÆ_P‹tLedInô
();

132 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
);

133 
DRV_RET_E
 
HÆ_FibîP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
);

134 
DRV_RET_E
 
HÆ_C›≥rP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
);

135 
DRV_RET_E
 
HÆ_GëFibîS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
);

138 
DRV_RET_E
 
HÆ_SëP‹tSpdlx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSpdlx
);

139 
DRV_RET_E
 
HÆ_SëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
ªg_no
, UINT32 
ªg_vÆ
);

140 
DRV_RET_E
 
HÆ_GëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
pRegVÆ
, UINT32 
ªg_no
);

141 
DRV_RET_E
 
HÆ_GëSpdlxSë
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
uiSpdlx
);

142 
DRV_RET_E
 
HÆ_GëIsﬁ©eSë
(
logic_pmask_t
 *
p°P‹tMask
);

146 
DRV_RET_E
 
HÆ_SëAggrMode
(
UINT32
 
ulMode
);

147 
DRV_RET_E
 
HÆ_SëAggrGroup
(
agg_gΩ_num_t
 
gΩNum
, 
logic_pmask_t
 
°LgcMask
);

150 
DRV_RET_E
 
HÆ_GëVœnExi°Num
(
UINT32
 *
puiNum
);

151 
DRV_RET_E
 
HÆ_SëVœnMode
(
UINT32
 
ulMode
);

152 
DRV_RET_E
 
HÆ_SëVœnE¡ryCª©e
(
UINT32
 
ulVœnE¡ry
);

153 
DRV_RET_E
 
HÆ_SëVœnE¡ryDñëe
(
UINT32
 
ulVœnE¡ry
);

154 
DRV_RET_E
 
HÆ_SëVœnMembîRemove
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
);

155 
DRV_RET_E
 
HÆ_SëVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
);

156 
DRV_RET_E
 
HÆ_SëMcVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
);

157 
DRV_RET_E
 
HÆ_SëVœnPvid
(
UINT32
 
ulLgcP‹tNumbî
, UINT32 
ulPvid
);

158 
DRV_RET_E
 
HÆ_SëVœnP‹tVœnMembî
(
UINT32
 
ulLgcP‹tNumbî
, 
logic_pmask_t
 
°LgcMask
);

159 
DRV_RET_E
 
HÆ_GëVœnMembî
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 * 
p°LgcMask
,Üogic_pmask_à* 
p°LgcMaskU¡ag
);

160 
DRV_RET_E
 
HÆ_AddCpuToVœnMembî
(
UINT32
 
ulVœnId
);

161 
DRV_RET_E
 
HÆ_RemoveCpuFromVœnMembî
(
UINT32
 
ulVœnId
);

164 
DRV_RET_E
 
HÆ_SëCpuP‹tMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
);

165 
DRV_RET_E
 
HÆ_SëMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
, 
logic_pmask_t
 
°P‹tMask
);

166 
DRV_RET_E
 
HÆ_GëMacLó∫E«bÀ
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulE«bÀ
);

167 
DRV_RET_E
 
HÆ_SëMacCpuMacAdd
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addªss
);

168 
DRV_RET_E
 
HÆ_SëMacFlushUˇ°Mac
(
mac_dñëe_t
 
°MacDñëe
);

169 
DRV_RET_E
 
HÆ_SëMacAddUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
);

170 
DRV_RET_E
 
HÆ_SëMacDñUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
);

171 
DRV_RET_E
 
HÆ_SëMacAddMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
);

172 
DRV_RET_E
 
HÆ_SëMacDñMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
);

173 
DRV_RET_E
 
HÆ_SëMacAgeTime
(
UINT32
 
ulSec⁄d
);

174 
DRV_RET_E
 
HÆ_SëMacLó∫Limô
(
UINT32
 
ulLgcP‹t
, UINT32 
uLlimô
, UINT32 
ulDisF‹w¨d
);

175 
DRV_RET_E
 
HÆ_GëMacUˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
);

176 
DRV_RET_E
 
HÆ_GëMacMˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
);

177 
DRV_RET_E
 
HÆ_SëMacSëMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
);

178 
DRV_RET_E
 
HÆ_SëMacLookFaûFrd
(
logic_pmask_t
 
°P‹tMask
);

179 
DRV_RET_E
 
HÆ_GëMacLó∫Cou¡
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulCou¡
);

180 
DRV_RET_E
 
HÆ_Re‰eshUCa°
(
UINT32
 
ulI¡îvÆ
);

182 
DRV_RET_E
 
HÆ_GëMacUˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

183 
DRV_RET_E
 
HÆ_GëMacNextVÆidUˇ°
(
UINT32
 
uiSèπIndex
, 
mac_dump_uˇ°_èb_t
* 
p°Uˇ°E¡ry
, UINT32 *
puiCuºítIndex
);

184 
DRV_RET_E
 
HÆ_GëMacMˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

185 
DRV_RET_E
 
HÆ_GëMacNextVÆidMˇ°
(
UINT32
 
uiSèπIndex
, 
mac_mˇ°_t
* 
p°Mˇ°E¡ry
, UINT32 *
puiCuºítIndex
);

186 
DRV_RET_E
 
HÆ_GëMacUˇ°DumpS‹ãd
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

187 
DRV_RET_E
 
HÆ_SëMacTøpToCpu
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
);

188 
DRV_RET_E
 
HÆ_GëMacFödC⁄Êi˘Mac
(
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
);

190 
DRV_RET_E
 
HÆ_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
);

192 
DRV_RET_E
 
HÆ_GëMacByIndex
(
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 * 
p°TmpMacE¡ry
);

193 
DRV_RET_E
 
HÆ_GëMacM‹eByIndex
(
UINT32
 
ulSèπIdx
, UINT32 
ulGëCou¡
,

194 
ULONG
 
u£rPoöãr
, 
UINT32
* 
pulCou¡Out
, UINT32* 
pulNextIdx
, UINT32 
ulPD©aTy≥
);

196 
DRV_RET_E
 
HÆ_GëMacExa˘
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 * 
p°TmpMac
);

197 
DRV_RET_E
 
HÆ_GëMˇ°Cou¡
(
UINT32
 * 
pulMˇ°Cou¡
);

198 
DRV_RET_E
 
HÆ_SëMˇ°LookupMissDr›
(
UINT32
 
ulE«bÀ
);

199 
DRV_RET_E
 
HÆ_SëIgmpPktA˘i⁄
(
UINT32
 
ulA˘i⁄
);

200 
DRV_RET_E
 
HÆ_SëUnKnowIp4Mˇ°A˘
(
MCAST_UNKNOW_ACT_E
 
íA˘Mode
);

202 
DRV_RET_E
 
HÆ_SëMúr‹Group
(
p‹t_num_t
 
múr‹De°P‹t
, 
logic_pmask_t
 
ögªssMask
,Üogic_pmask_à
egªssMask
);

203 
HÆ_InôMúr‹A˛GΩ
();

204 
DRV_RET_E
 
HÆ_SëMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
, 
UINT32
 *
puiMúr‹GΩId
);

205 
DRV_RET_E
 
HÆ_DñMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
);

208 
DRV_RET_E
 
HÆ_GëMibP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
);

209 
DRV_RET_E
 
HÆ_SëMibCou¡Sync
();

210 
DRV_RET_E
 
HÆ_SëMibCou¡Re£t
(
p‹t_num_t
 
Õ‹t
);

211 
DRV_RET_E
 
HÆ_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
);

212 
DRV_RET_E
 
HÆ_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
°©i°icsName
, 
UINT64
 *
ªtu∫VÆue
);

215 
DRV_RET_E
 
HÆ_SëR©ñimôInô
();

216 
DRV_RET_E
 
HÆ_SëR©ñimôByP‹t
(
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
lP‹tMask
, UINT32 
ulKBps
);

217 
DRV_RET_E
 
HÆ_SëR©ñimôSt‹mCé
(
STORM_CTLTYPE_E
 
˘lTy≥
, 
logic_pmask_t
 
lP‹tMask
, 
STORM_CTLRATE_S
 
°St‹m
);

220 
DRV_RET_E
 
HÆ_SëQosInô
();

221 
DRV_RET_E
 
HÆ_Së1pIngªssPri‹ôyRem≠
(
qos_8021p_to_öçri_t
 
°1pToI¡Pri
);

222 
DRV_RET_E
 
HÆ_SëDs˝IngªssPri‹ôyRem≠
(
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
);

223 
DRV_RET_E
 
HÆ_SëQosTru°Mode
(
UINT32
 
mode
);

224 
DRV_RET_E
 
HÆ_SëQosQueueSchedul
(
QueueMode_S
 
°QueueScheduÀ
);

225 
DRV_RET_E
 
HÆ_SëCos2QidRem≠
(
qos_8021p_to_öçri_t
 
°1pPri2qid
);

228 
DRV_RET_E
 
HÆ_A˛Inô
();

231 
DRV_RET_E
 
HÆ_SëEEEByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

232 
DRV_RET_E
 
HÆ_SëAutoPwrDwnByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

235 
DRV_RET_E
 
HÆ_GëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
);

238 
DRV_RET_E
 
HÆ_GëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 * 
pulSèã
);

239 
DRV_RET_E
 
HÆ_SëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulSèã
);

243 
DRV_RET_E
 
HÆ_soc_ªg_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 * 
pulD©a
);

244 
DRV_RET_E
 
HÆ_soc_ªg_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 
ulD©a
);

245 
DRV_RET_E
 
HÆ_soc_mem_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
);

246 
DRV_RET_E
 
HÆ_soc_mem_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
);

248 #ifde‡
CHIPSET_RTL8328


249 
DRV_RET_E
 
HÆ_GëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 * 
pulD©a
);

250 
DRV_RET_E
 
HÆ_SëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 
ulD©a
);

252 
DRV_RET_E
 
HÆ_SëCPUP‹tJumbo
(
UINT32
 
uiLí
);

257 
DRV_RET_E
 
HÆ_SwôchInô
();

263 
DRV_RET_E
 
HÆ_SdkInôS≥cül
(
UINT32
 
unô
);

265 
DRV_RET_E
 
HÆ_GpioInô
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_CONTROL_E
 
gpio_˘l
, 
GPIO_DIRECTION_E
 
gpio_dú
);

266 
DRV_RET_E
 
HÆ_GpioD©aSë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 
gpio_d©a
);

267 
DRV_RET_E
 
HÆ_GpioD©aGë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 *
pgpio_d©a
);

268 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Së
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 
gpio_dú
);

269 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Gë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 *
pgpio_dú
);

271 
DRV_RET_E
 
HÆ_L2£nd
(*
pMsg
,
UINT
 
uiLí
,
l2_£nd_›
 *
pOp
);

272 
DRV_RET_E
 
HÆ_SëI¡î«lLo›back
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
);

277 
	gEïromOk
=0,

278 
	gAckEº‹
,

279 
	gPoötEº‹
,

280 
	gOutOfR™g
,

281 
	gOutOfAddr
,

282 
	gGpioPöEº‹


283 }
	tEEPROM_RET
;

287 
	gEEPROM_I2C_SCL_PIN
=0,

288 
	gEEPROM_I2C_SDA_PIN
,

289 
	gEEPROM_I2C_PIN_END


290 }
	tEEPROM_I2C_PIN_DEFINE
;

292 
DRV_RET_E
 
HÆ_I2cFibîInô
(
VOID
);

294 
DRV_RET_E
 
HÆ_I2cFibîP‹tRód
(
p‹t_num_t
 
lgcP‹t
, 
UINT16
 
usAddr
, 
UINT8
* 
pucD©a
, 
UINT32
 
ulLí
, UINT32 
ulPD©aTy≥
);

297 #ifde‡
CHIPSET_OPL6750


298 
DRV_RET_E
 
HÆ_CpuInô
();

301 #i‡
deföed
(
CHIPSET_RTL8305
)

302 
DRV_RET_E
 
HÆ_Re°¨tP‹tNeg
(
p‹t_num_t
 
lgcP‹t
);

304 
DRV_RET_E
 
HÆ_CfgP‹tCtcVœnGë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
);

305 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/broadcom/hal_convert.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

27 
	sègHÆ_Swtich_drv


29 
DRV_RET_E
 (*
Inô
)(
p‹t_num_t
);

30 }
	tHAL_SWITCH_DRV_S
;

33 
HAL_SWITCH_DRV_S
 
g_szHÆSwôchDrivî
[
SUPPORT_SWITCH_CHIP_NUM
];

37 
DRV_RET_E
 
HÆ_P‹tInô
(
p‹t_num_t
 
lgcP‹t
)

43  
DRV_OK
;

59 
DRV_RET_E
 
HÆ_VœnCª©e
(
IN
 
INT
 
iVœnId
, IN 
logic_pmask_t
 
°P‹tMask
)

74  
DRV_ERR
;

78  
DRV_OK
;

99 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
)

101 
UINT32
 
uiP‹tId
 = 
PORTID
(
uiPhyID
);

102 
UINT32
 
uiChùID
 = 
CHIPID
(
uiPhyID
);

104 if(
uiChùID
 >
MAX_CHIP_NUM
)

106  
FALSE
;

109 
uiChùID
)

112 if(
uiP‹tId
 >
CHIP1_PHY_PORT_NO
)

114  
FALSE
;

118  
TRUE
;

122 if(
PORTID
(
uiPhyID
Ë>
CHIP2_PHY_PORT_NO
)

124  
FALSE
;

128  
TRUE
;

132  
FALSE
;

154 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
)

156 i‡(!
IsVÆidLgcP‹t
(
ucLogicP‹t
)) {

157  
INVALID_PORT
;

159  
PORT_PHYID
(
ucLogicP‹t
);

177 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
)

179 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

180  
INVALID_PORT
;

183 
CHIPID
(
uiPhyId
))

186  
TOLGCPORT
(
PORTID
(
uiPhyId
));

189  
TOLGCPORT
(
CHIP1_PHY_PORT_NO
 + 
PORTID
(
uiPhyId
));

191  
INVALID_PORT
;

212 
SëPhyMaskBô
(
p‹t_num_t
 
ucPhyP‹t
, 
phy_pmask_t
 *
phyPMask_±r
)

214 i‡(!
IsVÆidPhyID
(
ucPhyP‹t
)) {

217 if(
NULL
 =
phyPMask_±r
) {

220 
_SHR_PBMP_PORT_ADD
(*
phyPMask_±r
, 
ucPhyP‹t
);

239 
CÃPhyMaskBô
(
p‹t_num_t
 
ucPhyP‹t
, 
phy_pmask_t
 *
phyPMask_±r
)

241 i‡(!
IsVÆidPhyID
(
ucPhyP‹t
)) {

244 if(
NULL
 =
phyPMask_±r
) {

247 
_SHR_PBMP_PORT_REMOVE
(*
phyPMask_±r
, 
ucPhyP‹t
);

267 
CÃPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

269 if(
NULL
 =
phyPMask_±r
) {

272 
mem£t
(
phyPMask_±r
,0,(
phy_pmask_t
));

292 
SëPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

294 
p‹t_num_t
 
µ‹t
;

295 if(
NULL
 =
phyPMask_±r
) {

299 
mem£t
(
phyPMask_±r
, 0x00, (
phy_pmask_t
));

300 
PhyP‹tF‹
(
µ‹t
)

302 if(
TRUE
 =
IsVÆidPhyID
(
µ‹t
))

304 
SëPhyMaskBô
(
µ‹t
, 
phyPMask_±r
);

307 
PhyMaskAddCpuP‹t
(
phyPMask_±r
);

326 
BOOL
 
T°PhyMaskBô
(
p‹t_num_t
 
ucPhyP‹t
, 
phy_pmask_t
 *
phyPMask_±r
)

328 i‡(!
IsVÆidPhyID
(
ucPhyP‹t
)) {

329  
FALSE
;

331 if(
NULL
 =
phyPMask_±r
) {

332  
FALSE
;

334 if(
_SHR_PBMP_MEMBER
(*
phyPMask_±r
,
ucPhyP‹t
))

336  
TRUE
;

340  
FALSE
;

360 
MaskLogic2Phy
(
logic_pmask_t
 *
lgcPMask_±r
, 
phy_pmask_t
 *
phyPMask_±r
)

362 
p‹t_num_t
 
lP‹tNo
;

363 
p‹t_num_t
 
pP‹tNo
;

365 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

369 
CLR_MASK_ALL
(*
phyPMask_±r
);

370 
lP‹tNo
=1;ÜP‹tNo<=
LOGIC_PORT_NO
;ÜPortNo++)

372 if(
T°LgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
))

374 
pP‹tNo
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

375 if(
pP‹tNo
 == 0xff)

379 
SëPhyMaskBô
(
pP‹tNo
 ,
phyPMask_±r
);

400 
MaskPhy2Logic
(
phy_pmask_t
 *
phyPMask_±r
, 
logic_pmask_t
 *
lgcPMask_±r
)

402 
p‹t_num_t
 
lP‹tNo
;

403 
p‹t_num_t
 
pP‹tNo
;

405 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

409 
CLR_MASK_ALL
(*
lgcPMask_±r
);

410 
lP‹tNo
=1;ÜP‹tNo<=
LOGIC_PORT_NO
;ÜPortNo++)

412 
pP‹tNo
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

413 if(
pP‹tNo
 == 0xff)

417 if(
T°PhyMaskBô
(
pP‹tNo
, 
phyPMask_±r
))

419 
SëLgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
);

439 
öt32
 
GëPhyMskP‹tNum
(
phy_pmask_t
 *
phyPMask_±r
)

441 
öt32
 
num
;

443 
p‹t_num_t
 
µ‹t
;

445 
num
 = 0;

447 
IfPhyMaskSë
(
phyPMask_±r
, 
µ‹t
)

449 
num
 ++;

451  
num
;

470 
PhyMaskC›y
(
phy_pmask_t
 *
d°Msk
,phy_pmask_à*
§cMsk
)

472 if((
NULL
 =
d°Msk
Ë|| (NULL =
§cMsk
))

476 
mem˝y
(
d°Msk
,
§cMsk
,(
phy_pmask_t
));

495 
PhyMaskAnd
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

497 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

502 
_SHR_PBMP_BMOP
(*
mska
, *
mskb
, &=);

521 
PhyMaskOr
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

523 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

528 
_SHR_PBMP_BMOP
(*
mska
, *
mskb
, |=);

547 
PhyMaskX‹
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

549 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

554 
_SHR_PBMP_BMOP
(*
mska
, *
mskb
, ^=);

573 
PhyMaskRemove
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

575 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

580 
_SHR_PBMP_BMOP
(*
mska
, *
mskb
, &= ~);

599 
PhyMaskNeg©e
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

601 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

606 
_SHR_PBMP_BMOP
(*
mska
, *
mskb
, = ~);

624 
PhyMaskAddCpuP‹t
(
phy_pmask_t
 *
mska
)

626 
BCM_PBMP_PORT_ADD
(*
mska
, 
PHY_CPU_PORT
);

644 
PhyMaskRemoveCpuP‹t
(
phy_pmask_t
 *
mska
)

646 
BCM_PBMP_PORT_REMOVE
(*
mska
, 
PHY_CPU_PORT
);

651 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/hal_common.h

17 #i‚de‡
_HAL_COMMON_H_


18 
	#_HAL_COMMON_H_


	)

20 #ifde‡ 
__˝lu•lus


24 #ifde‡
CHIPSET_RTL8328


25 
	~<comm⁄/π_ty≥.h
>

27 
	~"πk_≠i.h
"

28 
	~"drv_pub.h
"

30 
	#PHY_CPU_PORTID
 
	`PORTID
(
	`PORT_PHYID
(
LOGIC_CPU_PORT
))

	)

31 
	#PHY_CPU_CHIPID
 
	`CHIPID
(
	`PORT_PHYID
(
LOGIC_CPU_PORT
))

	)

34 
	#HAL_PORT_LINKUP_TYPE_DOWN
 0

	)

35 
	#HAL_PORT_LINKUP_TYPE_COPPER_UP
 1

	)

36 
	#HAL_PORT_LINKUP_TYPE_FIBER_UP
 2

	)

40 #ifde‡
CHIPSET_RTL8305


41 
	#RTL_HEADER_OFF
 (2 * 
MAC_ADDR_LEN
)

	)

42 
	#RTL_METER_ID_INVALID
 0xFFFFFFFF

	)

44 
	#ACL_RULE_ID_VLAN_TRANSP
 (
ACL_RULE_NUM_MAX
 - 1)

	)

46 
	sègRTL_HEADER


48 #ifde‡
CONFIG_CPU_BIG_ENDIAN


49 
UINT16
 
usEthTy≥
;

50 
UINT8
 
ucPrŸocﬁ
;

51 
UINT8
 
ucRós⁄
;

52 
UINT8
 
ucEFID
:1;

53 
UINT8
 
ucFID
:3;

54 
UINT8
 
ucPri‹ôySñe˘
:1;

55 
UINT8
 
ucPri‹ôy
:3;

56 
UINT8
 
ucKìp
:1;

57 
UINT8
 
ucVSEL
:1;

58 
UINT8
 
ucDißbÀLó∫
:1;

59 
UINT8
 
ucVIDX
:5;

60 
UINT16
 
usPP‹tMask
;

63 }
	tRTL_HEADER_S
;

65 
	#BITMAP_IS_SET
(
¨øy
, 
ödex
)\

66 (
¨øy
[
ödex
/(◊ºay[0]Ë<< 3)] & (0x1 << (ödex%(◊ºay[0]Ë<< 3))))

	)

67 
	#BITMAP_IS_CLEAR
(
¨øy
, 
ödex
)\

68 !(
¨øy
[
ödex
/(◊ºay[0]Ë<< 3)] & (0x1 << (ödex%(◊ºay[0]Ë<< 3))))

	)

70 
	#BITMAP_SET
(
¨øy
, 
ödex
) do {\

71 
¨øy
[
ödex
/((array[0]) << 3)] = \

72 (
¨øy
[
ödex
/(◊ºay[0]Ë<< 3)] | (0x1 << (ödex%(◊ºay[0]Ë<< 3)))); } 0)

	)

73 
	#BITMAP_CLEAR
(
¨øy
, 
ödex
) do {\

74 
¨øy
[
ödex
/((array[0]) << 3)] = \

75 (
¨øy
[
ödex
/(◊ºay[0]Ë<< 3)] & ~((
UINT32
)(0x1 << (ödex%(◊ºay[0]Ë<< 3))))); } 0)

	)

77 
	#BITMAP_RESET
(
d°Aºay
, 
Àngth
) \

79 
	`mem£t
(
d°Aºay
, 0, 
Àngth
*4); \

80 } 0)

	)

82 
	#BITMAP_AND
(
d°Aºay
, 
§cAºay
, 
Àngth
) \

84 
UINT32
 
¨øy_ödex
;\

85 
¨øy_ödex
 = 0;áºay_ödex < 
Àngth
;árray_index++)\

87 
d°Aºay
[
¨øy_ödex
] &
§cAºay
[array_index];\

89 } 0)

	)

91 
	#BITMAP_OR
(
d°Aºay
, 
§cAºay
, 
Àngth
) \

93 
UINT32
 
¨øy_ödex
;\

94 
¨øy_ödex
 = 0;áºay_ödex < 
Àngth
;árray_index++)\

96 
d°Aºay
[
¨øy_ödex
] |
§cAºay
[array_index];\

98 } 0)

	)

100 
	#BITMAP_XOR
(
d°Aºay
, 
§cAºay
, 
Àngth
) \

102 
UINT32
 
¨øy_ödex
;\

103 
¨øy_ödex
 = 0;áºay_ödex < 
Àngth
;árray_index++)\

105 
d°Aºay
[
¨øy_ödex
] ^
§cAºay
[array_index];\

107 } 0)

	)

109 
	#BITMAP_REMOVE
(
d°Aºay
, 
§cAºay
, 
Àngth
) \

111 
UINT32
 
¨øy_ödex
;\

112 
¨øy_ödex
 = 0;áºay_ödex < 
Àngth
;árray_index++)\

114 
d°Aºay
[
¨øy_ödex
] &~
§cAºay
[array_index];\

116 } 0)

	)

118 
	#BITMAP_REVERT
(
d°Aºay
, 
Àngth
) \

120 
UINT32
 
¨øy_ödex
;\

121 
¨øy_ödex
 = 0;áºay_ödex < 
Àngth
;árray_index++)\

123 
d°Aºay
[
¨øy_ödex
] = ~dstArray[array_index];\

125 } 0)

	)

127 
	#RTK_PORTMASK_WORD_SET
(
p‹tmask
, 
w‹d
, 
vÆue
) \

128 ((
p‹tmask
).
bôs
[(
w‹d
)] = 
vÆue
)

	)

129 
	#RTK_PORTMASK_WORD_GET
(
p‹tmask
, 
w‹d
) \

130 ((
p‹tmask
).
bôs
[(
w‹d
)])

	)

132 
	#RTK_PORTMASK_PORT_SET
(
p‹tmask
, 
p‹t
) \

134 i‡((
p‹t
Ë<
PHY_PORT_NO
Ë{
	`BITMAP_SET
((
p‹tmask
).
bôs
, (port));}\

136 

	)

137 
	#RTK_PORTMASK_PORT_CLEAR
(
p‹tmask
, 
p‹t
) \

139 i‡((
p‹t
Ë<
PHY_PORT_NO
Ë{
	`BITMAP_CLEAR
((
p‹tmask
).
bôs
, (port));}\

141 

	)

142 
	#RTK_PORTMASK_IS_PORT_SET
(
p‹tmask
, 
p‹t
) \

143 (((
p‹t
Ë<
PHY_PORT_NO
)?
	`BITMAP_IS_SET
((
p‹tmask
).
bôs
, (p‹t)): 0)

	)

144 
	#RTK_PORTMASK_IS_PORT_CLEAR
(
p‹tmask
, 
p‹t
) \

145 (((
p‹t
Ë<
PHY_PORT_NO
)?
	`BITMAP_IS_CLEAR
((
p‹tmask
).
bôs
, (p‹t)): 0)

	)

147 
	#RTK_PORTMASK_RESET
(
p‹tmask
) \

148 
	`BITMAP_RESET
((
p‹tmask
).
bôs
, 
RTK_TOTAL_NUM_OF_WORD_FOR_1BIT_PORT_LIST
)

	)

150 
	#RTK_PORTMASK_GET_PORT_COUNT
(
p‹tmask
)\

151 (
	`bô›_numbîOfSëBôsInAºay
((
p‹tmask
).
bôs
, 
RTK_TOTAL_NUM_OF_WORD_FOR_1BIT_PORT_LIST
))

	)

153 
	#RTK_PORTMASK_OR
(
d°P‹tmask
, 
§cP‹tmask
) \

154 
	`BITMAP_OR
((
d°P‹tmask
).
bôs
, (
§cP‹tmask
).bôs, 
RTK_TOTAL_NUM_OF_WORD_FOR_1BIT_PORT_LIST
)

	)

155 
	#RTK_PORTMASK_AND
(
d°P‹tmask
, 
§cP‹tmask
) \

156 
	`BITMAP_AND
((
d°P‹tmask
).
bôs
, (
§cP‹tmask
).bôs, 
RTK_TOTAL_NUM_OF_WORD_FOR_1BIT_PORT_LIST
)

	)

157 
	#RTK_PORTMASK_XOR
(
d°P‹tmask
, 
§cP‹tmask
) \

158 
	`BITMAP_XOR
((
d°P‹tmask
).
bôs
, (
§cP‹tmask
).bôs, 
RTK_TOTAL_NUM_OF_WORD_FOR_1BIT_PORT_LIST
)

	)

159 
	#RTK_PORTMASK_REMOVE
(
d°P‹tmask
, 
§cP‹tmask
) \

160 
	`BITMAP_REMOVE
((
d°P‹tmask
).
bôs
, (
§cP‹tmask
).bôs, 
RTK_TOTAL_NUM_OF_WORD_FOR_1BIT_PORT_LIST
)

	)

161 
	#RTK_PORTMASK_REVERT
(
p‹tmask
) \

162 
	`BITMAP_REVERT
((
p‹tmask
).
bôs
, 
RTK_TOTAL_NUM_OF_WORD_FOR_1BIT_PORT_LIST
)

	)

165 
	#LOGIC_PORT_MASK_CPARE
(
_Õ‹tmask1
,
_Õ‹tmask2
,
ªsu…
) \

167 
UINT
 
i
; \

168 
ªsu…
 = 
TRUE
; \

169 
i
 = 0; i < (
PORT_MASK_WORD_MAX
); i++) \

171 i‡(
_Õ‹tmask1
.
pbôs
[
i
] !
_Õ‹tmask2
.pbits[i]) \

173 
ªsu…
 = 
FALSE
; \

177 } 0);

	)

180 
	sègPhyMask
{

181 
πk_p‹tmask_t
 
pmask
[
CHIP_NO
];

182 }
	tphy_pmask_t
;

184 
	#CHIPNMASK
(
_n
,
_phymask
Ë(((
phy_pmask_t
 *)(_phymask))->
pmask
[(_n)])

	)

185 
	#P‹tLogic2PhyP‹tId
(
_Õ‹t
Ë
	`PORTID
(
	`P‹tLogic2PhyID
((_Õ‹t)))

	)

186 
	#P‹tLogci2ChùId
(
_Õ‹t
Ë
	`CHIPID
(
	`P‹tLogic2PhyID
((_Õ‹t)))

	)

189 
CÃPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
);

190 
CÃPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
);

191 
DRV_RET_E
 
Eº‹Sdk2Drv
(
INT32
 
iRtkEº‹
);

192 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
);

193 
MaskLogic2Phy
(
logic_pmask_t
 *
lgcPMask_±r
, 
phy_pmask_t
 *
phyPMask_±r
);

194 
MaskPhy2Logic
(
phy_pmask_t
 *
phyPMask_±r
, 
logic_pmask_t
 *
lgcPMask_±r
);

195 
PhyMaskAddCpuP‹t
(
phy_pmask_t
 *
mska
);

196 
PhyMaskAddSèckP‹t
(
phy_pmask_t
 *
mska
);

197 
PhyMaskAnd
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

198 
PhyMaskC›y
(
phy_pmask_t
 *
d°Msk
,phy_pmask_à*
§cMsk
);

199 
PhyMaskNeg©e
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

200 
PhyMaskOr
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

201 
PhyMaskRemove
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

202 
PhyMaskRemoveCpuP‹t
(
phy_pmask_t
 *
mska
);

203 
PhyMaskX‹
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
);

204 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
);

205 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
);

206 
SëPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
);

207 
SëPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
);

208 
BOOL
 
T°PhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
);

209 
phyid_t
 
PhyGëSèckP‹t
(
UINT32
 
ulUnô
, UINT32 
ulSèckIndex
);

210 
BOOL
 
IsSèckP‹t
(
phyid_t
 
uiPhyId
);

214 
UINT32
 
HÆ_GëP‹tTy≥
(
p‹t_num_t
 
lgcP‹t
);

216 
DRV_RET_E
 
HÆ_GëP‹tLökupTy≥
(
phyid_t
 
phyid
, 
UINT32
 *
pulLökupTy≥
);

218 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiAbûôy
, UINT32 
uiP‹tTy≥
);

219 
DRV_RET_E
 
HÆ_GëP‹tCuºítLök
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLök
);

220 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
);

221 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiFlow˘æ
);

222 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiJumbo
);

223 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLí
);

224 
DRV_RET_E
 
HÆ_GëP‹tLökMask
(
logic_pmask_t
 *
p°P‹tMask
);

225 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p°P‹tMask
);

226 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
);

228 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMedium
);

229 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMedium
);

230 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiPrio
);

231 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
);

232 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAbûôy
, UINT32 
uiP‹tTy≥
);

233 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAut⁄
, UINT32 
uiP‹tTy≥
);

234 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
, UINT32 
uiP‹tTy≥
);

235 
DRV_RET_E
 
HÆ_SëP‹tE«bÀ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
);

236 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPau£Tx
, UINT32 
uiPau£Rx
);

237 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiJumbo
);

238 
DRV_RET_E
 
HÆ_SëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMdix
);

239 
DRV_RET_E
 
HÆ_SëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPrio
);

240 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
, UINT32 
uiP‹tTy≥
);

241 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
);

242 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p°P‹tMask
);

243 
DRV_RET_E
 
HÆ_P‹tLedInô
();

244 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
);

245 
DRV_RET_E
 
HÆ_FibîP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
);

246 
DRV_RET_E
 
HÆ_C›≥rP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
);

247 
DRV_RET_E
 
HÆ_GëFibîS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
);

250 
DRV_RET_E
 
HÆ_SëP‹tSpdlx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSpdlx
);

251 
DRV_RET_E
 
HÆ_SëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
ªg_no
, UINT32 
ªg_vÆ
);

252 
DRV_RET_E
 
HÆ_GëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
pRegVÆ
, UINT32 
ªg_no
);

253 
DRV_RET_E
 
HÆ_GëSpdlxSë
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
uiSpdlx
);

254 
DRV_RET_E
 
HÆ_GëIsﬁ©eSë
(
logic_pmask_t
 *
p°P‹tMask
);

258 
DRV_RET_E
 
HÆ_SëAggrMode
(
UINT32
 
ulMode
);

259 
DRV_RET_E
 
HÆ_SëAggrGroup
(
agg_gΩ_num_t
 
gΩNum
, 
logic_pmask_t
 
°LgcMask
);

262 
DRV_RET_E
 
HÆ_GëVœnExi°Num
(
UINT32
 *
puiNum
);

263 
DRV_RET_E
 
HÆ_SëVœnMode
(
UINT32
 
ulMode
);

264 
DRV_RET_E
 
HÆ_SëVœnE¡ryCª©e
(
UINT32
 
ulVœnE¡ry
);

265 
DRV_RET_E
 
HÆ_SëVœnE¡ryDñëe
(
UINT32
 
ulVœnE¡ry
);

266 
DRV_RET_E
 
HÆ_SëVœnMembîRemove
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
);

267 
DRV_RET_E
 
HÆ_SëVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
);

268 
DRV_RET_E
 
HÆ_SëMcVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
);

269 
DRV_RET_E
 
HÆ_SëVœnPvid
(
UINT32
 
ulLgcP‹tNumbî
, UINT32 
ulPvid
);

270 
DRV_RET_E
 
HÆ_SëVœnP‹tVœnMembî
(
UINT32
 
ulLgcP‹tNumbî
, 
logic_pmask_t
 
°LgcMask
);

271 
DRV_RET_E
 
HÆ_GëVœnMembî
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 * 
p°LgcMask
,Üogic_pmask_à* 
p°LgcMaskU¡ag
);

272 
DRV_RET_E
 
HÆ_AddCpuToVœnMembî
(
UINT32
 
ulVœnId
);

273 
DRV_RET_E
 
HÆ_RemoveCpuFromVœnMembî
(
UINT32
 
ulVœnId
);

274 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

275 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn•Cª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnMode
);

276 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn•Dñëe
(
UINT32
 
uiLP‹tId
);

277 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTagCª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnCfg
);

278 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTagDñëe
(
UINT32
 
uiLP‹tId
);

279 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn¶Cª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnMode
);

280 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn¶Dñëe
(
UINT32
 
uiLP‹tId
);

281 
DRV_RET_E
 
HÆ_CfgP‹tCtcVœnSë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
);

282 
DRV_RET_E
 
HÆ_DñP‹tBa£VœnMemb
(
UINT32
 
uiVœnId
, 
logic_pmask_t
 
°LgcMask
);

283 
DRV_RET_E
 
HÆ_AddP‹tBa£VœnMemb
(
UINT32
 
uiVœnId
, 
logic_pmask_t
 
°LgcMask
);

284 
DRV_RET_E
 
HÆ_AddP‹tBa£VœnMemByIndx
(
UINT32
 
uiE¡ryId
, 
logic_pmask_t
 
°LgcMask
);

285 
DRV_RET_E
 
HÆ_DñP‹tBa£VœnMemByIndx
(
UINT32
 
uiE¡ryId
, 
logic_pmask_t
 
°LgcMask
);

286 
DRV_RET_E
 
HÆ_CÃP‹tBa£VœnE¡ryByVid
(
UINT32
 
uiVœnId
);

287 
DRV_RET_E
 
HÆ_SëP‹tVœnIngªssFûãr
(
UINT32
 
uiLP‹t
, 
BOOL
 
bE«bÀ
);

288 
DRV_RET_E
 
HÆ_SëP‹tVœnIngªssMode
–
UINT32
 
uiLP‹t
, 
PORT_INGRESS_MODE_E
 
íIngªssMode
);

289 
DRV_RET_E
 
HÆ_SëP‹tVœnEgªssMode
–
UINT32
 
uiLP‹t
, 
PORT_EGRESS_MODE_E
 
íEgªssMode
);

290 
DRV_RET_E
 
HÆ_A˛RuÀEm±yNumGë
(
UINT32
 *
pA˛Em±yNum
);

291 
DRV_RET_E
 
HÆ_CtcVœnEnoughVœnIdxE¡ryCheck
(
CTC_VLAN_CFG_S
 *
p°VœnMode
, 
UINT32
 *
pbEnough
);

294 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcMcVœnCª©e
(
UINT32
 
uiLP‹tId
, UINT32 
uiMcVœn
);

295 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcMcVœnDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiMcVœn
);

299 
DRV_RET_E
 
HÆ_SëCpuP‹tMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
);

300 
DRV_RET_E
 
HÆ_SëMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
, 
logic_pmask_t
 
°P‹tMask
);

301 
DRV_RET_E
 
HÆ_GëMacLó∫E«bÀ
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulE«bÀ
);

302 
DRV_RET_E
 
HÆ_SëMacCpuMacAdd
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addªss
);

303 
DRV_RET_E
 
HÆ_SëMacFlushUˇ°Mac
(
mac_dñëe_t
 
°MacDñëe
);

304 
DRV_RET_E
 
HÆ_SëMacAddUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
);

305 
DRV_RET_E
 
HÆ_SëMacDñUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
);

306 
DRV_RET_E
 
HÆ_SëMacAddMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
);

307 
DRV_RET_E
 
HÆ_SëMacDñMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
);

308 
DRV_RET_E
 
HÆ_SëMacAgeTime
(
UINT32
 
ulSec⁄d
);

309 
DRV_RET_E
 
HÆ_SëMacLó∫Limô
(
UINT32
 
ulLgcP‹t
, UINT32 
uLlimô
, UINT32 
ulDisF‹w¨d
);

310 
DRV_RET_E
 
HÆ_GëMacUˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
);

311 
DRV_RET_E
 
HÆ_GëMacMˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
);

312 
DRV_RET_E
 
HÆ_SëMacSëMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
);

313 
DRV_RET_E
 
HÆ_SëMacLookFaûFrd
(
logic_pmask_t
 
°P‹tMask
);

314 
DRV_RET_E
 
HÆ_GëMacLó∫Cou¡
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulCou¡
);

315 
DRV_RET_E
 
HÆ_Re‰eshUCa°
(
UINT32
 
ulI¡îvÆ
);

317 
DRV_RET_E
 
HÆ_GëMacUˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

318 
DRV_RET_E
 
HÆ_GëMacNextVÆidUˇ°
(
UINT32
 
uiSèπIndex
, 
mac_dump_uˇ°_èb_t
* 
p°Uˇ°E¡ry
, UINT32 *
puiCuºítIndex
);

319 
DRV_RET_E
 
HÆ_GëMacMˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

320 
DRV_RET_E
 
HÆ_GëMacNextVÆidMˇ°
(
UINT32
 
uiSèπIndex
, 
mac_mˇ°_t
* 
p°Mˇ°E¡ry
, UINT32 *
puiCuºítIndex
);

321 
DRV_RET_E
 
HÆ_GëMacUˇ°DumpS‹ãd
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

322 
DRV_RET_E
 
HÆ_SëMacTøpToCpu
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
);

323 
DRV_RET_E
 
HÆ_GëMacFödC⁄Êi˘Mac
(
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
);

325 
DRV_RET_E
 
HÆ_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
);

327 
DRV_RET_E
 
HÆ_GëMacByIndex
(
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 * 
p°TmpMacE¡ry
);

328 
DRV_RET_E
 
HÆ_GëMacM‹eByIndex
(
UINT32
 
ulSèπIdx
, UINT32 
ulGëCou¡
,

329 
ULONG
 
u£rPoöãr
, 
UINT32
* 
pulCou¡Out
, UINT32* 
pulNextIdx
, UINT32 
ulPD©aTy≥
);

331 
DRV_RET_E
 
HÆ_GëMacExa˘
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 * 
p°TmpMac
);

332 
DRV_RET_E
 
HÆ_GëMˇ°Cou¡
(
UINT32
 * 
pulMˇ°Cou¡
);

333 
DRV_RET_E
 
HÆ_SëMˇ°LookupMissDr›
(
UINT32
 
ulE«bÀ
);

334 
DRV_RET_E
 
HÆ_SëIgmpPktA˘i⁄
(
UINT32
 
ulA˘i⁄
);

335 
DRV_RET_E
 
HÆ_SëUnKnowIp4Mˇ°A˘
(
MCAST_UNKNOW_ACT_E
 
íA˘Mode
);

337 
DRV_RET_E
 
HÆ_SëMúr‹Group
(
p‹t_num_t
 
múr‹De°P‹t
, 
logic_pmask_t
 
ögªssMask
,Üogic_pmask_à
egªssMask
);

338 
HÆ_InôMúr‹A˛GΩ
();

339 
DRV_RET_E
 
HÆ_SëMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
, 
UINT32
 *
puiMúr‹GΩId
);

340 
DRV_RET_E
 
HÆ_DñMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
);

343 
DRV_RET_E
 
HÆ_GëMibP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
);

344 
DRV_RET_E
 
HÆ_SëMibCou¡Sync
();

345 
DRV_RET_E
 
HÆ_SëMibCou¡Re£t
(
p‹t_num_t
 
Õ‹t
);

346 
DRV_RET_E
 
HÆ_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
);

347 
DRV_RET_E
 
HÆ_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
°©i°icsName
, 
UINT64
 *
ªtu∫VÆue
);

350 
DRV_RET_E
 
HÆ_SëR©ñimôInô
();

351 
DRV_RET_E
 
HÆ_SëR©ñimôByP‹t
(
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
lP‹tMask
, UINT32 
ulKBps
);

352 
DRV_RET_E
 
HÆ_SëR©ñimôSt‹mCé
(
STORM_CTLTYPE_E
 
˘lTy≥
, 
logic_pmask_t
 
lP‹tMask
, 
STORM_CTLRATE_S
 
°St‹m
);

355 
DRV_RET_E
 
HÆ_SëQosInô
();

356 
DRV_RET_E
 
HÆ_Së1pIngªssPri‹ôyRem≠
(
qos_8021p_to_öçri_t
 
°1pToI¡Pri
);

357 
DRV_RET_E
 
HÆ_SëDs˝IngªssPri‹ôyRem≠
(
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
);

358 
DRV_RET_E
 
HÆ_SëQosTru°Mode
(
UINT32
 
mode
);

359 
DRV_RET_E
 
HÆ_SëQosQueueSchedul
(
QueueMode_S
 
°QueueScheduÀ
);

360 
DRV_RET_E
 
HÆ_SëCos2QidRem≠
(
qos_8021p_to_öçri_t
 
°1pPri2qid
);

363 
DRV_RET_E
 
HÆ_SëA˛Inô
();

364 
DRV_RET_E
 
HÆ_SëVœnI¡îÁ˚Add
(
vœn_id_t
 
vid
, 
mac_addªss_t
 
mac_addªss
);

365 
DRV_RET_E
 
HÆ_SëVœnI¡îÁ˚Dñ
(
vœn_id_t
 
vid
);

366 
DRV_RET_E
 
HÆ_A˛Te°
();

367 
DRV_RET_E
 
HÆ_A˛RuÀF‹EﬂmFûãrCª©e
(
UINT32
 
uiLP‹tId
,

368 
UINT32
 
uiRuÀPª˚dí˚
,

369 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,

370 
ACL_DIRECTION_E
 
íA˛Dú
,

371 
VOID
 *
pRuÀVÆue
);

372 
DRV_RET_E
 
HÆ_A˛RuÀF‹EﬂmFûãrDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiRuÀPª˚dí˚
, 
ACL_DIRECTION_E
 
íA˛Dú
);

373 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkCª©e
(
UINT32
 
uiLP‹tId
,

374 
UINT32
 
uiRuÀPª˚dí˚
,

375 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,

376 
VOID
 *
pRuÀVÆue
,

377 
VOID
 *
pRem¨kPri
);

378 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiRuÀPª˚dí˚
);

379 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkCÀ¨
(
UINT32
 
uiLP‹tId
);

381 
	s_l3_rouã_s_
 {

382 
ù_addªss_t
 
	gde°_ù
;

383 
ù_addªss_t
 
	g√xth›_ù
;

384 
mac_addªss_t
 
	gmac_add
;

385 
UINT8
 
	g¥e„ªn˚
;

386 
UINT8
 
	gù_mask_Àn
;

387 
vœn_id_t
 
	gvid
;

388 
UINT8
 
	ga˘i⁄
;

389 }
	tl3Rouã_t
;

391 
	#HAL_L3_ACT_ROUTE_HIT
 0x01

	)

392 
	#HAL_L3_ACT_ROUTE_ADD
 0x02

	)

393 
	#HAL_L3_ACT_ROUTE_CPU
 0x04

	)

395 
BOOL
 
HÆ_IsNextH›
(
mac_addªss_t
 
mac_add
, 
vœn_id_t
 
vid
);

396 
DRV_RET_E
 
HÆ_AddDúe˘Uˇ°Rouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

397 
DRV_RET_E
 
HÆ_DñDúe˘Uˇ°Rouã
(
ù_addªss_t
 
de°_ù
, 
vœn_id_t
 
vid
);

398 
DRV_RET_E
 
HÆ_AddNëw‹kUˇ°Rouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

399 
DRV_RET_E
 
HÆ_DñNëw‹kUˇ°Rouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

400 
DRV_RET_E
 
HÆ_AgeNëw‹kUˇ°RouãNh›
(
ù_addªss_t
 
√xth›_ù
, 
vœn_id_t
 
vid
);

401 
DRV_RET_E
 
HÆ_AddLoˇlRouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

402 
DRV_RET_E
 
HÆ_DñLoˇlRouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

403 
DRV_RET_E
 
	gHÆ_In°ÆlMacA˛RuÀ


404 (
logic_pmask_t
 *
	gp°P‹tMask
, 
vœn_id_t
 
	gusVid
, 
drv_a˛_li°_macBa£d_t
 *
	gp°MbRuÀ
, 
BOOL
 
	gbFœg
);

405 
DRV_RET_E
 
	gHÆ_In°ÆlIpA˛RuÀ


406 (
logic_pmask_t
 *
	gp°P‹tMask
, 
vœn_id_t
 
	gusVid
, 
drv_a˛_li°_ùBa£d_t
 *
	gp°IbRuÀ
, 
BOOL
 
	gbFœg
);

407 
DRV_RET_E
 
HÆ_Reö°ÆlA˛
(
UINT16
 
usA˛Prio
, 
logic_pmask_t
 *
lP‹tLi°
);

408 
DRV_RET_E
 
HÆ_RemoveA˛
(
UINT16
 
usA˛Prio
);

409 
DRV_RET_E
 
HÆ_RemoveA˛RuÀByRuÀId
(
UINT16
 
usA˛Prio
, 
UINT32
 
ulId
, 
BOOL
 
bFœg
);

410 
DRV_RET_E
 
HÆ_RemoveA˛RuÀByRuÀPrio
(
UINT16
 
usA˛Prio
, UINT16 
usRuÀPrio
);

411 
DRV_RET_E
 
HÆ_A˛E¡ryC™AŒoc
(
fõld_íåy_¥i_ty≥
 
ty≥
, 
UINT32
 
cou¡
, UINT32 
ulLogEn
);

412 
DRV_RET_E
 
HÆ_dh˝•_dr›_dh˝s
(
logic_pmask_t
 *
p°Lp‹tLi°
);

413 
DRV_RET_E
 
HÆ_dh˝•_c›y_dh˝s
(
logic_pmask_t
 *
p°Lp‹tLi°
);

414 
DRV_RET_E
 
HÆ_dh˝•_ùfûãr_íabÀ
(
logic_pmask_t
 *
p°Lp‹tMask
);

415 
DRV_RET_E
 
HÆ_dh˝•_dr›_¨p
(
BOOL
 
íabÀ
);

416 
DRV_RET_E
 
HÆ_AgeRouãByP‹t
(
p‹t_num_t
 
Õ‹t
);

417 
DRV_RET_E
 
HÆ_AgeRouãByVœn
(
vœn_id_t
 
vid
);

420 
DRV_RET_E
 
HÆ_SëEEEByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

421 
DRV_RET_E
 
HÆ_SëAutoPwrDwnByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

424 
DRV_RET_E
 
HÆ_GëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
);

427 
DRV_RET_E
 
HÆ_GëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 * 
pulSèã
);

428 
DRV_RET_E
 
HÆ_SëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulSèã
);

432 
DRV_RET_E
 
HÆ_soc_ªg_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 * 
pulD©a
);

433 
DRV_RET_E
 
HÆ_soc_ªg_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 
ulD©a
);

434 
DRV_RET_E
 
HÆ_soc_mem_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
);

435 
DRV_RET_E
 
HÆ_soc_mem_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
);

437 #ifde‡
CHIPSET_RTL8328


438 
DRV_RET_E
 
HÆ_GëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 * 
pulD©a
);

439 
DRV_RET_E
 
HÆ_SëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 
ulD©a
);

441 
DRV_RET_E
 
HÆ_SëCPUP‹tJumbo
(
UINT32
 
uiLí
);

446 
DRV_RET_E
 
HÆ_SwôchInô
();

452 
DRV_RET_E
 
HÆ_SdkInôS≥cül
(
UINT32
 
unô
);

454 
DRV_RET_E
 
HÆ_GpioInô
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_CONTROL_E
 
gpio_˘l
, 
GPIO_DIRECTION_E
 
gpio_dú
);

455 
DRV_RET_E
 
HÆ_GpioD©aSë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 
gpio_d©a
);

456 
DRV_RET_E
 
HÆ_GpioD©aGë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 *
pgpio_d©a
);

457 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Së
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 
gpio_dú
);

458 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Gë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 *
pgpio_dú
);

460 
DRV_RET_E
 
HÆ_L2£nd
(*
pMsg
,
UINT
 
uiLí
,
l2_£nd_›
 *
pOp
);

461 
DRV_RET_E
 
HÆ_SëI¡î«lLo›back
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
);

466 
	gEïromOk
=0,

467 
	gAckEº‹
,

468 
	gPoötEº‹
,

469 
	gOutOfR™g
,

470 
	gOutOfAddr
,

471 
	gGpioPöEº‹


472 }
	tEEPROM_RET
;

476 
	gEEPROM_I2C_SCL_PIN
=0,

477 
	gEEPROM_I2C_SDA_PIN
,

478 
	gEEPROM_I2C_PIN_END


479 }
	tEEPROM_I2C_PIN_DEFINE
;

481 
DRV_RET_E
 
HÆ_I2cFibîInô
(
VOID
);

483 
DRV_RET_E
 
HÆ_I2cFibîP‹tRód
(
p‹t_num_t
 
lgcP‹t
, 
UINT16
 
usAddr
, 
UINT8
* 
pucD©a
, 
UINT32
 
ulLí
, UINT32 
ulPD©aTy≥
);

486 #ifde‡
CHIPSET_OPL6750


487 
DRV_RET_E
 
HÆ_CpuInô
();

490 #i‡
deföed
(
CHIPSET_RTL8305
)

491 
DRV_RET_E
 
HÆ_Re°¨tP‹tNeg
(
p‹t_num_t
 
lgcP‹t
);

492 
DRV_RET_E
 
HÆ_CfgP‹tCtcVœnGë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
);

495 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/hello.c

2 
	$echo_hñlo
()

4 
	`¥ötk
("HelloÉverybody!");

5 
	}
}

	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_convert.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"hÆ_comm⁄.h
"

24 
	~<löux/°rög.h
>

25 #ifde‡
CHIPSET_RTL8328


26 
	~<comm⁄/π_îr‹.h
>

27 
	~<comm⁄/utû/π_utû.h
>

28 
	~<comm⁄/π_ty≥.h
>

30 #ifde‡
UT_TEST


31 
	~<°dio.h
>

32 
	~<°rög.h
>

50 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
)

52 
UINT32
 
uiP‹tId
 = 
PORTID
(
uiPhyID
);

53 
UINT32
 
uiChùID
 = 
CHIPID
(
uiPhyID
);

55 if(
uiChùID
 >
MAX_CHIP_NUM
)

57  
FALSE
;

60 if(
uiP‹tId
 >
g_szChùMaxP‹t
[
uiChùID
])

62  
FALSE
;

66  
TRUE
;

85 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
)

87 i‡(!
IsVÆidLgcP‹t
(
ucLogicP‹t
)) {

88 
ASSERT
(
IsVÆidLgcP‹t
(
ucLogicP‹t
));

89  
INVALID_PORT
;

91  
PORT_PHYID
(
ucLogicP‹t
);

109 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
)

111 
p‹t_num_t
 
Õ‹t
 = 
INVALID_PORT
;

112 
UINT32
 
ulChùId
 = 0;

113 
UINT32
 
ulid
 = 0;

114 
UINT32
 
ulP‹tSèπ
 = 0;

116 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

117 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

118  
INVALID_PORT
;

121 
ulChùId
 = 
CHIPID
(
uiPhyId
);

122 
ulid
=0; ulid<
ulChùId
; ulid++)

124 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulid
];

127 
Õ‹t
 = 
TOLGCPORT
(
ulP‹tSèπ
 + 
PORTID
(
uiPhyId
));

128 if(
STACK_PORT
 =
Õ‹t
)

130  
INVALID_PORT
;

134  
Õ‹t
;

155 
SëPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

157 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

158 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

161 if(
NULL
 =
phyPMask_±r
) {

162 
ASSERT
(
NULL
 !
phyPMask_±r
);

166 
RTK_PORTMASK_PORT_SET
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId));

186 
CÃPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

188 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

189 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

192 if(
NULL
 =
phyPMask_±r
) {

193 
ASSERT
(
NULL
 !
phyPMask_±r
);

197 
RTK_PORTMASK_PORT_CLEAR
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId));

216 
CÃPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

218 
UINT32
 
chùId
 = 0;

220 if(
NULL
 =
phyPMask_±r
) {

221 
ASSERT
(
NULL
 !
phyPMask_±r
);

225 
chùId
=0; chùId<
CHIP_NO
; chipId++)

227 
RTK_PORTMASK_RESET
(
CHIPNMASK
(
chùId
, 
phyPMask_±r
));

246 
SëPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

248 
p‹t_num_t
 
µ‹t
 = 0;

249 
UINT32
 
chùId
 = 0;

250 
phyid_t
 
uiPhyId
 = 0;

252 if(
NULL
 =
phyPMask_±r
) {

253 
ASSERT
(
NULL
 !
phyPMask_±r
);

257 
mem£t
(
phyPMask_±r
, 0x00, (
phy_pmask_t
));

258 
PhyP‹tF‹
(
chùId
, 
µ‹t
)

260 
uiPhyId
 = 
TOPHYID
(
chùId
, 
µ‹t
);

261 
SëPhyMaskBô
(
uiPhyId
, 
phyPMask_±r
);

263 
PhyMaskAddCpuP‹t
(
phyPMask_±r
);

282 
BOOL
 
T°PhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

284 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

285 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

286  
FALSE
;

288 if(
NULL
 =
phyPMask_±r
) {

289 
ASSERT
(
NULL
 !
phyPMask_±r
);

290  
FALSE
;

293 if(
RTK_PORTMASK_IS_PORT_SET
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId)))

295  
TRUE
;

299  
FALSE
;

319 
MaskLogic2Phy
(
logic_pmask_t
 *
lgcPMask_±r
, 
phy_pmask_t
 *
phyPMask_±r
)

321 
p‹t_num_t
 
lP‹tNo
;

322 
phyid_t
 
uiPhyId
;

324 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

326 
ASSERT
(
NULL
 !
phyPMask_±r
);

327 
ASSERT
(
NULL
 !
lgcPMask_±r
);

331 
CÃPhyMaskAŒ
(
phyPMask_±r
);

333 
LgcP‹tF‹
(
lP‹tNo
)

335 if(
T°LgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
))

337 
uiPhyId
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

338 if(
uiPhyId
 =
INVALID_PORT
)

342 
SëPhyMaskBô
(
uiPhyId
 ,
phyPMask_±r
);

346 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

347 i‡(
T°LgcMaskBô
(
LOGIC_PON_PORT
, 
lgcPMask_±r
))

349 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_PON_PORT
);

350 if(
uiPhyId
 !
INVALID_PORT
)

352 
SëPhyMaskBô
(
uiPhyId
 ,
phyPMask_±r
);

356 i‡(
T°LgcMaskBô
(
LOGIC_CPU_PORT
, 
lgcPMask_±r
))

358 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_CPU_PORT
);

359 if(
uiPhyId
 !
INVALID_PORT
)

361 
SëPhyMaskBô
(
uiPhyId
 ,
phyPMask_±r
);

383 
MaskPhy2Logic
(
phy_pmask_t
 *
phyPMask_±r
, 
logic_pmask_t
 *
lgcPMask_±r
)

385 
p‹t_num_t
 
lP‹tNo
 = 0;

386 
phyid_t
 
uiPhyId
 = 0;

388 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

390 
ASSERT
(
NULL
 !
phyPMask_±r
);

391 
ASSERT
(
NULL
 !
lgcPMask_±r
);

395 
CÃLgcMaskAŒ
(
lgcPMask_±r
);

397 
LgcP‹tF‹
(
lP‹tNo
)

399 
uiPhyId
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

400 if(
uiPhyId
 =
INVALID_PORT
)

404 if(
T°PhyMaskBô
(
uiPhyId
, 
phyPMask_±r
))

406 
SëLgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
);

410 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

411 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_PON_PORT
);

412 if(
uiPhyId
 !
INVALID_PORT
)

414 if(
T°PhyMaskBô
(
uiPhyId
, 
phyPMask_±r
))

416 
SëLgcMaskBô
(
LOGIC_PON_PORT
, 
lgcPMask_±r
);

420 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_CPU_PORT
);

421 if(
uiPhyId
 !
INVALID_PORT
)

423 if(
T°PhyMaskBô
(
uiPhyId
, 
phyPMask_±r
))

425 
SëLgcMaskBô
(
LOGIC_CPU_PORT
, 
lgcPMask_±r
);

433 #ifde‡
CHIPSET_RTL8305


434 
UINT32
 
bô›_numbîOfSëBôsInAºay
(UINT32 *
pAºay
, UINT32 
¨øySize
)

436 
UINT32
 
ödex
;

437 
UINT32
 
vÆue
;

438 
UINT32
 
numOfBôs
;

440 i‡(
NULL
 =
pAºay
)

445 
numOfBôs
 = 0;

447 
ödex
 = 0; index < 
¨øySize
; index++)

449 
vÆue
 = 
pAºay
[
ödex
];

451 
vÆue
 = value - ((value >> 1) & 0x55555555);

452 
vÆue
 = (value & 0x33333333) + ((value >> 2) & 0x33333333);

453 
numOfBôs
 =+ (((((
vÆue
 + (value >> 4)) & 0xF0F0F0F)) * 0x1010101) >> 24);

456  
numOfBôs
;

476 
INT32
 
GëPhyMskP‹tNum
(
phy_pmask_t
 *
phyPMask_±r
)

478 
INT32
 
num
 = 0;

479 
UINT32
 
chùId
 = 0;

481 
chùId
=0; chùId<
CHIP_NO
; chipId++)

483 
num
 +(
INT32
)
RTK_PORTMASK_GET_PORT_COUNT
(
CHIPNMASK
(
chùId
, 
phyPMask_±r
));

486  
num
;

505 
PhyMaskC›y
(
phy_pmask_t
 *
d°Msk
,phy_pmask_à*
§cMsk
)

507 if((
NULL
 =
d°Msk
Ë|| (NULL =
§cMsk
))

509 
ASSERT
(
NULL
 !
d°Msk
);

510 
ASSERT
(
NULL
 !
§cMsk
);

513 
mem˝y
(
d°Msk
,
§cMsk
,(
phy_pmask_t
));

532 
PhyMaskAnd
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

534 
UINT32
 
chùId
 = 0;

536 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

538 
ASSERT
(
NULL
 !
mska
);

539 
ASSERT
(
NULL
 !
mskb
);

543 
chùId
=0; chùId<
CHIP_NO
; chipId++)

545 
RTK_PORTMASK_AND
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

565 
PhyMaskOr
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

567 
UINT32
 
chùId
 = 0;

569 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

571 
ASSERT
(
NULL
 !
mska
);

572 
ASSERT
(
NULL
 !
mskb
);

575 
chùId
=0; chùId<
CHIP_NO
; chipId++)

577 
RTK_PORTMASK_OR
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

597 
PhyMaskX‹
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

599 
UINT32
 
chùId
 = 0;

601 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

603 
ASSERT
(
NULL
 !
mska
);

604 
ASSERT
(
NULL
 !
mskb
);

607 
chùId
=0; chùId<
CHIP_NO
; chipId++)

609 
RTK_PORTMASK_XOR
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

629 
PhyMaskRemove
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

631 
UINT32
 
chùId
 = 0;

633 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

635 
ASSERT
(
NULL
 !
mska
);

636 
ASSERT
(
NULL
 !
mskb
);

639 
chùId
=0; chùId<
CHIP_NO
; chipId++)

641 
RTK_PORTMASK_REMOVE
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

661 
PhyMaskNeg©e
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

663 
UINT32
 
chùId
 = 0;

665 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

667 
ASSERT
(
NULL
 !
mska
);

668 
ASSERT
(
NULL
 !
mskb
);

672 
chùId
=0; chùId<
CHIP_NO
; chipId++)

674 
RTK_PORTMASK_REVERT
(
CHIPNMASK
(
chùId
, 
mskb
));

676 
PhyMaskC›y
(
mska
, 
mskb
);

694 
PhyMaskAddCpuP‹t
(
phy_pmask_t
 *
mska
)

696 
phyid_t
 
uiPhyId
 = 0;

698 if(
NULL
 =
mska
)

700 
ASSERT
(
NULL
 !
mska
);

703 
uiPhyId
 = 
PORT_PHYID
(
LOGIC_CPU_PORT
);

705 
SëPhyMaskBô
(
uiPhyId
, 
mska
);

723 
PhyMaskRemoveCpuP‹t
(
phy_pmask_t
 *
mska
)

725 
phyid_t
 
uiPhyId
 = 0;

727 if(
NULL
 =
mska
)

729 
ASSERT
(
NULL
 !
mska
);

732 
uiPhyId
 = 
PORT_PHYID
(
LOGIC_CPU_PORT
);

734 
CÃPhyMaskBô
(
uiPhyId
, 
mska
);

753 
phyid_t
 
PhyGëSèckP‹t
(
UINT32
 
ulUnô
, UINT32 
ulSèckIndex
)

755 
p‹t_num_t
 
µ‹t
 = 0;

756 
UINT32
 
iM©chC¡
 = 0;

757 
UINT32
 
ulChùId
 = 0;

758 
UINT32
 
ulP‹tSèπ
 = 0;

760 
ulChùId
=0; ulChùId<
ulUnô
; ulChipId++)

762 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulChùId
];

765 
µ‹t
=0;Öp‹t<
g_szChùMaxP‹t
[
ulUnô
];Öport++)

767 if(
STACK_PORT
 =
TOLGCPORT
(
ulP‹tSèπ
+
µ‹t
))

769 
iM©chC¡
++;

770 if(
ulSèckIndex
 =
iM©chC¡
)

772  
TOPHYID
(
ulUnô
, 
µ‹t
);

777  
INVALID_PORT
;

797 
BOOL
 
IsSèckP‹t
(
phyid_t
 
uiPhyId
)

799 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

800 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

801  
FALSE
;

804 if(
STACK_PORT
 =
P‹tPhyID2Logic
(
uiPhyId
))

806  
TRUE
;

810  
FALSE
;

831 
PhyMaskAddSèckP‹t
(
phy_pmask_t
 *
mska
)

833 
UINT32
 
chùId
 = 0;

834 
UINT32
 
ulChùId
 = 0;

835 
UINT32
 
ulP‹tSèπ
 = 0;

836 
p‹t_num_t
 
µ‹t
 = 0;

837 
p‹t_num_t
 
Õ‹t
 = 0;

839 if(
NULL
 =
mska
)

841 
ASSERT
(
NULL
 !
mska
);

845 
PhyP‹tF‹
(
chùId
, 
µ‹t
)

847 
ulP‹tSèπ
 = 0;

848 
ulChùId
=0; ulChùId<
chùId
; ulChipId++)

850 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulChùId
];

852 
Õ‹t
 = 
TOLGCPORT
(
ulP‹tSèπ
 + 
µ‹t
);

853 if(
STACK_PORT
 =
Õ‹t
)

855 
SëPhyMaskBô
(
TOPHYID
(
chùId
, 
µ‹t
), 
mska
);

875 
DRV_RET_E
 
Eº‹Sdk2Drv
(
INT32
 
iRtkEº‹
)

877 
iRtkEº‹
)

879 
RT_ERR_FAILED
:

880  
DRV_SDK_GEN_ERROR
;

881 
RT_ERR_OK
:

882  
DRV_OK
;

883 
RT_ERR_INPUT
:

884  
DRV_SDK_INVALID_PARA
;

885 
RT_ERR_UNIT_ID
:

886  
DRV_SDK_INVALID_UNIT
;

887 
RT_ERR_PORT_ID
:

888  
DRV_SDK_INVALID_PORTID
;

889 
RT_ERR_PORT_MASK
:

890  
DRV_SDK_INVALID_MASK
;

891 
RT_ERR_PORT_LINKDOWN
:

892  
DRV_SDK_PORT_LINKDOWN
;

893 
RT_ERR_ENTRY_INDEX
:

894  
DRV_SDK_INVALID_ENTRY_INDEX
;

895 
RT_ERR_NULL_POINTER
:

896  
DRV_SDK_NULL_POINTER
;

897 
RT_ERR_QUEUE_ID
:

898  
DRV_SDK_INVALID_QUEUE_ID
;

899 
RT_ERR_QUEUE_NUM
:

900  
DRV_SDK_INVALID_QUEUE_NUM
;

901 
RT_ERR_BUSYWAIT_TIMEOUT
:

902  
DRV_SDK_BUSYWAIT_TIMEOUT
;

903 
RT_ERR_MAC
:

904  
DRV_SDK_INVALID_MAC
;

905 
RT_ERR_OUT_OF_RANGE
:

906  
DRV_SDK_OUT_OF_RANGE
;

907 
RT_ERR_CHIP_NOT_SUPPORTED
:

908  
DRV_SDK_CHIP_NOT_SUPPORTED
;

909 
RT_ERR_SMI
:

910  
DRV_SDK_INVALID_SMI
;

911 
RT_ERR_NOT_INIT
:

912  
DRV_SDK_NOT_INIT
;

913 
RT_ERR_CHIP_NOT_FOUND
:

914  
DRV_SDK_CHIP_NOT_FOUND
;

915 
RT_ERR_NOT_ALLOWED
:

916  
DRV_SDK_NOT_ALLOWED
;

917 
RT_ERR_DRIVER_NOT_FOUND
:

918  
DRV_SDK_DRIVER_NOT_FOUND
;

919 
RT_ERR_SEM_LOCK_FAILED
:

920  
DRV_SDK_SEM_LOCK_FAILED
;

921 
RT_ERR_SEM_UNLOCK_FAILED
:

922  
DRV_SDK_SEM_UNLOCK_FAILED
;

923 #ifde‡
CHIPSET_RTL8328


924 
RT_ERR_THREAD_EXIST
:

925  
DRV_SDK_THREAD_EXIST
;

926 
RT_ERR_THREAD_CREATE_FAILED
:

927  
DRV_SDK_THREAD_CREATE_FAILED
;

928 
RT_ERR_FWD_ACTION
:

929  
DRV_SDK_INVALID_FWD_ACTION
;

930 
RT_ERR_IPV4_ADDRESS
:

931  
DRV_SDK_INVALID_IPV4_ADDRESS
;

932 
RT_ERR_IPV6_ADDRESS
:

933  
DRV_SDK_INVALID_IPV6_ADDRESS
;

934 
RT_ERR_PRIORITY
:

935  
DRV_SDK_INVALID_PRIORITY
;

936 
RT_ERR_FID
:

937  
DRV_SDK_INVALID_FID
;

938 
RT_ERR_ENTRY_NOTFOUND
:

939  
DRV_SDK_ENTRY_NOTFOUND
;

940 
RT_ERR_DROP_PRECEDENCE
:

941  
DRV_SDK_DROP_PRECEDENCE
;

942 
RT_ERR_NOT_FINISH
:

943  
DRV_SDK_NOT_FINISH
;

944 
RT_ERR_TIMEOUT
:

945  
DRV_SDK_TIMEOUT
;

946 
RT_ERR_REG_ARRAY_INDEX_1
:

947  
DRV_SDK_INVALID_REG_ARRAY_INDEX_1
;

948 
RT_ERR_REG_ARRAY_INDEX_2
:

949  
DRV_SDK_INVALID_REG_ARRAY_INDEX_2
;

950 
RT_ERR_ETHER_TYPE
:

951  
DRV_SDK_INVALID_ETHER_TYPE
;

952 
RT_ERR_PHY_FIBER_LINKUP
:

953  
DRV_SDK_ERR_PHY_FIBER_LINKUP
;

956 
ASSERT
(
iRtkEº‹
 =
RT_ERR_OK
);

957  
DRV_SDK_GEN_ERROR
;

962 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_acl.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 #ifde‡
CHIPSET_RTL8328


26 
	~<comm⁄/îr‹.h
>

27 
	~<πk/põ.h
>

28 
	~<πk/vœn.h
>

29 
	~<πk/l2.h
>

30 
	~<πk/swôch.h
>

31 
	~<πk/múr‹.h
>

32 
	~<hÆ/comm⁄/hÆ˘æ.h
>

33 
	~<oßl/£m.h
>

34 #ñi‡
deföed
(
CHIPSET_RTL8305
)

35 
	~"πk_≠i.h
"

36 
	~"πk_≠i_ext.h
"

37 
	~"πl8367b_asicdrv.h
"

39 
	~<löux/muãx.h
>

40 
	~<löux/kî√l.h
>

41 
	~<löux/autoc⁄f.h
>

44 
	~<löux/îr.h
>

45 
	~<löux/dñay.h
>

46 
	~<löux/¶ab.h
>

55 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrModeSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiFûãrIndex
, 
ACL_DIRECTION_E
 
íA˛Dú
, 
ACL_TRUST_MODE_E
 
íMode
);

56 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrRuÀIdSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiFûãrIndex
, 
ACL_DIRECTION_E
 
íA˛Dú
, UINT32 
uiA˛Id
);

57 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkModeSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiClfRmkIndex
, 
ACL_TRUST_MODE_E
 
íMode
);

58 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkA˛RuÀIdSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiClfRmkIndex
, UINT32 
uiA˛Id
);

62 
DRV_RET_E
 
_HÆ_CfgP‹tMcVœnSë
(
UINT32
 
uiLP‹tId
, 
PORT_MC_VLAN_CFG_S
 *
p°CtcMcVœnCfg
);

72 
muãx
 
m_°A˛Muãx
;

74 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

75 
πk_fûãr_cfg_t
 
m_a°A˛Cfg
[
ACL_RULE_NUM_MAX
];

76 
πk_fûãr_a˘i⁄_t
 
m_a°A˛A˘i⁄
[
ACL_RULE_NUM_MAX
];

77 
CTC_VLAN_CFG_S
 
m_a°UniVœnMode
[
LOGIC_PORT_NO
+1];

78 
PORT_CLF_REMAERK_CFG_S
 
m_a°UniClfM¨kMode
[
LOGIC_PORT_NO
+1];

80 
PORT_FILTER_CFG_S
 
m_a°UniFûãrMode
[
LOGIC_PORT_NO
+2];

81 
PORT_QINQ_S
 
g_a°UniQöqMode
[
LOGIC_PORT_NO
+1];

86 
PORT_MC_VLAN_CFG_S
 
m_a°UniMcVœnCfg
[
LOGIC_PORT_NO
+1];

92 
	#ACL_MUTEX_INIT
 
	`muãx_öô
(&
m_°A˛Muãx
)

	)

93 
	#ACL_MUTEX_LOCK
 
	`muãx_lock
(&
m_°A˛Muãx
)

	)

94 
	#ACL_MUTEX_UNLOCK
 
	`muãx_u∆ock
(&
m_°A˛Muãx
)

	)

111 
HÆ_A˛Inô
()

113 
UINT32
 
Õ‹t
;

114 
UINT32
 
uiPªc
;

117 
PORT_MC_VLAN_CFG_S
 
°CtcMcVœnCfg
;

120 
ACL_MUTEX_INIT
;

122 
ACL_MUTEX_LOCK
;

123 
mem£t
(
m_a°A˛Cfg
, 0, (m_astAclCfg));

124 
mem£t
(
m_a°A˛A˘i⁄
, 0, (m_astAclAction));

125 
ACL_MUTEX_UNLOCK
;

129 
mem£t
(&
°CtcMcVœnCfg
, 0, (stCtcMcVlanCfg));

130 
uiPªc
 = 0; uiPª¯< 
CTC_MC_MAX_GROUP_NUM
; uiPrec++)

132 
°CtcMcVœnCfg
.
auiA˛Li°
[
uiPªc
] = 
ACL_RULE_ID_IVALLID
;

133 
°CtcMcVœnCfg
.
auiVœnLi°
[
uiPªc
] = 
CTC_MC_VLAN_ID_IVALID
;

137 
LgcP‹tF‹
(
Õ‹t
)

139 
uiPªc
 = 0; uiPª¯< 
EOAM_FILTER_RULE_NUM_MAX
; uiPrec++)

141 ()
_HÆ_CfgP‹tFûãrModeSë
(
Õ‹t
, 
uiPªc
, 
ACL_DIRECTION_BOTH
, 
ACL_TRUST_END
);

142 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
Õ‹t
, 
uiPªc
, 
ACL_DIRECTION_BOTH
, 
ACL_RULE_ID_IVALLID
);

145 
uiPªc
 = 0; uiPª¯< 
CTC_CLF_REMARK_RULE_NUM_MAX
*2; uiPrec++)

147 ()
_HÆ_CfgP‹tClfRmkModeSë
(
Õ‹t
, 
uiPªc
, 
ACL_TRUST_END
);

148 ()
_HÆ_CfgP‹tClfRmkA˛RuÀIdSë
(
Õ‹t
, 
uiPªc
, 
ACL_RULE_ID_IVALLID
);

152 ()
_HÆ_CfgP‹tMcVœnSë
(
Õ‹t
, &
°CtcMcVœnCfg
);

156 
uiPªc
 = 0; uiPª¯< 
EOAM_FILTER_RULE_NUM_MAX
; uiPrec++)

158 ()
_HÆ_CfgP‹tFûãrModeSë
(
LOGIC_UPPON_PORT
, 
uiPªc
, 
ACL_DIRECTION_BOTH
, 
ACL_TRUST_END
);

159 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
LOGIC_UPPON_PORT
, 
uiPªc
, 
ACL_DIRECTION_BOTH
, 
ACL_RULE_ID_IVALLID
);

181 
DRV_RET_E
 
_HÆ_A˛CfgGë
(
UINT32
 
uiA˛Id
, *
p°A˛Cfg
)

183 #i‡
deföed
(
CHIPSET_RTL8305
)

184 
πk_fûãr_cfg_t
 *
p°RéA˛Cfg
 = 
NULL
;

187 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛Id
) ||

188 (
NULL
 =
p°A˛Cfg
))

190  
DRV_ERR_PARA
;

193 #i‡
deföed
(
CHIPSET_RTL8305
)

194 
p°RéA˛Cfg
 = (
πk_fûãr_cfg_t
 *)
p°A˛Cfg
;

196 
ACL_MUTEX_LOCK
;

197 
mem˝y
(
p°RéA˛Cfg
, &
m_a°A˛Cfg
[
uiA˛Id
], (
πk_fûãr_cfg_t
));

198 
ACL_MUTEX_UNLOCK
;

201  
DRV_OK
;

220 
DRV_RET_E
 
_HÆ_A˛CfgSë
(
UINT32
 
uiA˛Id
, *
p°A˛Cfg
)

222 #i‡
deföed
(
CHIPSET_RTL8305
)

223 
πk_fûãr_cfg_t
 *
p°RéA˛Cfg
 = 
NULL
;

226 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛Id
) ||

227 (
NULL
 =
p°A˛Cfg
))

229  
DRV_ERR_PARA
;

232 #i‡
deföed
(
CHIPSET_RTL8305
)

233 
p°RéA˛Cfg
 = (
πk_fûãr_cfg_t
 *)
p°A˛Cfg
;

235 
ACL_MUTEX_LOCK
;

236 
mem˝y
(&
m_a°A˛Cfg
[
uiA˛Id
],
p°RéA˛Cfg
,(
πk_fûãr_cfg_t
));

237 
ACL_MUTEX_UNLOCK
;

240  
DRV_OK
;

259 
DRV_RET_E
 
_HÆ_A˛A˘i⁄CfgGë
(
UINT32
 
uiA˛Id
, *
p°A˛A˘i⁄
)

261 #i‡
deföed
(
CHIPSET_RTL8305
)

262 
πk_fûãr_a˘i⁄_t
 *
p°RéA˛A˘
 = 
NULL
;

265 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛Id
) ||

266 (
NULL
 =
p°A˛A˘i⁄
))

268  
DRV_ERR_PARA
;

271 #i‡
deföed
(
CHIPSET_RTL8305
)

272 
p°RéA˛A˘
 = (
πk_fûãr_a˘i⁄_t
 *)
p°A˛A˘i⁄
;

274 
ACL_MUTEX_LOCK
;

275 
mem˝y
(
p°RéA˛A˘
, &
m_a°A˛A˘i⁄
[
uiA˛Id
], (
πk_fûãr_a˘i⁄_t
));

276 
ACL_MUTEX_UNLOCK
;

279  
DRV_OK
;

298 
DRV_RET_E
 
_HÆ_A˛A˘i⁄CfgSë
(
UINT32
 
uiA˛Id
, *
p°A˛A˘i⁄
)

300 #i‡
deföed
(
CHIPSET_RTL8305
)

301 
πk_fûãr_a˘i⁄_t
 *
p°RéA˛A˘
 = 
NULL
;

304 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛Id
) ||

305 (
NULL
 =
p°A˛A˘i⁄
))

307  
DRV_ERR_PARA
;

310 #i‡
deföed
(
CHIPSET_RTL8305
)

311 
p°RéA˛A˘
 = (
πk_fûãr_a˘i⁄_t
 *)
p°A˛A˘i⁄
;

313 
ACL_MUTEX_LOCK
;

314 
mem˝y
(&
m_a°A˛A˘i⁄
[
uiA˛Id
], 
p°RéA˛A˘
, (
πk_fûãr_a˘i⁄_t
));

315 
ACL_MUTEX_UNLOCK
;

318  
DRV_OK
;

338 
DRV_RET_E
 
_HÆ_A˛RuÀFõldFûl
(
ACL_TRUST_MODE_E
 
íTru°Mode
, *
pVÆue
, *
pA˛Ty≥AndVÆue
)

340 #i‡
deföed
(
CHIPSET_RTL8305
)

341 
πk_fûãr_fõld_t
 *
p°RéA˛Ty≥AndVÆue
 = 
NULL
;

344 i‡((
ACL_TRUST_END
 <
íTru°Mode
) ||

345 (
NULL
 =
pVÆue
) ||

346 (
NULL
 =
pA˛Ty≥AndVÆue
))

348  
DRV_ERR_PARA
;

351 #i‡
deföed
(
CHIPSET_RTL8305
)

352 
p°RéA˛Ty≥AndVÆue
 = (
πk_fûãr_fõld_t
 *)
pA˛Ty≥AndVÆue
;

355 
íTru°Mode
)

357 
ACL_TRUST_PORT
:

358 #i‡
deföed
(
CHIPSET_RTL8305
)

359 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_DMAC
;

360 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

361 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
vÆue
.
o˘ë
,0,
ETHER_ADDR_LEN
);

362 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
mask
.
o˘ë
,0,
ETHER_ADDR_LEN
);

363 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
øngeSèπ
.
o˘ë
,0,
ETHER_ADDR_LEN
);

364 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
øngeEnd
.
o˘ë
,0,
ETHER_ADDR_LEN
);

367 
ACL_TRUST_SMAC
:

368 #i‡
deföed
(
CHIPSET_RTL8305
)

369 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_SMAC
;

370 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
smac
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

371 
mem˝y
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
smac
.
vÆue
.
o˘ë
,(
UINT8
 *)
pVÆue
,
ETHER_ADDR_LEN
);

372 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
smac
.
mask
.
o˘ë
,0xFF,
ETHER_ADDR_LEN
);

373 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
smac
.
øngeSèπ
.
o˘ë
,0,
ETHER_ADDR_LEN
);

374 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
smac
.
øngeEnd
.
o˘ë
,0,
ETHER_ADDR_LEN
);

377 
ACL_TRUST_DMAC
:

378 #i‡
deföed
(
CHIPSET_RTL8305
)

379 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_DMAC
;

380 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

381 
mem˝y
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
vÆue
.
o˘ë
,(
UINT8
 *)
pVÆue
,
ETHER_ADDR_LEN
);

382 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
mask
.
o˘ë
,0xFF,
ETHER_ADDR_LEN
);

383 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
øngeSèπ
.
o˘ë
,0,
ETHER_ADDR_LEN
);

384 
mem£t
(
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dmac
.
øngeEnd
.
o˘ë
,0,
ETHER_ADDR_LEN
);

387 
ACL_TRUST_CTAG_PRIO
:

388 #i‡
deföed
(
CHIPSET_RTL8305
)

389 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_CTAG
;

390 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
¥i
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

391 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
¥i
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

392 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
¥i
.
mask
 = 
RTK_MAX_NUM_OF_PRIORITY
 - 1;

393 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
¥i
.
øngeSèπ
 = 0;

394 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
¥i
.
øngeEnd
 = 0;

397 
ACL_TRUST_ETHTYPE
:

398 #i‡
deföed
(
CHIPSET_RTL8305
)

399 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_ETHERTYPE
;

400 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ëhîTy≥
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

401 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ëhîTy≥
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

402 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ëhîTy≥
.
mask
 = 0xFFFF;

403 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ëhîTy≥
.
øngeSèπ
 = 0;

404 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ëhîTy≥
.
øngeEnd
 = 0;

407 
ACL_TRUST_CTAG_VID
:

408 #i‡
deföed
(
CHIPSET_RTL8305
)

409 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_CTAG
;

410 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
vid
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

411 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
vid
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

412 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
vid
.
mask
 = 0x0FFF;

413 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
vid
.
øngeSèπ
 = 0;

414 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
˘ag
.
vid
.
øngeEnd
 = 0;

417 
ACL_TRUST_IPV4_SIP
:

418 #i‡
deföed
(
CHIPSET_RTL8305
)

419 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_IPV4_SIP
;

420 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
sù
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

421 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
sù
.
vÆue
 = *(
UINT32
 *)
pVÆue
;

422 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
sù
.
mask
 = 0xFFFFFFFF;

425 
ACL_TRUST_IPV4_DIP
:

426 #i‡
deföed
(
CHIPSET_RTL8305
)

427 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_IPV4_DIP
;

428 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dù
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

429 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dù
.
vÆue
 = *(
UINT32
 *)
pVÆue
;

430 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
dù
.
mask
 = 0xFFFFFFFF;

433 
ACL_TRUST_IPV4_PRENCEDENCE
:

434 #i‡
deföed
(
CHIPSET_RTL8305
)

435 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_END
;

438 
ACL_TRUST_IPV4_TOS
:

439 #i‡
deföed
(
CHIPSET_RTL8305
)

440 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_IPV4_TOS
;

441 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ùTos
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

442 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ùTos
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

443 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ùTos
.
mask
 = 0xFF;

444 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ùTos
.
øngeSèπ
 = 0;

445 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
ùTos
.
øngeEnd
 = 0;

448 
ACL_TRUST_IPV4_PROTOCOL
:

449 #i‡
deföed
(
CHIPSET_RTL8305
)

450 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_IPV4_PROTOCOL
;

451 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
¥Ÿocﬁ
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

452 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
¥Ÿocﬁ
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

453 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
¥Ÿocﬁ
.
mask
 = 0xFF;

454 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
¥Ÿocﬁ
.
øngeSèπ
 = 0;

455 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
¥Ÿocﬁ
.
øngeEnd
 = 0;

458 
ACL_TRUST_TCP_SPORT
:

459 #i‡
deföed
(
CHIPSET_RTL8305
)

460 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_TCP_SPORT
;

461 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝SrcP‹t
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

462 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝SrcP‹t
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

463 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝SrcP‹t
.
mask
 = 0xFFFF;

464 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝SrcP‹t
.
øngeSèπ
 = 0;

465 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝SrcP‹t
.
øngeEnd
 = 0;

468 
ACL_TRUST_TCP_DPORT
:

469 #i‡
deföed
(
CHIPSET_RTL8305
)

470 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_TCP_DPORT
;

471 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝D°P‹t
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

472 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝D°P‹t
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

473 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝D°P‹t
.
mask
 = 0xFFFF;

474 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝D°P‹t
.
øngeSèπ
 = 0;

475 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
t˝D°P‹t
.
øngeEnd
 = 0;

478 
ACL_TRUST_UDP_SPORT
:

479 #i‡
deföed
(
CHIPSET_RTL8305
)

480 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_UDP_SPORT
;

481 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpSrcP‹t
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

482 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpSrcP‹t
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

483 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpSrcP‹t
.
mask
 = 0xFFFF;

484 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpSrcP‹t
.
øngeSèπ
 = 0;

485 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpSrcP‹t
.
øngeEnd
 = 0;

488 
ACL_TRUST_UDP_DPORT
:

489 #i‡
deföed
(
CHIPSET_RTL8305
)

490 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_UDP_DPORT
;

491 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpD°P‹t
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

492 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpD°P‹t
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

493 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpD°P‹t
.
mask
 = 0xFFFF;

494 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpD°P‹t
.
øngeSèπ
 = 0;

495 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
udpD°P‹t
.
øngeEnd
 = 0;

498 
ACL_TRUST_STAG_VID
:

499 #i‡
deföed
(
CHIPSET_RTL8305
)

500 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_STAG
;

501 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
°ag
.
vid
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

502 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
°ag
.
vid
.
vÆue
 = *((
UINT32
 *)
pVÆue
);

503 
p°RéA˛Ty≥AndVÆue
->
fûãr_∑âîn_uni⁄
.
°ag
.
vid
.
mask
= 0xFFF;

507 #i‡
deföed
(
CHIPSET_RTL8305
)

508 
p°RéA˛Ty≥AndVÆue
->
fõldTy≥
 = 
FILTER_FIELD_END
;

513  
DRV_OK
;

535 
DRV_RET_E
 
_HÆ_A˛RuÀCfgCª©e
(
UINT32
 
uiA˛Id
, 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
, 
ACL_ACTION_E
 
íA˛A˘
, *
pA˛RuÀTy≥VÆue
, *
pA˛RuÀD©a
)

537 
DRV_RET_E
 
RëVÆ
 = 
DRV_OK
;

538 #i‡
deföed
(
CHIPSET_RTL8305
)

540 
πk_fûãr_fõld_t
 *
p°A˛RuÀFõld
 = 
NULL
;

541 
πk_fûãr_cfg_t
 
°A˛Cfg
;

544 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛Id
) ||

545 (
ACL_TRUST_END
 <
uiA˛RuÀTy≥
) ||

546 (
ACL_ACTION_END
 <
íA˛A˘
) ||

547 (
NULL
 =
pA˛RuÀTy≥VÆue
) ||

548 (
NULL
 =
pA˛RuÀD©a
))

550  
DRV_ERR_PARA
;

553 #i‡
deföed
(
CHIPSET_RTL8305
)

555 
p°A˛RuÀFõld
 = (
πk_fûãr_fõld_t
 *)
kmÆloc
(‘tk_fûãr_fõld_t), 
GFP_KERNEL
);

556 if(
NULL
 =
p°A˛RuÀFõld
)

558  
DRV_ERR_NO_MEM
;

561 
mem£t
(
p°A˛RuÀFõld
, 0, (
πk_fûãr_fõld_t
));

564 
RëVÆ
 = 
_HÆ_A˛RuÀFõldFûl
(
uiA˛RuÀTy≥
, 
pA˛RuÀTy≥VÆue
, (*)
p°A˛RuÀFõld
);

565 i‡(
DRV_OK
 !
RëVÆ
)

568 
k‰ì
(
p°A˛RuÀFõld
);

569  
DRV_ERR_UNKNOW
;

572 #i‡
deföed
(
CHIPSET_RTL8305
)

573 i‡(
FILTER_FIELD_END
 <
p°A˛RuÀFõld
->
fõldTy≥
)

576 
k‰ì
(
p°A˛RuÀFõld
);

577  
DRV_ERR_UNKNOW
;

580 
p°A˛RuÀFõld
->
√xt
 = 
NULL
;

583 ()
_HÆ_A˛CfgGë
(
uiA˛Id
,(*)&
°A˛Cfg
);

585 #i‡
deföed
(
CHIPSET_RTL8305
)

586 i‡(
RT_ERR_OK
 !
πk_fûãr_igrA˛_fõld_add
(&
°A˛Cfg
, 
p°A˛RuÀFõld
))

589 
k‰ì
(
p°A˛RuÀFõld
);

590  
DRV_ERR_UNKNOW
;

594 ()
_HÆ_A˛CfgSë
(
uiA˛Id
, (*)&
°A˛Cfg
);

597 
ACL_MUTEX_LOCK
;

598 
íA˛A˘
)

600 
ACL_ACTION_REMATK_PRIORITY
:

601 #i‡
deföed
(
CHIPSET_RTL8305
)

603 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_1P_REMARK
] = 
TRUE
;

604 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPri‹ôy
 = *((
UINT32
 *)
pA˛RuÀD©a
);

607 
ACL_ACTION_MIRROR
:

608 #i‡
deföed
(
CHIPSET_RTL8305
)

610 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_INGRESS_CVLAN_INDEX
] = 
TRUE
;

611 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrIngªssCvœnIdx
 = 30;

613 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_MIRROR
] = 
TRUE
;

616 
ACL_ACTION_CVLAN_REMARK
:

617 #i‡
deföed
(
CHIPSET_RTL8305
)

618 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_INGRESS_CVLAN_VID
] = 
TRUE
;

619 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrIngªssCvœnVid
 = *((
UINT32
 *)
pA˛RuÀD©a
);

622 
ACL_ACTION_CVLAN_ASSIGN
:

623 #i‡
deföed
(
CHIPSET_RTL8305
)

624 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_INGRESS_CVLAN_INDEX
] = 
TRUE
;

625 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrIngªssCvœnIdx
 = *((
UINT32
 *)
pA˛RuÀD©a
);

628 
ACL_ACTION_SVLAN_REMARK
:

629 #i‡
deföed
(
CHIPSET_RTL8305
)

630 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_EGRESS_SVLAN_INDEX
] = 
TRUE
;

631 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrSvœnVid
 = *((
UINT32
 *)
pA˛RuÀD©a
);

634 
ACL_ACTION_COPY_TO_PORTS
:

635 #i‡
deföed
(
CHIPSET_RTL8305
)

636 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_ADD_DSTPORT
] = 
TRUE
;

637 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrAddD°P‹tmask
 = *((
UINT32
 *)
pA˛RuÀD©a
);

640 
ACL_ACTION_REDIRECT_TO_PORTS
:

641 #i‡
deföed
(
CHIPSET_RTL8305
)

642 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_REDIRECT
] = 
TRUE
;

643 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrRedúe˘P‹tmask
 = *((
UINT32
 *)
pA˛RuÀD©a
);

646 
ACL_ACTION_COPY_TO_CPU
:

647 #i‡
deföed
(
CHIPSET_RTL8305
)

648 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_COPY_CPU
] = 
TRUE
;

651 
ACL_ACTION_POLICING_0
:

652 #i‡
deföed
(
CHIPSET_RTL8305
)

653 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_POLICING_0
] = 
TRUE
;

654 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPﬁicögIdx
[0] = *((
UINT32
 *)
pA˛RuÀD©a
);

657 
ACL_ACTION_TRAP_TO_CPU
:

658 #i‡
deföed
(
CHIPSET_RTL8305
)

659 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_TRAP_CPU
] = 
TRUE
;

660 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPﬁicögIdx
[0] = *((
UINT32
 *)
pA˛RuÀD©a
);

663 
ACL_ACTION_DROP
:

664 #i‡
deföed
(
CHIPSET_RTL8305
)

665 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_DROP
] = 
TRUE
;

666 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPﬁicögIdx
[0] = *((
UINT32
 *)
pA˛RuÀD©a
);

672 
ACL_MUTEX_UNLOCK
;

674  
DRV_OK
;

696 
DRV_RET_E
 
_HÆ_A˛RuÀMacCfgCª©e
(
UINT32
 
uiA˛Id
, 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
, 
ACL_ACTION_E
 
íA˛A˘
, *
pMac
, * 
pMacMask
, *
pA˛RuÀD©a
)

699 #i‡
deföed
(
CHIPSET_RTL8305
)

701 
πk_fûãr_fõld_t
 *
p°A˛RuÀFõld
 = 
NULL
;

702 
πk_fûãr_cfg_t
 
°A˛Cfg
;

705 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛Id
) ||

706 (
ACL_TRUST_END
 <
uiA˛RuÀTy≥
) ||

707 (
ACL_ACTION_END
 <
íA˛A˘
) ||

708 (
NULL
 =
pMac
) ||

709 (
NULL
 =
pMacMask
) ||

710 (
NULL
 =
pA˛RuÀD©a
))

712  
DRV_ERR_PARA
;

715 #i‡
deföed
(
CHIPSET_RTL8305
)

717 
p°A˛RuÀFõld
 = (
πk_fûãr_fõld_t
 *)
kmÆloc
(‘tk_fûãr_fõld_t), 
GFP_KERNEL
);

718 if(
NULL
 =
p°A˛RuÀFõld
)

720  
DRV_ERR_NO_MEM
;

723 
mem£t
(
p°A˛RuÀFõld
, 0, (
πk_fûãr_fõld_t
));

726 
uiA˛RuÀTy≥
)

728 
ACL_TRUST_SMAC
:

729 #i‡
deföed
(
CHIPSET_RTL8305
)

730 
p°A˛RuÀFõld
->
fõldTy≥
 = 
FILTER_FIELD_SMAC
;

731 
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
smac
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

732 
mem˝y
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
smac
.
vÆue
.
o˘ë
,(
UINT8
 *)
pMac
,
ETHER_ADDR_LEN
);

733 
mem˝y
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
smac
.
mask
.
o˘ë
,(
UINT8
 *)
pMacMask
,
ETHER_ADDR_LEN
);

734 
mem£t
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
smac
.
øngeSèπ
.
o˘ë
,0,
ETHER_ADDR_LEN
);

735 
mem£t
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
smac
.
øngeEnd
.
o˘ë
,0,
ETHER_ADDR_LEN
);

738 
ACL_TRUST_DMAC
:

739 #i‡
deföed
(
CHIPSET_RTL8305
)

740 
p°A˛RuÀFõld
->
fõldTy≥
 = 
FILTER_FIELD_DMAC
;

741 
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
dmac
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

742 
mem˝y
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
dmac
.
vÆue
.
o˘ë
,(
UINT8
 *)
pMac
,
ETHER_ADDR_LEN
);

743 
mem˝y
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
dmac
.
mask
.
o˘ë
,(
UINT8
 *)
pMacMask
,
ETHER_ADDR_LEN
);

744 
mem£t
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
dmac
.
øngeSèπ
.
o˘ë
,0,
ETHER_ADDR_LEN
);

745 
mem£t
(
p°A˛RuÀFõld
->
fûãr_∑âîn_uni⁄
.
dmac
.
øngeEnd
.
o˘ë
,0,
ETHER_ADDR_LEN
);

749 #i‡
deföed
(
CHIPSET_RTL8305
)

750 
p°A˛RuÀFõld
->
fõldTy≥
 = 
FILTER_FIELD_END
;

755 #i‡
deföed
(
CHIPSET_RTL8305
)

756 i‡(
FILTER_FIELD_END
 <
p°A˛RuÀFõld
->
fõldTy≥
)

759 
k‰ì
(
p°A˛RuÀFõld
);

760  
DRV_ERR_UNKNOW
;

763 
p°A˛RuÀFõld
->
√xt
 = 
NULL
;

766 ()
_HÆ_A˛CfgGë
(
uiA˛Id
,(*)&
°A˛Cfg
);

768 #i‡
deföed
(
CHIPSET_RTL8305
)

769 i‡(
RT_ERR_OK
 !
πk_fûãr_igrA˛_fõld_add
(&
°A˛Cfg
, 
p°A˛RuÀFõld
))

772 
k‰ì
(
p°A˛RuÀFõld
);

773  
DRV_ERR_UNKNOW
;

777 ()
_HÆ_A˛CfgSë
(
uiA˛Id
, (*)&
°A˛Cfg
);

780 
ACL_MUTEX_LOCK
;

781 
íA˛A˘
)

783 
ACL_ACTION_REMATK_PRIORITY
:

784 #i‡
deföed
(
CHIPSET_RTL8305
)

786 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_1P_REMARK
] = 
TRUE
;

787 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPri‹ôy
 = *((
UINT32
 *)
pA˛RuÀD©a
);

790 
ACL_ACTION_MIRROR
:

791 #i‡
deföed
(
CHIPSET_RTL8305
)

793 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_INGRESS_CVLAN_INDEX
] = 
TRUE
;

794 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrIngªssCvœnIdx
 = 30;

796 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_MIRROR
] = 
TRUE
;

799 
ACL_ACTION_CVLAN_REMARK
:

800 #i‡
deföed
(
CHIPSET_RTL8305
)

801 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_INGRESS_CVLAN_VID
] = 
TRUE
;

802 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrIngªssCvœnVid
 = *((
UINT32
 *)
pA˛RuÀD©a
);

805 
ACL_ACTION_CVLAN_ASSIGN
:

806 #i‡
deföed
(
CHIPSET_RTL8305
)

807 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_INGRESS_CVLAN_INDEX
] = 
TRUE
;

808 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrIngªssCvœnIdx
 = *((
UINT32
 *)
pA˛RuÀD©a
);

811 
ACL_ACTION_SVLAN_REMARK
:

812 #i‡
deföed
(
CHIPSET_RTL8305
)

813 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_EGRESS_SVLAN_INDEX
] = 
TRUE
;

814 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrSvœnVid
 = *((
UINT32
 *)
pA˛RuÀD©a
);

817 
ACL_ACTION_COPY_TO_PORTS
:

818 #i‡
deföed
(
CHIPSET_RTL8305
)

819 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_ADD_DSTPORT
] = 
TRUE
;

820 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrAddD°P‹tmask
 = *((
UINT32
 *)
pA˛RuÀD©a
);

823 
ACL_ACTION_REDIRECT_TO_PORTS
:

824 #i‡
deföed
(
CHIPSET_RTL8305
)

825 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_REDIRECT
] = 
TRUE
;

826 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrRedúe˘P‹tmask
 = *((
UINT32
 *)
pA˛RuÀD©a
);

829 
ACL_ACTION_COPY_TO_CPU
:

830 #i‡
deföed
(
CHIPSET_RTL8305
)

831 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_COPY_CPU
] = 
TRUE
;

834 
ACL_ACTION_POLICING_0
:

835 #i‡
deföed
(
CHIPSET_RTL8305
)

836 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_POLICING_0
] = 
TRUE
;

837 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPﬁicögIdx
[0] = *((
UINT32
 *)
pA˛RuÀD©a
);

840 
ACL_ACTION_TRAP_TO_CPU
:

841 #i‡
deföed
(
CHIPSET_RTL8305
)

842 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_TRAP_CPU
] = 
TRUE
;

843 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPﬁicögIdx
[0] = *((
UINT32
 *)
pA˛RuÀD©a
);

846 
ACL_ACTION_DROP
:

847 #i‡
deföed
(
CHIPSET_RTL8305
)

848 
m_a°A˛A˘i⁄
[
uiA˛Id
].
a˘E«bÀ
[
FILTER_ENACT_DROP
] = 
TRUE
;

849 
m_a°A˛A˘i⁄
[
uiA˛Id
].
fûãrPﬁicögIdx
[0] = *((
UINT32
 *)
pA˛RuÀD©a
);

855 
ACL_MUTEX_UNLOCK
;

857  
DRV_OK
;

876 
DRV_RET_E
 
_HÆ_A˛RuÀCfgCÀ¨
(
UINT32
 
uiA˛RuÀId
)

878 #i‡
deföed
(
CHIPSET_RTL8305
)

879 
πk_fûãr_fõld_t
 *
p°A˛RuÀFõld
 = 
NULL
;

880 
πk_fûãr_fõld_t
 *
p°A˛RuÀFõldNext
 = 
NULL
;

881 
πk_fûãr_cfg_t
 
°A˛Cfg
;

884 i‡(
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
)

886  
DRV_ERR_PARA
;

889 ()
_HÆ_A˛CfgGë
(
uiA˛RuÀId
, (*)&
°A˛Cfg
);

891 #i‡
deföed
(
CHIPSET_RTL8305
)

892 
p°A˛RuÀFõld
 = 
°A˛Cfg
.
fõldHód
;

893 
NULL
 !
p°A˛RuÀFõld
)

895 
p°A˛RuÀFõldNext
 = 
p°A˛RuÀFõld
->
√xt
;

897 
k‰ì
(
p°A˛RuÀFõld
);

898 
p°A˛RuÀFõld
 = 
p°A˛RuÀFõldNext
;

902 
ACL_MUTEX_LOCK
;

903 
mem£t
((
m_a°A˛Cfg
 + 
uiA˛RuÀId
), 0, (m_astAclCfg[0]));

904 
mem£t
((
m_a°A˛A˘i⁄
 + 
uiA˛RuÀId
), 0, (m_astAclAction[0]));

905 
ACL_MUTEX_UNLOCK
;

907  
DRV_OK
;

925 
DRV_RET_E
 
_HÆ_A˛RuÀEm±yIdGë
(
UINT32
 *
puiA˛RuÀId
)

927 
UINT32
 
uiA˛ruÀIndex
 = 0;

928 #i‡
deföed
(
CHIPSET_RTL8305
)

929 
πk_fûãr_cfg_t
 
°A˛Cfg
;

932 i‡(
NULL
 =
puiA˛RuÀId
)

934  
DRV_ERR_PARA
;

937 
uiA˛ruÀIndex
 = 0; uiA˛ruÀIndex < 
ACL_RULE_NUM_MAX
; uiAclruleIndex++)

939 (
VOID
)
_HÆ_A˛CfgGë
(
uiA˛ruÀIndex
, (*)&
°A˛Cfg
);

941 #i‡
deföed
(
CHIPSET_RTL8305
)

942 i‡(
NULL
 =
°A˛Cfg
.
fõldHód
)

946 *(
puiA˛RuÀId
 + 
uiA˛IdNum
Ë
uiA˛ruÀIndex
;

947 
uiA˛IdNum
++;

949 i‡(
uiA˛IdNum
 >
uiIdNum
)

954 *
puiA˛RuÀId
 = 
uiA˛ruÀIndex
;

960 i‡(
ACL_RULE_NUM_MAX
 =
uiA˛ruÀIndex
)

962  
DRV_ERR_UNKNOW
;

965  
DRV_OK
;

984 
DRV_RET_E
 
_HÆ_A˛RuÀIsEm±y
(
UINT32
 
uiA˛RuÀId
, 
BOOL
 *
pbSèã
)

986 #i‡
deföed
(
CHIPSET_RTL8305
)

987 
πk_fûãr_cfg_t
 
°A˛Cfg
;

990 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
) ||

991 (
NULL
 =
pbSèã
))

993  
DRV_ERR_PARA
;

996 ()
_HÆ_A˛CfgGë
(
uiA˛RuÀId
, (*)&
°A˛Cfg
);

998 #i‡
deföed
(
CHIPSET_RTL8305
)

999 i‡(
NULL
 =
°A˛Cfg
.
fõldHód
)

1002 *
pbSèã
 = 
TRUE
;

1006 *
pbSèã
 = 
FALSE
;

1009  
DRV_OK
;

1028 
DRV_RET_E
 
_HÆ_A˛RuÀA˘iveP‹tsGë
(
UINT32
 
uiA˛RuÀId
, UINT32 *
puiP‹tMask
)

1030 #i‡
deföed
(
CHIPSET_RTL8305
)

1031 
πk_fûãr_cfg_t
 
°A˛Cfg
;

1034 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
) ||

1035 (
NULL
 =
puiP‹tMask
))

1037  
DRV_ERR_PARA
;

1040 (
VOID
)
_HÆ_A˛CfgGë
(
uiA˛RuÀId
, (*)&
°A˛Cfg
);

1042 #i‡
deföed
(
CHIPSET_RTL8305
)

1043 *
puiP‹tMask
 = 
°A˛Cfg
.
a˘ivï‹t
.
vÆue
;

1046  
DRV_OK
;

1064 
DRV_RET_E
 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
UINT32
 
uiA˛RuÀId
)

1066 i‡(
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
)

1068  
DRV_ERR_PARA
;

1071 
ACL_MUTEX_LOCK
;

1072 
m_a°A˛Cfg
[
uiA˛RuÀId
].
a˘ivï‹t
.
vÆue
 = 0;

1073 
ACL_MUTEX_UNLOCK
;

1075  
DRV_OK
;

1095 
DRV_RET_E
 
_HÆ_ACLRuÀCfgTagC¨e
(
UINT32
 
uiA˛RuÀId
, 
INT32
 
iC¨eTagTy≥
, 
BOOL
 
bE«bÀ
)

1097 #i‡
deföed
(
CHIPSET_RTL8305
)

1098 
πk_fûãr_ˇª_èg_ödex_t
 
íRtkC¨eTagTy≥
;

1101 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
) ||

1102 #i‡
deföed
(
CHIPSET_RTL8305
)

1103 (
CARE_TAG_END
 <
iC¨eTagTy≥
)

1107  
DRV_ERR_PARA
;

1110 #i‡
deföed
(
CHIPSET_RTL8305
)

1111 
íRtkC¨eTagTy≥
 = (
πk_fûãr_ˇª_èg_ödex_t
)
iC¨eTagTy≥
;

1114 
ACL_MUTEX_LOCK
;

1115 i‡(
TRUE
 =
bE«bÀ
)

1117 #i‡
deföed
(
CHIPSET_RTL8305
)

1118 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íRtkC¨eTagTy≥
].
vÆue
 = 
TRUE
;

1119 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íRtkC¨eTagTy≥
].
mask
 = 
TRUE
;

1124 #i‡
deföed
(
CHIPSET_RTL8305
)

1125 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íRtkC¨eTagTy≥
].
vÆue
 = 
FALSE
;

1126 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íRtkC¨eTagTy≥
].
mask
 = 
FALSE
;

1129 
ACL_MUTEX_LOCK
;

1131  
DRV_OK
;

1150 
DRV_RET_E
 
_HÆ_A˛RuÀBöd
(
UINT32
 
uiP‹tMask
, UINT32 
uiA˛Id
)

1152 #i‡
deföed
(
CHIPSET_RTL8305
)

1153 
πk_fûãr_numbî_t
 
ruÀ_num
 = 1;

1154 
πk_fûãr_cfg_t
 
°A˛Cfg
;

1155 
πk_fûãr_a˘i⁄_t
 
°A˛A˘i⁄
;

1156 
πk_≠i_ªt_t
 
RëVÆ
 = 
RT_ERR_OK
;

1159 i‡(
ACL_RULE_NUM_MAX
 <
uiA˛Id
)

1161  
DRV_ERR_PARA
;

1164 ()
_HÆ_A˛CfgGë
(
uiA˛Id
, (*)&
°A˛Cfg
);

1166 #i‡
deföed
(
CHIPSET_RTL8305
)

1167 
°A˛Cfg
.
a˘ivï‹t
.
d©aTy≥
 = 
FILTER_FIELD_DATA_MASK
;

1168 
°A˛Cfg
.
a˘ivï‹t
.
vÆue
 = 
uiP‹tMask
;

1169 
°A˛Cfg
.
a˘ivï‹t
.
mask
 = 
RTK_MAX_PORT_MASK
;

1170 
°A˛Cfg
.
a˘ivï‹t
.
øngeSèπ
 = 0;

1171 
°A˛Cfg
.
a˘ivï‹t
.
øngeEnd
 = 0;

1172 
°A˛Cfg
.
övît
 = 
FILTER_INVERT_DISABLE
;

1175 ()
_HÆ_A˛A˘i⁄CfgGë
(
uiA˛Id
, (*)&
°A˛A˘i⁄
);

1177 #i‡
deföed
(
CHIPSET_RTL8305
)

1178 
RëVÆ
 = 
πk_fûãr_igrA˛_cfg_add
(
uiA˛Id
, &
°A˛Cfg
, &
°A˛A˘i⁄
, &
ruÀ_num
);

1179 i‡(
RT_ERR_OK
 !
RëVÆ
)

1181  
DRV_SDK_GEN_ERROR
;

1185 ()
_HÆ_A˛CfgSë
(
uiA˛Id
, (*)&
°A˛Cfg
);

1187  
DRV_OK
;

1205 
DRV_RET_E
 
_HÆ_A˛RuÀUnböd
(
UINT32
 
uiA˛Id
)

1207 #i‡
deföed
(
CHIPSET_RTL8305
)

1208 
πk_≠i_ªt_t
 
RëVÆ
 = 
RT_ERR_OK
;

1211 i‡(
ACL_RULE_NUM_MAX
 <
uiA˛Id
)

1213  
DRV_ERR_PARA
;

1216 ()
_HÆ_A˛RuÀCfgCÀ¨
(
uiA˛Id
);

1218 #i‡
deföed
(
CHIPSET_RTL8305
)

1219 
RëVÆ
 = 
πk_fûãr_igrA˛_cfg_dñ
(
uiA˛Id
);

1220 i‡(
RT_ERR_OK
 !
RëVÆ
)

1222  
DRV_SDK_GEN_ERROR
;

1226  
DRV_OK
;

1245 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrGë
(
UINT32
 
uiLP‹tId
, 
PORT_FILTER_CFG_S
 *
p°FûãrMode
)

1247 i‡(((
LOGIC_UPPON_PORT
 !
uiLP‹tId
Ë&& (!
IsVÆidLgcP‹t
(uiLPortId))) ||

1248 (
NULL
 =
p°FûãrMode
))

1250  
DRV_ERR_PARA
;

1253 
ACL_MUTEX_LOCK
;

1254 
mem˝y
(
p°FûãrMode
, &
m_a°UniFûãrMode
[
uiLP‹tId
], (
PORT_FILTER_CFG_S
));

1255 
ACL_MUTEX_UNLOCK
;

1257  
DRV_OK
;

1276 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrSë
(
UINT32
 
uiLP‹tId
, 
PORT_FILTER_CFG_S
 *
p°FûãrMode
)

1278 i‡(((
LOGIC_UPPON_PORT
 !
uiLP‹tId
Ë&& (!
IsVÆidLgcP‹t
(uiLPortId))) ||

1279 (
NULL
 =
p°FûãrMode
))

1281  
DRV_ERR_PARA
;

1284 
ACL_MUTEX_LOCK
;

1285 
mem˝y
(&
m_a°UniFûãrMode
[
uiLP‹tId
], 
p°FûãrMode
, (
PORT_FILTER_CFG_S
));

1286 
ACL_MUTEX_UNLOCK
;

1288  
DRV_OK
;

1308 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrModeSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiFûãrIndex
, 
ACL_DIRECTION_E
 
íA˛Dú
, 
ACL_TRUST_MODE_E
 
íMode
)

1310 i‡(((
LOGIC_UPPON_PORT
 !
uiLP‹tId
Ë&& (!
IsVÆidLgcP‹t
(uiLPortId))) ||

1311 (
ACL_TRUST_END
 < 
íMode
) ||

1312 (
ACL_DIRECTION_END
 <
íA˛Dú
) ||

1313 (
EOAM_FILTER_RULE_NUM_MAX
 <
uiFûãrIndex
))

1315  
DRV_ERR_PARA
;

1318 i‡(
ACL_DIRECTION_UPLINK
 =
íA˛Dú
)

1320 
ACL_MUTEX_LOCK
;

1321 
m_a°UniFûãrMode
[
uiLP‹tId
].
´nFûërkMode
[
uiFûãrIndex
] = 
íMode
;

1322 
ACL_MUTEX_UNLOCK
;

1324 i‡(
ACL_DIRECTION_DOWNLINK
 =
íA˛Dú
)

1326 
ACL_MUTEX_LOCK
;

1327 
m_a°UniFûãrMode
[
uiLP‹tId
].
´nFûërkMode
[
uiFûãrIndex
+
EOAM_FILTER_RULE_NUM_MAX
] = 
íMode
;

1328 
ACL_MUTEX_UNLOCK
;

1332 
ACL_MUTEX_LOCK
;

1333 
m_a°UniFûãrMode
[
uiLP‹tId
].
´nFûërkMode
[
uiFûãrIndex
] = 
íMode
;

1334 
m_a°UniFûãrMode
[
uiLP‹tId
].
´nFûërkMode
[
uiFûãrIndex
+
EOAM_FILTER_RULE_NUM_MAX
] = 
íMode
;

1335 
ACL_MUTEX_UNLOCK
;

1338  
DRV_OK
;

1358 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrModeGë
(
UINT32
 
uiLP‹tId
, UINT32 
uiFûãrIndex
, 
ACL_DIRECTION_E
 
íA˛Dú
, 
ACL_TRUST_MODE_E
 *
≥nMode
)

1360 i‡(((
LOGIC_UPPON_PORT
 !
uiLP‹tId
Ë&& (!
IsVÆidLgcP‹t
(uiLPortId))) ||

1361 (
NULL
 =
≥nMode
) ||

1362 (
ACL_DIRECTION_END
 <
íA˛Dú
) ||

1363 (
EOAM_FILTER_RULE_NUM_MAX
 <
uiFûãrIndex
))

1365  
DRV_ERR_PARA
;

1368 i‡(
ACL_DIRECTION_UPLINK
 =
íA˛Dú
)

1370 
ACL_MUTEX_LOCK
;

1371 *
≥nMode
 = 
m_a°UniFûãrMode
[
uiLP‹tId
].
´nFûërkMode
[
uiFûãrIndex
];

1372 
ACL_MUTEX_UNLOCK
;

1376 
ACL_MUTEX_LOCK
;

1377 *
≥nMode
 = 
m_a°UniFûãrMode
[
uiLP‹tId
].
´nFûërkMode
[
uiFûãrIndex
+
EOAM_FILTER_RULE_NUM_MAX
];

1378 
ACL_MUTEX_UNLOCK
;

1381  
DRV_OK
;

1401 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrRuÀIdSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiFûãrIndex
, 
ACL_DIRECTION_E
 
íA˛Dú
, UINT32 
uiA˛Id
)

1403 i‡(((
LOGIC_UPPON_PORT
 !
uiLP‹tId
Ë&& (!
IsVÆidLgcP‹t
(uiLPortId))) ||

1404 (
ACL_DIRECTION_END
 <
íA˛Dú
) ||

1405 (
EOAM_FILTER_RULE_NUM_MAX
 <
uiFûãrIndex
))

1407  
DRV_ERR_PARA
;

1410 i‡(
ACL_DIRECTION_UPLINK
 =
íA˛Dú
)

1412 
ACL_MUTEX_LOCK
;

1413 
m_a°UniFûãrMode
[
uiLP‹tId
].
auiA˛Li°
[
uiFûãrIndex
] = 
uiA˛Id
;

1414 
ACL_MUTEX_UNLOCK
;

1416 i‡(
ACL_DIRECTION_DOWNLINK
 =
íA˛Dú
)

1418 
ACL_MUTEX_LOCK
;

1419 
m_a°UniFûãrMode
[
uiLP‹tId
].
auiA˛Li°
[
uiFûãrIndex
+
EOAM_FILTER_RULE_NUM_MAX
] = 
uiA˛Id
;

1420 
ACL_MUTEX_UNLOCK
;

1424 
ACL_MUTEX_LOCK
;

1425 
m_a°UniFûãrMode
[
uiLP‹tId
].
auiA˛Li°
[
uiFûãrIndex
] = 
uiA˛Id
;

1426 
m_a°UniFûãrMode
[
uiLP‹tId
].
auiA˛Li°
[
uiFûãrIndex
+
EOAM_FILTER_RULE_NUM_MAX
] = 
uiA˛Id
;

1427 
ACL_MUTEX_UNLOCK
;

1430  
DRV_OK
;

1450 
DRV_RET_E
 
_HÆ_CfgP‹tFûãrRuÀIdGë
(
UINT32
 
uiLP‹tId
, UINT32 
uiFûãrIndex
, 
ACL_DIRECTION_E
 
íA˛Dú
, UINT32 *
puiA˛Id
)

1452 i‡(((
LOGIC_UPPON_PORT
 !
uiLP‹tId
Ë&& (!
IsVÆidLgcP‹t
(uiLPortId))) ||

1453 (
NULL
 =
puiA˛Id
) ||

1454 (
ACL_DIRECTION_END
 <
íA˛Dú
) ||

1455 (
EOAM_FILTER_RULE_NUM_MAX
 <
uiFûãrIndex
))

1457  
DRV_ERR_PARA
;

1460 i‡(
ACL_DIRECTION_UPLINK
 =
íA˛Dú
)

1462 
ACL_MUTEX_LOCK
;

1463 *
puiA˛Id
 = 
m_a°UniFûãrMode
[
uiLP‹tId
].
auiA˛Li°
[
uiFûãrIndex
];

1464 
ACL_MUTEX_UNLOCK
;

1468 
ACL_MUTEX_LOCK
;

1469 *
puiA˛Id
 = 
m_a°UniFûãrMode
[
uiLP‹tId
].
auiA˛Li°
[
uiFûãrIndex
+
EOAM_FILTER_RULE_NUM_MAX
];

1470 
ACL_MUTEX_UNLOCK
;

1474  
DRV_OK
;

1493 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkGë
(
UINT32
 
uiLP‹tId
, 
PORT_CLF_REMAERK_CFG_S
 *
p°ClfM¨kMode
)

1495 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1496 (
NULL
 =
p°ClfM¨kMode
))

1498  
DRV_ERR_PARA
;

1501 
ACL_MUTEX_LOCK
;

1502 
mem˝y
(
p°ClfM¨kMode
, &
m_a°UniClfM¨kMode
[
uiLP‹tId
], (
PORT_CLF_REMAERK_CFG_S
));

1503 
ACL_MUTEX_UNLOCK
;

1505  
DRV_OK
;

1524 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkSë
(
UINT32
 
uiLP‹tId
, 
PORT_CLF_REMAERK_CFG_S
 *
p°ClfM¨kMode
)

1526 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1527 (
NULL
 =
p°ClfM¨kMode
))

1529  
DRV_ERR_PARA
;

1532 
ACL_MUTEX_LOCK
;

1533 
mem˝y
(&
m_a°UniClfM¨kMode
[
uiLP‹tId
], 
p°ClfM¨kMode
, (
PORT_CLF_REMAERK_CFG_S
));

1534 
ACL_MUTEX_UNLOCK
;

1536  
DRV_OK
;

1554 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkNumInc
(
UINT32
 
uiLP‹tId
)

1556 i‡(!
IsVÆidLgcP‹t
(
uiLP‹tId
))

1558  
DRV_ERR_PARA
;

1561 
ACL_MUTEX_LOCK
;

1562 i‡((
CTC_CLF_REMARK_RULE_NUM_MAX
*2Ë> 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
uiClfRmkRuÀNum
)

1564 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
uiClfRmkRuÀNum
++;

1566 
ACL_MUTEX_UNLOCK
;

1568  
DRV_OK
;

1586 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkNumDec
(
UINT32
 
uiLP‹tId
)

1588 i‡(!
IsVÆidLgcP‹t
(
uiLP‹tId
))

1590  
DRV_ERR_PARA
;

1593 
ACL_MUTEX_LOCK
;

1594 i‡(0 < 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
uiClfRmkRuÀNum
)

1596 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
uiClfRmkRuÀNum
--;

1598 
ACL_MUTEX_UNLOCK
;

1600  
DRV_OK
;

1619 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkNumGë
(
UINT32
 
uiLP‹tId
, UINT32 *
puiNum
)

1621 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1622 (
NULL
 =
puiNum
))

1624  
DRV_ERR_PARA
;

1627 
ACL_MUTEX_LOCK
;

1628 *
puiNum
 = 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
uiClfRmkRuÀNum
;

1629 
ACL_MUTEX_UNLOCK
;

1631  
DRV_OK
;

1651 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkA˛RuÀIdSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiClfRmkIndex
, UINT32 
uiA˛Id
)

1653 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1654 (
CTC_CLF_REMARK_RULE_NUM_MAX
*2 <
uiClfRmkIndex
))

1656  
DRV_ERR_PARA
;

1659 
ACL_MUTEX_LOCK
;

1660 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
auiA˛Li°
[
uiClfRmkIndex
] = 
uiA˛Id
;

1661 
ACL_MUTEX_UNLOCK
;

1663  
DRV_OK
;

1683 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkA˛RuÀIdGë
(
UINT32
 
uiLP‹tId
, UINT32 
uiClfRmkIndex
, UINT32 *
puiA˛Id
)

1685 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1686 (
NULL
 =
puiA˛Id
) ||

1687 (
CTC_CLF_REMARK_RULE_NUM_MAX
*2 <
uiClfRmkIndex
))

1689  
DRV_ERR_PARA
;

1692 
ACL_MUTEX_LOCK
;

1693 *
puiA˛Id
 = 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
auiA˛Li°
[
uiClfRmkIndex
];

1694 
ACL_MUTEX_UNLOCK
;

1696  
DRV_OK
;

1716 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkModeSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiClfRmkIndex
, 
ACL_TRUST_MODE_E
 
íMode
)

1718 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1719 (
ACL_TRUST_END
 < 
íMode
) ||

1720 (
CTC_CLF_REMARK_RULE_NUM_MAX
*2 <
uiClfRmkIndex
))

1722  
DRV_ERR_PARA
;

1725 
ACL_MUTEX_LOCK
;

1726 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
´nClfRem¨kMode
[
uiClfRmkIndex
] = 
íMode
;

1727 
ACL_MUTEX_UNLOCK
;

1729  
DRV_OK
;

1749 
DRV_RET_E
 
_HÆ_CfgP‹tClfRmkModeGë
(
UINT32
 
uiLP‹tId
, UINT32 
uiClfRmkIndex
, 
ACL_TRUST_MODE_E
 *
≥nMode
)

1751 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1752 (
NULL
 =
≥nMode
) ||

1753 (
CTC_CLF_REMARK_RULE_NUM_MAX
*2 <
uiClfRmkIndex
))

1755  
DRV_ERR_PARA
;

1758 
ACL_MUTEX_LOCK
;

1759 *
≥nMode
 = 
m_a°UniClfM¨kMode
[
uiLP‹tId
].
´nClfRem¨kMode
[
uiClfRmkIndex
];

1760 
ACL_MUTEX_UNLOCK
;

1762  
DRV_OK
;

1781 
DRV_RET_E
 
_HÆ_CfgCtcTøn•A˛RuÀIdGë
(
UINT32
 *
puiA˛RuÀId
, UINT32 *
puiLP‹tMask
)

1783 
UINT32
 
uiLP‹tId
;

1785 i‡((
NULL
 =
puiA˛RuÀId
) ||

1786 (
NULL
 =
puiLP‹tMask
))

1788  
DRV_ERR_PARA
;

1791 *
puiA˛RuÀId
 = 
ACL_RULE_NUM_MAX
;

1792 *
puiLP‹tMask
 = 0;

1794 
ACL_MUTEX_LOCK
;

1795 
LgcP‹tF‹
(
uiLP‹tId
)

1797 i‡(
CTC_VLAN_MODE_TRANSPARENT
 =
m_a°UniVœnMode
[
uiLP‹tId
].
mode
)

1799 *
puiA˛RuÀId
 = 
m_a°UniVœnMode
[
uiLP‹tId
].
a˛_li°
[0];

1800 *
puiLP‹tMask
 |(1UË<< 
uiLP‹tId
;

1803 
ACL_MUTEX_UNLOCK
;

1805  
DRV_OK
;

1824 
DRV_RET_E
 
_HÆ_CfgP‹tCtcVœnSë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
)

1827 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1828 (
NULL
 =
p°CtcVœnMode
))

1830  
DRV_ERR_PARA
;

1833 
ACL_MUTEX_LOCK
;

1834 
mem˝y
(&
m_a°UniVœnMode
[
uiLP‹tId
], 
p°CtcVœnMode
, (
CTC_VLAN_CFG_S
));

1835 
ACL_MUTEX_UNLOCK
;

1837  
DRV_OK
;

1856 
DRV_RET_E
 
HÆ_CfgP‹tCtcVœnGë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
)

1858 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1859 (
NULL
 =
p°CtcVœnMode
))

1861  
DRV_ERR_PARA
;

1864 
ACL_MUTEX_LOCK
;

1865 
mem˝y
(
p°CtcVœnMode
, &
m_a°UniVœnMode
[
uiLP‹tId
], (
CTC_VLAN_CFG_S
));

1866 
ACL_MUTEX_UNLOCK
;

1868  
DRV_OK
;

1888 
DRV_RET_E
 
_HÆ_CfgP‹tCtcVœnRuÀIdSë
(
UINT32
 
uiLP‹tId
, UINT32 
uiLi°Id
, UINT32 
uiA˛Id
)

1890 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1891 (
ACL_RULE_NUM_MAX
 <
uiLi°Id
))

1893  
DRV_ERR_PARA
;

1896 
ACL_MUTEX_LOCK
;

1897 
m_a°UniVœnMode
[
uiLP‹tId
].
a˛_li°
[
uiLi°Id
] = 
uiA˛Id
;

1898 
ACL_MUTEX_UNLOCK
;

1900  
DRV_OK
;

1921 
DRV_RET_E
 
_HÆ_CfgP‹tCtcVœnRuÀIdGë
(
UINT32
 
uiLP‹tId
, UINT32 
uiLi°Id
, UINT32 *
puiA˛Id
)

1923 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

1924 (
NULL
 =
puiA˛Id
) ||

1925 (
ACL_RULE_NUM_MAX
 <
uiLi°Id
))

1927  
DRV_ERR_PARA
;

1930 
ACL_MUTEX_LOCK
;

1931 *
puiA˛Id
 = 
m_a°UniVœnMode
[
uiLP‹tId
].
a˛_li°
[
uiLi°Id
];

1932 
ACL_MUTEX_UNLOCK
;

1934  
DRV_OK
;

1954 
DRV_RET_E
 
_HÆ_CfgA˛C¨eTag
(
UINT32
 
uiA˛RuÀId
, 
πk_fûãr_ˇª_èg_ödex_t
 
íC¨eTagTy≥
, 
BOOL
 
bE«bÀ
)

1956 i‡((
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
) ||

1957 (
CARE_TAG_END
 <
íC¨eTagTy≥
) ||

1958 ((
TRUE
 !
bE«bÀ
Ë&& (
FALSE
 != bEnable)))

1960  
DRV_ERR_PARA
;

1963 
ACL_MUTEX_LOCK
;

1965 i‡(
TRUE
 =
bE«bÀ
)

1967 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íC¨eTagTy≥
].
vÆue
 = 
TRUE
;

1968 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íC¨eTagTy≥
].
mask
 = 
TRUE
;

1972 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íC¨eTagTy≥
].
vÆue
 = 
FALSE
;

1973 
m_a°A˛Cfg
[
uiA˛RuÀId
].
ˇªTag
.
ègTy≥
[
íC¨eTagTy≥
].
mask
 = 
FALSE
;

1976 
ACL_MUTEX_UNLOCK
;

1978  
DRV_OK
;

1997 
DRV_RET_E
 
HÆ_CtcVœnEnoughVœnIdxE¡ryCheck
(
CTC_VLAN_CFG_S
 *
p°VœnMode
, 
UINT32
 *
puiEnough
)

1999 
ªt_t
 
tdRë
;

2000 
UINT32
 
i
;

2001 
UINT32
 
uiPvid
;

2002 
UINT32
 
uiOldvid
;

2003 
UINT32
 
uiNewVid
;

2004 
UINT32
 
uiE¡ryIdx
;

2005 
UINT32
 
uiNìdE¡ryNum
 = 0;

2006 
UINT32
 
uiEm±yE¡ryNum
 = 0;

2007 
UINT32
 
uiExi°E¡ryNum
 = 0;

2008 
UINT32
 
auiExi°E¡ry
[
RTL8367B_CVIDXNO
];

2009 
πk_vœn_mbrcfg_t
 
°VœnIdxE¡ry
;

2011 i‡((
NULL
 =
p°VœnMode
) ||

2012 (
NULL
 =
puiEnough
))

2014 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

2015  
DRV_ERR_PARA
;

2018 
mem£t
(
auiExi°E¡ry
, 0xFF, (auiExistEntry));

2021 
uiE¡ryIdx
 = 0; uiE¡ryIdx <
RTL8367B_CVIDXMAX
; uiEntryIdx++)

2023 
tdRë
 = 
πk_vœn_mbrCfg_gë
(
uiE¡ryIdx
, &
°VœnIdxE¡ry
);

2024 if(
RT_ERR_OK
 !
tdRë
)

2026 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

2027  
DRV_ERR_UNKNOW
;

2030 i‡(0 =
°VœnIdxE¡ry
.
mbr
 && 0 =°VœnIdxE¡ry.
evid
)

2032 
uiEm±yE¡ryNum
++;

2036 
auiExi°E¡ry
[
uiExi°E¡ryNum
++] = 
°VœnIdxE¡ry
.
evid
;

2041 
uiPvid
 = 
p°VœnMode
->
deÁu…_vœn
;

2042 
i
 = 0; i < 
uiExi°E¡ryNum
; i++)

2044 i‡(
uiPvid
 =
auiExi°E¡ry
[
i
])

2049 i‡(
i
 >
uiExi°E¡ryNum
)

2051 
uiNìdE¡ryNum
++;

2055 i‡(
CTC_VLAN_MODE_TRANSLATION
 =
p°VœnMode
->
mode
)

2057 
UINT32
 
j
;

2059 
i
 = 0; i < 
p°VœnMode
->
numbî_of_íåõs
; i++)

2062 
uiOldvid
 = 
p°VœnMode
->
vœn_li°
[
i
*2];

2063 
j
 = 0; j < 
uiExi°E¡ryNum
; j++)

2065 i‡(
uiOldvid
 =
auiExi°E¡ry
[
j
])

2070 i‡(
j
 >
uiExi°E¡ryNum
)

2072 
uiNìdE¡ryNum
++;

2076 
uiNewVid
 = 
p°VœnMode
->
vœn_li°
[(
i
*2)+1];

2077 i‡(
uiOldvid
 =
uiNewVid
)

2082 
j
 = 0; j < 
uiExi°E¡ryNum
; j++)

2084 i‡(
uiNewVid
 =
auiExi°E¡ry
[
j
])

2089 i‡(
j
 >
uiExi°E¡ryNum
)

2091 
uiNìdE¡ryNum
++;

2096 i‡(
uiNìdE¡ryNum
 > 
uiEm±yE¡ryNum
)

2098 *
puiEnough
 = 
FALSE
;

2102 *
puiEnough
 = 
TRUE
;

2108  
DRV_OK
;

2126 
DRV_RET_E
 
HÆ_A˛RuÀEm±yNumGë
(
UINT32
 *
pA˛Em±yNum
)

2128 
UINT32
 
uiA˛ruÀIndex
;

2129 
UINT32
 
uiA˛ruÀEm±yNum
 = 0;

2130 #i‡
deföed
(
CHIPSET_RTL8305
)

2131 
πk_fûãr_cfg_t
 
°RéA˛Cfg
;

2134 i‡(
NULL
 =
pA˛Em±yNum
)

2136  
DRV_ERR_PARA
;

2139 
uiA˛ruÀIndex
 = 0; uiA˛ruÀIndex < 
ACL_RULE_NUM_MAX
; uiAclruleIndex++)

2141 
mem£t
(&
°RéA˛Cfg
, 0, (stRtlAclCfg));

2142 ()
_HÆ_A˛CfgGë
(
uiA˛ruÀIndex
, &
°RéA˛Cfg
);

2143 i‡(
NULL
 =
°RéA˛Cfg
.
fõldHód
)

2145 
uiA˛ruÀEm±yNum
++;

2149 *
pA˛Em±yNum
 = 
uiA˛ruÀEm±yNum
;

2151  
DRV_OK
;

2170 
DRV_RET_E
 
HÆ_A˛RuÀF‹TøpCpuCª©e
(
BOOL
 
bBrﬂdEn
, 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,*
pRuÀVÆue
)

2172 
DRV_RET_E
 
íRë
;

2173 
UINT32
 
uiLP‹tId
;

2174 
UINT32
 
uiPP‹t
;

2175 
UINT32
 
uiPP‹tMask
 = 0;

2176 
UINT32
 
uiA˛RuÀId
;

2177 
UINT8
 
aucMacAdd
[
ETHER_ADDR_LEN
] = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF};

2179 i‡((
NULL
 =
pRuÀVÆue
) ||

2180 (
ACL_TRUST_END
 <
uiA˛RuÀTy≥
) ||

2181 ((
TRUE
 !
bBrﬂdEn
Ë&& (
FALSE
 != bBroadEn)))

2183  
DRV_ERR_PARA
;

2186 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

2187 i‡(
DRV_OK
 !
íRë
)

2189  
DRV_ERR_UNKNOW
;

2192 i‡(
TRUE
 =
bBrﬂdEn
)

2194 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_DMAC
, 
ACL_ACTION_TRAP_TO_CPU
, 
aucMacAdd
,áucMacAdd);

2195 i‡(
DRV_OK
 !
íRë
)

2197  
DRV_ERR_UNKNOW
;

2201 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
uiA˛RuÀTy≥
, 
ACL_ACTION_TRAP_TO_CPU
, 
pRuÀVÆue
,ÖRuleValue);

2202 i‡(
DRV_OK
 !
íRë
)

2204  
DRV_ERR_UNKNOW
;

2207 
LgcP‹tF‹
(
uiLP‹tId
)

2209 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

2210 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

2212 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

2213 i‡(
DRV_OK
 !
íRë
)

2215  
DRV_ERR_UNKNOW
;

2218  
DRV_OK
;

2237 
DRV_RET_E
 
HÆ_A˛RuÀF‹TøpCpuDñëe
(
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,*
pRuÀVÆue
)

2239 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

2240 
UINT32
 
uiA˛RuÀId
;

2241 #i‡
deföed
(
CHIPSET_RTL8305
)

2242 
πk_fûãr_cfg_t
 
°RéA˛Cfg
;

2243 
πk_fûãr_a˘i⁄_t
 
°RéA˛A˘
;

2246 i‡((
NULL
 =
pRuÀVÆue
) ||

2247 (
ACL_TRUST_END
 <
uiA˛RuÀTy≥
))

2249  
DRV_ERR_PARA
;

2252 
uiA˛RuÀTy≥
 = uiAclRuleType;

2255 
uiA˛RuÀId
 = 0; 
ACL_RULE_NUM_MAX
 > uiAclRuleId; uiAclRuleId++)

2257 i‡(
DRV_OK
 =
_HÆ_A˛A˘i⁄CfgGë
(
uiA˛RuÀId
, &
°RéA˛A˘
))

2259 #i‡
deföed
(
CHIPSET_RTL8305
)

2260 i‡(
TRUE
 =
°RéA˛A˘
.
a˘E«bÀ
[
FILTER_ENACT_TRAP_CPU
])

2263 i‡(
DRV_OK
 =
_HÆ_A˛CfgGë
(
uiA˛RuÀId
, &
°RéA˛Cfg
))

2265 #i‡
deföed
(
CHIPSET_RTL8305
)

2266 i‡((
FILTER_FIELD_ETHERTYPE
 =
°RéA˛Cfg
.
fõldHód
->
fõldTy≥
) &&

2267 ((*(
UINT32
 *)
pRuÀVÆue
Ë=
°RéA˛Cfg
.
fõldHód
->
fûãr_∑âîn_uni⁄
.
ëhîTy≥
.
vÆue
))

2278 i‡(
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
)

2280  
DRV_OK
;

2285 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

2286 i‡(
DRV_OK
 !
íRë
)

2288  
DRV_ERR_UNKNOW
;

2291 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

2292 i‡(
DRV_OK
 !
íRë
)

2294  
DRV_ERR_UNKNOW
;

2297  
DRV_OK
;

2319 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkCª©e
(
UINT32
 
uiLP‹tId
,

2320 
UINT32
 
uiRuÀPª˚dí˚
,

2321 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,

2322 
VOID
 *
pRuÀVÆue
,

2323 
VOID
 *
pRem¨kPri
)

2325 
DRV_RET_E
 
íRë
;

2326 
UINT32
 
uiPP‹t
;

2327 
UINT32
 
uiP‹tMask
;

2328 
UINT32
 
uiA˛RuÀId
;

2330 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

2331 (
NULL
 =
pRem¨kPri
) ||

2332 (
NULL
 =
pRuÀVÆue
) ||

2333 (
ACL_TRUST_END
 <
uiA˛RuÀTy≥
) ||

2334 (
CTC_CLF_REMARK_RULE_NUM_MAX
*2 <
uiRuÀPª˚dí˚
))

2336  
DRV_ERR_PARA
;

2339 ()
_HÆ_CfgP‹tClfRmkA˛RuÀIdGë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, &
uiA˛RuÀId
);

2340 i‡(
ACL_RULE_ID_IVALLID
 !
uiA˛RuÀId
)

2342 i‡(
DRV_OK
 !
_HÆ_A˛RuÀA˘iveP‹tsGë
(
uiA˛RuÀId
, &
uiP‹tMask
))

2344  
DRV_ERR_UNKNOW
;

2347 i‡(0 !
uiP‹tMask
)

2349 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

2350 i‡(
DRV_OK
 !
íRë
)

2352  
DRV_ERR_UNKNOW
;

2355 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

2356 i‡(
DRV_OK
 !
íRë
)

2358  
DRV_ERR_UNKNOW
;

2361 ()
_HÆ_CfgP‹tClfRmkNumDec
(
uiLP‹tId
);

2362 ()
_HÆ_CfgP‹tClfRmkModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
ACL_TRUST_END
);

2363 ()
_HÆ_CfgP‹tClfRmkA˛RuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
ACL_RULE_ID_IVALLID
);

2368 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

2369 
uiP‹tMask
 = (1U << 
uiPP‹t
);

2371 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

2372 i‡(
DRV_OK
 !
íRë
)

2374  
DRV_ERR_UNKNOW
;

2376 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
uiA˛RuÀTy≥
, 
ACL_ACTION_REMATK_PRIORITY
, 
pRuÀVÆue
, 
pRem¨kPri
);

2377 i‡(
DRV_OK
 !
íRë
)

2379  
DRV_ERR_UNKNOW
;

2381 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiP‹tMask
, 
uiA˛RuÀId
);

2382 i‡(
DRV_OK
 !
íRë
)

2384  
DRV_ERR_UNKNOW
;

2387 ()
_HÆ_CfgP‹tClfRmkNumInc
(
uiLP‹tId
);

2388 ()
_HÆ_CfgP‹tClfRmkModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
uiA˛RuÀTy≥
);

2389 ()
_HÆ_CfgP‹tClfRmkA˛RuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
uiA˛RuÀId
);

2391  
DRV_OK
;

2410 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiRuÀPª˚dí˚
)

2412 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

2413 
UINT32
 
uiA˛RuÀId
;

2414 
ACL_TRUST_MODE_E
 
íA˛Mode
;

2416 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

2417 (
CTC_CLF_REMARK_RULE_NUM_MAX
*2 <
uiRuÀPª˚dí˚
))

2419  
DRV_ERR_PARA
;

2422 
íRë
 = 
_HÆ_CfgP‹tClfRmkModeGë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, &
íA˛Mode
);

2423 i‡(
DRV_OK
 !
íRë
)

2425  
DRV_ERR_UNKNOW
;

2428 i‡(
ACL_TRUST_END
 =
íA˛Mode
)

2430  
DRV_OK
;

2433 
íRë
 = 
_HÆ_CfgP‹tClfRmkA˛RuÀIdGë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, &
uiA˛RuÀId
);

2434 i‡(
DRV_OK
 !
íRë
)

2436  
DRV_ERR_UNKNOW
;

2439 i‡(
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
)

2441  
DRV_ERR_UNKNOW
;

2445 i‡(
ACL_RULE_ID_IVALLID
 !
uiA˛RuÀId
)

2447 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

2448 i‡(
DRV_OK
 !
íRë
)

2450  
DRV_ERR_UNKNOW
;

2453 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

2454 i‡(
DRV_OK
 !
íRë
)

2456  
DRV_ERR_UNKNOW
;

2459 ()
_HÆ_CfgP‹tClfRmkNumDec
(
uiLP‹tId
);

2460 ()
_HÆ_CfgP‹tClfRmkModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
ACL_TRUST_END
);

2461 ()
_HÆ_CfgP‹tClfRmkA˛RuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
ACL_RULE_ID_IVALLID
);

2464  
DRV_OK
;

2482 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkCÀ¨
(
UINT32
 
uiLP‹tId
)

2484 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

2485 
UINT32
 
uiA˛RuÀId
;

2486 
UINT32
 
uiRuÀPª˚dí˚
;

2487 
ACL_TRUST_MODE_E
 
íA˛Mode
;

2489 i‡(!
IsVÆidLgcP‹t
(
uiLP‹tId
))

2491 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

2492  
DRV_ERR_PARA
;

2495 
uiRuÀPª˚dí˚
 = 0; uiRuÀPª˚dí˚ < 
CTC_CLF_REMARK_RULE_NUM_MAX
*2; uiRulePrecedence++)

2497 
íRë
 = 
_HÆ_CfgP‹tClfRmkModeGë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, &
íA˛Mode
);

2498 i‡(
DRV_OK
 !
íRë
)

2500 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

2501  
DRV_ERR_UNKNOW
;

2504 i‡(
ACL_TRUST_END
 <
íA˛Mode
)

2510 
íRë
 = 
_HÆ_CfgP‹tClfRmkA˛RuÀIdGë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, &
uiA˛RuÀId
);

2511 i‡(
DRV_OK
 !
íRë
)

2513 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

2514  
DRV_ERR_UNKNOW
;

2517 i‡(
ACL_RULE_NUM_MAX
 <
uiA˛RuÀId
)

2519 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

2520  
DRV_ERR_UNKNOW
;

2524 i‡(
ACL_RULE_ID_IVALLID
 !
uiA˛RuÀId
)

2526 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

2527 i‡(
DRV_OK
 !
íRë
)

2529 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

2530  
DRV_ERR_UNKNOW
;

2533 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

2534 i‡(
DRV_OK
 !
íRë
)

2536 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

2537  
DRV_ERR_UNKNOW
;

2540 ()
_HÆ_CfgP‹tClfRmkNumDec
(
uiLP‹tId
);

2541 ()
_HÆ_CfgP‹tClfRmkModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
ACL_TRUST_END
);

2542 ()
_HÆ_CfgP‹tClfRmkA˛RuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
ACL_RULE_ID_IVALLID
);

2546  
DRV_OK
;

2571 
DRV_RET_E
 
HÆ_A˛RuÀF‹EﬂmFûãrCª©e
(
UINT32
 
uiLP‹tId
,

2572 
UINT32
 
uiRuÀPª˚dí˚
,

2573 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,

2574 
ACL_DIRECTION_E
 
íA˛Dú
,

2575 
VOID
 *
pRuÀVÆue
)

2577 
DRV_RET_E
 
íRë
;

2579 
UINT32
 
uiA˛RuÀId
;

2580 
UINT32
 
Õ‹t
, 
µ‹t
;

2581 
UINT32
 
uiLP‹tTmp
;

2582 
UINT32
 
uiPP‹tMask
 = 0;

2583 
ACL_TRUST_MODE_E
 
íTru°Mode
;

2585 i‡(((!
IsVÆidLgcP‹t
(
uiLP‹tId
)Ë&& (
INVALID_PORT
 !uiLP‹tIdË&& (
LOGIC_UPPON_PORT
 != uiLPortId)) ||

2586 (
NULL
 =
pRuÀVÆue
) ||

2587 (
ACL_TRUST_END
 <
uiA˛RuÀTy≥
) ||

2588 (
ACL_DIRECTION_END
 <
íA˛Dú
) ||

2589 (
EOAM_FILTER_RULE_NUM_MAX
 <
uiRuÀPª˚dí˚
))

2591 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

2592  
DRV_ERR_PARA
;

2595 
íA˛Dú
)

2597 
ACL_DIRECTION_UPLINK
:

2598 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2601 
uiLP‹tTmp
 = 
MAX_PORT_NUM
;

2604 
LgcP‹tF‹
(
Õ‹t
)

2606 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

2607 
uiPP‹tMask
 |(1U << 
µ‹t
);

2612 
uiLP‹tTmp
 = 
uiLP‹tId
;

2614 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

2615 
uiPP‹tMask
 |(1U << 
µ‹t
);

2618 
ACL_DIRECTION_DOWNLINK
:

2620 
uiLP‹tTmp
 = 
LOGIC_UPPON_PORT
;

2623 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
LOGIC_UPPON_PORT
);

2624 
uiPP‹tMask
 |(1U << 
µ‹t
);

2626 
ACL_DIRECTION_BOTH
:

2628 
uiLP‹tTmp
 = 
LOGIC_UPPON_PORT
;

2630 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2633 
LgcP‹tF‹
(
Õ‹t
)

2635 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

2636 
uiPP‹tMask
 |(1U << 
µ‹t
);

2642 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

2643 
uiPP‹tMask
 |(1U << 
µ‹t
);

2647 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
LOGIC_UPPON_PORT
);

2648 
uiPP‹tMask
 |(1U << 
µ‹t
);

2651  
DRV_ERR_UNKNOW
;

2654 ()
_HÆ_CfgP‹tFûãrModeGë
(
uiLP‹tTmp
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, &
íTru°Mode
);

2655 ()
_HÆ_CfgP‹tFûãrRuÀIdGë
(
uiLP‹tTmp
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, &
uiA˛RuÀId
);

2656 i‡((
ACL_TRUST_END
 !
íTru°Mode
) &&

2657 (
ACL_RULE_ID_IVALLID
 !
uiA˛RuÀId
))

2659 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

2660 i‡(
DRV_OK
 !
íRë
)

2662  
DRV_ERR_UNKNOW
;

2665 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

2666 i‡(
DRV_OK
 !
íRë
)

2668  
DRV_ERR_UNKNOW
;

2673 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2676 
LgcP‹tF‹
(
Õ‹t
)

2678 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

2679 
uiPP‹tMask
 |(1U << 
µ‹t
);

2685 
µ‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

2686 
uiPP‹tMask
 |(1U << 
µ‹t
);

2690 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

2691 i‡(
DRV_OK
 !
íRë
)

2693 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

2694  
DRV_ERR_UNKNOW
;

2696 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
uiA˛RuÀTy≥
, 
ACL_ACTION_DROP
, 
pRuÀVÆue
,ÖRuleValue);

2697 i‡(
DRV_OK
 !
íRë
)

2699 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

2700  
DRV_ERR_UNKNOW
;

2702 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

2703 i‡(
DRV_OK
 !
íRë
)

2705 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

2706  
DRV_ERR_UNKNOW
;

2709 
íA˛Dú
)

2711 
ACL_DIRECTION_UPLINK
:

2712 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2715 
LgcP‹tF‹
(
Õ‹t
)

2717 ()
_HÆ_CfgP‹tFûãrModeSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀTy≥
);

2718 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀId
);

2724 ()
_HÆ_CfgP‹tFûãrModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀTy≥
);

2725 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀId
);

2728 
ACL_DIRECTION_DOWNLINK
:

2730 ()
_HÆ_CfgP‹tFûãrModeSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀTy≥
);

2731 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀId
);

2733 
ACL_DIRECTION_BOTH
:

2734 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2737 
LgcP‹tF‹
(
Õ‹t
)

2739 ()
_HÆ_CfgP‹tFûãrModeSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀTy≥
);

2740 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀId
);

2746 ()
_HÆ_CfgP‹tFûãrModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀTy≥
);

2747 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀId
);

2751 ()
_HÆ_CfgP‹tFûãrModeSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀTy≥
);

2752 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
uiA˛RuÀId
);

2755 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

2756  
DRV_ERR_UNKNOW
;

2759  
DRV_OK
;

2780 
DRV_RET_E
 
HÆ_A˛RuÀF‹EﬂmFûãrDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiRuÀPª˚dí˚
, 
ACL_DIRECTION_E
 
íA˛Dú
)

2782 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

2783 
UINT32
 
uiA˛RuÀId
;

2785 
UINT32
 
Õ‹t
;

2786 
UINT32
 
uiLP‹tTmp
;

2787 
ACL_TRUST_MODE_E
 
íTru°Mode
;

2789 i‡(((!
IsVÆidLgcP‹t
(
uiLP‹tId
)Ë&& (
INVALID_PORT
 !uiLP‹tIdË&& (
LOGIC_UPPON_PORT
 != uiLPortId)) ||

2790 (
EOAM_FILTER_RULE_NUM_MAX
 <
uiRuÀPª˚dí˚
) ||

2791 (
ACL_DIRECTION_END
 <
íA˛Dú
))

2793  
DRV_ERR_PARA
;

2796 
íA˛Dú
)

2798 
ACL_DIRECTION_UPLINK
:

2799 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2802 
uiLP‹tTmp
 = 
MAX_PORT_NUM
;

2806 
uiLP‹tTmp
 = 
uiLP‹tId
;

2809 
ACL_DIRECTION_DOWNLINK
:

2811 
uiLP‹tTmp
 = 
LOGIC_UPPON_PORT
;

2813 
ACL_DIRECTION_BOTH
:

2815 
uiLP‹tTmp
 = 
LOGIC_UPPON_PORT
;

2818  
DRV_ERR_UNKNOW
;

2821 ()
_HÆ_CfgP‹tFûãrModeGë
(
uiLP‹tTmp
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, &
íTru°Mode
);

2822 ()
_HÆ_CfgP‹tFûãrRuÀIdGë
(
uiLP‹tTmp
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, &
uiA˛RuÀId
);

2825 i‡((
ACL_TRUST_END
 !
íTru°Mode
) &&

2826 (
ACL_RULE_ID_IVALLID
 !
uiA˛RuÀId
))

2828 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

2829 i‡(
DRV_OK
 !
íRë
)

2831  
DRV_ERR_UNKNOW
;

2834 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

2835 i‡(
DRV_OK
 !
íRë
)

2837  
DRV_ERR_UNKNOW
;

2840 
íA˛Dú
)

2842 
ACL_DIRECTION_UPLINK
:

2843 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2845 
LgcP‹tF‹
(
Õ‹t
)

2847 ()
_HÆ_CfgP‹tFûãrModeSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_TRUST_END
);

2848 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_RULE_ID_IVALLID
);

2853 ()
_HÆ_CfgP‹tFûãrModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_TRUST_END
);

2854 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_RULE_ID_IVALLID
);

2857 
ACL_DIRECTION_DOWNLINK
:

2858 ()
_HÆ_CfgP‹tFûãrModeSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_TRUST_END
);

2859 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_RULE_ID_IVALLID
);

2861 
ACL_DIRECTION_BOTH
:

2862 i‡(
INVALID_PORT
 =
uiLP‹tId
)

2864 
LgcP‹tF‹
(
Õ‹t
)

2866 ()
_HÆ_CfgP‹tFûãrModeSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_TRUST_END
);

2867 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
Õ‹t
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_RULE_ID_IVALLID
);

2872 ()
_HÆ_CfgP‹tFûãrModeSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_TRUST_END
);

2873 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
uiLP‹tId
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_RULE_ID_IVALLID
);

2876 ()
_HÆ_CfgP‹tFûãrModeSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_TRUST_END
);

2877 ()
_HÆ_CfgP‹tFûãrRuÀIdSë
(
LOGIC_UPPON_PORT
, 
uiRuÀPª˚dí˚
, 
íA˛Dú
, 
ACL_RULE_ID_IVALLID
);

2880  
DRV_ERR_UNKNOW
;

2884  
DRV_OK
;

2903 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn•Cª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnMode
)

2905 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

2906 
BOOL
 
bFú°Times
 = 
TRUE
;

2907 
UINT32
 
uiPP‹t
;

2908 
UINT32
 
uiPP‹tMask
 = 0;

2909 
UINT32
 
uiVœnIndex
 = 0;

2910 
UINT32
 
uiA˛RuÀId
 = 0;

2912 
UINT32
 
uiLP‹tTmp
;

2913 
CTC_VLAN_CFG_S
 
°VœnMode
;

2915 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

2916 (
NULL
 =
p°VœnMode
))

2918  
DRV_ERR_PARA
;

2921 
mem£t
(&
°VœnMode
, 0, (stVlanMode));

2924 
íRë
 = 
_HÆ_CfgCtcTøn•A˛RuÀIdGë
(&
uiA˛RuÀId
, &
uiLP‹tMask
);

2925 i‡(
DRV_OK
 !
íRë
)

2927  
DRV_ERR_UNKNOW
;

2932 
uiA˛RuÀId
 = 
ACL_RULE_ID_VLAN_TRANSP
;

2933 i‡(
DRV_OK
 !
_HÆ_A˛RuÀA˘iveP‹tsGë
(
uiA˛RuÀId
, &
uiPP‹tMask
))

2935  
DRV_ERR_UNKNOW
;

2938 i‡(
TRUE
 !
bFú°Times
)

2940 i‡(0 !
uiPP‹tMask
)

2942 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

2943 i‡(
DRV_OK
 !
íRë
)

2945  
DRV_ERR_UNKNOW
;

2951 
bFú°Times
 = 
FALSE
;

2954 
uiVœnIndex
 = 
RTL8367B_CVIDXMAX
;

2955 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_PORT
, 
ACL_ACTION_CVLAN_ASSIGN
, (*)&
uiVœnIndex
, (*)&uiVlanIndex);

2956 i‡(
DRV_OK
 !
íRë
)

2958  
DRV_ERR_UNKNOW
;

2961 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
FALSE
);

2962 i‡(
DRV_OK
 !
íRë
)

2964  
DRV_ERR_UNKNOW
;

2967 
uiLP‹tMask
 |(1U << 
uiLP‹tId
);

2968 
uiLP‹tTmp
 = 1; uiLP‹tTm∞<
LOGIC_PORT_NO
; uiLPortTmp++)

2970 i‡(
uiLP‹tMask
 & (1U << 
uiLP‹tTmp
))

2972 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tTmp
);

2973 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

2977 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

2978 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

2979 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
LOGIC_CPU_PORT
);

2980 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

2981 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
LOGIC_PON_PORT
);

2982 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

2984 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

2985 i‡(
DRV_OK
 !
íRë
)

2987  
DRV_ERR_UNKNOW
;

2990 
p°VœnMode
->
numbî_of_a˛_ruÀs
 = 1;

2991 
p°VœnMode
->
a˛_li°
[0] = 
uiA˛RuÀId
;

2994 
uiLP‹tTmp
 = 1; uiLP‹tTm∞<
LOGIC_PORT_NO
; uiLPortTmp++)

2996 i‡(
uiLP‹tMask
 & (1U << 
uiLP‹tTmp
))

2998 ()
_HÆ_CfgP‹tCtcVœnRuÀIdSë
(
uiLP‹tTmp
, 0, 
uiA˛RuÀId
);

3002 ()
_HÆ_CfgP‹tCtcVœnRuÀIdSë
(
uiLP‹tId
, 0, 
uiA˛RuÀId
);

3005 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

3006 
uiLP‹tTmp
 = 1; uiLP‹tTm∞<
LOGIC_PORT_NO
; uiLPortTmp++)

3008 i‡(
uiLP‹tTmp
 =
uiLP‹tId
)

3013 
íRë
 = 
HÆ_CfgP‹tCtcVœnGë
(
uiLP‹tTmp
, &
°VœnMode
);

3014 i‡(
DRV_OK
 !
íRë
)

3016  
DRV_ERR_UNKNOW
;

3019 i‡((
CTC_VLAN_MODE_TRANSPARENT
 !
°VœnMode
.
mode
) &&

3020 (
CTC_VLAN_MODE_QINQ
 !
°VœnMode
.
mode
))

3022 
íRë
 = 
_HÆ_A˛RuÀA˘iveP‹tsGë
(
°VœnMode
.
a˛_li°
[0], &
uiPP‹tMask
);

3023 i‡(
DRV_OK
 !
íRë
)

3025  
DRV_ERR_UNKNOW
;

3028 i‡(
uiPP‹tMask
 & (1U << 
uiPP‹t
))

3033 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
°VœnMode
.
a˛_li°
[0]);

3034 i‡(
DRV_OK
 !
íRë
)

3036  
DRV_ERR_UNKNOW
;

3039 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

3041 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
°VœnMode
.
a˛_li°
[0], 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_CVLAN_REMARK
, (
VOID
 *)&°VœnMode.
deÁu…_vœn
, (VOID *)&stVlanMode.default_vlan);

3042 i‡(
DRV_OK
 !
íRë
)

3044  
DRV_ERR_UNKNOW
;

3047 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
°VœnMode
.
a˛_li°
[0], 
CARE_TAG_CTAG
, 
TRUE
);

3048 i‡(
DRV_OK
 !
íRë
)

3050  
DRV_ERR_UNKNOW
;

3053 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
°VœnMode
.
a˛_li°
[0]);

3054 i‡(
DRV_OK
 !
íRë
)

3056  
DRV_ERR_UNKNOW
;

3061 ()
_HÆ_CfgP‹tCtcVœnSë
(
uiLP‹tId
, 
p°VœnMode
);

3063  
DRV_OK
;

3081 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn•Dñëe
(
UINT32
 
uiLP‹tId
)

3083 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

3084 
UINT32
 
uiA˛RuÀId
;

3085 
UINT32
 
uiPP‹t
;

3086 
UINT32
 
uiPP‹tMask
 = 0;

3087 
UINT32
 
uiVœnIndex
 = 0;

3088 
UINT32
 
uiP‹tIndex
 = 0;

3089 
CTC_VLAN_CFG_S
 
°VœnMode
;

3092 
íRë
 = 
HÆ_CfgP‹tCtcVœnGë
(
uiLP‹tId
, &
°VœnMode
);

3093 i‡(
DRV_OK
 !
íRë
)

3095  
DRV_ERR_UNKNOW
;

3098 
uiA˛RuÀId
 = 
°VœnMode
.
a˛_li°
[0];

3099 i‡(
DRV_OK
 !
_HÆ_A˛RuÀA˘iveP‹tsGë
(
uiA˛RuÀId
, &
uiPP‹tMask
))

3101  
DRV_ERR_UNKNOW
;

3104 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

3105 i‡(
DRV_OK
 !
íRë
)

3107  
DRV_ERR_UNKNOW
;

3110 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

3111 
uiPP‹tMask
 &~(1U << 
uiPP‹t
);

3113 i‡(0 !
uiPP‹tMask
)

3115 
uiVœnIndex
 = 
RTL8367B_CVIDXMAX
;

3116 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_PORT
, 
ACL_ACTION_CVLAN_ASSIGN
, (
VOID
 *)&
uiVœnIndex
, (VOID *)&uiVlanIndex);

3117 i‡(
DRV_OK
 !
íRë
)

3119  
DRV_ERR_UNKNOW
;

3122 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3123 i‡(
DRV_OK
 !
íRë
)

3125  
DRV_ERR_UNKNOW
;

3130 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

3131 
uiP‹tIndex
 = 1; uiP‹tIndex <
LOGIC_PORT_NO
; uiPortIndex++)

3133 i‡(
uiP‹tIndex
 =
uiLP‹tId
)

3138 
íRë
 = 
HÆ_CfgP‹tCtcVœnGë
(
uiP‹tIndex
, &
°VœnMode
);

3139 i‡(
DRV_OK
 !
íRë
)

3141  
DRV_ERR_UNKNOW
;

3144 i‡((
CTC_VLAN_MODE_TRANSPARENT
 !
°VœnMode
.
mode
) &&

3145 (
CTC_VLAN_MODE_QINQ
 !
°VœnMode
.
mode
))

3147 
íRë
 = 
_HÆ_A˛RuÀA˘iveP‹tsGë
(
°VœnMode
.
a˛_li°
[0], &
uiPP‹tMask
);

3148 i‡(
DRV_OK
 !
íRë
)

3150  
DRV_ERR_UNKNOW
;

3153 i‡(!(
uiPP‹tMask
 & (1U << 
uiPP‹t
)))

3158 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
°VœnMode
.
a˛_li°
[0]);

3159 i‡(
DRV_OK
 !
íRë
)

3161  
DRV_ERR_UNKNOW
;

3164 
uiPP‹tMask
 &~(1U << 
uiPP‹t
);

3165 i‡((
uiPP‹tMask
 & ((1U << 
LOGIC_CPU_PORT
Ë| (1U << 
LOGIC_PON_PORT
))) == ((1U << LOGIC_CPU_PORT) | (1U << LOGIC_PON_PORT)))

3170 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
°VœnMode
.
a˛_li°
[0], 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_CVLAN_REMARK
, (
VOID
 *)&°VœnMode.
deÁu…_vœn
, (VOID *)&stVlanMode.default_vlan);

3171 i‡(
DRV_OK
 !
íRë
)

3173  
DRV_ERR_UNKNOW
;

3176 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
°VœnMode
.
a˛_li°
[0], 
CARE_TAG_CTAG
, 
TRUE
);

3177 i‡(
DRV_OK
 !
íRë
)

3179  
DRV_ERR_UNKNOW
;

3182 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
°VœnMode
.
a˛_li°
[0]);

3183 i‡(
DRV_OK
 !
íRë
)

3185  
DRV_ERR_UNKNOW
;

3190  
DRV_OK
;

3209 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTagCª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnCfg
)

3211 
UINT32
 
uiVœnId
;

3212 
UINT32
 
uiPP‹t
;

3213 
UINT32
 
uiPP‹tMask
 = 0;

3214 
UINT32
 
uiP‹tIndex
 = 0;

3215 
UINT32
 
uiA˛RuÀId
 = 0;

3216 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

3217 
CTC_VLAN_CFG_S
 
°VœnCfg
;

3219 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

3220 (
NULL
 =
p°VœnCfg
))

3222  
DRV_ERR_PARA
;

3225 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3226 i‡(
DRV_OK
 !
íRë
)

3228  
DRV_ERR_UNKNOW
;

3231 
uiVœnId
 = 
p°VœnCfg
->
deÁu…_vœn
;

3233 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_CVLAN_REMARK
, (
VOID
 *)&
uiVœnId
, (VOID *)&uiVlanId);

3234 i‡(
DRV_OK
 !
íRë
)

3236  
DRV_ERR_UNKNOW
;

3239 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

3240 i‡(
DRV_OK
 !
íRë
)

3242  
DRV_ERR_UNKNOW
;

3245 
uiPP‹tMask
 = (1U << 
SWITCH_UPLINK_PHY_PORT
Ë| (1U << 
SWITCH_CPU_PHY_PORT
);

3247 
uiP‹tIndex
 = 1; uiP‹tIndex <
LOGIC_PORT_NO
; uiPortIndex++)

3249 i‡(
uiP‹tIndex
 =
uiLP‹tId
)

3254 
íRë
 = 
HÆ_CfgP‹tCtcVœnGë
(
uiP‹tIndex
, &
°VœnCfg
);

3255 i‡(
DRV_OK
 !
íRë
)

3257  
DRV_ERR_UNKNOW
;

3260 i‡((
CTC_VLAN_MODE_TRANSPARENT
 =
°VœnCfg
.
mode
) ||

3261 (
CTC_VLAN_MODE_QINQ
 =
°VœnCfg
.
mode
))

3263 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiP‹tIndex
);

3264 i‡(
INVALID_PORT
 =
uiPP‹t
)

3266  
DRV_ERR_UNKNOW
;

3268 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

3272 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

3273 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

3274 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3275 i‡(
DRV_OK
 !
íRë
)

3277  
DRV_ERR_UNKNOW
;

3280 
p°VœnCfg
->
numbî_of_a˛_ruÀs
 = 1;

3281 
p°VœnCfg
->
a˛_li°
[0] = 
uiA˛RuÀId
;

3287 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3288 i‡(
DRV_OK
 !
íRë
)

3290 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3291  
DRV_ERR_UNKNOW
;

3294 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_DROP
, (
VOID
 *)&
uiVœnId
, (VOID *)&uiVlanId);

3295 i‡(
DRV_OK
 !
íRë
)

3297 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3298  
DRV_ERR_UNKNOW
;

3301 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

3302 i‡(
DRV_OK
 !
íRë
)

3304 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3305  
DRV_ERR_UNKNOW
;

3308 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

3309 
uiPP‹tMask
 = 1U << 
uiPP‹t
;

3310 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3311 i‡(
DRV_OK
 !
íRë
)

3313 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3314  
DRV_ERR_UNKNOW
;

3317 
p°VœnCfg
->
a˛_li°
[p°VœnCfg->
numbî_of_a˛_ruÀs
] = 
uiA˛RuÀId
;

3318 
p°VœnCfg
->
numbî_of_a˛_ruÀs
++;

3321 ()
_HÆ_CfgP‹tCtcVœnSë
(
uiLP‹tId
, 
p°VœnCfg
);

3323  
DRV_OK
;

3341 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTagDñëe
(
UINT32
 
uiLP‹tId
)

3343 
UINT32
 
i
;

3344 
UINT32
 
uiA˛RuÀId
;

3345 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

3346 
CTC_VLAN_CFG_S
 
°VœnMode
;

3348 i‡(!
IsVÆidLgcP‹t
(
uiLP‹tId
))

3350  
DRV_ERR_PARA
;

3353 
íRë
 = 
HÆ_CfgP‹tCtcVœnGë
(
uiLP‹tId
, &
°VœnMode
);

3354 i‡(
DRV_OK
 !
íRë
)

3356  
DRV_ERR_UNKNOW
;

3359 
uiA˛RuÀId
 = 
°VœnMode
.
a˛_li°
[0];

3363 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

3364 i‡(
DRV_OK
 !
íRë
)

3366  
DRV_ERR_UNKNOW
;

3369 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

3370 i‡(
DRV_OK
 !
íRë
)

3372  
DRV_ERR_UNKNOW
;

3375 
i
 = 0; i < 
°VœnMode
.
numbî_of_a˛_ruÀs
; i++)

3377 
uiA˛RuÀId
 = 
°VœnMode
.
a˛_li°
[
i
];

3379 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

3380 i‡(
DRV_OK
 !
íRë
)

3382  
DRV_ERR_UNKNOW
;

3385 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

3386 i‡(
DRV_OK
 !
íRë
)

3388  
DRV_ERR_UNKNOW
;

3392  
DRV_OK
;

3411 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn¶Cª©e
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°VœnMode
)

3413 
UINT32
 
uiPP‹t
;

3414 
UINT32
 
uiPP‹tMask
 = 0;

3415 
UINT32
 
uiP‹tIndex
 = 0;

3416 
UINT32
 
uiPvid
 = 0;

3417 
UINT32
 
uiOldVœnId
 = 0;

3418 
UINT32
 
uiNewVœnId
 = 0;

3420 
UINT32
 
uiA˛RuÀId
;

3421 
UINT32
 
i
 = 0;

3422 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

3423 
BOOL
 
bAc˚ssMode
 = 
FALSE
;

3424 
CTC_VLAN_CFG_S
 
°VœnMode
;

3426 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

3427 (
NULL
 =
p°VœnMode
))

3429 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3430  
DRV_ERR_PARA
;

3433 
uiPvid
 = 
p°VœnMode
->
deÁu…_vœn
;

3435 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3436 i‡(
DRV_OK
 !
íRë
)

3438 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3439  
DRV_ERR_UNKNOW
;

3443 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_CVLAN_REMARK
, (
VOID
 *)&
uiPvid
, (VOID *)&uiPvid);

3444 i‡(
DRV_OK
 !
íRë
)

3446 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3447  
DRV_ERR_UNKNOW
;

3450 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

3451 i‡(
DRV_OK
 !
íRë
)

3453 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3454  
DRV_ERR_UNKNOW
;

3457 
uiPP‹tMask
 = (1U << 
SWITCH_UPLINK_PHY_PORT
Ë| (1U << 
SWITCH_CPU_PHY_PORT
);

3459 
uiP‹tIndex
 = 1; uiP‹tIndex <
LOGIC_PORT_NO
; uiPortIndex++)

3461 i‡(
uiP‹tIndex
 =
uiLP‹tId
)

3466 
íRë
 = 
HÆ_CfgP‹tCtcVœnGë
(
uiP‹tIndex
, &
°VœnMode
);

3467 i‡(
DRV_OK
 !
íRë
)

3469 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3470  
DRV_ERR_UNKNOW
;

3473 i‡((
CTC_VLAN_MODE_TRANSPARENT
 =
°VœnMode
.
mode
) ||

3474 (
CTC_VLAN_MODE_QINQ
 =
°VœnMode
.
mode
))

3476 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiP‹tIndex
);

3477 i‡(
INVALID_PORT
 =
uiPP‹t
)

3479 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3480  
DRV_ERR_UNKNOW
;

3483 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

3487 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3488 i‡(
DRV_OK
 !
íRë
)

3490 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3491  
DRV_ERR_UNKNOW
;

3494 
p°VœnMode
->
numbî_of_a˛_ruÀs
 = 1;

3495 
p°VœnMode
->
a˛_li°
[0] = 
uiA˛RuÀId
;

3497 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

3498 i‡(
INVALID_PORT
 =
uiPP‹t
)

3500 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3501  
DRV_ERR_UNKNOW
;

3505 
i
 = 0; i < 
p°VœnMode
->
numbî_of_íåõs
; i++)

3507 
uiOldVœnId
 = 
p°VœnMode
->
vœn_li°
[
i
*2];

3508 
uiNewVœnId
 = 
p°VœnMode
->
vœn_li°
[(
i
*2)+1];

3510 i‡((
uiOldVœnId
 =
uiNewVœnId
) &&

3511 (
uiPvid
 =
uiNewVœnId
))

3513 
bAc˚ssMode
 = 
TRUE
;

3518 i‡(
FALSE
 =
bAc˚ssMode
)

3521 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3522 i‡(
DRV_OK
 !
íRë
)

3524 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3525  
DRV_ERR_UNKNOW
;

3530 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_DROP
, (
VOID
 *)&
uiPvid
, (VOID *)&uiPvid);

3531 i‡(
DRV_OK
 !
íRë
)

3533 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3534  
DRV_ERR_UNKNOW
;

3537 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

3538 i‡(
DRV_OK
 !
íRë
)

3540 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3541  
DRV_ERR_UNKNOW
;

3544 
uiPP‹tMask
 = 1U << 
uiPP‹t
;

3545 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3546 i‡(
DRV_OK
 !
íRë
)

3548 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3549  
DRV_ERR_UNKNOW
;

3552 
p°VœnMode
->
a˛_li°
[p°VœnMode->
numbî_of_a˛_ruÀs
] = 
uiA˛RuÀId
;

3553 
p°VœnMode
->
numbî_of_a˛_ruÀs
++;

3557 
i
 = 0; i < 
p°VœnMode
->
numbî_of_íåõs
; i++)

3559 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3560 i‡(
DRV_OK
 !
íRë
)

3562 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3563  
DRV_ERR_UNKNOW
;

3566 
uiOldVœnId
 = 
p°VœnMode
->
vœn_li°
[
i
*2];

3567 
uiNewVœnId
 = 
p°VœnMode
->
vœn_li°
[(
i
*2)+1];

3570 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_CVLAN_REMARK
, (
VOID
 *)&
uiOldVœnId
, (VOID *)&
uiNewVœnId
);

3571 i‡(
DRV_OK
 !
íRë
)

3573 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3574  
DRV_ERR_UNKNOW
;

3577 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

3578 i‡(
DRV_OK
 !
íRë
)

3580 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3581  
DRV_ERR_UNKNOW
;

3584 
uiPP‹tMask
 = 1U << 
uiPP‹t
;

3585 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3586 i‡(
DRV_OK
 !
íRë
)

3588 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3589  
DRV_ERR_UNKNOW
;

3592 
p°VœnMode
->
a˛_li°
[p°VœnMode->
numbî_of_a˛_ruÀs
] = 
uiA˛RuÀId
;

3593 
p°VœnMode
->
numbî_of_a˛_ruÀs
++;

3596 i‡((
uiOldVœnId
 =
uiNewVœnId
) &&

3597 (
uiPvid
 =
uiNewVœnId
))

3603 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3604 i‡(
DRV_OK
 !
íRë
)

3606 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3607  
DRV_ERR_UNKNOW
;

3610 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_CVLAN_REMARK
, (
VOID
 *)&
uiNewVœnId
, (VOID *)&
uiOldVœnId
);

3611 i‡(
DRV_OK
 !
íRë
)

3613 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3614  
DRV_ERR_UNKNOW
;

3617 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

3618 i‡(
DRV_OK
 !
íRë
)

3620 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3621  
DRV_ERR_UNKNOW
;

3624 
uiPP‹tMask
 = (1U << 
SWITCH_UPLINK_PHY_PORT
);

3625 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3626 i‡(
DRV_OK
 !
íRë
)

3628 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3629  
DRV_ERR_UNKNOW
;

3632 
p°VœnMode
->
a˛_li°
[p°VœnMode->
numbî_of_a˛_ruÀs
] = 
uiA˛RuÀId
;

3633 
p°VœnMode
->
numbî_of_a˛_ruÀs
++;

3635 i‡(
uiOldVœnId
 !
uiNewVœnId
)

3638 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3639 i‡(
DRV_OK
 !
íRë
)

3641 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3642  
DRV_ERR_UNKNOW
;

3647 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_DROP
, (
VOID
 *)&
uiNewVœnId
, (VOID *)&uiNewVlanId);

3648 i‡(
DRV_OK
 !
íRë
)

3650 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3651  
DRV_ERR_UNKNOW
;

3654 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

3655 i‡(
DRV_OK
 !
íRë
)

3657 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3658  
DRV_ERR_UNKNOW
;

3661 
uiPP‹tMask
 = 1U << 
uiPP‹t
;

3662 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3663 i‡(
DRV_OK
 !
íRë
)

3665 
¥ötk
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

3666  
DRV_ERR_UNKNOW
;

3669 
p°VœnMode
->
a˛_li°
[p°VœnMode->
numbî_of_a˛_ruÀs
] = 
uiA˛RuÀId
;

3670 
p°VœnMode
->
numbî_of_a˛_ruÀs
++;

3674 ()
_HÆ_CfgP‹tCtcVœnSë
(
uiLP‹tId
, 
p°VœnMode
);

3676  
DRV_OK
;

3694 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcTøn¶Dñëe
(
UINT32
 
uiLP‹tId
)

3696 
UINT32
 
i
 = 0;

3697 
UINT32
 
uiA˛RuÀId
;

3698 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

3699 
CTC_VLAN_CFG_S
 
°VœnMode
;

3701 i‡(!
IsVÆidLgcP‹t
(
uiLP‹tId
))

3703  
DRV_ERR_PARA
;

3706 
mem£t
(&
°VœnMode
, 0, (stVlanMode));

3708 
íRë
 = 
HÆ_CfgP‹tCtcVœnGë
(
uiLP‹tId
, &
°VœnMode
);

3709 i‡(
DRV_OK
 !
íRë
)

3711  
DRV_ERR_UNKNOW
;

3714 
i
 = 0; i < 
°VœnMode
.
numbî_of_a˛_ruÀs
; i++)

3716 
uiA˛RuÀId
 = 
°VœnMode
.
a˛_li°
[
i
];

3718 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

3719 i‡(
DRV_OK
 !
íRë
)

3721  
DRV_ERR_UNKNOW
;

3724 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

3725 i‡(
DRV_OK
 !
íRë
)

3727  
DRV_ERR_UNKNOW
;

3731  
DRV_OK
;

3750 
DRV_RET_E
 
HÆ_CfgP‹tCtcVœnSë
(
UINT32
 
uiLP‹tId
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnMode
)

3752  
_HÆ_CfgP‹tCtcVœnSë
(
uiLP‹tId
, 
p°CtcVœnMode
);

3772 
STATIC
 
INT32
 
_HAL_GëVÆidR©eSh¨eMëîIndex
(
UINT32
 
uiR©e
, 
BOOL
 *
pbFöd
, UINT32 *
pIndex
)

3774 
UINT32
 
i
;

3775 
UINT32
 
uiEm±yIndex
 = 
RTK_MAX_NUM_OF_METER
;

3776 
πk_øã_t
 
R©e
 = 0;

3777 
πk_íabÀ_t
 
In˛udeIfg
;

3778 
πk_≠i_ªt_t
 
Rë
;

3780 *
pbFöd
 = 
FALSE
;

3782 
i
 = 0; i < 
RTK_MAX_NUM_OF_METER
; i++)

3784 
R©e
 = 0;

3785 
Rë
 = 
πk_øã_sh¨eMëî_gë
(
i
, &
R©e
, &
In˛udeIfg
);

3786 i‡(
RT_ERR_OK
 !
Rë
)

3788 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3789  
DRV_ERR_UNKNOW
;

3792 i‡((0 =
R©e
) &&

3793 (
RTK_MAX_NUM_OF_METER
 =
uiEm±yIndex
))

3795 
uiEm±yIndex
 = 
i
;

3797 i‡(
uiR©e
 =(
UINT32
)
R©e
)

3799 
uiEm±yIndex
 = 
i
;

3800 *
pbFöd
 = 
TRUE
;

3804 *
pIndex
 = 
uiEm±yIndex
;

3806  
DRV_OK
;

3826 
STATIC
 
INT32
 
ACL_Cª©eRuÀF‹AΩR©eLimô
(
UINT32
 
uiPP‹tMask
, UINT32 
uiR©eLimô
)

3828 
BOOL
 
bFöd
 = 
FALSE
;

3829 
INT32
 
iRë
 = 
DRV_OK
;

3830 
UINT32
 
Index
;

3831 
UINT32
 
uiA˛RuÀId
;

3832 
UINT32
 
uiEthTy≥
 = 0x0806;

3833 
πk_≠i_ªt_t
 
Rë
;

3836 
iRë
 = 
_HAL_GëVÆidR©eSh¨eMëîIndex
(
uiR©eLimô
, &
bFöd
, &
Index
);

3837 i‡(
DRV_OK
 !
iRë
)

3839 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3840  
DRV_ERR_UNKNOW
;

3843 i‡(
RTK_MAX_NUM_OF_METER
 <
Index
)

3845 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3846  
DRV_ERR_UNKNOW
;

3849 i‡(
FALSE
 =
bFöd
)

3851 
Rë
 = 
πk_øã_sh¨eMëî_£t
(
Index
, 
uiR©eLimô
, 
ENABLED
);

3852 i‡(
RT_ERR_OK
 !
Rë
)

3854 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3855  
DRV_ERR_UNKNOW
;

3860 
iRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3861 i‡(
DRV_OK
 !
iRë
)

3863 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3864  
DRV_ERR_UNKNOW
;

3867 
iRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_ETHTYPE
, 
ACL_ACTION_POLICING_0
, (
VOID
 *)&
uiEthTy≥
, (VOID *)&
Index
);

3868 i‡(
DRV_OK
 !
iRë
)

3870 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3871  
DRV_ERR_UNKNOW
;

3874 
iRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3875 i‡(
DRV_OK
 !
iRë
)

3877 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3878  
DRV_ERR_UNKNOW
;

3881  
DRV_OK
;

3900 
STATIC
 
INT32
 
ACL_Cª©eRuÀF‹BpduR©eLimô
(
UINT32
 
uiPP‹tMask
, UINT32 
uiR©eLimô
)

3902 
BOOL
 
bFöd
 = 
FALSE
;

3903 
INT32
 
iRë
 = 
DRV_OK
;

3904 
UINT32
 
Index
;

3905 
UINT32
 
uiA˛RuÀId
;

3906 
UINT8
 
aucBpduMac
[
MAC_ADDR_LEN
] = {0x01,0x80,0xC2,0x00,0x00,0x00};

3907 
UINT8
 
aucMask
[
MAC_ADDR_LEN
] = {0xFF,0xFF,0xFF,0xFF,0xFF,0x00};

3908 
πk_≠i_ªt_t
 
Rë
;

3911 
iRë
 = 
_HAL_GëVÆidR©eSh¨eMëîIndex
(
uiR©eLimô
, &
bFöd
, &
Index
);

3912 i‡(
DRV_OK
 !
iRë
)

3914 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3915  
DRV_ERR_UNKNOW
;

3918 i‡(
RTK_MAX_NUM_OF_METER
 <
Index
)

3920 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3921  
DRV_ERR_UNKNOW
;

3924 i‡(
FALSE
 =
bFöd
)

3926 
Rë
 = 
πk_øã_sh¨eMëî_£t
(
Index
, 
uiR©eLimô
, 
ENABLED
);

3927 i‡(
RT_ERR_OK
 !
Rë
)

3929 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3930  
DRV_ERR_UNKNOW
;

3935 
iRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

3936 i‡(
DRV_OK
 !
iRë
)

3938 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3939  
DRV_ERR_UNKNOW
;

3942 
iRë
 = 
_HÆ_A˛RuÀMacCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_DMAC
, 
ACL_ACTION_POLICING_0
,

3943 (
VOID
 *)
aucBpduMac
, (VOID *)
aucMask
, (VOID *)&
Index
);

3944 i‡(
DRV_OK
 !
iRë
)

3946 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3947  
DRV_ERR_UNKNOW
;

3950 
iRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

3951 i‡(
DRV_OK
 !
iRë
)

3953 
¥ötk
("func:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

3954  
DRV_ERR_UNKNOW
;

3957  
DRV_OK
;

3977 
DRV_RET_E
 
HÆ_A˛RuÀInô
()

3979 
UINT32
 
uiLP‹tId
;

3980 
UINT32
 
uiPP‹t
;

3981 
UINT32
 
uiPP‹tMask
 = 0;

3984 
	#DHCP_SERVER_PORT
 67

	)

3985 
	#DHCP_CLIENT_PORT
 68

	)

3987 
UINT32
 
uiEthTy≥AΩ
 = 0x0806;

3988 
UINT32
 
uiUdpP‹t
;

3993 
¥ötk
("\n#######call Hal_AclRuleInit ... ");

3995 
HÆ_A˛Inô
();

3998 ()
HÆ_A˛RuÀF‹TøpCpuCª©e
(
TRUE
, 
ACL_TRUST_ETHTYPE
, &
uiEthTy≥AΩ
);

4001 
uiUdpP‹t
 = 
DHCP_CLIENT_PORT
;

4002 ()
HÆ_A˛RuÀF‹TøpCpuCª©e
(
TRUE
, 
ACL_TRUST_UDP_SPORT
, &
uiUdpP‹t
);

4003 
uiUdpP‹t
 = 
DHCP_SERVER_PORT
;

4004 ()
HÆ_A˛RuÀF‹TøpCpuCª©e
(
TRUE
, 
ACL_TRUST_UDP_DPORT
, &
uiUdpP‹t
);

4007 
uiUdpP‹t
 = 
DHCP_SERVER_PORT
;

4008 ()
HÆ_A˛RuÀF‹TøpCpuCª©e
(
TRUE
, 
ACL_TRUST_UDP_SPORT
, &
uiUdpP‹t
);

4009 
uiUdpP‹t
 = 
DHCP_CLIENT_PORT
;

4010 ()
HÆ_A˛RuÀF‹TøpCpuCª©e
(
TRUE
, 
ACL_TRUST_UDP_DPORT
, &
uiUdpP‹t
);

4018 
LgcP‹tF‹
(
uiLP‹tId
)

4020 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

4021 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

4024 (
VOID
)
ACL_Cª©eRuÀF‹AΩR©eLimô
(
uiPP‹tMask
, 512);

4026 (
VOID
)
ACL_Cª©eRuÀF‹BpduR©eLimô
(
uiPP‹tMask
, 512);

4028 
¥ötk
("done.##############\n");

4029  
DRV_OK
;

4050 
DRV_RET_E
 
_HÆ_CfgP‹tMcVœnSë
(
UINT32
 
uiLP‹tId
, 
PORT_MC_VLAN_CFG_S
 *
p°CtcMcVœnCfg
)

4053 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

4054 (
NULL
 =
p°CtcMcVœnCfg
))

4056  
DRV_ERR_PARA
;

4059 
ACL_MUTEX_LOCK
;

4060 
mem˝y
(&
m_a°UniMcVœnCfg
[
uiLP‹tId
], 
p°CtcMcVœnCfg
, (
PORT_MC_VLAN_CFG_S
));

4061 
ACL_MUTEX_UNLOCK
;

4063  
DRV_OK
;

4082 
DRV_RET_E
 
_HÆ_CfgP‹tMcVœnGë
(
UINT32
 
uiLP‹tId
, 
PORT_MC_VLAN_CFG_S
 *
p°CtcMcVœnCfg
)

4085 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)) ||

4086 (
NULL
 =
p°CtcMcVœnCfg
))

4088  
DRV_ERR_PARA
;

4091 
ACL_MUTEX_LOCK
;

4092 
mem˝y
(
p°CtcMcVœnCfg
, &
m_a°UniMcVœnCfg
[
uiLP‹tId
], (
PORT_MC_VLAN_CFG_S
));

4093 
ACL_MUTEX_UNLOCK
;

4095  
DRV_OK
;

4114 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcMcVœnCª©e
(
UINT32
 
uiLP‹tId
, UINT32 
uiMcVœn
)

4116 
UINT32
 
i
 = 0;

4117 
UINT32
 
uiVœnId
;

4118 
UINT32
 
uiPP‹t
;

4119 
UINT32
 
uiPP‹tMask
 = 0;

4120 
UINT32
 
uiA˛RuÀId
 = 0;

4121 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

4122 
PORT_MC_VLAN_CFG_S
 
°CtcMcVœnCfg
;

4124 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)Ë|| (!
VALID_VLAN_ID
(
uiMcVœn
)))

4126 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4127  
DRV_ERR_PARA
;

4130 ()
_HÆ_CfgP‹tMcVœnGë
(
uiLP‹tId
, &
°CtcMcVœnCfg
);

4131 
i
 = 0; i < 
°CtcMcVœnCfg
.
uiMcVœnNum
; i++)

4133 i‡(
uiMcVœn
 =
°CtcMcVœnCfg
.
auiVœnLi°
[
i
])

4135  
DRV_OK
;

4139 
íRë
 = 
_HÆ_A˛RuÀEm±yIdGë
(&
uiA˛RuÀId
);

4140 i‡(
DRV_OK
 !
íRë
)

4142 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4143  
DRV_ERR_UNKNOW
;

4146 
uiVœnId
 = 
uiMcVœn
;

4147 
íRë
 = 
_HÆ_A˛RuÀCfgCª©e
(
uiA˛RuÀId
, 
ACL_TRUST_CTAG_VID
, 
ACL_ACTION_CVLAN_REMARK
, (
VOID
 *)&
uiVœnId
, (VOID *)&uiVlanId);

4148 i‡(
DRV_OK
 !
íRë
)

4150 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4151  
DRV_ERR_UNKNOW
;

4154 
íRë
 = 
_HÆ_CfgA˛C¨eTag
(
uiA˛RuÀId
, 
CARE_TAG_CTAG
, 
TRUE
);

4155 i‡(
DRV_OK
 !
íRë
)

4157 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4158  
DRV_ERR_UNKNOW
;

4161 
uiPP‹tMask
 = 1U << 
SWITCH_UPLINK_PHY_PORT
;

4162 
uiPP‹t
 = 
P‹tLogic2PhyP‹tId
(
uiLP‹tId
);

4163 
uiPP‹tMask
 |(1U << 
uiPP‹t
);

4165 
íRë
 = 
_HÆ_A˛RuÀBöd
(
uiPP‹tMask
, 
uiA˛RuÀId
);

4166 i‡(
DRV_OK
 !
íRë
)

4168 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4169  
DRV_ERR_UNKNOW
;

4172 
°CtcMcVœnCfg
.
auiA˛Li°
[°CtcMcVœnCfg.
uiMcVœnNum
] = 
uiA˛RuÀId
;

4173 
°CtcMcVœnCfg
.
auiVœnLi°
[°CtcMcVœnCfg.
uiMcVœnNum
] = 
uiMcVœn
;

4174 
°CtcMcVœnCfg
.
uiMcVœnNum
++;

4177 ()
_HÆ_CfgP‹tMcVœnSë
(
uiLP‹tId
, &
°CtcMcVœnCfg
);

4179  
DRV_OK
;

4198 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcMcVœnDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiMcVœn
)

4200 
UINT32
 
i
;

4201 
UINT32
 
uiA˛RuÀId
 = 
ACL_RULE_ID_IVALLID
;

4202 
DRV_RET_E
 
íRë
 = 
DRV_OK
;

4203 
PORT_MC_VLAN_CFG_S
 
°CtcMcVœnCfg
;

4205 i‡((!
IsVÆidLgcP‹t
(
uiLP‹tId
)Ë|| (!
VALID_VLAN_ID
(
uiMcVœn
)))

4207 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4208  
DRV_ERR_PARA
;

4211 ()
_HÆ_CfgP‹tMcVœnGë
(
uiLP‹tId
, &
°CtcMcVœnCfg
);

4212 i‡(0 =
°CtcMcVœnCfg
.
uiMcVœnNum
)

4214  
DRV_OK
;

4217 
i
 = 0; i < 
°CtcMcVœnCfg
.
uiMcVœnNum
; i++)

4219 i‡(
uiMcVœn
 =
°CtcMcVœnCfg
.
auiVœnLi°
[
i
])

4221 
uiA˛RuÀId
 = 
°CtcMcVœnCfg
.
auiA˛Li°
[
i
];

4226 i‡(
ACL_RULE_ID_IVALLID
 =
uiA˛RuÀId
)

4228 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4229  
DRV_ERR_UNKNOW
;

4233 
íRë
 = 
_HÆ_A˛RuÀUnböd
(
uiA˛RuÀId
);

4234 i‡(
DRV_OK
 !
íRë
)

4236 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4237  
DRV_ERR_UNKNOW
;

4240 
íRë
 = 
_HÆ_A˛RuÀCfgP‹tsCÀ¨
(
uiA˛RuÀId
);

4241 i‡(
DRV_OK
 !
íRë
)

4243 
¥ötk
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

4244  
DRV_ERR_UNKNOW
;

4247 
i
 = 0; i < 
°CtcMcVœnCfg
.
uiMcVœnNum
; i++)

4249 i‡(
uiMcVœn
 =
°CtcMcVœnCfg
.
uiMcVœnNum
)

4255 ; 
i
 < (
°CtcMcVœnCfg
.
uiMcVœnNum
-1); i++)

4257 
°CtcMcVœnCfg
.
auiA˛Li°
[
i
] = stCtcMcVlanCfg.auiAclList[i+1];

4258 
°CtcMcVœnCfg
.
auiVœnLi°
[
i
] = stCtcMcVœnCfg.
auiA˛Li°
[i+1];

4260 
°CtcMcVœnCfg
.
uiMcVœnNum
--;

4261 ()
_HÆ_CfgP‹tMcVœnSë
(
uiLP‹tId
, &
°CtcMcVœnCfg
);

4263  
DRV_OK
;

4267 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_aggr.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

76 
DRV_RET_E
 
HÆ_SëAggrMode
(
UINT32
 
ulMode
)

78 #i‡
deföed
(
CHIPSET_RTL8305
)

79 ()
ulMode
;

82 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

83 
UINT32
 
ulUnô
, 
ulGroupNo
, 
ulMaxGroup
, 
ulAlgoBômask
=0;

92 
ulMode
)

94 
SA_TRUNK
:

95 
ulAlgoBômask
 = 
TRUNK_DISTRIBUTION_ALGO_SMAC_BIT
;

97 
DA_TRUNK
:

98 
ulAlgoBômask
 = 
TRUNK_DISTRIBUTION_ALGO_DMAC_BIT
;

100 
SADA_TRUNK
:

101 
ulAlgoBômask
 = 
TRUNK_DISTRIBUTION_ALGO_SMAC_BIT
|
TRUNK_DISTRIBUTION_ALGO_DMAC_BIT
;

103 
SAIPDAIP_TRUNK
:

104 
ulAlgoBômask
 = 
TRUNK_DISTRIBUTION_ALGO_SIP_BIT
|
TRUNK_DISTRIBUTION_ALGO_DIP_BIT
;

106 
SADAIP_TRUNK
:

107 
ulAlgoBômask
 = 
TRUNK_DISTRIBUTION_ALGO_SMAC_BIT
|
TRUNK_DISTRIBUTION_ALGO_DMAC_BIT
|

108 
TRUNK_DISTRIBUTION_ALGO_SIP_BIT
|
TRUNK_DISTRIBUTION_ALGO_DIP_BIT
;

111  
DRV_ERR_PARA
;

114 
UnôF‹
(
ulUnô
)

116 
ulMaxGroup
 = 
HAL_MAX_NUM_OF_TRUNK
(
ulUnô
);

117 
ulGroupNo
 = 0; ulGroupNÿ< 
ulMaxGroup
; ulGroupNo++)

129 if(
RT_ERR_OK
 !
πk_åunk_di°ributi⁄Alg‹ôhm_£t
(
ulUnô
, 
ulGroupNo
, 
ulAlgoBômask
))

131  
DRV_ERR_UNKNOW
;

136  
DRV_OK
;

156 
DRV_RET_E
 
HÆ_SëAggrGroup
(
agg_gΩ_num_t
 
gΩNum
, 
logic_pmask_t
 
°LgcMask
)

158 #i‡
deföed
(
CHIPSET_RTL8305
)

159 ()
gΩNum
;

160 ()
°LgcMask
;

162 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

163 
phy_pmask_t
 
°PhyMask
;

164 
UINT32
 
ulUnô
;

165 
INT32
 
lRtkRëVÆ
 = 0;

167 if(
gΩNum
 >
AGGRE_GRP_NUM
)

169  
DRV_ERR_PARA
;

172 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

173 
UnôF‹
(
ulUnô
)

176 
lRtkRëVÆ
 = 
πk_åunk_p‹t_£t
(
ulUnô
, 
gΩNum
, &
CHIPNMASK
(ulUnô, &
°PhyMask
));

178 if(
RT_ERR_OK
 !
lRtkRëVÆ
)

180  
DRV_ERR_UNKNOW
;

184  
DRV_OK
;

187 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_cablediag.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 
	~"πk_≠i.h
"

26 
	~"πk_≠i_ext.h
"

27 
	~<löux/dñay.h
>

28 
	~<löux/°rög.h
>

83 
DRV_RET_E
 
HÆ_GëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
)

85 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

86 
UINT32
 
unô
;

87 
UINT16
 
uiLí
;

88 
UINT16
 
uiResiduÀ
;

90 
UINT32
 
i
;

91 
logic_pmask_t
 
Õ‹tMask
;

92 
phy_pmask_t
 
°PhyMask
;

93 
INT
 
ªtVÆ
;

94 
πk_π˘Resu…_t
 
°Rt˘Resu…
;

96 if(
p°Düg
 =
NULL
)

98  
DRV_ERR_PARA
;

101 if(!
IsVÆidLgcP‹t
(
Õ‹t
))

103  
DRV_ERR_PARA
;

106 
mem£t
(
p°Düg
, 0, (
ˇbÀ_düg_t
));

107 
mem£t
(&
°Rt˘Resu…
, 0, (
πk_π˘Resu…_t
));

108 
CÃLgcMaskAŒ
(&
Õ‹tMask
);

109 
SëLgcMaskBô
(
Õ‹t
, &
Õ‹tMask
);

110 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

111 
unô
 = 
P‹tLogci2ChùId
(
Õ‹t
);

113 
MaskLogic2Phy
(&
Õ‹tMask
, &
°PhyMask
);

114 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

115 
ªtVÆ
 = 
πk_p‹t_π˘E«bÀ_£t
(
unô
, &
CHIPNMASK
(unô, &
°PhyMask
));

116 #ñi‡
deföed
(
CHIPSET_RTL8305
)

117 
ªtVÆ
 = 
πk_p‹t_π˘E«bÀ_£t
(
CHIPNMASK
(0, &
°PhyMask
));

119 if(
ªtVÆ
 !
RT_ERR_OK
)

121  
DRV_ERR_UNKNOW
;

126 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

127 
ªtVÆ
 = 
πk_p‹t_π˘Resu…_gë
(
unô
, 
P‹tLogic2PhyP‹tId
(
Õ‹t
), &
°Rt˘Resu…
);

128 #ñi‡
deföed
(
CHIPSET_RTL8305
)

129 
ªtVÆ
 = 
πk_p‹t_π˘Resu…_gë
(
P‹tLogic2PhyP‹tId
(
Õ‹t
), &
°Rt˘Resu…
);

131 if(
ªtVÆ
 =
RT_ERR_PHY_RTCT_NOT_FINISH
)

133 
m¶ìp
(1000);

135 }
ªtVÆ
 =
RT_ERR_PHY_RTCT_NOT_FINISH
);

136 if(
ªtVÆ
 !
RT_ERR_OK
)

138  
DRV_ERR_UNKNOW
;

141 
p°Düg
->
°©e
 = 
CABLE_STATE_OK
;

142 
p°Düg
->
fuzz_Àn
 = 5;

143 if((
°Rt˘Resu…
.
lökTy≥
 =
PORT_SPEED_10M
Ë|| (°Rt˘Resu….lökTy≥ =
PORT_SPEED_100M
))

145 
p°Düg
->
≈aús
 = 2;

146 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

147 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
„_ªsu…
.
rxLí
);

148 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
„_ªsu…
.
txLí
);

149 if(
°Rt˘Resu…
.
„_ªsu…
.
isRxSh‹t
)

151 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

152 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

154 if(
°Rt˘Resu…
.
„_ªsu…
.
isTxSh‹t
)

156 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

157 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

159 if(
°Rt˘Resu…
.
„_ªsu…
.
isRxO≥n
)

161 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

162 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

164 if(
°Rt˘Resu…
.
„_ªsu…
.
isTxO≥n
)

166 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

167 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

169 #ñi‡
deföed
(
CHIPSET_RTL8305
)

170 
p°Düg
->
≈aús
 = 4;

171 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lALí
);

172 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBLí
);

173 
p°Düg
->
∑ú_Àn
[2] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCLí
);

174 
p°Düg
->
∑ú_Àn
[3] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDLí
);

175 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lASh‹t
)

177 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

178 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

180 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBSh‹t
)

182 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

183 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

185 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCSh‹t
)

187 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_SHORT
;

188 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

190 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDSh‹t
)

192 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_SHORT
;

193 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

195 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lAO≥n
)

197 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

198 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

200 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBO≥n
)

202 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

203 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

205 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCO≥n
)

207 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_OPEN
;

208 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

210 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDO≥n
)

212 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_OPEN
;

213 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

217 if(
°Rt˘Resu…
.
lökTy≥
 =
PORT_SPEED_1000M
)

219 
p°Düg
->
≈aús
 = 4;

220 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

221 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lALí
);

222 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lBLí
);

223 
p°Düg
->
∑ú_Àn
[2] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lCLí
);

224 
p°Düg
->
∑ú_Àn
[3] = (
UINT16
)(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lDLí
);

225 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lASh‹t
)

227 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

228 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

230 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lBSh‹t
)

232 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

233 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

235 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lCSh‹t
)

237 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_SHORT
;

238 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

240 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lDSh‹t
)

242 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_SHORT
;

243 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

245 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lAO≥n
)

247 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

248 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

250 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lBO≥n
)

252 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

253 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

255 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lCO≥n
)

257 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_OPEN
;

258 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

260 if(
°Rt˘Resu…
.
ge_ªsu…
.
ch™√lDO≥n
)

262 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_OPEN
;

263 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

265 #ñi‡
deföed
(
CHIPSET_RTL8305
)

266 
p°Düg
->
∑ú_Àn
[0] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lALí
);

267 
p°Düg
->
∑ú_Àn
[1] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBLí
);

268 
p°Düg
->
∑ú_Àn
[2] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCLí
);

269 
p°Düg
->
∑ú_Àn
[3] = (
UINT16
)(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDLí
);

270 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lASh‹t
)

272 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_SHORT
;

273 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

275 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBSh‹t
)

277 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_SHORT
;

278 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

280 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCSh‹t
)

282 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_SHORT
;

283 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

285 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDSh‹t
)

287 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_SHORT
;

288 
p°Düg
->
°©e
 = 
CABLE_STATE_SHORT
;

290 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lAO≥n
)

292 
p°Düg
->
∑ú_°©e
[0] = 
CABLE_STATE_OPEN
;

293 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

295 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lBO≥n
)

297 
p°Düg
->
∑ú_°©e
[1] = 
CABLE_STATE_OPEN
;

298 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

300 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lCO≥n
)

302 
p°Düg
->
∑ú_°©e
[2] = 
CABLE_STATE_OPEN
;

303 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

305 if(
°Rt˘Resu…
.
ªsu…
.
ge_ªsu…
.
ch™√lDO≥n
)

307 
p°Düg
->
∑ú_°©e
[3] = 
CABLE_STATE_OPEN
;

308 
p°Düg
->
°©e
 = 
CABLE_STATE_OPEN
;

314  
DRV_ERR_UNKNOW
;

316 
i
 = 0; i < (
p°Düg
->
≈aús
); i++)

318 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

319 
uiLí
 = (
p°Düg
->
∑ú_Àn
[
i
])/100;

320 
uiResiduÀ
 = (
p°Düg
->
∑ú_Àn
[
i
])%100;

321 if(
uiResiduÀ
 >= 50)

323 
uiLí
++;

325 
p°Düg
->
∑ú_Àn
[
i
] = 
uiLí
;

326 #ñi‡
deföed
(
CHIPSET_RTL8305
)

327 
p°Düg
->
∑ú_Àn
[
i
] = (
UINT16
)((pstDiag->pair_len[i] * 25)/1000);

330  
DRV_OK
;

334 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_dispatch.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~"hÆ_comm⁄.h
"

26 #ifde‡
CHIPSET_RTL8328


27 
	~<hÆ/mac/ªg.h
>

28 
	~<hÆ/mac/mem.h
>

29 
	~<comm⁄/îr‹.h
>

30 
	~<iﬂl/mem32.h
>

31 #ñi‡
deföed
(
CHIPSET_RTL8305
)

32 
	~"πl8367b_asicdrv.h
"

53 
DRV_RET_E
 
HÆ_soc_ªg_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 *
pulD©a
)

55 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

57  
DRV_ERR_PARA
;

59 i‡(
NULL
 =
pulD©a
)

61  
DRV_ERR_PARA
;

65 
ulChùNum
 = ulChipNum;

67 i‡(
RT_ERR_OK
 !
πl8367b_gëAsicReg
(
ulRegIndex
, 
pulD©a
))

69  
DRV_ERR_UNKNOW
;

72  
DRV_OK
;

93 
DRV_RET_E
 
HÆ_soc_ªg_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 
ulD©a
)

95 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

97  
DRV_ERR_PARA
;

101 
ulChùNum
 = ulChipNum;

103 i‡(
RT_ERR_OK
 !
πl8367b_£tAsicReg
(
ulRegIndex
, 
ulD©a
))

105  
DRV_ERR_UNKNOW
;

108  
DRV_OK
;

129 
DRV_RET_E
 
HÆ_soc_mem_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32* 
pulE¡ryD©a
)

131 #ifde‡
CHIPSET_RTL8328


132 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

134  
DRV_ERR_PARA
;

137 i‡(
NULL
 =
pulE¡ryD©a
)

139  
DRV_ERR_PARA
;

142 i‡(
RT_ERR_OK
 !
èbÀ_ªad
(
ulChùNum
, 
ulTabÀ
, 
ulAddr
, 
pulE¡ryD©a
))

144  
DRV_ERR_UNKNOW
;

146 #ñi‡
deföed
(
CHIPSET_RTL8305
)

148 
ulChùNum
 = ulChipNum;

149 
ulTabÀ
 = ulTable;

150 
ulAddr
 = ulAddr;

151 
pulE¡ryD©a
 =ÖulEntryData;

153  
DRV_OK
;

175 
DRV_RET_E
 
HÆ_soc_mem_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32* 
pulE¡ryD©a
)

177 #ifde‡
CHIPSET_RTL8328


178 i‡(
ulChùNum
 >
MAX_CHIP_NUM
)

180  
DRV_ERR_PARA
;

183 i‡(
NULL
 =
pulE¡ryD©a
)

185  
DRV_ERR_PARA
;

188 i‡(
RT_ERR_OK
 !
èbÀ_wrôe
(
ulChùNum
, 
ulTabÀ
, 
ulAddr
, 
pulE¡ryD©a
))

190  
DRV_ERR_UNKNOW
;

192 #ñi‡
deföed
(
CHIPSET_RTL8305
)

194 
ulChùNum
 = ulChipNum;

195 
ulTabÀ
 = ulTable;

196 
ulAddr
 = ulAddr;

197 
pulE¡ryD©a
 =ÖulEntryData;

199  
DRV_OK
;

219 
DRV_RET_E
 
HÆ_GëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 *
pulD©a
)

221 #ifde‡
CHIPSET_RTL8328


222 i‡(
NULL
 =
pulD©a
)

224  
DRV_ERR_PARA
;

227 *
pulD©a
 = *(
UINT32
 *)
ulCpuAddr
;

230 
ulCpuAddr
 = ulCpuAddr;

231 
pulD©a
 =ÖulData;

233  
DRV_OK
;

253 
DRV_RET_E
 
HÆ_SëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 
ulD©a
)

255 #ifde‡
CHIPSET_RTL8328


256 *(
UINT32
 *)
ulCpuAddr
 = 
ulD©a
;

259 
ulCpuAddr
 = ulCpuAddr;

260 
ulD©a
 = ulData;

262  
DRV_OK
;

265 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_eeprom.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~<löux/°rög.h
>

24 
	~<πk/p‹t.h
>

25 
	~<πk/swôch.h
>

26 
	~"hÆ_comm⁄.h
"

27 
	~<comm⁄/π_îr‹.h
>

28 
	~"drv/gpio/gpio.h
"

29 
	~<löux/timî.h
>

30 
	~<löux/dñay.h
>

31 
	~<löux/•ölock_ty≥s.h
>

32 
	~<löux/•ölock.h
>

33 
	~<löux/¶ab.h
>

34 
	~<asm/uac˚ss.h
>

35 
	~<if_pub.h
>

36 
	~"if_ëhp‹t.h
"

38 
	~<comm⁄/debug/π_log.h
>

40 
BOOL
 
	tACK_STATUS
;

49 
öt32
 
DrvPö_To_RtkPö
(
GPIO_PIN_E
 
gpio_pö
, 
gpioID
 *
pGpioId
);

50 
BOOL
 
ComboP‹tCfgCh™ge
(
uöt32
 
unô
, uöt32 
phyP‹t
, 
πk_p‹t_medü_t
 
íMedü
);

55 
i2c_dñay_us
(
uöt32
 
us
);

56 
i2c_ª£t
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

57 
i2c_öô
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

58 
i2c_°¨t
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

59 
i2c_ªp°¨t
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

60 
i2c_°›
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

61 
i2c_SídByã
(
uöt8
 
d©a
, 
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

62 
ACK_STATUS
 
i2c_check_ACK
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

63 
uöt8
 
i2c_RevByã
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

64 
i2c_SídAck
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

65 
i2c_SídNoAck
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
);

70 
BOOL
 
	gg_bI2cFibîInôD⁄e
 = 
FALSE
;

76 
•ölock_t
 
	g_•ö_hÆ_ì¥om_lock
 = 
SPIN_LOCK_UNLOCKED
;

83 
GPIO_PIN_E
 
	gg_szI2cFibîGpioPö
[
LOGIC_PORT_NO
+1][
EEPROM_I2C_PIN_END
] = {

84  {
GPIO_PIN_END
, GPIO_PIN_END},

85  {
GPIO_PIN_END
, GPIO_PIN_END},

86  {
GPIO_PIN_END
, GPIO_PIN_END},

87  {
GPIO_PIN_END
, GPIO_PIN_END},

88  {
GPIO_PIN_END
, GPIO_PIN_END},

89  {
GPIO_PIN_END
, GPIO_PIN_END},

90  {
GPIO_PIN_END
, GPIO_PIN_END},

91  {
GPIO_PIN_END
, GPIO_PIN_END},

92  {
GPIO_PIN_END
, GPIO_PIN_END},

93  {
GPIO_PIN_END
, GPIO_PIN_END},

94  {
GPIO_PIN_END
, GPIO_PIN_END},

95  {
GPIO_PIN_END
, GPIO_PIN_END},

96  {
GPIO_PIN_END
, GPIO_PIN_END},

97  {
GPIO_PIN_END
, GPIO_PIN_END},

98  {
GPIO_PIN_END
, GPIO_PIN_END},

99  {
GPIO_PIN_END
, GPIO_PIN_END},

100  {
GPIO_PIN_END
, GPIO_PIN_END},

101  {
GPIO_PIN_END
, GPIO_PIN_END},

102  {
GPIO_PIN_END
, GPIO_PIN_END},

103  {
GPIO_PIN_END
, GPIO_PIN_END},

104  {
GPIO_PIN_END
, GPIO_PIN_END},

105  {
GPIO_PIN_END
, GPIO_PIN_END},

106  {
GPIO_PIN_END
, GPIO_PIN_END},

107  {
GPIO_PIN_END
, GPIO_PIN_END},

108  {
GPIO_PIN_END
, GPIO_PIN_END},

109  {
GPIO_PIN_SFP_SCL
, 
GPIO_PIN_SFP0_SDA
},

110  {
GPIO_PIN_SFP_SCL
, 
GPIO_PIN_SFP1_SDA
}

116 
	#SPIN_HAL_EEPROM_LOCK
 
	`•ö_lock
(&
_•ö_hÆ_ì¥om_lock
)

	)

117 
	#SPIN_HAL_EEPROM_UNLOCK
 
	`•ö_u∆ock
(&
_•ö_hÆ_ì¥om_lock
)

	)

120 
	#EEPROM_WRITE_ADDR
 0xa0

	)

121 
	#EEPROM_READ_ADDR
 0xa1

	)

122 
	#EEPROM_BYTE_SIZE
 (2048Ë

	)

124 
uöt8
 
	gg_auEïromBuf
[
EEPROM_BYTE_SIZE
];

126 
	#I2C_SPEED_SLOW_IO
 100000

	)

127 
	#EEPROM_I2C_SPEED
 
I2C_SPEED_SLOW_IO


	)

130 
	#I2C_DELAY_TIME_US
 (1000000/
EEPROM_I2C_SPEED
)

	)

131 
	#I2C_DELAY_HALF_TIME_US
 (
I2C_DELAY_TIME_US
/2)

	)

132 
	#I2C_DELAY_QUARTER_TIME_US
 (
I2C_DELAY_TIME_US
/4)

	)

133 
	#I2c_DELAY_SDA_INPUT_OUPUT_CHANGE_US
 (2)

	)

135 
	#EEPROM_RESET_CLOCK_NUM
 9

	)

137 
	#I2C_GPIO_LOW
 0

	)

138 
	#I2C_GPIO_HIGH
 1

	)

140 
	#I2C_SCL_HIGH
(
__PIN__
Ë(
	`drv_gpio_d©aBô_£t
(__PIN__, 
I2C_GPIO_HIGH
))

	)

141 
	#I2C_SCL_LOW
(
__PIN__
Ë(
	`drv_gpio_d©aBô_£t
(__PIN__, 
I2C_GPIO_LOW
))

	)

143 
	#I2C_SDA_HIGH
(
__PIN__
Ë(
	`drv_gpio_d©aBô_£t
(__PIN__, 
I2C_GPIO_HIGH
))

	)

144 
	#I2C_SDA_LOW
(
__PIN__
Ë(
	`drv_gpio_d©aBô_£t
(__PIN__, 
I2C_GPIO_LOW
))

	)

145 
	#I2C_SDA_GET
(
__PIN__
,
__PDATA__
Ë(
	`drv_gpio_d©aBô_gë
(__PIN__, (__PDATA__)))

	)

146 
	#I2C_SDA_INPUT
(
__PIN__
Ë(
	`drv_gpio_dúe˘i⁄Bô_£t
(__PIN__, 
GPIO_DIR_IN
))

	)

147 
	#I2C_SDA_OUTPUT
(
__PIN__
Ë(
	`drv_gpio_dúe˘i⁄Bô_£t
(__PIN__, 
GPIO_DIR_OUT
))

	)

150 #ifde‡
EEPROM_DEBUG_SUPPORT


151 
	#EEPROM_DEBUG
 
π_log_¥ötf


	)

153 
	#EEPROM_DEBUG
(
fmt
,
¨g
...)

	)

163 
i2c_dñay_us
(
uöt32
 
us
)

165 
udñay
(
us
);

176 
i2c_ª£t
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

178 
uöt8
 
	gtmp
;

179 
	gtmp
=0;tmp<
	gEEPROM_RESET_CLOCK_NUM
;tmp++)

181 
I2C_SCL_LOW
(
GpioS˛Id
);

182 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

183 
I2C_SCL_HIGH
(
GpioS˛Id
);

184 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

188 
I2C_SDA_HIGH
(
GpioSdaId
);

190 
i2c_°¨t
(
GpioS˛Id
, 
GpioSdaId
);

191 
i2c_°›
(
GpioS˛Id
, 
GpioSdaId
);

203 
i2c_öô
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

206 ()
drv_gpio_öô
(
GpioS˛Id
, 
GPIO_CTRLFUNC_NORMAL
, 
GPIO_DIR_OUT
, 
GPIO_INT_DISABLE
);

207 ()
drv_gpio_öô
(
GpioSdaId
, 
GPIO_CTRLFUNC_NORMAL
, 
GPIO_DIR_OUT
, 
GPIO_INT_DISABLE
);

209 
i2c_ª£t
(
GpioS˛Id
, 
GpioSdaId
);

212 
I2C_SCL_HIGH
(
GpioS˛Id
);

213 
I2C_SDA_HIGH
(
GpioSdaId
);

224 
i2c_°¨t
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

227 
I2C_SDA_LOW
(
GpioSdaId
);

228 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

229 
I2C_SCL_LOW
(
GpioS˛Id
);

230 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

242 
i2c_ªp°¨t
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

245 
I2C_SDA_HIGH
(
GpioSdaId
);

246 
I2C_SCL_HIGH
(
GpioS˛Id
);

247 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

248 
I2C_SDA_LOW
(
GpioSdaId
);

249 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

250 
I2C_SCL_LOW
(
GpioS˛Id
);

251 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

262 
i2c_°›
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

265 
I2C_SDA_LOW
(
GpioSdaId
);

266 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

267 
I2C_SCL_HIGH
(
GpioS˛Id
);

268 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

269 
I2C_SDA_HIGH
(
GpioSdaId
);

270 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

281 
i2c_SídByã
(
uöt8
 
d©a
, 
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

283 
uöt8
 
	gtmp
;

284 
	gtmp
=0;tmp<8;tmp++)

286 if(
	gd©a
 & 0x80)

288 
I2C_SDA_HIGH
(
GpioSdaId
);

292 
I2C_SDA_LOW
(
GpioSdaId
);

294 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

296 
I2C_SCL_HIGH
(
GpioS˛Id
);

297 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

298 
I2C_SCL_LOW
(
GpioS˛Id
);

299 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

300 
	gd©a
 <<= 1;

312 
ACK_STATUS
 
i2c_check_ACK
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

314 
ACK_STATUS
 
	gAckSètus
;

315 
uöt32
 
	gPöD©a
 = 0;

317 
i2c_dñay_us
(
I2c_DELAY_SDA_INPUT_OUPUT_CHANGE_US
);

318 
I2C_SDA_INPUT
(
GpioSdaId
);

319 
I2C_SCL_LOW
(
GpioS˛Id
);

320 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

321 
I2C_SCL_HIGH
(
GpioS˛Id
);

322 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

324 
I2C_SDA_GET
(
GpioSdaId
, &
PöD©a
);

325 if(
	gPöD©a
)

327 
	gAckSètus
 = 
FALSE
;

331 
	gAckSètus
 = 
TRUE
;

333 
I2C_SCL_HIGH
(
GpioS˛Id
);

334 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

336 
I2C_SCL_LOW
(
GpioS˛Id
);

337 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

338 
i2c_dñay_us
(
I2c_DELAY_SDA_INPUT_OUPUT_CHANGE_US
);

339 
I2C_SDA_OUTPUT
(
GpioSdaId
);

341  
	gAckSètus
;

350 
uöt8
 
i2c_RevByã
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

352 
uöt8
 
	gtmp
 = 0;

353 
uöt8
 
	gd©a
 = 0;

354 
uöt32
 
	gPöD©a
 = 0;

356 
i2c_dñay_us
(
I2c_DELAY_SDA_INPUT_OUPUT_CHANGE_US
);

357 
I2C_SDA_INPUT
(
GpioSdaId
);

358 
	gtmp
=0;tmp<8;tmp++)

360 
I2C_SCL_LOW
(
GpioS˛Id
);

361 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

362 
I2C_SCL_HIGH
(
GpioS˛Id
);

363 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

364 
	gd©a
 <<= 1;

367 
I2C_SDA_GET
(
GpioSdaId
, &
PöD©a
);

368 if(
	gPöD©a
)

370 
	gd©a
 |= 0x01;

374 
	gd©a
 &= 0xfe;

376 
I2C_SCL_HIGH
(
GpioS˛Id
);

377 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

378 
I2C_SCL_LOW
(
GpioS˛Id
);

379 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

381 
i2c_dñay_us
(
I2c_DELAY_SDA_INPUT_OUPUT_CHANGE_US
);

382 
I2C_SDA_OUTPUT
(
GpioSdaId
);

384  
	gd©a
;

393 
i2c_SídAck
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

395 
I2C_SDA_LOW
(
GpioSdaId
);

396 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

397 
I2C_SCL_HIGH
(
GpioS˛Id
);

398 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

399 
I2C_SCL_LOW
(
GpioS˛Id
);

400 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

411 
i2c_SídNoAck
(
gpioID
 
GpioS˛Id
, gpioID 
GpioSdaId
)

413 
I2C_SDA_HIGH
(
GpioSdaId
);

414 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

415 
I2C_SCL_HIGH
(
GpioS˛Id
);

416 
i2c_dñay_us
(
I2C_DELAY_HALF_TIME_US
);

417 
I2C_SCL_LOW
(
GpioS˛Id
);

418 
i2c_dñay_us
(
I2C_DELAY_QUARTER_TIME_US
);

431 
i2c_dñay_ms
(
uöt32
 
ms
)

433 
udñay
(
ms
*1000);

443 
uöt16
 
EEPROM_ByãWrôe
(uöt16 
addr
,
uöt8
 
d©a
, 
GPIO_PIN_E
 
gpio_s˛_pö
, GPIO_PIN_E 
gpio_sda_pö
)

445 
uöt8
 
	gDev_addr
;

446 
uöt8
 
	gAddrLow
;

447 
uöt8
 
	gAddrHigh
;

448 
gpioID
 
	gGpioS˛Id
 = 0;

449 
gpioID
 
	gGpioSdaId
 = 0;

451 if(
	gaddr
 > 
	gEEPROM_ADDR_MAX
)

453  
	gOutOfAddr
;

456 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_s˛_pö
, &
GpioS˛Id
))

458  
	gGpioPöEº‹
;

461 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_sda_pö
, &
GpioSdaId
))

463  
	gGpioPöEº‹
;

466 
	gAddrLow
 = (
uöt8
)
addr
;

467 
	gAddrHigh
 = (
uöt8
)(
addr
>>8);

469 
	gDev_addr
 = 
EEPROM_WRITE_ADDR
|(
AddrHigh
<<1);

470 
i2c_°¨t
(
GpioS˛Id
, 
GpioSdaId
);

471 
i2c_SídByã
(
Dev_addr
, 
GpioS˛Id
, 
GpioSdaId
);

472 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

474  
AckEº‹
;

476 
i2c_SídByã
(
AddrLow
, 
GpioS˛Id
, 
GpioSdaId
);

477 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

479  
AckEº‹
;

481 
i2c_SídByã
(
d©a
, 
GpioS˛Id
, 
GpioSdaId
);

482 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

484  
AckEº‹
;

486 
i2c_°›
(
GpioS˛Id
, 
GpioSdaId
);

487 
i2c_dñay_ms
(10);

488  
	gEïromOk
;

497 
uöt16
 
EEPROM_PageWrôe
(
uöt8
 
∑ge
,uöt8* 
p
,uöt8 
n
, 
GPIO_PIN_E
 
gpio_s˛_pö
, GPIO_PIN_E 
gpio_sda_pö
)

499 
uöt8
 
	gDev_addr
;

500 
uöt8
 
	gAddrLow
;

501 
uöt8
 
	gAddrHigh
;

502 
uöt16
 
	gtmp
;

503 
gpioID
 
	gGpioS˛Id
 = 0;

504 
gpioID
 
	gGpioSdaId
 = 0;

506 if(
	gNULL
 =
p
)

508  
PoötEº‹
;

511 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_s˛_pö
, &
GpioS˛Id
))

513  
	gGpioPöEº‹
;

516 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_sda_pö
, &
GpioSdaId
))

518  
	gGpioPöEº‹
;

521 if((
	gn
 > 16)|(
	g∑ge
 > 128))

523  
	gOutOfR™g
;

525 
	gtmp
 = ((
uöt16
)
∑ge
) << 4;

526 
	gAddrLow
 = (
uöt8
)
tmp
;

527 
	gAddrHigh
 = (
uöt8
)(
tmp
>>8);

528 
	gDev_addr
 = 
EEPROM_WRITE_ADDR
 | (
AddrHigh
 << 1);

529 
i2c_°¨t
(
GpioS˛Id
, 
GpioSdaId
);

530 
i2c_SídByã
(
Dev_addr
, 
GpioS˛Id
, 
GpioSdaId
);

531 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

533  
AckEº‹
;

535 
i2c_dñay_ms
(5);

536 
i2c_SídByã
(
AddrLow
, 
GpioS˛Id
, 
GpioSdaId
);

537 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

539  
AckEº‹
;

541 
	gn
--)

543 
i2c_SídByã
(*
p
++, 
GpioS˛Id
, 
GpioSdaId
);

544 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

546  
AckEº‹
;

549 
i2c_°›
(
GpioS˛Id
, 
GpioSdaId
);

550 
i2c_dñay_ms
(10);

551  
	gEïromOk
;

560 
uöt8
 
EEPROM_R™domRód
(
uöt16
 
addr
, uöt8 *
p
, 
GPIO_PIN_E
 
gpio_s˛_pö
, GPIO_PIN_E 
gpio_sda_pö
)

562 
uöt8
 
	gDev_addr
;

563 
uöt8
 
	gAddrLow
;

564 
uöt8
 
	gAddrHigh
;

565 
uöt8
 
	gtmp
;

566 
gpioID
 
	gGpioS˛Id
 = 0;

567 
gpioID
 
	gGpioSdaId
 = 0;

569 if(
	gNULL
 =
p
)

571  
PoötEº‹
;

574 if(
	gaddr
 > 
	gEEPROM_ADDR_MAX
)

576  
	gOutOfAddr
;

579 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_s˛_pö
, &
GpioS˛Id
))

581  
	gGpioPöEº‹
;

584 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_sda_pö
, &
GpioSdaId
))

586  
	gGpioPöEº‹
;

589 
	gAddrLow
 = (
uöt8
)
addr
;

590 
	gAddrHigh
 = (
uöt8
)(
addr
>>8);

592 
	gDev_addr
 = 
EEPROM_WRITE_ADDR
|(
AddrHigh
<<1);

593 
i2c_°¨t
(
GpioS˛Id
, 
GpioSdaId
);

594 
i2c_SídByã
(
Dev_addr
, 
GpioS˛Id
, 
GpioSdaId
);

595 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

597  
AckEº‹
;

599 
i2c_dñay_ms
(5);

600 
i2c_SídByã
(
AddrLow
, 
GpioS˛Id
, 
GpioSdaId
);

601 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

603  
AckEº‹
;

605 
i2c_dñay_ms
(5);

606 
i2c_°¨t
(
GpioS˛Id
, 
GpioSdaId
);

607 
	gDev_addr
 = 
EEPROM_READ_ADDR
|(
AddrHigh
<<1);

608 
i2c_SídByã
(
Dev_addr
, 
GpioS˛Id
, 
GpioSdaId
);

609 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

611  
AckEº‹
;

613 
i2c_dñay_ms
(5);

614 *
	gp
 = 
i2c_RevByã
(
GpioS˛Id
, 
GpioSdaId
);

615 
i2c_SídNoAck
(
GpioS˛Id
, 
GpioSdaId
);

616 
i2c_°›
(
GpioS˛Id
, 
GpioSdaId
);

617 
i2c_dñay_us
(100);

619  
	gEïromOk
;

630 
uöt16
 
EEPROM_SequítülRód
(uöt16 
addr
,uöt16 
n
,
uöt8
* 
p
, 
GPIO_PIN_E
 
gpio_s˛_pö
, GPIO_PIN_E 
gpio_sda_pö
)

632 
uöt8
 
	gDev_addr
 = 0;

633 
uöt8
 
	gAddrLow
 = 0;

634 
uöt8
 
	gAddrHigh
 = 0;

635 
gpioID
 
	gGpioS˛Id
 = 0;

636 
gpioID
 
	gGpioSdaId
 = 0;

637 
EEPROM_RET
 
	gªt
 = 
EïromOk
;

639 if(
	gNULL
 =
p
)

641  (
uöt16
)
PoötEº‹
;

645 if(
	gn
 > (
	gEEPROM_BYTE_SIZE
 - 
	gaddr
))

647  (
	guöt16
)
	gOutOfAddr
;

650 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_s˛_pö
, &
GpioS˛Id
))

652  (
	guöt16
)
	gGpioPöEº‹
;

655 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_sda_pö
, &
GpioSdaId
))

657  (
	guöt16
)
	gGpioPöEº‹
;

660 
EEPROM_DEBUG
("%s, %d,GpioS˛Id=0x%x, GpioSdaId=0x%x\n",
__FUNCTION__
,
__LINE__
,
GpioS˛Id
,
GpioSdaId
);

662 
	gAddrLow
 = (
uöt8
)
addr
;

663 
	gAddrHigh
 = (
uöt8
)(
addr
>>8);

665 
	gDev_addr
 = 
EEPROM_WRITE_ADDR
|((
uöt8
)(
AddrHigh
<<1));

666 
i2c_°¨t
(
GpioS˛Id
, 
GpioSdaId
);

667 
i2c_SídByã
(
Dev_addr
, 
GpioS˛Id
, 
GpioSdaId
);

668 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

670 
EEPROM_DEBUG
("i2c_check_ACK faû, %s, %d\n",
__FUNCTION__
,
__LINE__
);

671 
	gªt
 = 
AckEº‹
;

672 
	gEEPROM_SRódEnd
;

675 
i2c_SídByã
(
AddrLow
, 
GpioS˛Id
, 
GpioSdaId
);

676 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

678 
EEPROM_DEBUG
("i2c_check_ACK faû, %s, %d\n",
__FUNCTION__
,
__LINE__
);

679 
	gªt
 = 
AckEº‹
;

680 
	gEEPROM_SRódEnd
;

683 
i2c_ªp°¨t
(
GpioS˛Id
, 
GpioSdaId
);

684 
	gDev_addr
 = 
EEPROM_READ_ADDR
|((
uöt8
)(
AddrHigh
<<1));

685 
i2c_SídByã
(
Dev_addr
, 
GpioS˛Id
, 
GpioSdaId
);

686 if(
i2c_check_ACK
(
GpioS˛Id
, 
GpioSdaId
Ë=
FALSE
)

688 
EEPROM_DEBUG
("i2c_check_ACK faû, %s, %d\n",
__FUNCTION__
,
__LINE__
);

689 
	gªt
 = 
AckEº‹
;

690 
	gEEPROM_SRódEnd
;

693 
	gn
--)

695 *
	gp
 = 
i2c_RevByã
(
GpioS˛Id
, 
GpioSdaId
);

696 
	gp
++;

697 if(
	gn
)

698 
i2c_SídAck
(
GpioS˛Id
, 
GpioSdaId
);

700 
i2c_SídNoAck
(
GpioS˛Id
, 
GpioSdaId
);

703 
	gªt
 = 
EïromOk
;

705 
	gEEPROM_SRódEnd
:

707 
i2c_°›
(
GpioS˛Id
, 
GpioSdaId
);

709  
	gªt
;

718 
uöt16
 
EEPROM_Re£t
(
GPIO_PIN_E
 
gpio_s˛_pö
, GPIO_PIN_E 
gpio_sda_pö
)

720 
gpioID
 
	gGpioS˛Id
 = 0;

721 
gpioID
 
	gGpioSdaId
 = 0;

723 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_s˛_pö
, &
GpioS˛Id
))

725  
	gGpioPöEº‹
;

728 if(
	gRT_ERR_OK
 !
DrvPö_To_RtkPö
(
gpio_sda_pö
, &
GpioSdaId
))

730  
	gGpioPöEº‹
;

733 
i2c_ª£t
(
GpioS˛Id
, 
GpioSdaId
);

735  
	gEïromOk
;

754 
öt32
 
LogicP‹t_To_I2cDrvPö
(
p‹t_num_t
 
lgcP‹t
, 
GPIO_PIN_E
 *
p_gpio_s˛_pö
, GPIO_PIN_E *
p_gpio_sda_pö
)

756 if((
	gNULL
 =
p_gpio_s˛_pö
Ë|| (
NULL
 =
p_gpio_sda_pö
))

758  
RT_ERR_INPUT
;

761 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

763  
	gRT_ERR_INPUT
;

766 *
	gp_gpio_s˛_pö
 = 
g_szI2cFibîGpioPö
[
lgcP‹t
][
EEPROM_I2C_SCL_PIN
];

767 *
	gp_gpio_sda_pö
 = 
g_szI2cFibîGpioPö
[
lgcP‹t
][
EEPROM_I2C_SDA_PIN
];

769  
	gRT_ERR_OK
;

791 
DRV_RET_E
 
HÆ_I2cFibîP‹tRód
(
p‹t_num_t
 
lgcP‹t
, 
uöt16
 
usAddr
, 
uöt8
* 
pucD©a
, 
uöt32
 
ulLí
, uöt32 
ulPD©aTy≥
)

793 
GPIO_PIN_E
 
	ggpio_s˛_pö
 = 
GPIO_PIN_END
;

794 
GPIO_PIN_E
 
	ggpio_sda_pö
 = 
GPIO_PIN_END
;

796 
EEPROM_DEBUG
("%s, %d,ÜgcP‹t=%d\n",
__FUNCTION__
,
__LINE__
,
lgcP‹t
);

797 if(
	gNULL
 =
pucD©a
)

799  
DRV_ERR_PARA
;

802 if(!
IS_COMBO_PORT
(
lgcP‹t
Ë&& !
IS_FIBER_PORT
(lgcPort))

804  
	gDRV_ERR_PARA
;

808 if(
	gFALSE
 =
g_bI2cFibîInôD⁄e
)

810 
EEPROM_DEBUG
("i2¯nŸ inô, %s, %d\n",
__FUNCTION__
,
__LINE__
);

811  
	gDRV_SDK_ERR_EEPROM_I2C_NOT_INIT
;

815 if(
	gRT_ERR_OK
 !
LogicP‹t_To_I2cDrvPö
(
lgcP‹t
, &
gpio_s˛_pö
, &
gpio_sda_pö
))

817  
	gDRV_ERR_PARA
;

820 
	gSPIN_HAL_EEPROM_LOCK
;

821 
mem£t
(
g_auEïromBuf
, 0, 
EEPROM_BYTE_SIZE
);

823 if(
	gEïromOk
 !
EEPROM_SequítülRód
(
usAddr
, (
uöt16
)
ulLí
, 
g_auEïromBuf
, 
gpio_s˛_pö
, 
gpio_sda_pö
))

825 
EEPROM_DEBUG
("EEPROM_SequítülRód faû, %s, %d\n",
__FUNCTION__
,
__LINE__
);

827 if(
	gEïromOk
 !
EEPROM_Re£t
(
gpio_s˛_pö
, 
gpio_sda_pö
))

829 
EEPROM_DEBUG
("EEPROM_Re£àÁû, %s, %d\n",
__FUNCTION__
,
__LINE__
);

830 
	gSPIN_HAL_EEPROM_UNLOCK
;

831  
	gDRV_SDK_ERR_EEPROM_I2C_READ
;

835 
EEPROM_DEBUG
("EEPROM_Re£àÁû, %s, %d\n",
__FUNCTION__
,
__LINE__
);

837 if(
	gEïromOk
 !
EEPROM_SequítülRód
(
usAddr
, (
uöt16
)
ulLí
, 
g_auEïromBuf
, 
gpio_s˛_pö
, 
gpio_sda_pö
))

839 
EEPROM_DEBUG
("EEPROM_SequítülRód faû, %s, %d\n",
__FUNCTION__
,
__LINE__
);

840 
	gSPIN_HAL_EEPROM_UNLOCK
;

841  
	gDRV_SDK_ERR_EEPROM_I2C_READ
;

847 if(
	gADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

850 ()
c›y_to_u£r
(
pucD©a
, 
g_auEïromBuf
, 
ulLí
);

854 ()
mem˝y
(
pucD©a
, 
g_auEïromBuf
, 
ulLí
);

857 
	gSPIN_HAL_EEPROM_UNLOCK
;

859 #ifde‡
EEPROM_DEBUG_SUPPORT


860 
	gi
 = 0;

861 
EEPROM_DEBUG
("###################################%s, %d\n",
__FUNCTION__
,
__LINE__
);

862 
	gi
=0; i < 
	gulLí
; i++)

864 
EEPROM_DEBUG
("%2x ",*(
pucD©a
+
i
));

866 
EEPROM_DEBUG
("###################################%s, %d\n",
__FUNCTION__
,
__LINE__
);

870  
	gDRV_OK
;

888 
DRV_RET_E
 
HÆ_I2cFibîInô
(
VOID
)

890 
p‹t_num_t
 
	guiP‹t
;

891 
GPIO_PIN_E
 
	ggpio_s˛_pö
 = 
GPIO_PIN_END
;

892 
GPIO_PIN_E
 
	ggpio_sda_pö
 = 
GPIO_PIN_END
;

893 
gpioID
 
	gGpioS˛Id
 = 0;

894 
gpioID
 
	gGpioSdaId
 = 0;

896 
LgcP‹tF‹
(
uiP‹t
)

898 if(
IS_COMBO_PORT
(
uiP‹t
Ë|| 
IS_FIBER_PORT
(uiPort))

900 if(
	gRT_ERR_OK
 =
LogicP‹t_To_I2cDrvPö
(
uiP‹t
, &
gpio_s˛_pö
, &
gpio_sda_pö
))

902 (
	gVOID
)
DrvPö_To_RtkPö
(
gpio_s˛_pö
, &
GpioS˛Id
);

903 (
	gVOID
)
DrvPö_To_RtkPö
(
gpio_sda_pö
, &
GpioSdaId
);

904 
i2c_öô
(
GpioS˛Id
, 
GpioSdaId
);

909 
	gg_bI2cFibîInôD⁄e
 = 
TRUE
;

911  
	gDRV_OK
;

932 
BOOL
 
FibîInfoWrôeToDøm
(
p‹t_num_t
 
lgcP‹t
, 
uöt8
* 
pucD©a
, 
uöt32
 
ulLí
, BOOL 
bVÆidFœg
)

934 
ifödex_t
 
	guiIfödex
=
IF_INVALID_IFINDEX
;

935 
FIBERINFOFLAG_E
 
	g°Fœg
 = 
FIBER_INFO_INVALID
;

937 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

939  
	gFALSE
;

942 
	guiIfödex
 = 
IF_IFINDEX
(
IF_SUB_ETHPORT
, 
lgcP‹t
);

945 
	g°Fœg
 = 
FIBER_INFO_INVALID
;

946 if(
	gIF_OK
 !
K_IF_SëAâr
(
uiIfödex
, 
IF_FIBER_INFO_FLAG
, &
°Fœg
, (
FIBERINFOFLAG_E
)))

948  
	gFALSE
;

952 if(
	gFALSE
 =
bVÆidFœg
)

954  
TRUE
;

957 if(
	gNULL
 =
pucD©a
)

959  
FALSE
;

963 if(
	gIF_OK
 !
K_IF_SëAâr
(
uiIfödex
, 
IF_FIBER_INFO
, 
pucD©a
, 
ulLí
))

965  
	gFALSE
;

969 
	g°Fœg
 = 
FIBER_INFO_VALID
;

970 if(
	gIF_OK
 !
K_IF_SëAâr
(
uiIfödex
, 
IF_FIBER_INFO_FLAG
, &
°Fœg
, (
FIBERINFOFLAG_E
)))

972  
	gFALSE
;

975  
	gTRUE
;

995 
BOOL
 
FibîInfoUpd©e
(
uöt32
 
unô
, uöt32 
phyP‹t
, BOOL 
bVÆidFœg
)

997 
p‹t_num_t
 
	glgcP‹t
;

998 
UCHAR
 * 
	gpucTemp
 = 
NULL
;

1001 
	glgcP‹t
 = 
P‹tPhyID2Logic
(
phyP‹t
);

1003 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1005  
	gFALSE
;

1008 if(
	gFALSE
 =
bVÆidFœg
)

1010 if(
TRUE
 !
FibîInfoWrôeToDøm
(
lgcP‹t
, 
NULL
, 0, 
bVÆidFœg
))

1012  
	gFALSE
;

1017 
	gpucTemp
 = (
UCHAR
 *)
kmÆloc
(
MAX_TRANSCEIVER_CODE_LEN
,
GFP_KERNEL
);

1018 if(
	gNULL
 =
pucTemp
)

1020  
FALSE
;

1022 
mem£t
(
pucTemp
, 0, 
MAX_TRANSCEIVER_CODE_LEN
);

1026 if(
	gDRV_OK
 !
HÆ_I2cFibîP‹tRód
(
lgcP‹t
, 
I2C_START
, 
pucTemp
, 
MAX_TRANSCEIVER_CODE_LEN
, 
ADDRESS_IN_KERNEL_SPACE
))

1028 
k‰ì
(
pucTemp
);

1029  
	gFALSE
;

1033 if(
	gTRUE
 !
FibîInfoWrôeToDøm
(
lgcP‹t
, 
pucTemp
, 
MAX_TRANSCEIVER_CODE_LEN
, 
bVÆidFœg
))

1035 
k‰ì
(
pucTemp
);

1036  
	gFALSE
;

1039 
k‰ì
(
pucTemp
);

1044 ()
ComboP‹tCfgCh™ge
(
unô
, 
phyP‹t
, 
PORT_MEDIA_FIBER
);

1045  
	gTRUE
;

1048 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_gpio.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~<löux/°rög.h
>

24 
	~<πk/p‹t.h
>

25 
	~<πk/swôch.h
>

26 
	~"hÆ_comm⁄.h
"

27 
	~<comm⁄/π_îr‹.h
>

28 
	~"drv/gpio/gpio.h
"

61 
gpioID
 
gpioM≠
[
GPIO_INTERNAL_PIN_END
+1]=

63 
GPIO_ID
(
GPIO_PORT_A
, 0),

64 
GPIO_ID
(
GPIO_PORT_A
, 1),

65 
GPIO_ID
(
GPIO_PORT_A
, 2),

66 
GPIO_ID
(
GPIO_PORT_A
, 3),

67 
GPIO_ID
(
GPIO_PORT_A
, 4),

68 
GPIO_ID
(
GPIO_PORT_A
, 5),

69 
GPIO_ID
(
GPIO_PORT_A
, 6),

70 
GPIO_ID
(
GPIO_PORT_A
, 7),

71 
GPIO_ID
(
GPIO_PORT_B
, 0),

72 
GPIO_ID
(
GPIO_PORT_B
, 1),

73 
GPIO_ID
(
GPIO_PORT_B
, 2),

74 
GPIO_ID
(
GPIO_PORT_B
, 3),

75 
GPIO_ID
(
GPIO_PORT_B
, 4),

76 
GPIO_ID
(
GPIO_PORT_B
, 5),

77 
GPIO_ID
(
GPIO_PORT_B
, 6),

78 
GPIO_ID
(
GPIO_PORT_B
, 7),

79 
GPIO_ID
(
GPIO_PORT_C
, 0),

80 
GPIO_ID
(
GPIO_PORT_C
, 1),

81 
GPIO_ID
(
GPIO_PORT_C
, 2),

82 
GPIO_ID
(
GPIO_PORT_C
, 3),

83 
GPIO_ID
(
GPIO_PORT_C
, 4),

84 
GPIO_ID
(
GPIO_PORT_C
, 5),

85 
GPIO_ID
(
GPIO_PORT_C
, 6),

86 
GPIO_ID
(
GPIO_PORT_C
, 7),

87 
GPIO_ID
(
GPIO_PORT_D
, 0),

88 
GPIO_ID
(
GPIO_PORT_D
, 1),

89 
GPIO_ID
(
GPIO_PORT_D
, 2),

90 
GPIO_ID
(
GPIO_PORT_D
, 3),

91 
GPIO_ID
(
GPIO_PORT_D
, 4),

92 
GPIO_ID
(
GPIO_PORT_D
, 5),

93 
GPIO_ID
(
GPIO_PORT_D
, 6),

94 
GPIO_ID
(
GPIO_PORT_D
, 7),

95 
GPIO_ID
(
GPIO_PORT_E
, 0),

96 
GPIO_ID
(
GPIO_PORT_E
, 1),

97 
GPIO_ID
(
GPIO_PORT_E
, 2),

98 
GPIO_ID
(
GPIO_PORT_E
, 3),

99 
GPIO_ID
(
GPIO_PORT_E
, 4),

100 
GPIO_ID
(
GPIO_PORT_E
, 5),

101 
GPIO_ID
(
GPIO_PORT_E
, 6),

102 
GPIO_ID
(
GPIO_PORT_E
, 7),

103 
GPIO_ID
(
GPIO_PORT_F
, 0),

104 
GPIO_ID
(
GPIO_PORT_F
, 1),

105 
GPIO_ID
(
GPIO_PORT_F
, 2),

106 
GPIO_ID
(
GPIO_PORT_F
, 3),

107 
GPIO_ID
(
GPIO_PORT_F
, 4),

108 
GPIO_ID
(
GPIO_PORT_F
, 5),

109 
GPIO_ID
(
GPIO_PORT_F
, 6),

110 
GPIO_ID
(
GPIO_PORT_F
, 7),

111 
GPIO_ID
(
GPIO_PORT_G
, 0),

112 
GPIO_ID
(
GPIO_PORT_G
, 1),

113 
GPIO_ID
(
GPIO_PORT_G
, 2),

114 
GPIO_ID
(
GPIO_PORT_G
, 3),

115 
GPIO_ID
(
GPIO_PORT_G
, 4),

116 
GPIO_ID
(
GPIO_PORT_G
, 5),

117 
GPIO_ID
(
GPIO_PORT_G
, 6),

118 
GPIO_ID
(
GPIO_PORT_G
, 7),

122 
öt32
 
DrvPö_To_RtkPö
(
GPIO_PIN_E
 
gpio_pö
, 
gpioID
 *
pGpioId
)

124 if(
NULL
 =
pGpioId
)

126  
RT_ERR_INPUT
;

129 
gpio_pö
)

131 
GPIO_PIN_SFP_SCL
:

132 *
pGpioId
 = 
gpioM≠
[
B4
];

134 
GPIO_PIN_SFP0_SDA
:

135 *
pGpioId
 = 
gpioM≠
[
B5
];

137 
GPIO_PIN_SFP1_SDA
:

138 *
pGpioId
 = 
gpioM≠
[
B6
];

140 
GPIO_PIN_WATCHDOG
:

141 *
pGpioId
 = 
gpioM≠
[
B7
];

144  
RT_ERR_INPUT
;

147  
RT_ERR_OK
;

167 
DRV_RET_E
 
HÆ_GpioInô
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_CONTROL_E
 
gpio_˘l
, 
GPIO_DIRECTION_E
 
gpio_dú
)

169 
gpioID
 
gpioId
;

170 
drv_gpio_c⁄åﬁ_t
 
fun˘i⁄
;

171 
drv_gpio_dúe˘i⁄_t
 
dúe˘i⁄
;

172 
öt32
 
iRv
 = 
RT_ERR_OK
;

174 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

175 if(
RT_ERR_OK
 !
iRv
)

177  
Eº‹Sdk2Drv
(
iRv
);

180 
gpio_˘l
)

182 
GPIO_PIN_CTRLFUNC_NORMAL
:

183 
fun˘i⁄
 = 
GPIO_CTRLFUNC_NORMAL
;

185 
GPIO_PIN_CTRLFUNC_DEDICATE_PERIPHERAL
:

186 
fun˘i⁄
 = 
GPIO_CTRLFUNC_DEDICATE_PERIPHERAL
;

189  
DRV_ERR_PARA
;

192 
gpio_dú
)

194 
GPIO_PIN_DIR_IN
:

195 
dúe˘i⁄
 = 
GPIO_DIR_IN
;

197 
GPIO_PIN_DIR_OUT
:

198 
dúe˘i⁄
 = 
GPIO_DIR_OUT
;

201  
DRV_ERR_PARA
;

204 
iRv
 = 
drv_gpio_öô
(
gpioId
, 
fun˘i⁄
, 
dúe˘i⁄
, 
GPIO_INT_DISABLE
);

206  
Eº‹Sdk2Drv
(
iRv
);

226 
DRV_RET_E
 
HÆ_GpioD©aSë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 
gpio_d©a
)

228 
gpioID
 
gpioId
;

229 
öt32
 
iRv
 = 
RT_ERR_OK
;

231 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

232 if(
RT_ERR_OK
 !
iRv
)

234  
Eº‹Sdk2Drv
(
iRv
);

237 if(
gpio_d©a
 >
GPIO_PIN_DATA_END
)

239  
DRV_ERR_PARA
;

242 
iRv
 = 
drv_gpio_d©aBô_£t
(
gpioId
, (
uöt32
)
gpio_d©a
);

244  
Eº‹Sdk2Drv
(
iRv
);

262 
DRV_RET_E
 
HÆ_GpioD©aGë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DATA_E
 *
pgpio_d©a
)

264 
gpioID
 
gpioId
;

265 
öt32
 
iRv
 = 
RT_ERR_OK
;

267 if(
NULL
 =
pgpio_d©a
)

269  
DRV_ERR_PARA
;

272 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

273 if(
RT_ERR_OK
 !
iRv
)

275  
Eº‹Sdk2Drv
(
iRv
);

278 
iRv
 = 
drv_gpio_d©aBô_gë
(
gpioId
, (
uöt32
 *)
pgpio_d©a
);

280  
Eº‹Sdk2Drv
(
iRv
);

300 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Së
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 
gpio_dú
)

302 
gpioID
 
gpioId
;

303 
drv_gpio_dúe˘i⁄_t
 
dúe˘i⁄
;

304 
öt32
 
iRv
 = 
RT_ERR_OK
;

306 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

307 if(
RT_ERR_OK
 !
iRv
)

309  
Eº‹Sdk2Drv
(
iRv
);

312 
gpio_dú
)

314 
GPIO_PIN_DIR_IN
:

315 
dúe˘i⁄
 = 
GPIO_DIR_IN
;

317 
GPIO_PIN_DIR_OUT
:

318 
dúe˘i⁄
 = 
GPIO_DIR_OUT
;

321  
DRV_ERR_PARA
;

324 
iRv
 = 
drv_gpio_dúe˘i⁄Bô_£t
(
gpioId
, 
dúe˘i⁄
);

326  
Eº‹Sdk2Drv
(
iRv
);

344 
DRV_RET_E
 
HÆ_GpioDúe˘i⁄Gë
(
GPIO_PIN_E
 
gpio_pö
, 
GPIO_DIRECTION_E
 *
pgpio_dú
)

346 
gpioID
 
gpioId
;

347 
öt32
 
iRv
 = 
RT_ERR_OK
;

348 
drv_gpio_dúe˘i⁄_t
 
dúe˘i⁄
;

350 if(
NULL
 =
pgpio_dú
)

352  
DRV_ERR_PARA
;

355 
iRv
 = 
DrvPö_To_RtkPö
(
gpio_pö
, &
gpioId
);

356 if(
RT_ERR_OK
 !
iRv
)

358  
Eº‹Sdk2Drv
(
iRv
);

361 
iRv
 = 
drv_gpio_dúe˘i⁄Bô_gë
(
gpioId
, &
dúe˘i⁄
);

362 if(
RT_ERR_OK
 !
iRv
)

364  
Eº‹Sdk2Drv
(
iRv
);

367 
dúe˘i⁄
)

369 
GPIO_DIR_IN
:

370 *
pgpio_dú
 = 
GPIO_PIN_DIR_IN
;

372 
GPIO_DIR_OUT
:

373 *
pgpio_dú
 = 
GPIO_PIN_DIR_OUT
;

376  
DRV_ERR_UNKNOW
;

379  
DRV_OK
;

382 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_ieee8023az.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

29 
	~<löux/•ölock_ty≥s.h
>

30 
	~<löux/•ölock.h
>

31 
	~<löux/¶ab.h
>

32 
	~"πk_≠i.h
"

33 
	~"πk_≠i_ext.h
"

34 
	~"πl8367b_asicdrv_gªí.h
"

88 
DRV_RET_E
 
HÆ_SëEEEByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
)

90 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

91 
UINT32
 
unô
;

93 
p‹t_num_t
 
Õ‹t
;

94 
phyid_t
 
phyid
;

95 
INT32
 
ªtVÆ
 = 
RT_ERR_OK
;

96 
UINT32
 
uiVÆ
 = 0;

98 if(
∂p‹tMask
 =
NULL
)

100  
DRV_ERR_PARA
;

103 
IfLgcMaskSë
(
∂p‹tMask
, 
Õ‹t
)

105 
phyid
 = 
P‹tLogic2PhyID
(
Õ‹t
);

106 (
VOID
Ë
HÆ_GëP‹tLökupTy≥
(
phyid
, &
uiVÆ
);

107 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

108 
unô
 = 
CHIPID
(
phyid
);

111 if(
uiVÆ
 !
HAL_PORT_LINKUP_TYPE_FIBER_UP
)

113 if(
íabÀ
 =
TRUE
)

116 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

117 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
unô
, 
PORTID
(
phyid
), 
ENABLED
);

118 #ñi‡
deföed
(
CHIPSET_RTL8305
)

119 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
PORTID
(
phyid
), 
ENABLED
);

124 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

125 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
unô
, 
PORTID
(
phyid
), 
DISABLED
);

126 #ñi‡
deföed
(
CHIPSET_RTL8305
)

127 
ªtVÆ
 +
πk_ìe_p‹tE«bÀ_£t
(
PORTID
(
phyid
), 
DISABLED
);

133 if(
ªtVÆ
 !
RT_ERR_OK
)

135  
DRV_ERR_UNKNOW
;

138  
DRV_OK
;

159 
DRV_RET_E
 
HÆ_SëAutoPwrDwnByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
)

161 
UINT32
 
unô
;

162 
phy_pmask_t
 
°PhyMask
;

163 
πk_p‹t_t
 
µ‹t
;

164 
INT32
 
ªtVÆ
;

166 if(
∂p‹tMask
 =
NULL
)

168  
DRV_ERR_PARA
;

171 
MaskLogic2Phy
(
∂p‹tMask
, &
°PhyMask
);

172 
IfPhyMaskSë
(&
°PhyMask
, 
unô
, 
µ‹t
)

174 if(
íabÀ
 =
TRUE
)

176 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

177 
ªtVÆ
 = 
πk_p‹t_gªíE«bÀ_£t
(
unô
, 
µ‹t
, 
ENABLED
);

178 if(
ªtVÆ
 !
RT_ERR_OK
)

180  
DRV_ERR_UNKNOW
;

182 #ñi‡
deföed
(
CHIPSET_RTL8305
)

183 i‡((
ªtVÆ
 = 
πl8367b_£tAsicGªíEthî√t
(
ENABLED
))!=
RT_ERR_OK
)

184  
DRV_ERR_UNKNOW
;

185 i‡((
ªtVÆ
 = 
πl8367b_£tAsicPowîSavög
(
µ‹t
,
ENABLED
))!=
RT_ERR_OK
)

186  
DRV_ERR_UNKNOW
;

191 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

192 
ªtVÆ
 = 
πk_p‹t_gªíE«bÀ_£t
(
unô
, 
µ‹t
, 
DISABLED
);

193 if(
ªtVÆ
 !
RT_ERR_OK
)

195  
DRV_ERR_UNKNOW
;

197 #ñi‡
deföed
(
CHIPSET_RTL8305
)

198 
ªtVÆ
 = 
πl8367b_£tAsicGªíEthî√t
(
DISABLED
);

199 i‡(
ªtVÆ
!=
RT_ERR_OK
)

200  
DRV_ERR_UNKNOW
;

201 i‡((
ªtVÆ
 = 
πl8367b_£tAsicPowîSavög
(
µ‹t
,
DISABLED
))!=
RT_ERR_OK
)

202  
DRV_ERR_UNKNOW
;

207  
DRV_OK
;

212 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_init.c

18 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~<löux/°rög.h
>

26 
	~"hÆ_comm⁄.h
"

27 
	~"πk_≠i_ext.h
"

36 
πk_p‹t_∑rm_öô
();

37 
DRV_RET_E
 
HÆ_A˛RuÀInô
();

38 
DRV_RET_E
 
HÆ_SëCpuHódî
(
BOOL
 
bE«bÀ
);

62 
DRV_RET_E
 
HÆ_SwôchInô
()

64 c⁄° 
ëhî_addr_t
 
	g°SwôchPau£Mac
 = { {0x00, 0x0f, 0xe2, 0x12, 0x34, 0x56} };

67 
UINT32
 
	guiUnô
 = 0;

69 
πk_öô
(0);

71 
UnôF‹
(
uiUnô
)

73 
HÆ_SdkInôS≥cül
(
uiUnô
);

75 
HÆ_SëCPUP‹tJumbo
(1536);

76 
HÆ_SëA˛Inô
();

78 
πk_p‹t_mac_abûôy_t
 
	gmac_abi
;

79 
πk_p‹tmask_t
 
	gp‹t_mask
;

80 #ifde‡
CHIPSET_RTL8305


81 
HÆ_GpioInô
();

82 
HÆ_CpuRegAc˚ssInô
();

83 
HÆ_MdioRegi°îInô
();

84 
HÆ_CpuRegAc˚ssInô
();

85 
HÆ_MdioRegi°îInô
();

86 
HÆ_GpioInô
();

88 ()
πk_swôch_öô
();

91 
πk_p‹t_∑rm_öô
();

95 
	gp‹t_mask
.
	gbôs
[0] = 0x0f;

98 ()
πk_Àd_›î©i⁄_£t
((
πk_Àd_›î©i⁄_t
)1);

101 ()
πk_Àd_íabÀ_£t
((
πk_Àd_group_t
)1, 
p‹t_mask
);

104 ()
πk_Àd_groupC⁄fig_£t
((
πk_Àd_group_t
)1, (
πk_Àd_c⁄gig_t
)2);

110 
	gmac_abi
.
	gdu∂ex
 = 1;

112 
	gmac_abi
.
	gf‹˚mode
 = 1;

114 
	gmac_abi
.
	glök
 = 1;

116 
	gmac_abi
.
	gnway
 = 0;

118 
	gmac_abi
.
	gtx∑u£
 = 
DISABLED
;

120 
	gmac_abi
.
	grx∑u£
 = 
DISABLED
;

122 
	gmac_abi
.
	g•ìd
 = 2;

124 ()
πk_p‹t_macF‹˚LökExt0_£t
((
πk_mode_ext_t
)1, &
mac_abi
);

126 ()
πk_vœn_öô
();

131 
	gi
;

132 
πk_p‹t_phy_d©a_t
 
	guiVÆ
;

133 
πk_p‹t_phy_abûôy_t
 
	g°phybûôy
;

135 
mem£t
(&
°phybûôy
, 0, (stphybility));

136 
	g°phybûôy
.
	gAutoNegŸüti⁄
 = 1;

137 
	g°phybûôy
.
	gFuŒ_10
 = 1;

138 
	g°phybûôy
.
	gFuŒ_100
 = 1;

139 
	g°phybûôy
.
	gHÆf_10
 = 1;

140 
	g°phybûôy
.
	gHÆf_100
 = 1;

142 
	gi
 = 0; i < 4; i++)

145 ()
πk_p‹t_phyReg_gë
((
πk_p‹t_t
)
i
, (
πk_p‹t_phy_ªg_t
)4, &
uiVÆ
);

146 
	guiVÆ
 &= ~(1U << 10);

147 ()
πk_p‹t_phyReg_£t
((
πk_p‹t_t
)
i
, (
πk_p‹t_phy_ªg_t
)4, 
uiVÆ
);

150 ()
πk_ìe_p‹tE«bÀ_£t
((
πk_p‹t_t
)
i
, 
DISABLED
);

153 ()
πk_p‹t_phyAutoNegoAbûôy_£t
((
πk_p‹t_t
)
i
, &
°phybûôy
);

157 ()
πk_swôch_gªíEthî√t_£t
(
DISABLED
);

162 ()
πk_fûãr_igrA˛_öô
();

163 ()
HÆ_SëCpuHódî
(
TRUE
);

165 #i‡(0 =
SWITCH_HEADER_POSITION_BEHIND_SRC_MAC
)

166 
ªt_t
 
πl8367b_£tAsicCpuègPosôi⁄
(
πk_uöt32
 
po°i⁄
);

167 ()
πl8367b_£tAsicCpuègPosôi⁄
(1);

169 ()
HÆ_A˛RuÀInô
();

170 #i‡
deföed
(
CHIP_RTL8305MB
)

171 ()
πk_p‹t_back¥essuªE«bÀ_£t
(
RTK_WHOLE_SYSTEM
, 
ENABLED
);

172 ()
πk_£t_∑u£mac
(
°SwôchPau£Mac
);

175  
	gDRV_OK
;

182 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_mac.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~"hÆ_comm⁄.h
"

26 #ifde‡
CHIPSET_RTL8328


27 
	~<comm⁄/îr‹.h
>

28 
	~<πk/l2.h
>

29 
	~<πk/åunk.h
>

30 
	~<πk/å≠.h
>

31 
	~<comm⁄/π_ty≥.h
>

32 
	~<hÆ/comm⁄/hÆ˘æ.h
>

33 #ñi‡
deföed
(
CHIPSET_RTL8305
)

34 
	~"πk_≠i.h
"

35 
	~"πk_≠i_ext.h
"

36 
	~"πl8367b_asicdrv.h
"

40 
	~<löux/•ölock_ty≥s.h
>

41 
	~<löux/•ölock.h
>

42 
	~<asm/uac˚ss.h
>

58 
UINT32
 
_HÆ_MacCom∑ª
(
mac_addªss_t
 
addªss_1
, mac_addªss_à
addªss_2
);

68 
mac_dump_uˇ°_èb_t
 
_mac_uˇ°_íåy_dump
[
CHIP_NO
][
MAX_ARL_TABLE
];

69 
mac_dump_uˇ°_lök_t
 
_mac_uˇ°_dump_lök
[
CHIP_NO
][
MAX_ARL_TABLE
];

70 
mac_dump_uˇ°_èb_t
 
_mac_uˇ°_íåy_dump_s‹ãd
[
MAX_ARL_TABLE
];

71 
mac_dump_uˇ°_lök_t
 *
p°MacUˇ°DumpLökHód
 = 
NULL
;

72 
mac_mˇ°_t
 
_mac_mˇ°_íåy_dump
[
MAX_MULTICAST_ENTRY
];

73 
UINT32
 
ulMacMˇ°Cou¡
 = 0, 
ulMacMac°Inôed
 = 0;

75 
UINT32
 
ulMacDumpInôed
 = 0;

77 
•ölock_t
 
_•ö_hÆ_mac_lock
 = 
SPIN_LOCK_UNLOCKED
;

79 
UINT32
 
ulMacCuºítIndex
 = 0;

89 
	#DRV_MAC_DUMP_NUMBER_PER_ROLL
 2000

	)

90 
	#SPIN_HAL_MAC_LOCK
 
	`•ö_lock
(&
_•ö_hÆ_mac_lock
)

	)

91 
	#SPIN_HAL_MAC_UNLOCK
 
	`•ö_u∆ock
(&
_•ö_hÆ_mac_lock
)

	)

95 
	#düg_¥ötf
 
¥ötk


	)

97 
	#düg_¥ötf
(
fmt
, ...)

	)

102 
DUMP_LINK_INSERT_PRE
(
mac_dump_uˇ°_lök_t
 *
_dump_lök_cur
, mac_dump_uˇ°_lök_à*
_dump_lök_ö£π
)

104 if(
p°MacUˇ°DumpLökHód
 =
_dump_lök_cur
)

107 
p°MacUˇ°DumpLökHód
 = 
_dump_lök_ö£π
;

108 
_dump_lök_ö£π
->
p°MacDumpLökPª
 = 
NULL
;

109 
_dump_lök_ö£π
->
p°MacDumpLökNext
 = 
_dump_lök_cur
;

110 
_dump_lök_cur
->
p°MacDumpLökPª
 = 
_dump_lök_ö£π
;

115 
_dump_lök_ö£π
->
p°MacDumpLökPª
 = 
_dump_lök_cur
->pstMacDumpLinkPre;

116 
_dump_lök_ö£π
->
p°MacDumpLökNext
 = 
_dump_lök_cur
;

117 if(
NULL
 !
_dump_lök_cur
->
p°MacDumpLökPª
)

119 
_dump_lök_cur
->
p°MacDumpLökPª
->
p°MacDumpLökNext
 = 
_dump_lök_ö£π
;

121 
_dump_lök_cur
->
p°MacDumpLökPª
 = 
_dump_lök_ö£π
;

125 
DUMP_LINK_REMOVE
(
UINT32
 
_unô
, UINT32 
_ödex
)

127 if(
_mac_uˇ°_íåy_dump
[
_unô
][
_ödex
].
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
)

129 if(
p°MacUˇ°DumpLökHód
 !&(
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
]))

132 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökPª
->
p°MacDumpLökNext
 =

133 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
;

134 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
->
p°MacDumpLökPª
 =

135 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökPª
;

140 
p°MacUˇ°DumpLökHód
 = 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
;

141 if(
NULL
 !
p°MacUˇ°DumpLökHód
)

143 
p°MacUˇ°DumpLökHód
->
p°MacDumpLökPª
 = 
NULL
;

146 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökPª
 = 
NULL
;

147 
_mac_uˇ°_dump_lök
[
_unô
][
_ödex
].
p°MacDumpLökNext
 = 
NULL
;

148 
_mac_uˇ°_íåy_dump
[
_unô
][
_ödex
].
Êag
 = 0;

169 
DRV_RET_E
 
HÆ_SëCpuP‹tMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
)

171 
πk_≠i_ªt_t
 
πkApiRë
;

173 if(
MAC_LEARN_FWD_ENABLED
 =
ulE«bÀ
)

176 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡_£t
(
PHY_CPU_PORTID
, 
RTK_MAX_NUM_OF_LEARN_LIMIT
);

177 i‡(
RT_ERR_OK
 !
πkApiRë
)

179  
DRV_SDK_GEN_ERROR
;

182 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡A˘i⁄_£t
(
PHY_CPU_PORTID
, 
LIMIT_LEARN_CNT_ACTION_FORWARD
);

183 i‡(
RT_ERR_OK
 !
πkApiRë
)

185  
DRV_SDK_GEN_ERROR
;

188 if(
MAC_LEARN_FWD_DISABLED
 =
ulE«bÀ
)

191 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡_£t
(
PHY_CPU_PORTID
, 0);

192 i‡(
RT_ERR_OK
 !
πkApiRë
)

194  
DRV_SDK_GEN_ERROR
;

198 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡A˘i⁄_£t
(
PHY_CPU_PORTID
, 
LIMIT_LEARN_CNT_ACTION_FORWARD
);

199 i‡(
RT_ERR_OK
 !
πkApiRë
)

201  
DRV_SDK_GEN_ERROR
;

206  
DRV_ERR_PARA
;

209  
DRV_OK
;

230 
DRV_RET_E
 
HÆ_SëMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
, 
logic_pmask_t
 
°P‹tMask
)

232 
p‹t_num_t
 
Õ‹t
;

233 
πk_≠i_ªt_t
 
πkApiRë
;

235 
LgcP‹tF‹
(
Õ‹t
)

237 if(
T°LgcMaskBô
(
Õ‹t
, &
°P‹tMask
))

239 if(
MAC_LEARN_FWD_ENABLED
 =
ulE«bÀ
)

242 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡_£t
(
P‹tLogic2PhyP‹tId
(
Õ‹t
), 
RTK_MAX_NUM_OF_LEARN_LIMIT
);

243 i‡(
RT_ERR_OK
 !
πkApiRë
)

245  
DRV_SDK_GEN_ERROR
;

248 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡A˘i⁄_£t
(
P‹tLogic2PhyP‹tId
(
Õ‹t
), 
LIMIT_LEARN_CNT_ACTION_FORWARD
);

249 i‡(
RT_ERR_OK
 !
πkApiRë
)

251  
DRV_SDK_GEN_ERROR
;

254 if(
MAC_LEARN_FWD_DISABLED
 =
ulE«bÀ
)

257 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡_£t
(
P‹tLogic2PhyP‹tId
(
Õ‹t
), 0);

258 i‡(
RT_ERR_OK
 !
πkApiRë
)

260  
DRV_SDK_GEN_ERROR
;

263 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡A˘i⁄_£t
(
P‹tLogic2PhyP‹tId
(
Õ‹t
), 
LIMIT_LEARN_CNT_ACTION_DROP
);

264 i‡(
RT_ERR_OK
 !
πkApiRë
)

266  
DRV_SDK_GEN_ERROR
;

271  
DRV_ERR_PARA
;

276  
DRV_OK
;

298 
DRV_RET_E
 
HÆ_GëMacLó∫E«bÀ
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulE«bÀ
)

300 
πk_≠i_ªt_t
 
πkApiRë
;

301 
πk_mac_˙t_t
 
πkMacC¡
;

303 if(!
VALID_PORT
(
ulLgcP‹t
))

305  
DRV_ERR_PARA
;

307 if(
NULL
 =
pulE«bÀ
)

309  
DRV_ERR_PARA
;

312 
πkApiRë
 = 
πk_l2_limôLó∫ögC¡_gë
(
P‹tLogci2ChùId
(
ulLgcP‹t
), &
πkMacC¡
);

313 i‡(
RT_ERR_OK
 !
πkApiRë
)

315  
DRV_SDK_GEN_ERROR
;

318 if(0 =
πkMacC¡
)

320 *
pulE«bÀ
 = 
MAC_LEARN_FWD_DISABLED
;

324 *
pulE«bÀ
 = 
MAC_LEARN_FWD_ENABLED
;

327  
DRV_OK
;

349 
DRV_RET_E
 
HÆ_SëMacCpuMacAdd
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addªss
)

351 
πk_vœn_t
 
tdVœnId
;

352 
πk_mac_t
 
°MacAdd
;

353 
πk_l2_uˇ°Addr_t
 
°Uˇ°MacAdd
;

355 if(!
VALID_VLAN_ID
(
tdVid
))

357  
DRV_ERR_PARA
;

360 
tdVœnId
 = 
tdVid
;

361 
mem˝y
(
°MacAdd
.
o˘ë
, 
mac_addªss
, (
mac_addªss_t
));

363 
mem£t
(&
°Uˇ°MacAdd
, 0, (stUcastMacAdd));

364 
°Uˇ°MacAdd
.
cvid
 = 
tdVœnId
;

365 
°Uˇ°MacAdd
.
fid
 = 0;

366 
°Uˇ°MacAdd
.
efid
 = 0;

367 
°Uˇ°MacAdd
.
ivl
 = 
DISABLED
;

368 
°Uˇ°MacAdd
.
is_°©ic
 = 
ENABLED
;

369 
°Uˇ°MacAdd
.
p‹t
 = 
PHY_CPU_PORTID
;

372 if(
RT_ERR_OK
 !
πk_l2_addr_add
(&
°MacAdd
, &
°Uˇ°MacAdd
))

374  
DRV_ERR_UNKNOW
;

377  
DRV_OK
;

400 
DRV_RET_E
 
HÆ_SëMacFlushUˇ°Mac
(
mac_dñëe_t
 
°MacDñëe
)

402 
πk_l2_ÊushCfg_t
 
°MacFlush
;

403 
p‹t_num_t
 
Õ‹t
;

406 if(
ENABLE
 =
°MacDñëe
.
ÊushByTunk
)

408  
DRV_ERR_PARA
;

411 
mem£t
(&
°MacFlush
, 0, (
πk_l2_ÊushCfg_t
));

414 if(
ENABLE
 =
°MacDñëe
.
ÊushAŒ
)

416 if(
ENABLE
 =
°MacDñëe
.
ÊushSèticAddr
)

418 
°MacFlush
.
ÊushSèticAddr
 = 
ENABLED
;

422 
LgcP‹tF‹
(
Õ‹t
)

424 
°MacFlush
.
ÊushByP‹t
 = 
ENABLED
;

425 
°MacFlush
.
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

426 if(
RT_ERR_OK
 !
πk_l2_uˇ°Addr_Êush
(&
°MacFlush
))

428  
DRV_ERR_UNKNOW
;

432 
°MacFlush
.
ÊushByP‹t
 = 
ENABLED
;

433 
°MacFlush
.
p‹t
 = 
PHY_CPU_PORTID
;

434 if(
RT_ERR_OK
 !
πk_l2_uˇ°Addr_Êush
(&
°MacFlush
))

436  
DRV_ERR_UNKNOW
;

439  
DRV_OK
;

443 if(
ENABLE
 =
°MacDñëe
.
ÊushByVid
)

445 if(!
VALID_VLAN_ID
(
°MacDñëe
.
vid
))

447  
DRV_ERR_PARA
;

449 
°MacFlush
.
ÊushByVid
 = 
ENABLED
;

450 
°MacFlush
.
vid
 = 
°MacDñëe
.vid;

454 if(
ENABLE
 =
°MacDñëe
.
ÊushByP‹t
)

456 if(!
VALID_PORT
(
°MacDñëe
.
p‹t
))

458  
DRV_ERR_PARA
;

460 
°MacFlush
.
p‹t
 = 
P‹tLogic2PhyP‹tId
(
°MacDñëe
.port);

461 
°MacFlush
.
ÊushByP‹t
 = 
ENABLED
;

465 if(
ENABLE
 =
°MacDñëe
.
ÊushByMac
)

467 
°MacFlush
.
ÊushByMac
 = 
ENABLED
;

468 
mem˝y
(
°MacFlush
.
uˇ°Addr
.
o˘ë
, 
°MacDñëe
.
macAddr
, (
mac_addªss_t
));

472 if(
ENABLE
 =
°MacDñëe
.
ÊushSèticAddr
)

474 
°MacFlush
.
ÊushSèticAddr
 = 
ENABLED
;

477 if(
RT_ERR_OK
 !
πk_l2_uˇ°Addr_Êush
(&
°MacFlush
))

479 if(
ENABLE
 =
°MacDñëe
.
ÊushByMac
)

481  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

485  
DRV_ERR_UNKNOW
;

489  
DRV_OK
;

510 
DRV_RET_E
 
HÆ_SëMacAddUˇ°Mac
(
mac_uˇ°_t
 
°MacUˇ°
)

512 
πk_l2_uˇ°Addr_t
 
uˇ°_addr
;

513 
πk_mac_t
 
°MacAdd
;

516 if(!
VALID_VLAN_ID
(
°MacUˇ°
.
tdVid
) && (0 != stMacUcast.tdVid))

518  
DRV_ERR_PARA
;

521 if(
IS_MULTICAST
(
°MacUˇ°
.
mac_addr
))

524  
DRV_ERR_PARA
;

528 if(
°MacUˇ°
.
ucIsAggr
)

530  
DRV_ERR_PARA
;

533 
mem˝y
(
°MacAdd
.
o˘ë
, 
°MacUˇ°
.
mac_addr
, (stMacAdd));

536 
mem£t
(&
uˇ°_addr
, 0, (
πk_l2_uˇ°Addr_t
));

537 
uˇ°_addr
.
cvid
 = (
πk_uöt32
)
°MacUˇ°
.
tdVid
;

538 
uˇ°_addr
.
fid
 = 0;

539 
uˇ°_addr
.
efid
 = 0;

540 
uˇ°_addr
.
ivl
 = 
DISABLED
;

541 
mem˝y
(
uˇ°_addr
.
mac
.
o˘ë
, 
°MacUˇ°
.
mac_addr
, (
πk_mac_t
));

543 if(
°MacUˇ°
.
ucSètic
)

545 
uˇ°_addr
.
is_°©ic
 = 
ENABLED
;

549 i‡(
VALID_PORT
(
°MacUˇ°
.
lgcP‹t
))

551 
uˇ°_addr
.
p‹t
 = 
P‹tLogic2PhyP‹tId
(
°MacUˇ°
.
lgcP‹t
);

554 if(0 =
°MacUˇ°
.
lgcP‹t
)

556 
uˇ°_addr
.
da_block
 = 
ENABLED
;

560  
DRV_ERR_PARA
;

565 if(
RT_ERR_OK
 !
πk_l2_addr_add
(&
°MacAdd
, &
uˇ°_addr
))

567  
DRV_ERR_UNKNOW
;

570  
DRV_OK
;

590 
DRV_RET_E
 
HÆ_SëMacDñUˇ°Mac
(
mac_uˇ°_t
 
°MacUˇ°
)

592 
πk_mac_t
 
°MacAdd
;

593 
πk_l2_uˇ°Addr_t
 
°UniLutE¡ry
;

596 if(!
VALID_VLAN_ID
(
°MacUˇ°
.
tdVid
) && (0 != stMacUcast.tdVid))

598  
DRV_ERR_PARA
;

601 if(
IS_MULTICAST
(
°MacUˇ°
.
mac_addr
))

604  
DRV_ERR_PARA
;

607 
mem˝y
(
°MacAdd
.
o˘ë
, 
°MacUˇ°
.
mac_addr
, (stMacAdd));

608 
mem£t
(&
°UniLutE¡ry
, 0, (stUniLutEntry));

610 
°UniLutE¡ry
.
cvid
 = 
°MacUˇ°
.
tdVid
;

611 
°UniLutE¡ry
.
efid
 = 0;

612 
°UniLutE¡ry
.
fid
 = 0;

613 
°UniLutE¡ry
.
ivl
 = 
DISABLED
;

615 
mem˝y
(&(
°UniLutE¡ry
.
mac
), &
°MacAdd
, (
πk_mac_t
));

616 if(
RT_ERR_OK
 !
πk_l2_addr_dñ
(&
°MacAdd
, &
°UniLutE¡ry
))

618  
DRV_SDK_GEN_ERROR
;

621  
DRV_OK
;

624 
DRV_RET_E
 
_HÆ_MacMˇ°Add
(
mac_mˇ°_t
 *
p°MacMˇ°
)

626 
UINT32
 
i
;

628 if(
ulMacMˇ°Cou¡
 >
MAX_MULTICAST_ENTRY
)

630  
DRV_ERR_UNKNOW
;

632 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

634 if(0 =
_mac_mˇ°_íåy_dump
[
i
].
tdVid
)

636 
_mac_mˇ°_íåy_dump
[
i
].
tdVid
 = 
p°MacMˇ°
->tdVid;

637 
mem˝y
(
_mac_mˇ°_íåy_dump
[
i
].
mac_addr
, 
p°MacMˇ°
->mac_addr, (
mac_addªss_t
));

638 
mem˝y
(&(
_mac_mˇ°_íåy_dump
[
i
].
p‹t_mask
), &(
p°MacMˇ°
->p‹t_mask), (
logic_pmask_t
));

639 
ulMacMˇ°Cou¡
++;

640  
DRV_OK
;

643  
DRV_ERR_UNKNOW
;

646 
DRV_RET_E
 
_HÆ_MacMˇ°Dñ
(
mac_mˇ°_t
 *
p°MacMˇ°
)

648 
UINT32
 
i
;

650 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

652 if(
p°MacMˇ°
->
tdVid
 =
_mac_mˇ°_íåy_dump
[
i
].tdVid)

654 if(!
_HÆ_MacCom∑ª
(
p°MacMˇ°
->
mac_addr
, 
_mac_mˇ°_íåy_dump
[
i
].mac_addr))

656 
mem£t
(&
_mac_mˇ°_íåy_dump
[
i
], 0, (_mac_mcast_entry_dump[i]));

657 
ulMacMˇ°Cou¡
--;

659  
DRV_OK
;

664 
düg_¥ötf
("\nfunc:%s,löe:%d.\n",
__FUNCTION__
,
__LINE__
);

665  
DRV_ERR_UNKNOW
;

668 
DRV_RET_E
 
_HÆ_MacMˇ°Së
(
mac_mˇ°_t
 *
p°MacMˇ°
)

670 
UINT32
 
i
;

672 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

674 if(
p°MacMˇ°
->
tdVid
 =
_mac_mˇ°_íåy_dump
[
i
].tdVid)

676 if(!
_HÆ_MacCom∑ª
(
p°MacMˇ°
->
mac_addr
, 
_mac_mˇ°_íåy_dump
[
i
].mac_addr))

678 
mem˝y
(&(
_mac_mˇ°_íåy_dump
[
i
].
p‹t_mask
), &(
p°MacMˇ°
->p‹t_mask), (
logic_pmask_t
));

679  
DRV_OK
;

683  
DRV_ERR_UNKNOW
;

702 
DRV_RET_E
 
_HÆ_MacMˇ°GëByVid
(
vœn_id_t
 
tdVid
, 
mac_mˇ°_t
 *
p°MacMˇ°
)

704 
UINT32
 
i
;

706 i‡(
NULL
 =
p°MacMˇ°
)

708  
DRV_ERR_UNKNOW
;

711 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

713 if(
tdVid
 =
_mac_mˇ°_íåy_dump
[
i
].tdVid)

715 
mem˝y
(
p°MacMˇ°
, &
_mac_mˇ°_íåy_dump
[
i
], (
mac_mˇ°_t
));

716  
DRV_OK
;

719  
DRV_NULL_POINTER
;

738 
DRV_RET_E
 
_HÆ_MacMˇ°GëByMac
(
mac_addªss_t
 
tdMac
, 
mac_mˇ°_t
 *
p°MacMˇ°
)

740 
UINT32
 
i
;

742 i‡((
NULL
 =
tdMac
Ë|| (NULL =
p°MacMˇ°
))

744  
DRV_ERR_UNKNOW
;

747 
i
 = 0; i < 
MAX_MULTICAST_ENTRY
; i++)

749 if(!
_HÆ_MacCom∑ª
(
tdMac
, 
_mac_mˇ°_íåy_dump
[
i
].
mac_addr
))

751 
mem˝y
(
p°MacMˇ°
, &
_mac_mˇ°_íåy_dump
[
i
], (
mac_mˇ°_t
));

752  
DRV_OK
;

755  
DRV_ERR_UNKNOW
;

776 
DRV_RET_E
 
HÆ_SëMacAddMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

778 
UINT32
 
unô
;

779 
phy_pmask_t
 
phy_mask
;

780 
πk_≠i_ªt_t
 
πkApiRë
;

781 
πk_mac_t
 
°MacAddr
;

782 
πk_p‹tmask_t
 
°P‹tMask
;

784 
MaskLogic2Phy
(&(
°MacMˇ°
.
p‹t_mask
), &
phy_mask
);

786 
mem£t
(&
°P‹tMask
, 0, (stPortMask));

787 
mem˝y
(
°MacAddr
.
o˘ë
, 
°MacMˇ°
.
mac_addr
, 
ETHER_ADDR_LEN
);

789 
UnôF‹
(
unô
)

791 
mem˝y
(&
°P‹tMask
, &
phy_mask
.
pmask
[
unô
], (stPortMask));

793 
πkApiRë
 = 
πk_l2_mˇ°Addr_add
(&
°MacAddr
, 
ENABLED
, 
°MacMˇ°
.
tdVid
, 
°P‹tMask
);

794 i‡(
RT_ERR_OK
 !
πkApiRë
)

796  
DRV_SDK_GEN_ERROR
;

800 
SPIN_HAL_MAC_LOCK
;

801 if(!
ulMacMac°Inôed
)

803 
mem£t
(
_mac_mˇ°_íåy_dump
, 0, (_mac_mcast_entry_dump));

804 
ulMacMac°Inôed
 = 1;

807 ()
_HÆ_MacMˇ°Add
(&
°MacMˇ°
);

808 
SPIN_HAL_MAC_UNLOCK
;

810  
DRV_OK
;

831 
DRV_RET_E
 
HÆ_SëMacDñMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

833 
BOOL
 
bSameP‹t
;

834 
UINT32
 
unô
;

835 
DRV_RET_E
 
íRë
;

836 
πk_mac_t
 
°MacAddr
;

837 
πk_p‹tmask_t
 
°P‹tMask
;

838 
πk_≠i_ªt_t
 
πkApiRë
;

839 
phy_pmask_t
 
phy_mask
,
phy_mask_tmp
;

840 
mac_mˇ°_t
 
°Mˇ°MacE¡ryTmp
;

842 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

843 if((0 !
°MacMˇ°
.
tdVid
Ë&& (!
VALID_VLAN_ID
(stMacMcast.tdVid)))

845 if(!
VALID_VLAN_ID
(
°MacMˇ°
.
tdVid
))

848  
DRV_ERR_PARA
;

851 if(!
IS_MULTICAST
(
°MacMˇ°
.
mac_addr
))

854  
DRV_ERR_PARA
;

857 
mem˝y
(
°MacAddr
.
o˘ë
, 
°MacMˇ°
.
mac_addr
, (
πk_mac_t
));

859 
SPIN_HAL_MAC_LOCK
;

860 if(!
ulMacMac°Inôed
)

862 
mem£t
(
_mac_mˇ°_íåy_dump
, 0, (_mac_mcast_entry_dump));

863 
ulMacMac°Inôed
 = 1;

867 
íRë
 = 
_HÆ_MacMˇ°GëByMac
(
°MacMˇ°
.
mac_addr
, &
°Mˇ°MacE¡ryTmp
);

869 
SPIN_HAL_MAC_UNLOCK
;

871 i‡(
DRV_OK
 =
íRë
)

873 
LOGIC_PORT_MASK_CPARE
(
°MacMˇ°
.
p‹t_mask
, 
°Mˇ°MacE¡ryTmp
.p‹t_mask, 
bSameP‹t
);

875 
düg_¥ötf
("\nfunc:%s,löe:%d,msk1:0x%04X,msk2:0x%04X\n",
__FUNCTION__
,
__LINE__
,

876 
°MacMˇ°
.
p‹t_mask
.
pbôs
[0],
°Mˇ°MacE¡ryTmp
.port_mask.pbits[0]);

879 i‡(
TRUE
 =
bSameP‹t
)

881 if(
RT_ERR_OK
 !
πk_l2_mˇ°Addr_dñ
(&
°MacAddr
, 
ENABLED
, 
°MacMˇ°
.
tdVid
))

883 
düg_¥ötf
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

884  
DRV_SDK_GEN_ERROR
;

887 
düg_¥ötf
("\nfunc:%s,line:%d,vid:%d,mac:%02X%02X-%02X%02X-%02X%02X\n",

888 
__FUNCTION__
,
__LINE__
,
°Mˇ°MacE¡ryTmp
.
tdVid
,

889 
°Mˇ°MacE¡ryTmp
.
mac_addr
[0],stMcastMacEntryTmp.mac_addr[1],

890 
°Mˇ°MacE¡ryTmp
.
mac_addr
[2],stMcastMacEntryTmp.mac_addr[3],

891 
°Mˇ°MacE¡ryTmp
.
mac_addr
[4],stMcastMacEntryTmp.mac_addr[5]);

893 
SPIN_HAL_MAC_LOCK
;

894 ()
_HÆ_MacMˇ°Dñ
(&
°Mˇ°MacE¡ryTmp
);

895 
SPIN_HAL_MAC_UNLOCK
;

897  
DRV_OK
;

902 
MaskLogic2Phy
(&(
°MacMˇ°
.
p‹t_mask
), &
phy_mask
);

903 
MaskLogic2Phy
(&(
°Mˇ°MacE¡ryTmp
.
p‹t_mask
), &
phy_mask_tmp
);

905 
PhyMaskRemove
(&
phy_mask_tmp
, &
phy_mask
);

907 
mem£t
(&
°P‹tMask
, 0, (stPortMask));

908 
mem˝y
(
°MacAddr
.
o˘ë
, 
°MacMˇ°
.
mac_addr
, 
ETHER_ADDR_LEN
);

910 
UnôF‹
(
unô
)

912 
mem˝y
(&
°P‹tMask
, &
phy_mask_tmp
.
pmask
[
unô
], (stPortMask));

913 
πkApiRë
 = 
πk_l2_mˇ°Addr_add
(&
°MacAddr
, 
ENABLED
, 
°MacMˇ°
.
tdVid
, 
°P‹tMask
);

914 i‡(
RT_ERR_OK
 !
πkApiRë
)

916 
düg_¥ötf
("\nfunc:%s,löe:%d\n",
__FUNCTION__
,
__LINE__
);

917  
DRV_SDK_GEN_ERROR
;

921 
LgcMaskRemove
(&(
°Mˇ°MacE¡ryTmp
.
p‹t_mask
), &(
°MacMˇ°
.port_mask));

922 
SPIN_HAL_MAC_LOCK
;

923 ()
_HÆ_MacMˇ°Së
(&
°Mˇ°MacE¡ryTmp
);

924 
SPIN_HAL_MAC_UNLOCK
;

928  
DRV_OK
;

948 
DRV_RET_E
 
HÆ_SëMacAgeTime
(
UINT32
 
ulSec⁄d
)

950 if(
RT_ERR_OK
 !
πk_l2_agög_£t
((
πk_l2_age_time_t
)
ulSec⁄d
))

952  
DRV_ERR_PARA
;

955  
DRV_OK
;

975 
DRV_RET_E
 
HÆ_SëMacLó∫Limô
(
UINT32
 
ulLgcP‹t
, UINT32 
uLlimô
, UINT32 
ulDisF‹w¨d
)

977 
πk_p‹t_t
 
p‹t
;

978 
πk_l2_limôLó∫C¡A˘i⁄_t
 
a˘i⁄
;

979 
UINT32
 
uiMacC¡
 = 0;

981 if(!
VALID_PORT
(
ulLgcP‹t
))

983  
DRV_ERR_PARA
;

986 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
ulLgcP‹t
);

988 
uiMacC¡
 = 
uLlimô
;

990 if(
DIS_ARL_LEARN_LIMIT
 =
uiMacC¡
)

993 
uiMacC¡
 = 
RTK_MAX_NUM_OF_LEARN_LIMIT
;

996 if(
RT_ERR_OK
 !
πk_l2_limôLó∫ögC¡_£t
(
p‹t
, (
πk_mac_˙t_t
)
uiMacC¡
))

998  
DRV_ERR_UNKNOW
;

1001 if(
DISABLE
 =
ulDisF‹w¨d
)

1004 
a˘i⁄
 = 
LIMIT_LEARN_CNT_ACTION_FORWARD
;

1009 
a˘i⁄
 = 
LIMIT_LEARN_CNT_ACTION_DROP
;

1012 if(
RT_ERR_OK
 !
πk_l2_limôLó∫ögC¡A˘i⁄_£t
(
p‹t
, 
a˘i⁄
))

1014  
DRV_ERR_UNKNOW
;

1017  
DRV_OK
;

1039 
DRV_RET_E
 
HÆ_GëMacUˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
)

1041 
UINT32
 
unô
;

1042 
p‹t_num_t
 
Õ‹t
;

1043 
πk_mac_t
 
°RtkMac
;

1044 
πk_l2_uˇ°Addr_t
 
°Uˇ°Addr
;

1047 if(!
VALID_VLAN_ID
(
tdVid
) && (0 !=ÅdVid))

1049  
DRV_ERR_PARA
;

1051 if(
NULL
 =
p°MacUˇ°
)

1053  
DRV_ERR_PARA
;

1056 
mem£t
(&
°Uˇ°Addr
, 0, (stUcastAddr));

1057 
mem˝y
(
°Uˇ°Addr
.
mac
.
o˘ë
, 
mac_addr
, (
mac_addªss_t
));

1058 
°Uˇ°Addr
.
cvid
 = 
tdVid
;

1059 
°Uˇ°Addr
.
ivl
 = 
DISABLED
;

1060 
°Uˇ°Addr
.
fid
 = 0;

1061 
°Uˇ°Addr
.
efid
 = 0;

1063 
mem£t
(
p°MacUˇ°
, 0, (
mac_uˇ°_t
));

1064 
mem˝y
(
p°MacUˇ°
->
mac_addr
, mac_addr, (
mac_addªss_t
));

1065 
p°MacUˇ°
->
tdVid
 = (
vœn_id_t
)tdVid;

1067 
mem˝y
(
°RtkMac
.
o˘ë
, 
mac_addr
, 
ETHER_ADDR_LEN
);

1069 
UnôF‹
(
unô
)

1071 if(
RT_ERR_OK
 =
πk_l2_addr_gë
(&
°RtkMac
,&
°Uˇ°Addr
))

1074 if(
ENABLED
 =
°Uˇ°Addr
.
da_block
)

1077 
p°MacUˇ°
->
lgcP‹t
 = 0;

1082 
Õ‹t
 = 
P‹tPhyID2Logic
(
TOPHYID
(
unô
, 
°Uˇ°Addr
.
p‹t
));

1083 if(
INVALID_PORT
 =
Õ‹t
)

1089 
p°MacUˇ°
->
lgcP‹t
 = 
Õ‹t
;

1093 if(
ENABLED
 =
°Uˇ°Addr
.
is_°©ic
)

1095 
p°MacUˇ°
->
ucSètic
 = 
TRUE
;

1097  
DRV_OK
;

1100  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

1122 
DRV_RET_E
 
HÆ_GëMacMˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
)

1124 
UINT32
 
unô
;

1125 
phy_pmask_t
 
°PhyMask
;

1126 
UINT8
 
ucGëMac
 = 0;

1127 
πk_mac_t
 
°RtkMacAddr
;

1128 
πk_p‹tmask_t
 
°RtkP‹tMask
;

1131 if(!
VALID_VLAN_ID
(
tdVid
) && (0 !=ÅdVid))

1133  
DRV_ERR_PARA
;

1135 if(
NULL
 =
p°MacMˇ°
)

1137  
DRV_ERR_PARA
;

1140 
p°MacMˇ°
->
tdVid
 = (
vœn_id_t
)tdVid;

1141 
mem˝y
(
°RtkMacAddr
.
o˘ë
, 
mac_addr
, 
ETHER_ADDR_LEN
);

1142 
UnôF‹
(
unô
)

1144 if(
RT_ERR_OK
 =
πk_l2_mˇ°Addr_gë
(&
°RtkMacAddr
, 
ENABLED
, 
tdVid
, &
°RtkP‹tMask
))

1146 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°RtkP‹tMask
), (
πk_p‹tmask_t
));

1147 
ucGëMac
 = 1;

1151 if(
ucGëMac
)

1153 
MaskPhy2Logic
(&
°PhyMask
, &(
p°MacMˇ°
->
p‹t_mask
));

1154  
DRV_OK
;

1158  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

1181 
DRV_RET_E
 
HÆ_SëMacSëMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

1183 
BOOL
 
bSameP‹t
;

1184 
UINT32
 
unô
;

1185 
DRV_RET_E
 
íRë
;

1186 
phy_pmask_t
 
phy_mask
,
phy_mask_tmp
;

1187 
mac_mˇ°_t
 
°Mˇ°MacE¡ryTmp
;

1188 
πk_≠i_ªt_t
 
πkApiRë
;

1189 
πk_mac_t
 
°MacAddr
;

1190 
πk_p‹tmask_t
 
°P‹tMask
;

1192 
MaskLogic2Phy
(&(
°MacMˇ°
.
p‹t_mask
), &
phy_mask
);

1195 
SPIN_HAL_MAC_LOCK
;

1197 
íRë
 = 
_HÆ_MacMˇ°GëByMac
(
°MacMˇ°
.
mac_addr
, &
°Mˇ°MacE¡ryTmp
);

1198 
SPIN_HAL_MAC_UNLOCK
;

1199 i‡(
DRV_OK
 =
íRë
)

1201 
LOGIC_PORT_MASK_CPARE
(
°MacMˇ°
.
p‹t_mask
, 
°Mˇ°MacE¡ryTmp
.p‹t_mask, 
bSameP‹t
);

1203 i‡(
TRUE
 =
bSameP‹t
)

1205  
DRV_OK
;

1208 
MaskLogic2Phy
(&(
°Mˇ°MacE¡ryTmp
.
p‹t_mask
), &
phy_mask_tmp
);

1210 
PhyMaskOr
(&
phy_mask
, &
phy_mask_tmp
);

1213 
mem£t
(&
°P‹tMask
, 0, (stPortMask));

1214 
mem˝y
(
°MacAddr
.
o˘ë
, 
°MacMˇ°
.
mac_addr
, 
ETHER_ADDR_LEN
);

1216 
UnôF‹
(
unô
)

1218 
mem˝y
(&
°P‹tMask
, &
phy_mask
.
pmask
[
unô
], (stPortMask));

1219 
πkApiRë
 = 
πk_l2_mˇ°Addr_add
(&
°MacAddr
, 
ENABLED
, 
°MacMˇ°
.
tdVid
, 
°P‹tMask
);

1220 i‡(
RT_ERR_OK
 !
πkApiRë
)

1222  
DRV_SDK_GEN_ERROR
;

1226 
SPIN_HAL_MAC_LOCK
;

1227 if(!
ulMacMac°Inôed
)

1229 
mem£t
(
_mac_mˇ°_íåy_dump
, 0, (_mac_mcast_entry_dump));

1230 
ulMacMac°Inôed
 = 1;

1232 
SPIN_HAL_MAC_UNLOCK
;

1235 i‡(
DRV_OK
 =
íRë
)

1237 
SPIN_HAL_MAC_LOCK
;

1238 ()
_HÆ_MacMˇ°Së
(&
°MacMˇ°
);

1239 
SPIN_HAL_MAC_UNLOCK
;

1244 
SPIN_HAL_MAC_LOCK
;

1245 ()
_HÆ_MacMˇ°Add
(&
°MacMˇ°
);

1246 
SPIN_HAL_MAC_UNLOCK
;

1249  
DRV_OK
;

1268 
DRV_RET_E
 
HÆ_SëMacLookFaûFrd
(
logic_pmask_t
 
°P‹tMask
)

1271 
UINT32
 
unô
;

1272 
phy_pmask_t
 
°PhyMask
;

1274 
MaskLogic2Phy
(&
°P‹tMask
, &
°PhyMask
);

1275 
UnôF‹
(
unô
)

1277 if(
RT_ERR_OK
 !
πk_l2_lookupMissFloodP‹tMask_£t
(
unô
, &
CHIPNMASK
(unô, &
°PhyMask
)))

1280  
DRV_ERR_UNKNOW
;

1285  
DRV_OK
;

1288 
mem˝y
(&
°P‹tMask
, &stPortMask, (stPortMask));

1289  
DRV_ERR_PARA
;

1310 
DRV_RET_E
 
HÆ_GëMacLó∫Cou¡
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulCou¡
)

1312 if(!
VALID_PORT
(
ulLgcP‹t
))

1314  
DRV_ERR_PARA
;

1317 if(
NULL
 =
pulCou¡
)

1319  
DRV_ERR_PARA
;

1322 ()
πk_l2_À¨nögC¡_gë
(
P‹tLogic2PhyP‹tId
(
ulLgcP‹t
), 
pulCou¡
);

1324  
DRV_OK
;

1344 
UINT32
 
_HÆ_MacCom∑ª
(
mac_addªss_t
 
addªss_1
, mac_addªss_à
addªss_2
)

1346 
UINT32
 
i
;

1348 
i
 = 0; i< 
MAC_ADDR_LEN
; i++)

1350 if(
addªss_1
[
i
] !
addªss_2
[i])

1356 if(
MAC_ADDR_LEN
 =
i
)

1381 
_HÆ_In£πUˇ°MacE¡ry
(
UINT32
 
ulUnô
, UINT32 
ulIndex
)

1383 
mac_dump_uˇ°_lök_t
 *
p°DumpLökCur
;

1384 
mac_dump_uˇ°_èb_t
 *
p°DumpTabCur
;

1385 
mac_dump_uˇ°_èb_t
 *
p°MacDump
;

1386 
mac_dump_uˇ°_lök_t
 *
p°DumpLökIn£π
;

1387 
UINT32
 
i
;

1390 
p°DumpLökIn£π
 = &
_mac_uˇ°_dump_lök
[
ulUnô
][
ulIndex
];

1391 
p°MacDump
 = &
_mac_uˇ°_íåy_dump
[
ulUnô
][
ulIndex
];

1392 
p°DumpLökIn£π
->
p°MacDump
 =ÖstMacDump;

1395 if(
NULL
 !
p°MacUˇ°DumpLökHód
)

1397 
p°DumpLökCur
 = 
p°MacUˇ°DumpLökHód
;

1399 
NULL
 !
p°DumpLökCur
)

1401 
p°DumpTabCur
 = 
p°DumpLökCur
->
p°MacDump
;

1404 if(!(
p°DumpTabCur
->
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
))

1407 
p°DumpLökCur
 =Ö°DumpLökCur->
p°MacDumpLökNext
;

1412 
i
 = 0; i< 
MAC_ADDR_LEN
; i++)

1414 if(
p°DumpTabCur
->
mac_addr
[
i
] !
p°MacDump
->mac_addr[i])

1420 if(
MAC_ADDR_LEN
 =
i
)

1423 
DUMP_LINK_INSERT_PRE
(
p°DumpLökCur
, 
p°DumpLökIn£π
);

1426 if(
p°DumpTabCur
->
mac_addr
[
i
] > 
p°MacDump
->mac_addr[i])

1429 
DUMP_LINK_INSERT_PRE
(
p°DumpLökCur
, 
p°DumpLökIn£π
);

1435 if(
NULL
 =
p°DumpLökCur
->
p°MacDumpLökNext
)

1438 
p°DumpLökCur
->
p°MacDumpLökNext
 = 
p°DumpLökIn£π
;

1439 
p°DumpLökIn£π
->
p°MacDumpLökPª
 = 
p°DumpLökCur
;

1440 
p°DumpLökIn£π
->
p°MacDumpLökNext
 = 
NULL
;

1444 
p°DumpLökCur
 =Ö°DumpLökCur->
p°MacDumpLökNext
;

1451 
p°MacUˇ°DumpLökHód
 = 
p°DumpLökIn£π
;

1452 
p°MacUˇ°DumpLökHód
->
p°MacDump
 =ÖstMacDump;

1453 
p°MacUˇ°DumpLökHód
->
p°MacDumpLökPª
 = 
NULL
;

1454 
p°MacUˇ°DumpLökHód
->
p°MacDumpLökNext
 = 
NULL
;

1477 
UINT32
 
_HÆ_Uˇ°Com∑ª
(UINT32 
ulUnô
, 
πk_l2_uˇ°Addr_t
 *
p°RtkUˇ°
, 
mac_dump_uˇ°_èb_t
 *
p°DumpTab
, UINT32 *
pulRe‰eshO∆y
)

1479 
UINT8
 
ucIsAggr
 = 0, 
ucIsAggrPª
 = 0;

1480 
vœn_id_t
 
tdVid
;

1481 
UINT8
 
ucIsSètic
 = 0, 
ucIsSèticPª
 = 0;

1485 *
pulRe‰eshO∆y
 = 1;

1487 
tdVid
 = (
vœn_id_t
)
p°RtkUˇ°
->
cvid
;

1488 if(
tdVid
 !
p°DumpTab
->
vid
)

1494 if(
_HÆ_MacCom∑ª
(
p°RtkUˇ°
->
mac
.
o˘ë
, 
p°DumpTab
->
mac_addr
))

1496 *
pulRe‰eshO∆y
 = 0;

1501 if(
ENABLED
 =
p°RtkUˇ°
->
is_°©ic
)

1503 
ucIsSètic
 = 1;

1505 if(
p°DumpTab
->
Êag
 & 
DRV_MAC_DUMP_FLAG_STATIC
)

1507 
ucIsSèticPª
 = 1;

1509 if(
ucIsSètic
 !
ucIsSèticPª
)

1514 if(
p°DumpTab
->
Êag
 & 
DRV_MAC_DUMP_FLAG_AGGR
)

1516 
ucIsAggrPª
 = 1;

1518 if(
ucIsAggr
 !
ucIsAggrPª
)

1524 if(0 !
p°DumpTab
->
Õ‹t
)

1526 if(
ENABLED
 =
p°RtkUˇ°
->
da_block
)

1533 if(!
ucIsAggr
)

1535 if(
p°DumpTab
->
Õ‹t
 !
P‹tPhyID2Logic
(
TOPHYID
(
ulUnô
, 
p°RtkUˇ°
->
p‹t
)))

1561 
DRV_RET_E
 
_HAL_GëBôNum
(
UINT32
 
uiMask
, UINT32 *
pBôNum
)

1563 
UINT32
 
i
;

1564 
UINT32
 
uiBôNum
 = 8 * (
uiMask
);

1566 i‡(
NULL
 =
pBôNum
)

1568  
DRV_ERR_PARA
;

1571 *
pBôNum
 = 0xFFFFFFFF;

1572 
i
 = 0; i < 
uiBôNum
; i++)

1574 i‡(
uiMask
 & (1U << 
i
))

1576 *
pBôNum
 = 
i
;

1581  
DRV_OK
;

1609 
DRV_RET_E
 
_HÆ_DumpUCa°MacE¡ry
(
UINT32
 
ulUnô
, UINT32 
ulSèπIndex
, UINT32 
ulEndIndex
)

1611 
UINT32
 
ulIndex
;

1612 
mac_dump_uˇ°_èb_t
 *
p°MacDump
;

1613 
UINT32
 
ulRe‰eshO∆y
 = 0;

1614 
πk_l2_addr_èbÀ_t
 
°RtkMacE¡ry
;

1615 
πk_l2_uˇ°Addr_t
 
°RtkMac
;

1617 if(
ulEndIndex
 <
ulSèπIndex
)

1619  
DRV_ERR_PARA
;

1622 if(
ulSèπIndex
 >
MAX_ARL_TABLE
)

1624  
DRV_ERR_PARA
;

1627 if(
ulEndIndex
 > 
MAX_ARL_TABLE
)

1629 
ulEndIndex
 = 
MAX_ARL_TABLE
;

1632 if(
ulUnô
 >
CHIP_NO
)

1634  
DRV_ERR_PARA
;

1637 
ulIndex
 = 
ulSèπIndex
; ulIndex < 
ulEndIndex
; ulIndex++)

1639 
°RtkMacE¡ry
.
ödex
 = (
πk_öt32
)
ulIndex
;

1640 if(
RT_ERR_OK
 =
πk_l2_íåy_gë
(&
°RtkMacE¡ry
))

1643 i‡(0 =(
°RtkMacE¡ry
.
mac
.
o˘ë
[0] & 0x01))

1645 
SPIN_HAL_MAC_LOCK
;

1646 
ulRe‰eshO∆y
 = 0;

1647 
p°MacDump
 = &(
_mac_uˇ°_íåy_dump
[
ulUnô
][
ulIndex
]);

1650 if(
p°MacDump
->
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
)

1652 
mem£t
(&
°RtkMac
, 0, (stRtkMac));

1653 
mem˝y
(&
°RtkMac
.
mac
, &
°RtkMacE¡ry
.mac, (stRtkMac.mac));

1654 
°RtkMac
.
cvid
 = 
°RtkMacE¡ry
.cvid;

1655 
°RtkMac
.
ivl
 = 
°RtkMacE¡ry
.ivl;

1656 
°RtkMac
.
fid
 = 
°RtkMacE¡ry
.fid;

1657 
°RtkMac
.
is_°©ic
 = stRtkMac.is_static;

1659 i‡(0 =
°RtkMacE¡ry
.
p‹tmask
)

1661 
°RtkMac
.
da_block
 = 
ENABLED
;

1665 ()
_HAL_GëBôNum
(
°RtkMacE¡ry
.
p‹tmask
, &
°RtkMac
.
p‹t
);

1666 
°RtkMac
.
da_block
 = 
DISABLED
;

1670 if(
_HÆ_Uˇ°Com∑ª
(
ulUnô
, &
°RtkMac
, 
p°MacDump
, &
ulRe‰eshO∆y
))

1672 if(!
ulRe‰eshO∆y
)

1675 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1680 
SPIN_HAL_MAC_UNLOCK
;

1687 
p°MacDump
->
Êag
 = 0;

1691 if(0 =
°RtkMacE¡ry
.
p‹tmask
)

1694 
p°MacDump
->
Õ‹t
 = 0;

1695 
p°MacDump
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1699 
UINT32
 
uiPhyId
;

1700 ()
_HAL_GëBôNum
(
°RtkMacE¡ry
.
p‹tmask
, &
uiPhyId
);

1701 
p°MacDump
->
Õ‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

1702 if((
INVALID_PORT
 !
p°MacDump
->
Õ‹t
Ë&& (
LOGIC_CPU_PORT
 !=ÖstMacDump->lport))

1704 
p°MacDump
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1708 if(
p°MacDump
->
Êag
 & 
DRV_MAC_DUMP_FLAG_VALID
)

1710 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1711 
p°MacDump
->
Êag
 = 0;

1714 
SPIN_HAL_MAC_UNLOCK
;

1720 if(
ENABLED
 =
°RtkMacE¡ry
.
is_°©ic
)

1723 
p°MacDump
->
Êag
 |
DRV_MAC_DUMP_FLAG_STATIC
;

1726 
mem˝y
(
p°MacDump
->
mac_addr
, 
°RtkMacE¡ry
.
mac
.
o˘ë
, (
mac_addªss_t
));

1727 
p°MacDump
->
vid
 = (
vœn_id_t
)
°RtkMacE¡ry
.
cvid
;

1728 if(!
ulRe‰eshO∆y
)

1731 
_HÆ_In£πUˇ°MacE¡ry
(
ulUnô
, 
ulIndex
);

1734 
SPIN_HAL_MAC_UNLOCK
;

1740 
SPIN_HAL_MAC_LOCK
;

1741 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1742 
SPIN_HAL_MAC_UNLOCK
;

1749 
SPIN_HAL_MAC_LOCK
;

1750 
DUMP_LINK_REMOVE
(
ulUnô
, 
ulIndex
);

1751 
SPIN_HAL_MAC_UNLOCK
;

1755  
DRV_OK
;

1773 
DRV_RET_E
 
HÆ_Re‰eshUCa°
(
UINT32
 
ulI¡îvÆ
)

1775 
UINT32
 
ulUnô
;

1778 if(
ulI¡îvÆ
 > 
MAX_ARL_TABLE
)

1780 
ulI¡îvÆ
 = 
MAX_ARL_TABLE
;

1783 if(!
ulI¡îvÆ
)

1785 
ulI¡îvÆ
 = 
DRV_MAC_DUMP_NUMBER_PER_ROLL
;

1787 if(!
ulMacDumpInôed
)

1789 
mem£t
(
_mac_uˇ°_dump_lök
, 0, (_mac_ucast_dump_link));

1790 
mem£t
(
_mac_uˇ°_íåy_dump
, 0, (
_mac_uˇ°_dump_lök
));

1791 
p°MacUˇ°DumpLökHód
 = 
NULL
;

1792 
ulMacDumpInôed
 = 1;

1795 
UnôF‹
(
ulUnô
)

1797 ()
_HÆ_DumpUCa°MacE¡ry
(
ulUnô
, 
ulMacCuºítIndex
, ulMacCuºítIndex+
ulI¡îvÆ
);

1798 
ulMacCuºítIndex
 +
ulI¡îvÆ
;

1799 if(
ulMacCuºítIndex
 >
MAX_ARL_TABLE
)

1802 
ulMacCuºítIndex
 = 0;

1806  
DRV_OK
;

1828 
DRV_RET_E
 
HÆ_GëMacUˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

1830 
mac_dump_uˇ°_èb_t
 *
p°U£rUˇ°Dump
;

1831 
UINT32
 
ulIndex
, 
cou¡
 = 0, 
unô
;

1832 
mac_dump_uˇ°_èb_t
 
°Uˇ°DumpTmp
;

1833 
UINT32
 
uiPhyId
;

1834 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

1836 if(
NULL
 =
pulCou¡Out
)

1838  
DRV_ERR_PARA
;

1841 
mem£t
(&
°Uˇ°DumpTmp
, 0, (stUcastDumpTmp));

1842 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

1845 
p°U£rUˇ°Dump
 = (
mac_dump_uˇ°_èb_t
 *)
u£rPoöãr
;

1847 *
pulCou¡Out
 = 0;

1849 
UnôF‹
(
unô
)

1851 
ulIndex
 = 0; ulIndex < 
MAX_ARL_TABLE
; ulIndex++)

1854 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulIndex
;

1855 i‡(
RT_ERR_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

1858 if(0 =(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01))

1861 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

1863 
°Uˇ°DumpTmp
.
Õ‹t
 = 0;

1864 
°Uˇ°DumpTmp
.
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1868 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

1869 i‡(!
IsVÆidPhyID
(
uiPhyId
))

1871  
DRV_ERR_UNKNOW
;

1873 
°Uˇ°DumpTmp
.
Õ‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

1874 if((
INVALID_PORT
 !
°Uˇ°DumpTmp
.
Õ‹t
Ë&& (
LOGIC_CPU_PORT
 != stUcastDumpTmp.lport))

1876 
°Uˇ°DumpTmp
.
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1886 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

1888 
°Uˇ°DumpTmp
.
Êag
 |
DRV_MAC_DUMP_FLAG_STATIC
;

1891 
mem˝y
(
°Uˇ°DumpTmp
.
mac_addr
, 
°MacE¡ry
.
mac
.
o˘ë
, (
mac_addªss_t
));

1892 
°Uˇ°DumpTmp
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

1895 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

1897 ()
c›y_to_u£r
(
p°U£rUˇ°Dump
, &
°Uˇ°DumpTmp
, (
mac_dump_uˇ°_èb_t
));

1902 ()
mem˝y
(
p°U£rUˇ°Dump
, &
°Uˇ°DumpTmp
, (
mac_dump_uˇ°_èb_t
));

1905 
p°U£rUˇ°Dump
++;

1906 
cou¡
++;

1912 *
pulCou¡Out
 = 
cou¡
;

1914  
DRV_OK
;

1936 
DRV_RET_E
 
HÆ_GëMacNextVÆidUˇ°
(
UINT32
 
uiSèπIndex
, 
mac_dump_uˇ°_èb_t
* 
p°Uˇ°E¡ry
, UINT32 *
puiCuºítIndex
)

1938 
UINT32
 
ulIndex
, 
unô
;

1939 
UINT32
 
uiPhyId
;

1940 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

1942 if(
uiSèπIndex
 >
MAX_ARL_TABLE_INDEX
)

1944  
DRV_ERR_PARA
;

1947 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

1949 
ulIndex
 = 
uiSèπIndex
; ulIndex < 
MAX_ARL_TABLE_INDEX
; ulIndex++)

1951 
unô
 = 
ulIndex
/
MAX_ARL_TABLE
;

1952 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulIndex
;

1953 i‡(
RT_ERR_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

1956 if(0 =(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01))

1959 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

1962 
p°Uˇ°E¡ry
->
Õ‹t
 = 0;

1963 
p°Uˇ°E¡ry
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1967 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

1968 i‡(!
IsVÆidPhyID
(
uiPhyId
))

1970  
DRV_ERR_UNKNOW
;

1973 
p°Uˇ°E¡ry
->
Õ‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

1974 if((
INVALID_PORT
 !
p°Uˇ°E¡ry
->
Õ‹t
Ë&& (
LOGIC_CPU_PORT
 !=ÖstUcastEntry->lport))

1976 
p°Uˇ°E¡ry
->
Êag
 = 
DRV_MAC_DUMP_FLAG_VALID
;

1985 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

1988 
p°Uˇ°E¡ry
->
Êag
 |
DRV_MAC_DUMP_FLAG_STATIC
;

1991 
mem˝y
(
p°Uˇ°E¡ry
->
mac_addr
, 
°MacE¡ry
.
mac
.
o˘ë
, (
mac_addªss_t
));

1992 
p°Uˇ°E¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

1993 *
puiCuºítIndex
 = 
ulIndex
;

1995  
DRV_OK
;

2000  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

2021 
DRV_RET_E
 
HÆ_GëMacMˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

2023 
mac_mˇ°_t
 *
p°U£rMacMˇ°
;

2025 if(
NULL
 =
pulCou¡Out
)

2027  
DRV_ERR_PARA
;

2029 
p°U£rMacMˇ°
 = (
mac_mˇ°_t
 *)
u£rPoöãr
;

2031 
SPIN_HAL_MAC_LOCK
;

2032 if(
ulMacMˇ°Cou¡
)

2035 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

2038 
c›y_to_u£r
(
p°U£rMacMˇ°
, 
_mac_mˇ°_íåy_dump
, (
mac_mˇ°_t
)*
MAX_MULTICAST_ENTRY
);

2042 ()
mem˝y
(
p°U£rMacMˇ°
, 
_mac_mˇ°_íåy_dump
, (
mac_mˇ°_t
)*
MAX_MULTICAST_ENTRY
);

2046 *
pulCou¡Out
 = 
ulMacMˇ°Cou¡
;

2047 
SPIN_HAL_MAC_UNLOCK
;

2049  
DRV_OK
;

2070 
DRV_RET_E
 
HÆ_GëMacNextVÆidMˇ°
(
UINT32
 
uiSèπIndex
, 
mac_mˇ°_t
* 
p°Mˇ°E¡ry
, UINT32 *
puiCuºítIndex
)

2072 
UINT32
 
uiIndex
;

2074 if(
NULL
 =
p°Mˇ°E¡ry
)

2076  
DRV_ERR_PARA
;

2079 if(
NULL
 =
puiCuºítIndex
)

2081  
DRV_ERR_PARA
;

2084 if(
uiSèπIndex
 >
MAX_MULTICAST_ENTRY
)

2086  
DRV_ERR_PARA
;

2089 if(0 =
ulMacMˇ°Cou¡
)

2091  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

2094 
uiIndex
 = 
uiSèπIndex
; uiSèπIndex < 
MAX_MULTICAST_ENTRY
; uiStartIndex++)

2096 
SPIN_HAL_MAC_LOCK
;

2097 if(0 !
_mac_mˇ°_íåy_dump
[
uiIndex
].
tdVid
)

2099 
mem˝y
(
p°Mˇ°E¡ry
, &
_mac_mˇ°_íåy_dump
[
uiIndex
], (
mac_mˇ°_t
));

2100 *
puiCuºítIndex
 = 
uiIndex
;

2101 
SPIN_HAL_MAC_UNLOCK
;

2102  
DRV_OK
;

2104 
SPIN_HAL_MAC_UNLOCK
;

2107  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

2128 
DRV_RET_E
 
HÆ_GëMacUˇ°DumpS‹ãd
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

2130 
mac_dump_uˇ°_èb_t
 *
p°U£rUˇ°Dump
;

2131 
mac_dump_uˇ°_èb_t
 *
p°Uˇ°DumpS‹t
;

2132 
mac_dump_uˇ°_lök_t
 *
p°MacDumpLöt
;

2133 
UINT32
 
i
, 
cou¡
 = 0;

2135 if(
NULL
 =
pulCou¡Out
)

2137  
DRV_ERR_PARA
;

2141 
p°U£rUˇ°Dump
 = (
mac_dump_uˇ°_èb_t
 *)
u£rPoöãr
;

2143 
p°Uˇ°DumpS‹t
 = &(
_mac_uˇ°_íåy_dump_s‹ãd
[0]);

2144 *
pulCou¡Out
 = 0;

2146 
SPIN_HAL_MAC_LOCK
;

2147 
p°MacDumpLöt
 = 
p°MacUˇ°DumpLökHód
;

2148 
i
 = 0; i < 
MAX_ARL_TABLE
; i++)

2150 if(
NULL
 !
p°MacDumpLöt
)

2152 if(
NULL
 !
p°MacDumpLöt
->
p°MacDump
)

2154 
mem˝y
(
p°Uˇ°DumpS‹t
, 
p°MacDumpLöt
->
p°MacDump
, (
mac_dump_uˇ°_èb_t
));

2155 
cou¡
++;

2157 
p°Uˇ°DumpS‹t
++;

2159 
p°MacDumpLöt
 =Ö°MacDumpLöt->
p°MacDumpLökNext
;

2163 *
pulCou¡Out
 = 
cou¡
;

2168 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

2171 ()
c›y_to_u£r
(
p°U£rUˇ°Dump
, &(
_mac_uˇ°_íåy_dump_s‹ãd
[0]), (
mac_dump_uˇ°_èb_t
)*
cou¡
);

2175 ()
mem˝y
(
p°U£rUˇ°Dump
, &(
_mac_uˇ°_íåy_dump_s‹ãd
[0]), (
mac_dump_uˇ°_èb_t
)*
cou¡
);

2178 
SPIN_HAL_MAC_UNLOCK
;

2179 *
pulCou¡Out
 = 
cou¡
;

2181  
DRV_OK
;

2203 
DRV_RET_E
 
HÆ_SëMacTøpToCpu
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
)

2205 
p‹t_num_t
 
lgcP‹t
;

2206 
πk_≠i_ªt_t
 
tdRtkRë
;

2207 
πk_igmp_ty≥_t
 
íRtkFømeTy≥
;

2208 
πk_å≠_igmp_a˘i⁄_t
 
íRtkA˘i⁄
;

2210 if(
¥i‹ôy
 >
QOS_MAX_INTERNAL_PRIORITY
)

2212  
DRV_ERR_PARA
;

2215 
°TøpSë
.
‰ameTy≥
)

2217 
FRAME_TRAP_TYPE_RIP
:

2218 
FRAME_TRAP_TYPE_ICMP
:

2219 
FRAME_TRAP_TYPE_ICMPV6
:

2220 
FRAME_TRAP_TYPE_ARP
:

2221  
DRV_ERR_PARA
;

2222 
FRAME_TRAP_TYPE_MLD
:

2223 
íRtkFømeTy≥
 = 
IGMP_MLD
;

2225 
FRAME_TRAP_TYPE_IGMP
:

2226 
íRtkFømeTy≥
 = 
IGMP_IPV4
;

2228 
FRAME_TRAP_TYPE_BGP
:

2229 
FRAME_TRAP_TYPE_OSPFV2
:

2230 
FRAME_TRAP_TYPE_OSPFV3
:

2231 
FRAME_TRAP_TYPE_SNMP
:

2232 
FRAME_TRAP_TYPE_SSH
:

2233 
FRAME_TRAP_TYPE_FTP
:

2234 
FRAME_TRAP_TYPE_TFTP
:

2235 
FRAME_TRAP_TYPE_TELNET
:

2236 
FRAME_TRAP_TYPE_HTTP
:

2237 
FRAME_TRAP_TYPE_HTTPS
:

2238 
FRAME_TRAP_TYPE_DHCPV6
:

2239 
FRAME_TRAP_TYPE_DHCP
:

2240 
FRAME_TRAP_TYPE_DOT1X
:

2241 
FRAME_TRAP_TYPE_BPDU
:

2243  
DRV_ERR_PARA
;

2246 
°TøpSë
.
å≠A˘i⁄
)

2248 
FRAME_TRAP_ACTION_FORWARD
:

2249 
íRtkA˘i⁄
 = 
IGMP_ACTION_FORWARD
;

2251 
FRAME_TRAP_ACTION_DROP
:

2252 
íRtkA˘i⁄
 = 
IGMP_ACTION_DROP
;

2254 
FRAME_TRAP_ACTION_TRAP2CPU
:

2255 
íRtkA˘i⁄
 = 
IGMP_ACTION_TRAP2CPU
;

2257 
FRAME_TRAP_ACTION_COPY2CPU
:

2258 
FRAME_TRAP_ACTION_TO_GUESTVLAN
:

2259 
FRAME_TRAP_ACTION_FLOOD_IN_VLAN
:

2260 
FRAME_TRAP_ACTION_FLOOD_IN_ALL_PORT
:

2261 
FRAME_TRAP_ACTION_FLOOD_IN_ROUTER_PORTS
:

2263  
DRV_ERR_PARA
;

2267 if(0 =
Õ‹t
)

2269 
LgcP‹tF‹
(
lgcP‹t
)

2271 
tdRtkRë
 = 
πk_å≠_igmpCålPktA˘i⁄_£t
(
íRtkFømeTy≥
, 
íRtkA˘i⁄
);

2272 i‡(
RT_ERR_OK
 !
tdRtkRë
)

2274  
DRV_SDK_GEN_ERROR
;

2278 if(
VALID_PORT
(
Õ‹t
))

2280 
tdRtkRë
 = 
πk_å≠_igmpCålPktA˘i⁄_£t
(
íRtkFømeTy≥
, 
íRtkA˘i⁄
);

2281 i‡(
RT_ERR_OK
 !
tdRtkRë
)

2283  
DRV_SDK_GEN_ERROR
;

2288  
DRV_ERR_PARA
;

2291  
DRV_OK
;

2312 
DRV_RET_E
 
HÆ_GëMacFödC⁄Êi˘Mac
(
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
)

2315 
mem˝y
(&
°MacOp
, &stMacOp, (stMacOp));

2316 
p°MacOp
 =ÖstMacOp;

2319  
DRV_ERR_UNKNOW
;

2341 
DRV_RET_E
 
HÆ_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
)

2343 
πk_mac_t
 
πkMac
;

2344 
πk_å≠_rma_a˘i⁄_t
 
πkRamA˘i⁄
;

2346 if(
uiIndex
 > 0x2f)

2348  
DRV_ERR_PARA
;

2351 if(
¥i‹ôy
 >
QOS_MAX_INTERNAL_PRIORITY
)

2353  
DRV_ERR_PARA
;

2356 
a˘i⁄
)

2358 
PASS_TYPE_CPU_ONLY
:

2359 
πkRamA˘i⁄
 = 
RMA_ACTION_TRAP2CPU
;

2361 
PASS_TYPE_ALLPORTS
:

2362 
πkRamA˘i⁄
 = 
RMA_ACTION_FORWARD
;

2364 
PASS_TYPE_CPU_EXCLUDE
:

2365 
πkRamA˘i⁄
 = 
RMA_ACTION_FORWARD_EXCLUDE_CPU
;

2367 
PASS_TYPE_DROP
:

2368 
πkRamA˘i⁄
 = 
RMA_ACTION_DROP
;

2371  
DRV_ERR_PARA
;

2374 
πkMac
.
o˘ë
[0] = 0x01;

2375 
πkMac
.
o˘ë
[1] = 0x80;

2376 
πkMac
.
o˘ë
[2] = 0xc2;

2377 
πkMac
.
o˘ë
[3] = 0x00;

2378 
πkMac
.
o˘ë
[4] = 0x00;

2379 
πkMac
.
o˘ë
[5] = (
UINT8
)
uiIndex
;

2381 i‡(
RT_ERR_OK
 !
πk_å≠_rmaA˘i⁄_£t
(&
πkMac
, 
πkRamA˘i⁄
))

2383  
DRV_SDK_GEN_ERROR
;

2386  
DRV_OK
;

2408 
DRV_RET_E
 
HÆ_GëMacByIndex
(
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 * 
p°TmpMacE¡ry
)

2410 
UINT32
 
unô
;

2411 
UINT32
 
uiPhyId
;

2412 
phy_pmask_t
 
°PhyMask
;

2413 
πk_mac_t
 
°RtkBrodMac
;

2414 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

2416 if((
ulSèπIdx
 > 
MAX_ARL_TABLE
)

2417 || (
NULL
 =
p°TmpMacE¡ry
))

2419  
DRV_ERR_PARA
;

2422 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

2423 
mem£t
(&
°RtkBrodMac
, 0xFF, (stRtkBrodMac));

2425 
UnôF‹
(
unô
)

2427 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulSèπIdx
;

2428 i‡(
RT_ERR_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

2430 
mem£t
(
p°TmpMacE¡ry
, 0, (
mac_comm⁄_t
));

2433 if(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01)

2435 
p°TmpMacE¡ry
->
ucMacTy≥
 = 
MAC_UCAST
;

2437 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

2439 
p°TmpMacE¡ry
->
p‹t
 = 0;

2443 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

2444 i‡(!
IsVÆidPhyID
(
uiPhyId
))

2446  
DRV_ERR_UNKNOW
;

2448 
p°TmpMacE¡ry
->
p‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

2449 if((
INVALID_PORT
 =
p°TmpMacE¡ry
->
p‹t
) ||

2450 (
LOGIC_CPU_PORT
 =
p°TmpMacE¡ry
->
p‹t
))

2457 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2460 
p°TmpMacE¡ry
->
ucSètic
 = 
TRUE
;

2463 
mem˝y
(
p°TmpMacE¡ry
->
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2464 
p°TmpMacE¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2466  
DRV_OK
;

2469 i‡(
memcmp
(&
°RtkBrodMac
, &
°MacE¡ry
.
mac
, (stRtkBrodMac)))

2471 
p°TmpMacE¡ry
->
ucMacTy≥
 = 
MAC_BROAD
;

2473 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2475 
p°TmpMacE¡ry
->
ucSètic
 = 
TRUE
;

2478 
mem˝y
(
p°TmpMacE¡ry
->
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2479 
p°TmpMacE¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2482 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2483 
MaskPhy2Logic
(&
°PhyMask
, &(
p°TmpMacE¡ry
->
p‹t_mask
));

2485  
DRV_OK
;

2490 
p°TmpMacE¡ry
->
ucMacTy≥
 = 
MAC_MCAST
;

2493 
p°TmpMacE¡ry
->
ucSètic
 = 
TRUE
;

2495 
mem˝y
(
p°TmpMacE¡ry
->
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2496 
p°TmpMacE¡ry
->
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2499 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2500 
MaskPhy2Logic
(&
°PhyMask
, &(
p°TmpMacE¡ry
->
p‹t_mask
));

2502  
DRV_OK
;

2507  
DRV_ERR_UNKNOW
;

2530 
DRV_RET_E
 
HÆ_GëMacM‹eByIndex
(
UINT32
 
ulSèπIdx
, UINT32 
ulGëCou¡
, 
ULONG
 
u£rPoöãr
, UINT32* 
pulCou¡Out
, UINT32* 
pulNextIdx
, UINT32 
ulPD©aTy≥
)

2533 
mac_comm⁄_t
 * 
p°U£rMacDump
;

2534 
UINT32
 
unô
;

2535 
UINT32
 
uiPhyId
;

2536 
UINT32
 
ulIndex
, 
ulLo›C¡
 = 0, 
ulFödCou¡
 = 0;

2537 
phy_pmask_t
 
°PhyMask
;

2538 
mac_comm⁄_t
 
°TmpMacE¡ry
;

2539 
πk_mac_t
 
°RtkBrodMac
;

2540 
πk_l2_addr_èbÀ_t
 
°MacE¡ry
;

2542 if((
ulSèπIdx
 > 
MAX_ARL_TABLE
Ë|| (
ulGëCou¡
 < 1)

2543 || (
NULL
 =
pulCou¡Out
Ë|| (NULL =
pulNextIdx
))

2545  
DRV_ERR_PARA
;

2548 
mem£t
(&
°MacE¡ry
, 0, (stMacEntry));

2549 
mem£t
(&
°RtkBrodMac
, 0xFF, (stRtkBrodMac));

2551 
ulLo›C¡
 = 
ulGëCou¡
;

2553 
p°U£rMacDump
 = (
mac_comm⁄_t
 *)
u£rPoöãr
;

2554 *
pulCou¡Out
 = 0;

2555 *
pulNextIdx
 = 0;

2557 
UnôF‹
(
unô
)

2559 
ulIndex
 = 
ulSèπIdx
;

2560 (
ulFödCou¡
 < 
ulLo›C¡
Ë&& (
ulIndex
 < 
MAX_ARL_TABLE
);

2561 
ulIndex
++)

2563 
°MacE¡ry
.
ödex
 = (
πk_öt32
)
ulSèπIdx
;

2564 i‡(
RT_ERR_OK
 =
πk_l2_íåy_gë
(&
°MacE¡ry
))

2566 
mem£t
(&
°TmpMacE¡ry
, 0, (
mac_comm⁄_t
));

2569 if(
°MacE¡ry
.
mac
.
o˘ë
[0] & 0x01)

2571 
°TmpMacE¡ry
.
ucMacTy≥
 = 
MAC_UCAST
;

2573 if(
ENABLED
 =
°MacE¡ry
.
ß_block
)

2575 
°TmpMacE¡ry
.
p‹t
 = 0;

2579 ()
_HAL_GëBôNum
(
°MacE¡ry
.
p‹tmask
, &
uiPhyId
);

2580 i‡(!
IsVÆidPhyID
(
uiPhyId
))

2582  
DRV_ERR_UNKNOW
;

2584 
°TmpMacE¡ry
.
p‹t
 = 
P‹tPhyID2Logic
(
uiPhyId
);

2585 if((
INVALID_PORT
 =
°TmpMacE¡ry
.
p‹t
)

2586 || (
LOGIC_CPU_PORT
 =
°TmpMacE¡ry
.
p‹t
))

2593 if(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2596 
°TmpMacE¡ry
.
ucSètic
 = 
TRUE
;

2599 
mem˝y
(
°TmpMacE¡ry
.
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2600 
°TmpMacE¡ry
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2603 
°TmpMacE¡ry
.
ulL2Idx
 = 
ulIndex
;

2606 i‡(!
memcmp
(&
°RtkBrodMac
, &
°MacE¡ry
.
mac
, (stRtkBrodMac)))

2608 
°TmpMacE¡ry
.
ucMacTy≥
 = 
MAC_BROAD
;

2610 i‡(
ENABLED
 =
°MacE¡ry
.
is_°©ic
)

2612 
°TmpMacE¡ry
.
ucSètic
 = 
TRUE
;

2615 
mem˝y
(
°TmpMacE¡ry
.
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2616 
°TmpMacE¡ry
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2619 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2620 
MaskPhy2Logic
(&
°PhyMask
, &(
°TmpMacE¡ry
.
p‹t_mask
));

2623 
°TmpMacE¡ry
.
ulL2Idx
 = 
ulIndex
;

2628 
°TmpMacE¡ry
.
ucMacTy≥
 = 
MAC_MCAST
;

2631 
°TmpMacE¡ry
.
ucSètic
 = 
TRUE
;

2633 
mem˝y
(
°TmpMacE¡ry
.
mac
, 
°MacE¡ry
.mac.
o˘ë
, (
mac_addªss_t
));

2634 
°TmpMacE¡ry
.
vid
 = (
UINT16
)
°MacE¡ry
.
cvid
;

2637 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &(
°MacE¡ry
.
p‹tmask
), (
πk_p‹tmask_t
));

2638 
MaskPhy2Logic
(&
°PhyMask
, &(
°TmpMacE¡ry
.
p‹t_mask
));

2641 
°TmpMacE¡ry
.
ulL2Idx
 = 
ulIndex
;

2645 if(
ADDRESS_IN_USER_SPACE
 =
ulPD©aTy≥
)

2647 ()
c›y_to_u£r
(
p°U£rMacDump
, &
°TmpMacE¡ry
, (
mac_comm⁄_t
));

2652 ()
mem˝y
(
p°U£rMacDump
, &
°TmpMacE¡ry
, (
mac_comm⁄_t
));

2655 
p°U£rMacDump
++;

2656 
ulFödCou¡
++;

2661 *
pulCou¡Out
 = 
ulFödCou¡
;

2662 *
pulNextIdx
 = 
ulIndex
;

2664  
DRV_OK
;

2684 
DRV_RET_E
 
HÆ_GëMacExa˘
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 *
p°TmpMac
)

2686 
UINT32
 
unô
;

2687 
p‹t_num_t
 
Õ‹t
;

2688 
phy_pmask_t
 
°PhyMask
;

2689 
πk_mac_t
 
°RtkMac
;

2690 
πk_p‹tmask_t
 
°RtkP‹tMask
;

2691 
πk_l2_uˇ°Addr_t
 
°Uˇ°Addr
;

2693 if(!
VALID_VLAN_ID
(
tdVid
))

2695  
DRV_ERR_PARA
;

2697 if(
NULL
 =
p°TmpMac
)

2699  
DRV_ERR_PARA
;

2703 
mem£t
(
p°TmpMac
, 0, (
mac_comm⁄_t
));

2704 
mem˝y
(
p°TmpMac
->
mac
, 
mac_addr
, (
mac_addªss_t
));

2705 
p°TmpMac
->
vid
 = (
vœn_id_t
)
tdVid
;

2708 
mem£t
(&
°Uˇ°Addr
, 0, (stUcastAddr));

2709 
mem˝y
(
°Uˇ°Addr
.
mac
.
o˘ë
, 
mac_addr
, (
mac_addªss_t
));

2710 
°Uˇ°Addr
.
cvid
 = 
tdVid
;

2711 
°Uˇ°Addr
.
ivl
 = 
DISABLED
;

2712 
°Uˇ°Addr
.
fid
 = 0;

2713 
°Uˇ°Addr
.
efid
 = 0;

2715 
mem˝y
(
°RtkMac
.
o˘ë
, 
mac_addr
, 
ETHER_ADDR_LEN
);

2717 
UnôF‹
(
unô
)

2719 if(
RT_ERR_OK
 =
πk_l2_addr_gë
(&
°RtkMac
, &
°Uˇ°Addr
))

2722 if((
ENABLED
 =
°Uˇ°Addr
.
ß_block
) ||

2723 (
ENABLED
 =
°Uˇ°Addr
.
da_block
))

2725 
p°TmpMac
->
p‹t
 = 0;

2730 
Õ‹t
 = 
P‹tPhyID2Logic
(
TOPHYID
(
unô
, 
°Uˇ°Addr
.
p‹t
));

2731 if(
INVALID_PORT
 =
Õ‹t
)

2737 
p°TmpMac
->
p‹t
 = 
Õ‹t
;

2741 if(
ENABLED
 =
°Uˇ°Addr
.
is_°©ic
)

2743 
p°TmpMac
->
ucSètic
 = 
TRUE
;

2746  
DRV_OK
;

2751 
mem£t
(&
°RtkP‹tMask
, 0, (stRtkPortMask));

2753 
UnôF‹
(
unô
)

2756 if(
RT_ERR_OK
 =
πk_l2_mˇ°Addr_gë
(&
°RtkMac
, 
ENABLED
, 
tdVid
, &
°RtkP‹tMask
))

2758 
mem˝y
(&(
°PhyMask
.
pmask
[
unô
]), &
°RtkP‹tMask
, (
πk_p‹tmask_t
));

2759 
MaskPhy2Logic
(&
°PhyMask
, &(
p°TmpMac
->
p‹t_mask
));

2760 
p°TmpMac
->
ucSètic
 = 
TRUE
;

2761  
DRV_OK
;

2765  
DRV_ERR_MAC_ADDR_NOT_FOUND
;

2783 
DRV_RET_E
 
HÆ_GëMˇ°Cou¡
(
UINT32
 * 
pulMˇ°Cou¡
)

2785 
SPIN_HAL_MAC_LOCK
;

2786 *
pulMˇ°Cou¡
 = 
ulMacMˇ°Cou¡
;

2787 
SPIN_HAL_MAC_UNLOCK
;

2789  
DRV_OK
;

2809 
DRV_RET_E
 
HÆ_SëMˇ°LookupMissDr›
(
UINT32
 
ulE«bÀ
)

2811 
UINT32
 
unô
;

2812 
UINT32
 
uiLP‹t
;

2813 
UINT32
 
uiPP‹t
;

2814 
πk_å≠_mˇ°_a˘i⁄_t
 
°A˘i⁄
;

2816 if((
DISABLE
 !
ulE«bÀ
Ë&& (
ENABLE
 != ulEnable))

2818  
DRV_ERR_PARA
;

2821 if(
DISABLE
 =
ulE«bÀ
)

2824 
°A˘i⁄
 = 
MCAST_ACTION_FORWARD
;

2830 
°A˘i⁄
 = 
MCAST_ACTION_DROP
;

2833 
UnôF‹
(
unô
)

2835 
LgcP‹tF‹
(
uiLP‹t
)

2837 
uiPP‹t
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

2838 i‡(
INVALID_PORT
 =
uiPP‹t
)

2843 if(
RT_ERR_OK
 !
πk_å≠_unknownMˇ°PktA˘i⁄_£t
(
uiPP‹t
, 
MCAST_L2
, 
°A˘i⁄
))

2845  
DRV_SDK_GEN_ERROR
;

2851 if(
RT_ERR_OK
 !
πk_å≠_unknownMˇ°PktA˘i⁄_£t
(
SWITCH_UPLINK_PHY_PORT
, 
MCAST_L2
, 
°A˘i⁄
))

2853  
DRV_SDK_GEN_ERROR
;

2855  
DRV_OK
;

2874 
DRV_RET_E
 
HÆ_SëUnKnowIp4Mˇ°A˘
(
MCAST_UNKNOW_ACT_E
 
íA˘Mode
)

2876 
UINT32
 
unô
;

2877 
UINT32
 
uiLP‹t
;

2878 
UINT32
 
uiPP‹t
;

2879 
πk_å≠_mˇ°_a˘i⁄_t
 
°A˘i⁄
;

2881 if(
MCAST_ACT_END
 <
íA˘Mode
)

2883  
DRV_ERR_PARA
;

2886 
íA˘Mode
)

2888 
MCAST_ACT_FORWARD
:

2889 
°A˘i⁄
 = 
MCAST_ACTION_FORWARD
;

2891 
MCAST_ACT_DROP
:

2892 
°A˘i⁄
 = 
MCAST_ACTION_DROP
;

2894 
MCAST_ACT_TRAP2CPU
:

2895 
°A˘i⁄
 = 
MCAST_ACTION_TRAP2CPU
;

2897 
MCAST_ACT_ROUTER_PORT
:

2898 
°A˘i⁄
 = 
MCAST_ACTION_ROUTER_PORT
;

2901  
DRV_ERR_PARA
;

2904 
UnôF‹
(
unô
)

2906 
LgcP‹tF‹
(
uiLP‹t
)

2908 
uiPP‹t
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

2909 i‡(
INVALID_PORT
 =
uiPP‹t
)

2914 if(
RT_ERR_OK
 !
πk_å≠_unknownMˇ°PktA˘i⁄_£t
(
uiPP‹t
, 
MCAST_IPV4
, 
°A˘i⁄
))

2916  
DRV_SDK_GEN_ERROR
;

2922 if(
RT_ERR_OK
 !
πk_å≠_unknownMˇ°PktA˘i⁄_£t
(
SWITCH_UPLINK_PHY_PORT
, 
MCAST_IPV4
, 
°A˘i⁄
))

2924  
DRV_SDK_GEN_ERROR
;

2926  
DRV_OK
;

2947 
DRV_RET_E
 
HÆ_SëIgmpPktA˘i⁄
(
UINT32
 
ulA˘i⁄
)

2949 
UINT32
 
unô
;

2950 
UINT32
 
uiLP‹t
;

2951 
UINT32
 
uiPP‹t
;

2952 
πk_å≠_igmp_a˘i⁄_t
 
°A˘i⁄
;

2954 
ulA˘i⁄
)

2956 
PASS_TYPE_CPU_ONLY
:

2957 
°A˘i⁄
 = 
IGMP_ACTION_TRAP2CPU
;

2959 
PASS_TYPE_ALLPORTS
:

2960 
°A˘i⁄
 = 
IGMP_ACTION_FORWARD
;

2962 
PASS_TYPE_DROP
:

2963 
°A˘i⁄
 = 
IGMP_ACTION_DROP
;

2965 
PASS_TYPE_CPU_EXCLUDE
:

2966 
°A˘i⁄
 = 
IGMP_ACTION_FORWARD_EXCLUDE_CPU
;

2969  
DRV_ERR_PARA
;

2972 
UnôF‹
(
unô
)

2974 
LgcP‹tF‹
(
uiLP‹t
)

2976 
uiPP‹t
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

2977 i‡(
INVALID_PORT
 =
uiPP‹t
)

2982 if(
RT_ERR_OK
 !
πk_igmp_¥Ÿocﬁ_£t
(
uiPP‹t
, 
PROTOCOL_IGMPv1
, 
°A˘i⁄
) ||

2983 
RT_ERR_OK
 !
πk_igmp_¥Ÿocﬁ_£t
(
uiPP‹t
, 
PROTOCOL_IGMPv2
, 
°A˘i⁄
))

2985  
DRV_SDK_GEN_ERROR
;

2987 
düg_¥ötf
("HÆ_SëIgmpPktA˘i⁄Ö‹à%dá˘i⁄ %d\n", 
uiPP‹t
, 
°A˘i⁄
);

2990  
DRV_OK
;

2994 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_mirror.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

28 
	~<löux/•ölock_ty≥s.h
>

29 
	~<löux/•ölock.h
>

30 
	~<löux/¶ab.h
>

31 
	~"πk_≠i.h
"

32 
	~"πk_≠i_ext.h
"

57 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

59 
p‹t_num_t
 
de°P‹t
;

60 
UINT32
 
uiCou¡
;

61 }
	tmúr‹A˛GΩ_t
;

63 
múr‹A˛GΩ_t
 
múr‹A˛GΩ
[
MAX_ACL_ACTION_MIRROR
];

94 
DRV_RET_E
 
HÆ_SëMúr‹Group
(
p‹t_num_t
 
múr‹De°P‹t
, 
logic_pmask_t
 
ögªssMask
,Üogic_pmask_à
egªssMask
)

96 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

97 
πk_múr‹_íåy_t
 
°Múr‹E¡ry
;

99 
phy_pmask_t
 
°IngªssPhyMask
, 
°EgªssPhyMask
;

100 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

101 
UINT32
 
unô
;

104 
°Múr‹E¡ry
.
¸oss_vœn
 = 
ENABLED
;

105 
°Múr‹E¡ry
.
ÊowBa£dO∆y
 = 
DISABLED
;

107 
°Múr‹E¡ry
.
múr‹_badPkt
 = 
ENABLED
;

109 
°Múr‹E¡ry
.
múr‹_bˇ°
 = 
ENABLED
;

110 
°Múr‹E¡ry
.
múr‹_goodPkt
 = 
ENABLED
;

111 
°Múr‹E¡ry
.
múr‹_mˇ°
 = 
ENABLED
;

112 
°Múr‹E¡ry
.
múr‹_‹göÆPkt
 = 
ENABLED
;

113 
°Múr‹E¡ry
.
múr‹_uˇ°
 = 
ENABLED
;

114 
°Múr‹E¡ry
.
›î_of_igr_™d_egr_p‹ts
 = 0;

115 #ifde‡
CHIPSET_RTL8328


116 
°Múr‹E¡ry
.
múr‹ög_p‹t
 = 0x1F;

118 
°Múr‹E¡ry
.
múr‹ög_p‹t
 = 0xFF;

120 
mem£t
(&(
°Múr‹E¡ry
.
múr‹ed_igrP‹ts
), 0, (
πk_p‹tmask_t
));

121 
mem£t
(&(
°Múr‹E¡ry
.
múr‹ed_egrP‹ts
), 0, (
πk_p‹tmask_t
));

123 if(0xf‡=
múr‹De°P‹t
)

126 
UnôF‹
(
unô
)

129 if(
RT_ERR_OK
 !
πk_múr‹_group_£t
(
unô
, 0, &
°Múr‹E¡ry
))

131  
DRV_ERR_UNKNOW
;

135  
DRV_OK
;

139 if(!
VALID_PORT
(
múr‹De°P‹t
))

141  
DRV_ERR_PARA
;

145 
°Múr‹E¡ry
.
múr‹ög_p‹t
 = 
P‹tLogic2PhyP‹tId
(
múr‹De°P‹t
);

146 
MaskLogic2Phy
(&
ögªssMask
, &
°IngªssPhyMask
);

147 
MaskLogic2Phy
(&
egªssMask
, &
°EgªssPhyMask
);

149 
UnôF‹
(
unô
)

152 
mem˝y
(&(
°Múr‹E¡ry
.
múr‹ed_igrP‹ts
), &
CHIPNMASK
(
unô
, &
°IngªssPhyMask
), (
πk_p‹tmask_t
));

153 
mem˝y
(&(
°Múr‹E¡ry
.
múr‹ed_egrP‹ts
), &
CHIPNMASK
(
unô
, &
°EgªssPhyMask
), (
πk_p‹tmask_t
));

154 if(
RT_ERR_OK
 !
πk_múr‹_group_£t
(
unô
, 0, &
°Múr‹E¡ry
))

156  
DRV_ERR_UNKNOW
;

160 #ifde‡
CHIPSET_RTL8305


161 
mem£t
(&
°IngªssPhyMask
, 0, (stIngressPhyMask));

162 
mem£t
(&
°EgªssPhyMask
, 0, (stEgressPhyMask));

163 if(0xf‡=
múr‹De°P‹t
)

165 
p‹t_num_t
 
lP‹tNo
 = 0;

167 
LgcP‹tF‹
(
lP‹tNo
)

169 if(
RT_ERR_OK
 !
πk_múr‹_p‹tBa£d_£t
(
P‹tLogic2PhyP‹tId
(
lP‹tNo
), &
CHIPNMASK
(0, &
°IngªssPhyMask
),&CHIPNMASK(0, &
°EgªssPhyMask
)))

171  
DRV_ERR_UNKNOW
;

175  
DRV_OK
;

179 if(!
VALID_PORT
(
múr‹De°P‹t
))

181  
DRV_ERR_PARA
;

183 
MaskLogic2Phy
(&
ögªssMask
, &
°IngªssPhyMask
);

184 
MaskLogic2Phy
(&
egªssMask
, &
°EgªssPhyMask
);

185 if(
RT_ERR_OK
!=
πk_múr‹_p‹tBa£d_£t
(
P‹tLogic2PhyP‹tId
(
múr‹De°P‹t
),&
CHIPNMASK
(0, &
°IngªssPhyMask
),&CHIPNMASK(0, &
°EgªssPhyMask
)))

187  
DRV_ERR_UNKNOW
;

190  
DRV_OK
;

193 
HÆ_InôMúr‹A˛GΩ
()

195 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

196 
mem£t
(
múr‹A˛GΩ
, 0, (mirrorAclGrp));

202 
DRV_RET_E
 
HÆ_SëMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
, 
UINT32
 *
puiMúr‹GΩId
)

204 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

205 
UINT32
 
i
, 
ödex
 = 
MAX_ACL_ACTION_MIRROR
;

206 
πk_múr‹_íåy_t
 
°Múr‹E¡ry
;

208 if(!
IsVÆidLgcP‹t
(
múr‹D°P‹t
))

210  
DRV_ERR_PARA
;

213 if(
puiMúr‹GΩId
 =
NULL
)

215  
DRV_ERR_PARA
;

217 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

218 
i
 = 0; i < 
MAX_ACL_ACTION_MIRROR
; i++)

220 if(
múr‹A˛GΩ
[
i
].
de°P‹t
 == 0)

222 
ödex
 = 
i
;

224 if(
múr‹A˛GΩ
[
i
].
de°P‹t
 =
múr‹D°P‹t
)

227 *
puiMúr‹GΩId
 = 
i
+1;

228 
múr‹A˛GΩ
[
i
].
uiCou¡
++;

229  
DRV_OK
;

233 if(
ödex
 =
MAX_ACL_ACTION_MIRROR
)

235  
DRV_ERR_MIR_FULL
;

239 
múr‹A˛GΩ
[
ödex
].
de°P‹t
 = 
múr‹D°P‹t
;

243 
°Múr‹E¡ry
.
¸oss_vœn
 = 
ENABLED
;

244 
°Múr‹E¡ry
.
ÊowBa£dO∆y
 = 
ENABLED
;

246 
°Múr‹E¡ry
.
múr‹_badPkt
 = 
ENABLED
;

248 
°Múr‹E¡ry
.
múr‹_bˇ°
 = 
ENABLED
;

249 
°Múr‹E¡ry
.
múr‹_goodPkt
 = 
ENABLED
;

250 
°Múr‹E¡ry
.
múr‹_mˇ°
 = 
ENABLED
;

251 
°Múr‹E¡ry
.
múr‹_‹göÆPkt
 = 
ENABLED
;

252 
°Múr‹E¡ry
.
múr‹_uˇ°
 = 
ENABLED
;

253 
°Múr‹E¡ry
.
›î_of_igr_™d_egr_p‹ts
 = 0;

254 
mem£t
(&(
°Múr‹E¡ry
.
múr‹ed_igrP‹ts
), 0xff, (
πk_p‹tmask_t
));

255 
mem£t
(&(
°Múr‹E¡ry
.
múr‹ed_egrP‹ts
), 0xff, (
πk_p‹tmask_t
));

258 
°Múr‹E¡ry
.
múr‹ög_p‹t
 = 
P‹tLogic2PhyP‹tId
(
múr‹D°P‹t
);

260 if(
RT_ERR_OK
 !
πk_múr‹_group_£t
(0, 
ödex
+1, &
°Múr‹E¡ry
))

262 
múr‹A˛GΩ
[
ödex
].
de°P‹t
 = 0;

263  
DRV_ERR_UNKNOW
;

266 
múr‹A˛GΩ
[
ödex
].
uiCou¡
 = 1;

268 *
puiMúr‹GΩId
 = 
ödex
+1;

270 #ifde‡
CHIPSET_RTL8305


271 *
puiMúr‹GΩId
=1;

273  
DRV_OK
;

277 
DRV_RET_E
 
HÆ_DñMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
)

279 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

280 
UINT32
 
i
;

281 
πk_múr‹_íåy_t
 
°Múr‹E¡ry
;

283 if(!
IsVÆidLgcP‹t
(
múr‹D°P‹t
))

285  
DRV_ERR_PARA
;

287 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

288 
i
 = 0; i < 
MAX_ACL_ACTION_MIRROR
; i++)

290 if(
múr‹A˛GΩ
[
i
].
de°P‹t
 =
múr‹D°P‹t
)

293 if(
múr‹A˛GΩ
[
i
].
uiCou¡
)

295 
múr‹A˛GΩ
[
i
].
uiCou¡
--;

296 if(
múr‹A˛GΩ
[
i
].
uiCou¡
 == 0)

302  
DRV_OK
;

308 if(
i
 =
MAX_ACL_ACTION_MIRROR
)

310  
DRV_ERR_MIR_NO_MONITOR
;

314 
°Múr‹E¡ry
.
¸oss_vœn
 = 
ENABLED
;

315 
°Múr‹E¡ry
.
ÊowBa£dO∆y
 = 
ENABLED
;

317 
°Múr‹E¡ry
.
múr‹_badPkt
 = 
ENABLED
;

319 
°Múr‹E¡ry
.
múr‹_bˇ°
 = 
ENABLED
;

320 
°Múr‹E¡ry
.
múr‹_goodPkt
 = 
ENABLED
;

321 
°Múr‹E¡ry
.
múr‹_mˇ°
 = 
ENABLED
;

322 
°Múr‹E¡ry
.
múr‹_‹göÆPkt
 = 
ENABLED
;

323 
°Múr‹E¡ry
.
múr‹_uˇ°
 = 
ENABLED
;

324 
°Múr‹E¡ry
.
›î_of_igr_™d_egr_p‹ts
 = 0;

325 #ifde‡
CHIPSET_RTL8328


326 
°Múr‹E¡ry
.
múr‹ög_p‹t
 = 0x1F;

328 
°Múr‹E¡ry
.
múr‹ög_p‹t
 = 0xFF;

330 
mem£t
(&(
°Múr‹E¡ry
.
múr‹ed_igrP‹ts
), 0, (
πk_p‹tmask_t
));

331 
mem£t
(&(
°Múr‹E¡ry
.
múr‹ed_egrP‹ts
), 0, (
πk_p‹tmask_t
));

334 if(
RT_ERR_OK
 !
πk_múr‹_group_£t
(0, 
i
+1, &
°Múr‹E¡ry
))

336  
DRV_ERR_UNKNOW
;

339 
múr‹A˛GΩ
[
i
].
de°P‹t
 = 0;

341  
DRV_OK
;

343 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_port.c

17 #ifde‡ 
__˝lu•lus


20 
	~<löux/kî√l.h
>

21 
	~<löux/dñay.h
>

22 
	~<mw_ty≥.h
>

23 
	~"drv_pub.h
"

24 
	~"drv_ªq.h
"

25 
	~<löux/°rög.h
>

30 
	~"hÆ_comm⁄.h
"

35 
	~<löux/•ölock_ty≥s.h
>

36 
	~<löux/•ölock.h
>

37 
	~<löux/¶ab.h
>

38 
	~"πk_≠i.h
"

39 
	~"πk_≠i_ext.h
"

40 
	~"πl8367b_asicdrv_Àd.h
"

41 
	~"πl8367b_asicdrv_phy.h
"

60 
	tuöt32
;

61 
	töt32
;

62 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

63 
BOOL
 
ComboP‹tCfgCh™ge
(
uöt32
 
unô
, uöt32 
phyP‹t
, 
πk_p‹t_medü_t
 
íMedü
);

69 
uöt32
 
•dlx_ßve
[
LOGIC_PORT_NO
+1];

70 
logic_pmask_t
 
isﬁ©e_ßve
;

75 
COMBO_PORT_CONFIG_S
 
g_°ComboP‹tCfg
[
LOGIC_PORT_NO
+1][
PORT_TYPE_ALL
];

77 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

80 
•ölock_t
 
_•ö_hÆ_p‹t_lock
 = 
SPIN_LOCK_UNLOCKED
;

93 
	#RTK_MAX_PACKET_LEN
 16000

	)

94 
	#RTK_NORMAL_PACKET_LEN
 1522

	)

95 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

98 
	#SPIN_HAL_PORT_LOCK
 
	`•ö_lock
(&
_•ö_hÆ_p‹t_lock
)

	)

99 
	#SPIN_HAL_PORT_UNLOCK
 
	`•ö_u∆ock
(&
_•ö_hÆ_p‹t_lock
)

	)

103 #ifde‡
RTK_PORT_DEBUG_SUPPORT


104 
	#RTK_PORT_DEBUG
 
π_log_¥ötf


	)

106 
	#RTK_PORT_DEBUG
(
fmt
,
¨g
...)

	)

126 
DRV_RET_E
 
HÆ_GëP‹tLökupTy≥
(
phyid_t
 
phyid
, 
UINT32
 *
pulLökupTy≥
)

128 
öt32
 
iRv
 = 
RT_ERR_OK
;

129 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

130 
πk_p‹t_lökSètus_t
 
íSètus
;

131 
πk_p‹t_medü_t
 
íMedü
;

133 #ifde‡
CHIPSET_RTL8305


134 
πk_p‹t_mac_abûôy_t
 
íSètus
;

136 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

137 
UINT32
 
uiChùId
 = 0;

138 
UINT32
 
uiP‹tId
 = 0;

141 if(
NULL
 =
pulLökupTy≥
)

143  
DRV_ERR_PARA
;

145 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

146 
uiChùId
 = 
CHIPID
(
phyid
);

147 
uiP‹tId
 = 
PORTID
(
phyid
);

148 
iRv
=
πk_p‹t_lök_gë
(
uiChùId
, 
uiP‹tId
, &
íSètus
);

149 if((
RT_ERR_OK
 !
iRv
Ë|| (
PORT_LINKUP
!=
íSètus
))

151 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_DOWN
;

152  
DRV_OK
;

155 
iRv
=
πk_p‹t_phyComboP‹tMedü_gë
(
uiChùId
, 
uiP‹tId
, &
íMedü
);

156 if(
RT_ERR_OK
 =
iRv
)

158 
íMedü
)

160 
PORT_MEDIA_COPPER_AUTO
:

161 
PORT_MEDIA_COPPER
:

163 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_COPPER_UP
;

166 
PORT_MEDIA_FIBER_AUTO
:

167 
PORT_MEDIA_FIBER
:

169 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_FIBER_UP
;

173 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_DOWN
;

179 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_DOWN
;

182 #ifde‡
CHIPSET_RTL8305


183 
iRv
=
πk_p‹t_macSètus_gë
(
PORTID
(
phyid
),&
íSètus
);

185 if((
RT_ERR_OK
 !
iRv
Ë|| (
PORT_LINKUP
!=
íSètus
.
lök
))

187 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_DOWN
;

188  
DRV_OK
;

190 *
pulLökupTy≥
 = 
HAL_PORT_LINKUP_TYPE_COPPER_UP
;

193  
DRV_OK
;

195 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

213 
boﬁ
 
πk_ComboP‹tSkùSë
(
phyid_t
 
phyid
, 
UINT32
 
uiP‹tTy≥
)

216 
öt32
 
iRv
 = 
RT_ERR_OK
;

217 
UINT32
 
ulMediumTy≥
 = 0;

218 
πk_p‹t_medü_t
 
íMedü
;

219 
iRv
=
πk_p‹t_phyComboP‹tMedü_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
íMedü
);

221 if(
RT_ERR_OK
 =
iRv
)

223 
íMedü
)

225 
PORT_MEDIA_COPPER_AUTO
:

226 
PORT_MEDIA_COPPER
:

228 
ulMediumTy≥
=
PORT_TYPE_NOT_FIBER
;

231 
PORT_MEDIA_FIBER_AUTO
:

232 
PORT_MEDIA_FIBER
:

234 
ulMediumTy≥
=
PORT_TYPE_FIBER_1000
;

238  
Ál£
;

242 if(((
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
Ë&& (
PORT_TYPE_NOT_FIBER
 =
ulMediumTy≥
))

243 || ((
PORT_TYPE_IS_COPPER
 =
uiP‹tTy≥
Ë&& (
PORT_TYPE_NOT_FIBER
 !
ulMediumTy≥
)))

245  
åue
;

249  
Ál£
;

268 
DRV_RET_E
 
HÆ_SëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPrio
)

270 
phyid_t
 
phyid
 = 0;

271 
öt32
 
iRv
 = 
RT_ERR_OK
;

273 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

275  
DRV_INVALID_LPORT
;

277 i‡(!
ISVALID_PORT_PRIORITY
(
uiPrio
))

279  
DRV_INVALID_PRIORITY_VALUE
;

282 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

283 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

285 
iRv
 = 
πk_qos_p‹tI¬îPri_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
uiPrio
);

288 #ifde‡
CHIPSET_RTL8305


289 
iRv
 = 
πk_qos_p‹tPri_£t
(
PORTID
(
phyid
), 
uiPrio
);

291  
Eº‹Sdk2Drv
(
iRv
);

310 
DRV_RET_E
 
HÆ_SëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMdix
)

312 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

313 
phyid_t
 
phyid
 = 0;

314 
πk_p‹t_¸ossOvî_mode_t
 
πkMdix
 = 
PORT_CROSSOVER_MODE_AUTO
;

316 
öt32
 
iRv
 = 
RT_ERR_OK
;

318 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

320  
DRV_INVALID_LPORT
;

322 ()
uiMdix
;

323 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

324 
uiMdix
)

326 
PORT_MDI_AUTO
:

327 
πkMdix
 = 
PORT_CROSSOVER_MODE_AUTO
;

329 
PORT_MDI_ACROSS
:

330 
πkMdix
 = 
PORT_CROSSOVER_MODE_MDIX
;

332 
PORT_MDI_NORMAL
:

333 
πkMdix
 = 
PORT_CROSSOVER_MODE_MDI
;

336  
DRV_INVALID_MDI_VALUE
;

339 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

341 
iRv
 = 
πk_p‹t_phyCrossOvîMode_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
πkMdix
);

343  
Eº‹Sdk2Drv
(
iRv
);

363 
DRV_RET_E
 
HÆ_SëP‹tE«bÀ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
)

365 
phyid_t
 
phyid
 = 0;

366 
πk_íabÀ_t
 
íabÀ
 = 
DISABLED
;

367 
öt32
 
iRv
 = 
RT_ERR_OK
;

369 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

371  
DRV_INVALID_LPORT
;

374 if(!
ISVALID_ADMIN_VALUE
(
uiE«bÀ
))

376  
DRV_INVALID_ADMIN_VALUE
;

379 
uiE«bÀ
)

381 
PORT_ADMIN_DISABLE
:

382 
íabÀ
 = 
DISABLED
;

384 
PORT_ADMIN_ENABLE
:

385 
íabÀ
 = 
ENABLED
;

388  
DRV_INVALID_ADMIN_VALUE
;

391 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

392 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

393 
iRv
 = 
πk_p‹t_admöE«bÀ_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íabÀ
);

395 #ifde‡
CHIPSET_RTL8305


396 
iRv
 = 
πk_p‹t_admöE«bÀ_£t
(
PORTID
(
phyid
), 
íabÀ
);

398  
Eº‹Sdk2Drv
(
iRv
);

418 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiJumbo
)

420 
phyid_t
 
phyid
 = 0;

421 
öt32
 
iRv
 = 
RT_ERR_OK
;

422 
uöt32
 
uiLí
 = 0;

424 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

426  
DRV_INVALID_LPORT
;

429 if(!
ISVALID_JUMBO_VALUE
(
uiJumbo
))

431  
DRV_INVALID_JUMBO_VALUE
;

434 
uiLí
 = (
uiJumbo
 =
PORT_JUMBO_ENABLE
)? 
RTK_MAX_PACKET_LEN
 : 
RTK_NORMAL_PACKET_LEN
;

436 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

437 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

438 
iRv
 = 
πk_swôch_p‹tMaxPktLí_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
uiLí
);

440 #ifde‡
CHIPSET_RTL8305


441 
iRv
 = 
πk_swôch_p‹tMaxPktLí_£t
(
PORTID
(
phyid
), 
uiLí
);

443  
Eº‹Sdk2Drv
(
iRv
);

460 
DRV_RET_E
 
HÆ_SëCPUP‹tJumbo
(
UINT32
 
uiLí
)

462 
öt32
 
iRv
 = 
RT_ERR_OK
;

463 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

464 
iRv
 = 
πk_swôch_p‹tMaxPktLí_£t
(
CHIPID
(
PORT_PHYID
(
LOGIC_CPU_PORT
)), 
PORTID
(PORT_PHYID(LOGIC_CPU_PORT)), 
uiLí
);

466 #ifde‡
CHIPSET_RTL8305


467 
iRv
 = 
πk_swôch_p‹tMaxPktLí_£t
(
PORTID
(
PORT_PHYID
(
LOGIC_CPU_PORT
)), 
uiLí
);

469  
Eº‹Sdk2Drv
(
iRv
);

488 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
)

490 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

491 
phyid_t
 
phyid
 = 0;

492 
UINT32
 
uiChùId
 = 0;

493 
UINT32
 
uiP‹tId
 = 0;

494 
πk_íabÀ_t
 
íabÀ
 = 
DISABLED
;

496 
öt32
 
iRv
 = 
RT_ERR_OK
;

498 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

500  
DRV_INVALID_LPORT
;

502 #ifde‡
CHIPSET_RTL8305


503 ()
uiSèã
;

505 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

506 
uiSèã
)

508 
TRUE
:

509 
íabÀ
 = 
ENABLED
;

511 
FALSE
:

512 
íabÀ
 = 
DISABLED
;

515  
DRV_INVALID_STATE
;

518 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

519 
uiChùId
 = 
CHIPID
(
phyid
);

520 
uiP‹tId
 = 
PORTID
(
phyid
);

522 
iRv
 = 
πk_p‹t_rxE«bÀ_£t
(
uiChùId
, 
uiP‹tId
, 
íabÀ
);

523 if(
RT_ERR_OK
 !
iRv
)

525  
Eº‹Sdk2Drv
(
iRv
);

527 
iRv
 = 
πk_p‹t_txE«bÀ_£t
(
uiChùId
, 
uiP‹tId
, 
íabÀ
);

529  
Eº‹Sdk2Drv
(
iRv
);

549 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAbûôy
, UINT32 
uiP‹tTy≥
)

551 
phyid_t
 
phyid
 = 0;

552 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

553 
UINT32
 
uiChùId
 = 0;

555 
UINT32
 
uiP‹tId
 = 0;

556 
INT32
 
iRv
 = 
RT_ERR_OK
;

557 
πk_p‹t_phy_abûôy_t
 
πkAbûôy
;

559 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

560 
P‹tTy≥_E
 
uiFibîS≥ed
 = 
PORT_TYPE_FIBER_UNKNOWN
;

562 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

564  
DRV_INVALID_LPORT
;

566 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

568  
DRV_ERR_PARA
;

571 
mem£t
(&
πkAbûôy
, 0x00, (
πk_p‹t_phy_abûôy_t
));

573 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

574 
uiP‹tId
 = 
PORTID
(
phyid
);

575 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

576 
uiChùId
 = 
CHIPID
(
phyid
);

577 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
åue
 =
πk_ComboP‹tSkùSë
(
phyid
, 
uiP‹tTy≥
)))

579 
RTK_PORT_DEBUG
("HÆ_SëP‹tAbûôy skù së,Ö‹t=%d, uiP‹tTy≥=%d, uiAbûôy=%d\n",
lgcP‹t
,
uiP‹tTy≥
, 
uiAbûôy
);

581 
SPIN_HAL_PORT_LOCK
;

582 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
aut⁄eg_advît
 = 
uiAbûôy
;

583 
SPIN_HAL_PORT_UNLOCK
;

586  
DRV_OK
;

589 if(
uiAbûôy
 & 
PORT_ABIL_10MB_HD
){

590 
πkAbûôy
.
HÆf_10
 = 1;

593 
πkAbûôy
.
HÆf_10
 = 0;

596 if(
uiAbûôy
 & 
PORT_ABIL_10MB_FD
){

597 
πkAbûôy
.
FuŒ_10
 = 1;

600 
πkAbûôy
.
FuŒ_10
 = 0;

603 if(
uiAbûôy
 & 
PORT_ABIL_100MB_HD
){

604 
πkAbûôy
.
HÆf_100
 = 1;

607 
πkAbûôy
.
HÆf_100
 = 0;

610 if(
uiAbûôy
 & 
PORT_ABIL_100MB_FD
){

611 
πkAbûôy
.
FuŒ_100
 = 1;

614 
πkAbûôy
.
FuŒ_100
 = 0;

616 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

617 if(
uiAbûôy
 & 
PORT_ABIL_1000MB_HD
){

618 
πkAbûôy
.
HÆf_1000
 = 1;

621 
πkAbûôy
.
HÆf_1000
 = 0;

624 if(
uiAbûôy
 & 
PORT_ABIL_1000MB_FD
){

625 
πkAbûôy
.
FuŒ_1000
 = 1;

628 
πkAbûôy
.
FuŒ_1000
 = 0;

631 if(
uiAbûôy
 & 
PORT_ABIL_2500MB_HD
)

632 if(
uiAbûôy
 & 
PORT_ABIL_2500MB_FD
)

633 if(
uiAbûôy
 & 
PORT_ABIL_10GB_HD
)

634 if(
uiAbûôy
 & 
PORT_ABIL_10GB_FD
)

638 if(
uiAbûôy
 & 
PORT_ABIL_PAUSE_TX
){

639 
πkAbûôy
.
FC
 = 1;

642 
πkAbûôy
.
FC
 = 0;

646 if(
uiAbûôy
 & 
PORT_ABIL_PAUSE_RX
){

647 
πkAbûôy
.
AsyFC
 = 1;

650 
πkAbûôy
.
AsyFC
 = 0;

653 if(
uiAbûôy
 & 
PORT_ABIL_PAUSE_ASYMM
)

654 if(
uiAbûôy
 & 
PORT_ABIL_TBI
)

655 if(
uiAbûôy
 & 
PORT_ABIL_MII
)

656 if(
uiAbûôy
 & 
PORT_ABIL_GMII
)

657 if(
uiAbûôy
 & 
PORT_ABIL_SGMII
)

658 if(
uiAbûôy
 & 
PORT_ABIL_XGMII
)

659 if(
uiAbûôy
 & 
PORT_ABIL_LB_MAC
)

660 if(
uiAbûôy
 & 
PORT_ABIL_LB_MAC_RMT
)

661 if(
uiAbûôy
 & 
PORT_ABIL_LB_PHY
)

662 if(
uiAbûôy
 & 
PORT_ABIL_AN
)

663 if(
uiAbûôy
 & 
PORT_ABIL_3000MB_HD
)

664 if(
uiAbûôy
 & 
PORT_ABIL_3000MB_FD
)

665 if(
uiAbûôy
 & 
PORT_ABIL_12GB_HD
)

666 if(
uiAbûôy
 & 
PORT_ABIL_12GB_FD
)

667 if(
uiAbûôy
 & 
PORT_ABIL_13GB_HD
)

668 if(
uiAbûôy
 & 
PORT_ABIL_13GB_FD
)

670 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

671 
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_£t
(
uiChùId
, 
uiP‹tId
, &
πkAbûôy
);

673 #ifde‡
CHIPSET_RTL8305


674 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_£t
(
uiP‹tId
, &
πkAbûôy
);

676 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

677 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
RT_ERR_OK
 =
iRv
))

679 
RTK_PORT_DEBUG
("HÆ_SëP‹tAbûôy ,Ö‹t=%d, uiP‹tTy≥=%d, uiAbûôy=%d\n",
lgcP‹t
,
uiP‹tTy≥
, 
uiAbûôy
);

681 
SPIN_HAL_PORT_LOCK
;

682 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
aut⁄eg_advît
 = 
uiAbûôy
;

683 
SPIN_HAL_PORT_UNLOCK
;

686 if(
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
)

688 ()
HÆ_GëFibîS≥ed
(
lgcP‹t
, (
UINT32
 *)&
uiFibîS≥ed
);

689 
RTK_PORT_DEBUG
("HÆ_GëFibîS≥ed,Ö‹t=%d, uiFibîS≥ed=%d\n",
lgcP‹t
,
uiFibîS≥ed
);

690 if(
PORT_TYPE_FIBER_100
 =
uiFibîS≥ed
)

693 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
uiChùId
, 
uiP‹tId
, 
PORT_FIBER_MEDIA_100
);

694  
DRV_OK
;

698 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
uiChùId
, 
uiP‹tId
, 
PORT_FIBER_MEDIA_1000
);

699  
DRV_OK
;

706  
Eº‹Sdk2Drv
(
iRv
);

726 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAut⁄
, UINT32 
uiP‹tTy≥
)

728 
phyid_t
 
phyid
 = 0;

729 
INT32
 
iRv
 = 
RT_ERR_OK
;

730 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

731 
πk_íabÀ_t
 
íabÀd
 = 
ENABLED
;

733 
P‹tTy≥_E
 
uiFibîS≥ed
 = 
PORT_TYPE_FIBER_UNKNOWN
;

736 #ifde‡
CHIPSET_RTL8305


737 
πk_p‹t_phy_abûôy_t
 
abûôy
;

739 #ifde‡
CHIPSET_RTL8305


740 ()
uiAut⁄
;

742 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

744  
DRV_INVALID_LPORT
;

747 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

749  
DRV_ERR_PARA
;

751 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

752 
uiAut⁄
)

754 
TRUE
:

755 
íabÀd
 = 
ENABLED
;

757 
FALSE
:

758 
íabÀd
 = 
DISABLED
;

761  
DRV_INVALID_STATE
;

765 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

766 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

767 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
åue
 =
πk_ComboP‹tSkùSë
(
phyid
, 
uiP‹tTy≥
)))

770 
SPIN_HAL_PORT_LOCK
;

771 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
aut⁄eg_íabÀ
 = 
uiAut⁄
;

772 
SPIN_HAL_PORT_UNLOCK
;

774  
DRV_OK
;

777 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

778 
iRv
 = 
πk_p‹t_phyAutoNegoE«bÀ_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íabÀd
);

780 #ifde‡
CHIPSET_RTL8305


781 
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_gë
(
PORTID
(
phyid
),&
abûôy
);

782 if(
RT_ERR_OK
 !
iRv
)

784  
Eº‹Sdk2Drv
(
iRv
);

786 if(
abûôy
.
AutoNegŸüti⁄
==1)

788  
DRV_OK
;

790 
abûôy
.
AutoNegŸüti⁄
=1;

791 
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_£t
(
PORTID
(
phyid
),&
abûôy
);

793 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

794 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
RT_ERR_OK
 =
iRv
))

797 
SPIN_HAL_PORT_LOCK
;

798 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
aut⁄eg_íabÀ
 = 
uiAut⁄
;

799 
SPIN_HAL_PORT_UNLOCK
;

802 if(
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
)

804 ()
HÆ_GëFibîS≥ed
(
lgcP‹t
, (
UINT32
 *)&
uiFibîS≥ed
);

805 
RTK_PORT_DEBUG
("HÆ_GëFibîS≥ed,Ö‹t=%d, uiFibîS≥ed=%d\n",
lgcP‹t
,
uiFibîS≥ed
);

806 if(
PORT_TYPE_FIBER_100
 =
uiFibîS≥ed
)

809 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
PORT_FIBER_MEDIA_100
);

810  
DRV_OK
;

814 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
PORT_FIBER_MEDIA_1000
);

815  
DRV_OK
;

822  
Eº‹Sdk2Drv
(
iRv
);

842 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
, UINT32 
uiP‹tTy≥
)

844 
phyid_t
 
phyid
 = 0;

845 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

846 
UINT32
 
uiChùId
 = 0;

848 
UINT32
 
uiP‹tId
 = 0;

849 
INT32
 
iRv
 = 
RT_ERR_OK
;

851 
πk_p‹t_•ìd_t
 
πkS≥ed
 = 
PORT_SPEED_10M
;

852 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

853 
πk_p‹t_•ìd_t
 
πkTmpS≥ed
 = 
PORT_SPEED_10M
;

854 
πk_íabÀ_t
 
πkFlow˘æ
 = 
DISABLED
;

855 
πk_p‹t_du∂ex_t
 
πkDu∂ex
 = 
PORT_HALF_DUPLEX
;

858 
P‹tTy≥_E
 
uiFibîS≥ed
 = 
PORT_TYPE_FIBER_UNKNOWN
;

861 #ifde‡
CHIPSET_RTL8305


862 
πk_p‹t_phy_abûôy_t
 
Abûôy
;

864 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

866  
DRV_INVALID_LPORT
;

869 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

871  
DRV_ERR_PARA
;

874 
uiS≥ed
)

876 
PORT_SPEED_10
:

877 
πkS≥ed
 = 
PORT_SPEED_10M
;

879 
PORT_SPEED_100
:

880 
πkS≥ed
 = 
PORT_SPEED_100M
;

882 
PORT_SPEED_1000
:

883 
πkS≥ed
 = 
PORT_SPEED_1000M
;

886  
DRV_INVALID_SPEED_VALUE
;

889 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

890 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

891 
uiChùId
 = 
CHIPID
(
phyid
);

893 
uiP‹tId
 = 
PORTID
(
phyid
);

894 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

895 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
åue
 =
πk_ComboP‹tSkùSë
(
phyid
, 
uiP‹tTy≥
)))

898 
SPIN_HAL_PORT_LOCK
;

899 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
f‹˚_•ìd
 = (
P‹tS≥edVÆue_E
)
uiS≥ed
;

900 
SPIN_HAL_PORT_UNLOCK
;

902  
DRV_OK
;

905 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

906 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_gë
(
uiChùId
, 
uiP‹tId
, &
πkTmpS≥ed
, &
πkDu∂ex
, &
πkFlow˘æ
);

908 #ifde‡
CHIPSET_RTL8305


909 
mem£t
(&
Abûôy
,0,(
πk_p‹t_phy_abûôy_t
));

910 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_gë
(
uiP‹tId
, &
Abûôy
);

911 if(
Abûôy
.
FuŒ_10
==1 || Abûôy.
FuŒ_100
==1 || Abûôy.
FuŒ_1000
==1)

913 
Abûôy
.
FuŒ_10
=0;

914 
Abûôy
.
FuŒ_100
=0;

915 
Abûôy
.
FuŒ_1000
=0;

916 
πkS≥ed
)

918 
PORT_SPEED_10M
:

919 
Abûôy
.
FuŒ_10
=1;

921 
PORT_SPEED_100M
:

922 
Abûôy
.
FuŒ_100
=1;

924 
PORT_SPEED_1000M
:

925 
Abûôy
.
FuŒ_1000
=1;

928  
DRV_INVALID_SPEED_VALUE
;

931 if(
Abûôy
.
HÆf_10
==1 || Abûôy.
HÆf_100
==1)

933 
Abûôy
.
HÆf_10
=0;

934 
Abûôy
.
HÆf_100
=0;

935 
πkS≥ed
)

937 
PORT_SPEED_10M
:

938 
Abûôy
.
HÆf_10
=1;

940 
PORT_SPEED_100M
:

941 
Abûôy
.
HÆf_100
=1;

944  
DRV_INVALID_SPEED_VALUE
;

948 if(
RT_ERR_OK
 !
iRv
)

950  
Eº‹Sdk2Drv
(
iRv
);

952 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

953 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_£t
(
uiChùId
, 
uiP‹tId
, 
πkS≥ed
, 
πkDu∂ex
, 
πkFlow˘æ
);

956 #ifde‡
CHIPSET_RTL8305


957 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_£t
(
uiP‹tId
, &
Abûôy
);

959 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

960 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
RT_ERR_OK
 =
iRv
))

963 
SPIN_HAL_PORT_LOCK
;

964 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
f‹˚_•ìd
 = (
P‹tS≥edVÆue_E
)
uiS≥ed
;

965 
SPIN_HAL_PORT_UNLOCK
;

968 if(
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
)

970 ()
HÆ_GëFibîS≥ed
(
lgcP‹t
, (
UINT32
 *)&
uiFibîS≥ed
);

971 
RTK_PORT_DEBUG
("HÆ_GëFibîS≥ed,Ö‹t=%d, uiFibîS≥ed=%d\n",
lgcP‹t
,
uiFibîS≥ed
);

972 if(
PORT_TYPE_FIBER_100
 =
uiFibîS≥ed
)

975 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
uiChùId
, 
uiP‹tId
, 
PORT_FIBER_MEDIA_100
);

976  
DRV_OK
;

980 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
uiChùId
, 
uiP‹tId
, 
PORT_FIBER_MEDIA_1000
);

981  
DRV_OK
;

987  
Eº‹Sdk2Drv
(
iRv
);

1001 
DRV_RET_E
 
HÆ_SëP‹tSpdlx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSpdlx
)

1003 
phyid_t
 
phyid
 = 0;

1004 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1005 
UINT32
 
uiChùId
 = 0;

1007 
UINT32
 
uiP‹tId
 = 0;

1008 
INT32
 
iRv
 = 
RT_ERR_OK
;

1009 
πk_p‹t_phy_abûôy_t
 
Abûôy
;

1010 
powîdown
 = 0;

1011 
uöt32_t
 
vÆ32
=0;

1013 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1015  
DRV_INVALID_LPORT
;

1018 
•dlx_ßve
[
lgcP‹t
] = 
uiSpdlx
;

1020 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1021 
uiP‹tId
 = 
PORTID
(
phyid
);

1023 
πk_p‹t_phyReg_gë
(
uiP‹tId
, (
πk_p‹t_phy_ªg_t
)
PHY_CONTROL_REG
, &
vÆ32
);

1025 if(
vÆ32
 & (0x01 << 11))

1027 
powîdown
 = 1;

1031 if((
PORT_10AUTO
 =
uiSpdlx
Ë|| (
PORT_100AUTO
 =uiSpdlxË|| (
PORT_1000FULL
 == uiSpdlx) \

1032 || (
PORT_1000AUTO
 =
uiSpdlx
Ë|| (
PORT_AUTOHALF
 =uiSpdlxË|| (
PORT_AUTOFULL
 == uiSpdlx) \

1033 || (
PORT_AUTOAUTO
 =
uiSpdlx
)){

1035 
mem£t
(&
Abûôy
,0,(
πk_p‹t_phy_abûôy_t
));

1036 
πk_p‹t_phyAutoNegoAbûôy_gë
(
uiP‹tId
, &
Abûôy
);

1037 
Abûôy
.
AutoNegŸüti⁄
 = (
uöt32
)
ENABLED
;

1038 
Abûôy
.
FuŒ_100
 = (
uöt32
)
DISABLED
;

1039 
Abûôy
.
HÆf_100
 = (
uöt32
)
DISABLED
;

1040 
Abûôy
.
FuŒ_10
 = (
uöt32
)
DISABLED
;

1041 
Abûôy
.
HÆf_10
 = (
uöt32
)
DISABLED
;

1042 
Abûôy
.
FuŒ_100
 = (
uöt32
)
DISABLED
;

1043 
Abûôy
.
FuŒ_1000
 = (
uöt32
)
DISABLED
;

1045 
uiSpdlx
)

1047 
PORT_10AUTO
 :

1048 
Abûôy
.
HÆf_10
 = (
uöt32
)
ENABLED
;

1049 
Abûôy
.
FuŒ_10
 = (
uöt32
)
ENABLED
;

1051 
PORT_100AUTO
 :

1052 
Abûôy
.
HÆf_100
 = (
uöt32
)
ENABLED
;

1053 
Abûôy
.
FuŒ_100
 = (
uöt32
)
ENABLED
;

1055 
PORT_1000FULL
 :

1056 
PORT_1000AUTO
 :

1057  
DRV_ERR_PARA
;

1058 
PORT_AUTOHALF
 :

1059 
Abûôy
.
HÆf_10
 = (
uöt32
)
ENABLED
;

1060 
Abûôy
.
HÆf_100
 = (
uöt32
)
ENABLED
;

1062 
PORT_AUTOFULL
 :

1063 
Abûôy
.
FuŒ_10
 = (
uöt32
)
ENABLED
;

1064 
Abûôy
.
FuŒ_100
 = (
uöt32
)
ENABLED
;

1066 
PORT_AUTOAUTO
:

1067 
Abûôy
.
FuŒ_100
 = (
uöt32
)
ENABLED
;

1068 
Abûôy
.
HÆf_100
 = (
uöt32
)
ENABLED
;

1069 
Abûôy
.
FuŒ_10
 = (
uöt32
)
ENABLED
;

1070 
Abûôy
.
HÆf_10
 = (
uöt32
)
ENABLED
;

1076 
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_£t
(
uiP‹tId
,&
Abûôy
);

1077  
Eº‹Sdk2Drv
(
iRv
);

1081 
mem£t
(&
Abûôy
,0,(
πk_p‹t_phy_abûôy_t
));

1082 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_gë
(
uiP‹tId
, &
Abûôy
);

1083 
Abûôy
.
HÆf_10
 = (
uöt32
)
DISABLED
;

1084 
Abûôy
.
FuŒ_10
 = (
uöt32
)
DISABLED
;

1085 
Abûôy
.
HÆf_100
 = (
uöt32
)
DISABLED
;

1086 
Abûôy
.
FuŒ_100
 = (
uöt32
)
DISABLED
;

1088 
uiSpdlx
)

1090 
PORT_10HALF
 :

1091 
Abûôy
.
HÆf_10
 = (
uöt32
)
ENABLED
;

1093 
PORT_10FULL
 :

1094 
Abûôy
.
FuŒ_10
 = (
uöt32
)
ENABLED
;

1096 
PORT_100HALF
 :

1097 
Abûôy
.
HÆf_100
 = (
uöt32
)
ENABLED
;

1099 
PORT_100FULL
 :

1100 
Abûôy
.
FuŒ_100
 = (
uöt32
)
ENABLED
;

1103  
DRV_ERR_PARA
;

1106 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_£t
(
uiP‹tId
, &
Abûôy
);

1108 if(
powîdown
)

1110 
πk_p‹t_admöE«bÀ_£t
(
uiP‹tId
, 
DISABLED
);

1115 
πk_p‹t_admöE«bÀ_£t
(
uiP‹tId
, 
DISABLED
);

1116 
mdñay
(100);

1117 
πk_p‹t_admöE«bÀ_£t
(
uiP‹tId
, 
ENABLED
);

1120  
Eº‹Sdk2Drv
(
iRv
);

1134 
DRV_RET_E
 
HÆ_SëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
ªg_no
, UINT32 
ªg_vÆ
)

1136 
phyid_t
 
phyid
 = 0;

1137 
UINT32
 
uiP‹tId
 = 0;

1138 
INT32
 
iRv
 = 
RT_ERR_OK
;

1140 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1142  
DRV_INVALID_LPORT
;

1145 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1146 
uiP‹tId
 = 
PORTID
(
phyid
);

1148 
iRv
 = 
πk_p‹t_phyReg_£t
(
uiP‹tId
, (
πk_p‹t_phy_ªg_t
)
ªg_no
, 
ªg_vÆ
);

1151  
Eº‹Sdk2Drv
(
iRv
);

1165 
DRV_RET_E
 
HÆ_GëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
pRegVÆ
, UINT32 
ªg_no
)

1167 
phyid_t
 
phyid
 = 0;

1168 
UINT32
 
uiP‹tId
 = 0;

1169 
INT32
 
iRv
 = 
RT_ERR_OK
;

1170 
UINT32
 
ªg_vÆ
=0;

1172 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1174  
DRV_INVALID_LPORT
;

1177 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1178 
uiP‹tId
 = 
PORTID
(
phyid
);

1180 
iRv
 = 
πk_p‹t_phyReg_gë
(
uiP‹tId
, (
πk_p‹t_phy_ªg_t
)
ªg_no
, &
ªg_vÆ
);

1182 *
pRegVÆ
 = 
ªg_vÆ
;

1184  
Eº‹Sdk2Drv
(
iRv
);

1203 
DRV_RET_E
 
HÆ_GëSpdlxSë
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
uiSpdlx
)

1205 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1207  
DRV_INVALID_LPORT
;

1210 *
uiSpdlx
 = 
•dlx_ßve
[
lgcP‹t
];

1212  
DRV_OK
;

1230 
DRV_RET_E
 
HÆ_GëIsﬁ©eSë
(
logic_pmask_t
 *
p°P‹tMask
)

1232 
LgcMaskC›y
(
p°P‹tMask
, &
isﬁ©e_ßve
);

1234  
DRV_OK
;

1256 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
, UINT32 
uiP‹tTy≥
)

1258 
phyid_t
 
phyid
 = 0;

1259 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1260 
UINT32
 
uiChùId
 = 0;

1262 
UINT32
 
uiP‹tId
 = 0;

1263 
INT32
 
iRv
 = 
RT_ERR_OK
;

1264 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1265 
πk_p‹t_•ìd_t
 
πkS≥ed
 = 
PORT_SPEED_10M
;

1266 
πk_íabÀ_t
 
πkFlow˘æ
 = 
DISABLED
;

1267 
πk_p‹t_du∂ex_t
 
πkTmpDu∂ex
 = 
PORT_HALF_DUPLEX
;

1269 
P‹tTy≥_E
 
uiFibîS≥ed
 = 
PORT_TYPE_FIBER_UNKNOWN
;

1271 
πk_p‹t_du∂ex_t
 
πkDu∂ex
 = 
PORT_HALF_DUPLEX
;

1273 #ifde‡
CHIPSET_RTL8305


1274 
πk_p‹t_phy_abûôy_t
 
Abûôy
;

1276 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1278  
DRV_INVALID_LPORT
;

1281 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

1283  
DRV_ERR_PARA
;

1286 
uiDu∂ex
)

1288 
PORT_DUPLEX_FULL
:

1289 
πkDu∂ex
 = 
PORT_FULL_DUPLEX
;

1291 
PORT_DUPLEX_HALF
:

1292 
πkDu∂ex
 = 
PORT_HALF_DUPLEX
;

1295  
DRV_INVALID_DUPLEX_VALUE
;

1298 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1299 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1300 
uiChùId
 = 
CHIPID
(
phyid
);

1302 
uiP‹tId
 = 
PORTID
(
phyid
);

1303 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1304 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
åue
 =
πk_ComboP‹tSkùSë
(
phyid
, 
uiP‹tTy≥
)))

1307 
SPIN_HAL_PORT_LOCK
;

1308 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
f‹˚_du∂ex
 = (
P‹tDu∂exVÆue_E
)
uiDu∂ex
;

1309 
SPIN_HAL_PORT_UNLOCK
;

1311  
DRV_OK
;

1314 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1315 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_gë
(
uiChùId
, 
uiP‹tId
, &
πkS≥ed
, &
πkTmpDu∂ex
, &
πkFlow˘æ
);

1317 #ifde‡
CHIPSET_RTL8305


1318 
mem£t
(&
Abûôy
,0,(
πk_p‹t_phy_abûôy_t
));

1319 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_gë
(
uiP‹tId
, &
Abûôy
);

1320 if(
πkDu∂ex
==
PORT_HALF_DUPLEX
)

1322 
Abûôy
.
FuŒ_10
=0;

1323 
Abûôy
.
FuŒ_100
=0;

1324 
Abûôy
.
FuŒ_1000
=0;

1325 
Abûôy
.
HÆf_10
=1;

1326 
Abûôy
.
HÆf_100
=1;

1329 if(
πkDu∂ex
==
PORT_FULL_DUPLEX
)

1331 
Abûôy
.
FuŒ_10
=1;

1332 
Abûôy
.
FuŒ_100
=1;

1333 
Abûôy
.
FuŒ_1000
=1;

1334 
Abûôy
.
HÆf_10
=0;

1335 
Abûôy
.
HÆf_100
=0;

1338 if(
RT_ERR_OK
 !
iRv
)

1340  
Eº‹Sdk2Drv
(
iRv
);

1342 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1343 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_£t
(
uiChùId
, 
uiP‹tId
, 
πkS≥ed
, 
πkDu∂ex
, 
πkFlow˘æ
);

1345 #ifde‡
CHIPSET_RTL8305


1346 
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_£t
(
uiP‹tId
, &
Abûôy
);

1348 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1349 if((
IS_COMBO_PORT
(
lgcP‹t
)Ë&& (
RT_ERR_OK
 =
iRv
))

1352 
SPIN_HAL_PORT_LOCK
;

1353 (
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]).
f‹˚_du∂ex
 = (
P‹tDu∂exVÆue_E
)
uiDu∂ex
;

1354 
SPIN_HAL_PORT_UNLOCK
;

1357 if(
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
)

1359 ()
HÆ_GëFibîS≥ed
(
lgcP‹t
, (
UINT32
 *)&
uiFibîS≥ed
);

1360 
RTK_PORT_DEBUG
("HÆ_GëFibîS≥ed,Ö‹t=%d, uiFibîS≥ed=%d\n",
lgcP‹t
,
uiFibîS≥ed
);

1361 if(
PORT_TYPE_FIBER_100
 =
uiFibîS≥ed
)

1364 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
uiChùId
, 
uiP‹tId
, 
PORT_FIBER_MEDIA_100
);

1365  
DRV_OK
;

1369 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
uiChùId
, 
uiP‹tId
, 
PORT_FIBER_MEDIA_1000
);

1370  
DRV_OK
;

1376  
Eº‹Sdk2Drv
(
iRv
);

1397 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPau£Tx
, UINT32 
uiPau£Rx
)

1399 
phyid_t
 
phyid
 = 0;

1400 
πk_íabÀ_t
 
íabÀ
 = 
DISABLED
;

1401 
öt32
 
iRv
 = 
RT_ERR_OK
;

1402 #ifde‡
CHIPSET_RTL8305


1403 
πk_p‹t_phy_abûôy_t
 
Abûôy
;

1405 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1407  
DRV_INVALID_LPORT
;

1410 if((
TRUE
 =
uiPau£Tx
Ë&& (TRUE =
uiPau£Rx
))

1412 
íabÀ
 = 
ENABLED
;

1416 
íabÀ
 = 
DISABLED
;

1419 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1420 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1421 
iRv
 = 
πk_p‹t_ÊowCålE«bÀ_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íabÀ
);

1423 #ifde‡
CHIPSET_RTL8305


1424 i‡((
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_gë
(
PORTID
(
phyid
), &
Abûôy
)Ë!
RT_ERR_OK
)

1427  
Eº‹Sdk2Drv
(
iRv
);

1429 i‡(
ENABLED
 =
íabÀ
)

1431 
Abûôy
.
FC
 = 1;

1432 
Abûôy
.
AsyFC
 = 1;

1436 
Abûôy
.
FC
 = 0;

1437 
Abûôy
.
AsyFC
 = 0;

1439 if(
Abûôy
.
AutoNegŸüti⁄
==1)

1441 i‡((
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_£t
(
PORTID
(
phyid
), &
Abûôy
)Ë!
RT_ERR_OK
)

1444  
Eº‹Sdk2Drv
(
iRv
);

1449 i‡((
iRv
 = 
πk_p‹t_phyF‹˚ModeAbûôy_£t
(
PORTID
(
phyid
), &
Abûôy
)Ë!
RT_ERR_OK
)

1452  
Eº‹Sdk2Drv
(
iRv
);

1456 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1457 if(
RT_ERR_OK
 =
iRv
)

1460 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1461 
iRv
 = 
πk_p‹t_back¥essuªE«bÀ_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íabÀ
);

1464 #ifde‡
CHIPSET_RTL8305


1465 
UINT32
 
uiRegD©a
 = 0;

1468 i‡(
ENABLED
 =
íabÀ
)

1470 
uiRegD©a
 = 3;

1474 
uiRegD©a
 = 0;

1477 
iRv
 = 
πl8367b_£tAsicRegBôs
(
RTL8367B_REG_MAC0_FORCE_SELECT
+
PORTID
(
phyid
), 
RTL8367B_MAC0_FORCE_SELECT_FC_MASK
, 
uiRegD©a
);

1478 i‡(
RT_ERR_OK
 !
iRv
)

1480  
Eº‹Sdk2Drv
(
iRv
);

1485  
Eº‹Sdk2Drv
(
iRv
);

1504 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p°P‹tMask
)

1506 
p‹t_num_t
 
lgcP‹t
 = 0;

1507 
phyid_t
 
phyid
 = 0;

1508 
logic_pmask_t
 
°TmpLogicMask
;

1509 
phy_pmask_t
 
°PhyMask
;

1510 
phy_pmask_t
 
°AŒPhyMask
;

1511 
öt32
 
iRv
 = 
RT_ERR_OK
;

1513 if(
NULL
 =
p°P‹tMask
)

1515  
DRV_ERR_PARA
;

1518 
CÃLgcMaskAŒ
(&
°TmpLogicMask
);

1519 
CÃPhyMaskAŒ
(&
°PhyMask
);

1520 
SëPhyMaskAŒ
(&
°AŒPhyMask
);

1522 
LgcMaskC›y
(&
isﬁ©e_ßve
, 
p°P‹tMask
);

1525 
LgcP‹tF‹
(
lgcP‹t
)

1527 if(!
T°LgcMaskBô
(
lgcP‹t
, 
p°P‹tMask
))

1529 
SëLgcMaskBô
(
lgcP‹t
, &
°TmpLogicMask
);

1533 
MaskLogic2Phy
(&
°TmpLogicMask
, &
°PhyMask
);

1534 
PhyMaskAddCpuP‹t
(&
°PhyMask
);

1535 
PhyMaskAddSèckP‹t
(&
°PhyMask
);

1537 
LgcP‹tF‹
(
lgcP‹t
)

1539 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1541 if(
T°LgcMaskBô
(
lgcP‹t
, 
p°P‹tMask
))

1543 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1544 
iRv
 = 
πk_p‹t_isﬁ©i⁄_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid),
CHIPNMASK
(CHIPID’hyid), &
°PhyMask
));

1546 #ifde‡
CHIPSET_RTL8305


1547 
iRv
 = 
πk_p‹t_isﬁ©i⁄_£t
(
PORTID
(
phyid
),
CHIPNMASK
(
CHIPID
’hyid), &
°PhyMask
));

1549 if(
iRv
 !
RT_ERR_OK
)

1551  
Eº‹Sdk2Drv
(
iRv
);

1556 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1557 
iRv
 = 
πk_p‹t_isﬁ©i⁄_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid),
CHIPNMASK
(CHIPID’hyid), &
°AŒPhyMask
));

1559 #ifde‡
CHIPSET_RTL8305


1560 
iRv
 = 
πk_p‹t_isﬁ©i⁄_£t
–
PORTID
(
phyid
),
CHIPNMASK
(
CHIPID
’hyid), &
°AŒPhyMask
));

1562 if(
iRv
 !
RT_ERR_OK
)

1564  
Eº‹Sdk2Drv
(
iRv
);

1569  
DRV_OK
;

1589 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMedium
)

1591 
phyid_t
 
phyid
 = 0;

1592 
öt32
 
iRv
 = 
RT_ERR_OK
;

1593 
πk_p‹t_medü_t
 
íMedü
;

1595 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1596 
uöt32
 
ulP‹tTy≥
 = 
PORT_TYPE_IS_COPPER
;

1598 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1600  
DRV_INVALID_LPORT
;

1603 if(!
IS_COMBO_PORT
(
lgcP‹t
))

1605  
DRV_ERR_PARA
;

1608 if(
uiMedium
 =
PORT_TYPE_NOT_FIBER
)

1610 
íMedü
 = 
PORT_MEDIA_COPPER
;

1611 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1613 
ulP‹tTy≥
 = 
PORT_TYPE_IS_COPPER
;

1618 
íMedü
 = 
PORT_MEDIA_FIBER
;

1619 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1621 
ulP‹tTy≥
 = 
PORT_TYPE_IS_FIBER
;

1625 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1626 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1627 
iRv
=
πk_p‹t_phyComboP‹tMedü_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid), 
íMedü
);

1629 #ifde‡
CHIPSET_RTL8305


1630 
iRv
=
πk_p‹t_phyComboP‹tMedü_£t
(
PORTID
(
phyid
), 
íMedü
);

1632 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1633 if(
RT_ERR_OK
 =
iRv
)

1636 ()
ComboP‹tCfgCh™ge
(
CHIPID
(
phyid
),Öhyid, 
íMedü
);

1638 
SPIN_HAL_PORT_LOCK
;

1639 (
g_°ComboP‹tCfg
[
lgcP‹t
][
PORT_TYPE_IS_COPPER
]).
p‹t_ty≥
 = 
ulP‹tTy≥
;

1640 
SPIN_HAL_PORT_UNLOCK
;

1644  
Eº‹Sdk2Drv
(
iRv
);

1661 
UINT32
 
HÆ_GëP‹tTy≥
(
p‹t_num_t
 
lgcP‹t
)

1663 
UINT32
 
ulP‹tTy≥
 = 
PORT_TYPE_IS_COPPER
;

1664 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1666  
PORT_TYPE_IS_COPPER
;

1668 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1669 if(!
IS_COMBO_PORT
(
lgcP‹t
))

1671  
PORT_TYPE_IS_COPPER
;

1674 
SPIN_HAL_PORT_LOCK
;

1675 
ulP‹tTy≥
 = (
g_°ComboP‹tCfg
[
lgcP‹t
][
PORT_TYPE_IS_COPPER
]).
p‹t_ty≥
;

1676 
SPIN_HAL_PORT_UNLOCK
;

1678  
ulP‹tTy≥
;

1698 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMedium
)

1700 
phyid_t
 
phyid
 = 0;

1701 
öt32
 
iRv
 = 
RT_ERR_OK
;

1702 
πk_p‹t_medü_t
 
íMedü
;

1704 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1706  
DRV_INVALID_LPORT
;

1708 if(
puiMedium
 =
NULL
)

1710  
DRV_ERR_PARA
;

1713 *
puiMedium
 = 
PORT_TYPE_NOT_FIBER
;

1715 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1716 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1717 
iRv
=
πk_p‹t_phyComboP‹tMedü_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
íMedü
);

1719 #ifde‡
CHIPSET_RTL8305


1720 
iRv
=
πk_p‹t_phyComboP‹tMedü_gë
(
PORTID
(
phyid
), &
íMedü
);

1722 if(
RT_ERR_OK
 =
iRv
)

1724 
íMedü
)

1726 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1727 
PORT_MEDIA_COPPER_AUTO
:

1729 
PORT_MEDIA_COPPER
:

1731 *
puiMedium
=
PORT_TYPE_NOT_FIBER
;

1734 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1735 
PORT_MEDIA_FIBER_AUTO
:

1737 
PORT_MEDIA_FIBER
:

1739 *
puiMedium
=
PORT_TYPE_FIBER_1000
;

1743  
DRV_SDK_GEN_ERROR
;

1746  
Eº‹Sdk2Drv
(
iRv
);

1765 
DRV_RET_E
 
HÆ_GëP‹tCuºítLök
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLök
)

1767 
phyid_t
 
phyid
 = 0;

1768 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1769 
πk_p‹t_lökSètus_t
 
íSètus
;

1771 #ifde‡
CHIPSET_RTL8305


1772 
πk_p‹t_mac_abûôy_t
 
íSètus
;

1774 
öt32
 
iRv
 = 
RT_ERR_OK
;

1776 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1778  
DRV_INVALID_LPORT
;

1780 if(
puiLök
 =
NULL
)

1782  
DRV_ERR_PARA
;

1784 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

1785 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1786 
iRv
=
πk_p‹t_lök_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),&
íSètus
);

1788 #ifde‡
CHIPSET_RTL8305


1789 
iRv
=
πk_p‹t_macSètus_gë
(
PORTID
(
phyid
),&
íSètus
);

1791 if(
iRv
 =
RT_ERR_OK
)

1793 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1794 if(
PORT_LINKUP
==
íSètus
)

1796 *
puiLök
=
PORT_LINK_UP
;

1800 *
puiLök
=
PORT_LINK_DOWN
;

1803 #ifde‡
CHIPSET_RTL8305


1804 if(
íSètus
.
lök
==1)

1806 *
puiLök
=
PORT_LINK_UP
;

1810 *
puiLök
=
PORT_LINK_DOWN
;

1814  
Eº‹Sdk2Drv
(
iRv
);

1833 
DRV_RET_E
 
HÆ_GëP‹tLökMask
(
logic_pmask_t
 *
p°P‹tMask
)

1835 
p‹t_num_t
 
uiP‹t
;

1836 
phyid_t
 
phyid
 = 0;

1837 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1838 
πk_p‹t_lökSètus_t
 
íSètus
;

1840 #ifde‡
CHIPSET_RTL8305


1841 
πk_p‹t_mac_abûôy_t
 
íSètus
;

1844 
öt32
 
iRv
 = 
RT_ERR_OK
;

1846 if(
NULL
 =
p°P‹tMask
)

1848  
DRV_ERR_PARA
;

1850 
LgcP‹tF‹
(
uiP‹t
)

1852 
phyid
 = 
P‹tLogic2PhyID
(
uiP‹t
);

1853 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1854 
iRv
 = 
πk_p‹t_lök_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),&
íSètus
);

1856 #ifde‡
CHIPSET_RTL8305


1857 
iRv
=
πk_p‹t_macSètus_gë
(
PORTID
(
phyid
),&
íSètus
);

1859 if(
iRv
 =
RT_ERR_OK
)

1862 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1863 if(
PORT_LINKUP
==
íSètus
)

1865 
SëLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

1869 
CÃLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

1872 #ifde‡
CHIPSET_RTL8305


1873 if(1==
íSètus
.
lök
)

1875 
SëLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

1879 
CÃLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

1885  
Eº‹Sdk2Drv
(
iRv
);

1888  
DRV_OK
;

1906 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p°P‹tMask
)

1908 
p‹t_num_t
 
uiP‹t
;

1909 
phyid_t
 
phyid
 = 0;

1910 
öt32
 
iRv
 = 
RT_ERR_OK
;

1911 
πk_p‹t_medü_t
 
íMedü
;

1913 if(
NULL
 =
p°P‹tMask
)

1915  
DRV_ERR_PARA
;

1917 
LgcP‹tF‹
(
uiP‹t
)

1919 
phyid
 = 
P‹tLogic2PhyID
(
uiP‹t
);

1920 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1921 
iRv
 = 
πk_p‹t_phyComboP‹tMedü_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
íMedü
);

1923 #ifde‡
CHIPSET_RTL8305


1924 
iRv
=
πk_p‹t_phyComboP‹tMedü_gë
(
PORTID
(
phyid
), &
íMedü
);

1926 if(
iRv
 =
RT_ERR_OK
)

1928 
íMedü
)

1930 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1931 
PORT_MEDIA_COPPER_AUTO
:

1933 
PORT_MEDIA_COPPER
:

1935 
CÃLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

1938 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1939 
PORT_MEDIA_FIBER_AUTO
:

1941 
PORT_MEDIA_FIBER
:

1943 
SëLgcMaskBô
(
uiP‹t
,
p°P‹tMask
);

1947  
DRV_SDK_GEN_ERROR
;

1952  
Eº‹Sdk2Drv
(
iRv
);

1955  
DRV_OK
;

1975 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiAbûôy
, UINT32 
uiP‹tTy≥
)

1977 
phyid_t
 
phyid
 = 0;

1978 
INT32
 
iRv
 = 
RT_ERR_OK
;

1979 
πk_p‹t_phy_abûôy_t
 
πkAbûôy
;

1981 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

1983  
DRV_INVALID_LPORT
;

1985 if(
puiAbûôy
 =
NULL
)

1987  
DRV_ERR_PARA
;

1989 if(
uiP‹tTy≥
 > 
PORT_TYPE_IS_FIBER
)

1991  
DRV_ERR_PARA
;

1993 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

1994 if(
IS_COMBO_PORT
(
lgcP‹t
))

1997 
SPIN_HAL_PORT_LOCK
;

1998 *
puiAbûôy
 = 
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
].
aut⁄eg_advît
;

1999 
SPIN_HAL_PORT_UNLOCK
;

2005 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2006 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2007 
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
πkAbûôy
);

2009 #ifde‡
CHIPSET_RTL8305


2010 
iRv
=
πk_p‹t_phyAutoNegoAbûôy_gë
(
PORTID
(
phyid
), &
πkAbûôy
);

2012 if(
RT_ERR_OK
 !
iRv
)

2014  
Eº‹Sdk2Drv
(
iRv
);

2017 *
puiAbûôy
 = 0;

2019 if(1 =
πkAbûôy
.
HÆf_10
){

2020 *
puiAbûôy
 |
PORT_ABIL_10MB_HD
;

2023 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_10MB_HD
);

2026 if(1 =
πkAbûôy
.
FuŒ_10
){

2027 *
puiAbûôy
 |
PORT_ABIL_10MB_FD
;

2030 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_10MB_FD
);

2033 if(1 =
πkAbûôy
.
HÆf_100
){

2034 *
puiAbûôy
 |
PORT_ABIL_100MB_HD
;

2037 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_100MB_HD
);

2040 if(1 =
πkAbûôy
.
FuŒ_100
){

2041 *
puiAbûôy
 |
PORT_ABIL_100MB_FD
;

2044 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_100MB_FD
);

2046 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2047 if(1 =
πkAbûôy
.
HÆf_1000
){

2048 *
puiAbûôy
 |
PORT_ABIL_1000MB_HD
;

2051 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_1000MB_HD
);

2054 if(1 =
πkAbûôy
.
FuŒ_1000
){

2055 *
puiAbûôy
 |
PORT_ABIL_1000MB_FD
;

2058 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_1000MB_FD
);

2061 if(1 =
πkAbûôy
.
FC
){

2062 *
puiAbûôy
 |
PORT_ABIL_PAUSE_TX
;

2065 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_PAUSE_TX
);

2068 if(1 =
πkAbûôy
.
AsyFC
){

2069 *
puiAbûôy
 |
PORT_ABIL_PAUSE_RX
;

2072 *
puiAbûôy
 &~((
UINT32
)
PORT_ABIL_PAUSE_RX
);

2074 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2077  
DRV_OK
;

2096 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
)

2098 
phyid_t
 
phyid
 = 0;

2099 
öt32
 
iRv
 = 
RT_ERR_OK
;

2100 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2101 
πk_p‹t_•ìd_t
 
íS≥ed
;

2102 
πk_p‹t_du∂ex_t
 
íDu∂ex
;

2104 #ifde‡
CHIPSET_RTL8305


2105 
πk_p‹t_mac_abûôy_t
 
íSètus
;

2107 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2109  
DRV_INVALID_LPORT
;

2111 if(
NULL
 =
puiS≥ed
)

2113  
DRV_ERR_PARA
;

2115 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2116 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2117 
iRv
 = 
πk_p‹t_•ìdDu∂ex_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
íS≥ed
, &
íDu∂ex
);

2118 if(
RT_ERR_OK
 =
iRv
)

2120 
íS≥ed
)

2122 
PORT_SPEED_10M
:

2124 *
puiS≥ed
=
PORT_SPEED_10
;

2127 
PORT_SPEED_100M
:

2129 *
puiS≥ed
=
PORT_SPEED_100
;

2132 
PORT_SPEED_1000M
:

2134 *
puiS≥ed
=
PORT_SPEED_1000
;

2138  
DRV_SDK_GEN_ERROR
;

2143 #ifde‡
CHIPSET_RTL8305


2144 
iRv
=
πk_p‹t_macSètus_gë
(
PORTID
(
phyid
),&
íSètus
);

2146 if(
RT_ERR_OK
 =
iRv
)

2148 
íSètus
.
•ìd
)

2150 
PORT_SPEED_10M
:

2152 *
puiS≥ed
=
PORT_SPEED_10
;

2155 
PORT_SPEED_100M
:

2157 *
puiS≥ed
=
PORT_SPEED_100
;

2160 
PORT_SPEED_1000M
:

2162 *
puiS≥ed
=
PORT_SPEED_1000
;

2166  
DRV_SDK_GEN_ERROR
;

2170  
Eº‹Sdk2Drv
(
iRv
);

2189 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
)

2191 
phyid_t
 
phyid
 = 0;

2192 
öt32
 
iRv
 = 
RT_ERR_OK
;

2193 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2194 
πk_p‹t_•ìd_t
 
íS≥ed
;

2195 
πk_p‹t_du∂ex_t
 
íDu∂ex
;

2197 #ifde‡
CHIPSET_RTL8305


2198 
πk_p‹t_mac_abûôy_t
 
íSètus
;

2200 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2202  
DRV_INVALID_LPORT
;

2204 if(
puiDu∂ex
 =
NULL
)

2206  
DRV_ERR_PARA
;

2208 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2209 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2210 
iRv
 = 
πk_p‹t_•ìdDu∂ex_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
íS≥ed
, &
íDu∂ex
);

2212 if(
RT_ERR_OK
 =
iRv
)

2214 
íDu∂ex
)

2216 
PORT_HALF_DUPLEX
:

2218 *
puiDu∂ex
=
PORT_DUPLEX_HALF
;

2221 
PORT_FULL_DUPLEX
:

2223 *
puiDu∂ex
=
PORT_DUPLEX_FULL
;

2227  
DRV_SDK_GEN_ERROR
;

2231 #ifde‡
CHIPSET_RTL8305


2232 
iRv
=
πk_p‹t_macSètus_gë
(
PORTID
(
phyid
),&
íSètus
);

2234 if(
RT_ERR_OK
 =
iRv
)

2236 
íSètus
.
du∂ex
)

2238 
PORT_HALF_DUPLEX
:

2240 *
puiDu∂ex
=
PORT_DUPLEX_HALF
;

2243 
PORT_FULL_DUPLEX
:

2245 *
puiDu∂ex
=
PORT_DUPLEX_FULL
;

2249  
DRV_SDK_GEN_ERROR
;

2253  
Eº‹Sdk2Drv
(
iRv
);

2272 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
)

2274 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2275 
phyid_t
 
phyid
 = 0;

2276 
πk_p‹t_¸ossOvî_mode_t
 
πkMdix
 = 
PORT_CROSSOVER_MODE_AUTO
;

2278 
öt32
 
iRv
 = 
RT_ERR_OK
;

2280 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2282  
DRV_INVALID_LPORT
;

2285 if(
puiMdix
 =
NULL
)

2287  
DRV_ERR_PARA
;

2289 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2290 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2291 
iRv
 = 
πk_p‹t_phyCrossOvîMode_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
πkMdix
);

2293 if(
RT_ERR_OK
 =
iRv
)

2295 
πkMdix
)

2297 
PORT_CROSSOVER_MODE_AUTO
:

2298 *
puiMdix
 = 
PORT_MDI_AUTO
;

2300 
PORT_CROSSOVER_MODE_MDIX
:

2301 *
puiMdix
 = 
PORT_MDI_ACROSS
;

2303 
PORT_CROSSOVER_MODE_MDI
:

2304 *
puiMdix
 = 
PORT_MDI_NORMAL
;

2307  
DRV_INVALID_MDI_VALUE
;

2311 #ifde‡
CHIPSET_RTL8305


2312 *
puiMdix
 = 
PORT_MDI_NORMAL
;

2314  
Eº‹Sdk2Drv
(
iRv
);

2333 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiPrio
)

2335 
phyid_t
 
phyid
 = 0;

2336 
πk_¥i_t
 
πkPrio
 = 0;

2337 
öt32
 
iRv
 = 
RT_ERR_OK
;

2339 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2341  
DRV_INVALID_LPORT
;

2343 if(
puiPrio
 =
NULL
)

2345  
DRV_ERR_PARA
;

2348 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2349 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2350 
iRv
 = 
πk_qos_p‹tPri_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid), &
πkPrio
);

2352 #ifde‡
CHIPSET_RTL8305


2353 
iRv
 = 
πk_qos_p‹tPri_gë
(
PORTID
(
phyid
),&
πkPrio
);

2355 if(
iRv
 =
RT_ERR_OK
)

2357 *
puiPrio
 = 
πkPrio
;

2360  
Eº‹Sdk2Drv
(
iRv
);

2379 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiFlow˘æ
)

2381 
phyid_t
 
phyid
 = 0;

2382 
öt32
 
iRv
 = 
RT_ERR_OK
;

2383 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2384 
πk_íabÀ_t
 
íabÀ
 = 
DISABLED
;

2386 #ifde‡
CHIPSET_RTL8305


2387 
πk_p‹t_phy_abûôy_t
 
abûôy
;

2389 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2391  
DRV_INVALID_LPORT
;

2393 if(
puiFlow˘æ
 =
NULL
)

2395  
DRV_ERR_PARA
;

2398 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2399 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2400 
iRv
 = 
πk_p‹t_ÊowCålE«bÀ_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),&
íabÀ
);

2401 if(
iRv
 =
RT_ERR_OK
)

2403 if(
íabÀ
==
DISABLED
)

2405 *
puiFlow˘æ
 = 
PORT_FLOWCTRL_DISABLE
;

2407 if(
íabÀ
==
ENABLED
)

2409 *
puiFlow˘æ
 = 
PORT_FLOWCTRL_ENABLE
;

2413 
iRv
 = 
DRV_SDK_GEN_ERROR
;

2417 #ifde‡
CHIPSET_RTL8305


2418 
iRv
 = 
πk_p‹t_phyAutoNegoAbûôy_gë
(
PORTID
(
phyid
),&
abûôy
);

2419 if(
iRv
 =
RT_ERR_OK
)

2422 i‡(
abûôy
.
FC
 &&ábûôy.
AsyFC
)

2423 *
puiFlow˘æ
 = 
PORT_FLOWCTRL_ENABLE
;

2425 *
puiFlow˘æ
 = 
PORT_FLOWCTRL_DISABLE
;

2428  
Eº‹Sdk2Drv
(
iRv
);

2447 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiJumbo
)

2449 
phyid_t
 
phyid
 = 0;

2450 
öt32
 
iRv
 = 
RT_ERR_OK
;

2451 
uöt32
 
ulLí
 = 0;

2453 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2455  
DRV_INVALID_LPORT
;

2457 if(
puiJumbo
 =
NULL
)

2459  
DRV_ERR_PARA
;

2462 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2463 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2464 
iRv
 = 
πk_swôch_p‹tMaxPktLí_gë
(
CHIPID
(
phyid
),
PORTID
’hyid), &
ulLí
);

2466 #ifde‡
CHIPSET_RTL8305


2467 
iRv
 = 
πk_swôch_p‹tMaxPktLí_gë
(
PORTID
(
phyid
), &
ulLí
);

2469 if(
RT_ERR_OK
 =
iRv
)

2471 if(
RTK_NORMAL_PACKET_LEN
 !
ulLí
)

2473 *
puiJumbo
 = 
PORT_JUMBO_ENABLE
;

2477 *
puiJumbo
 = 
PORT_JUMBO_DISABLE
;

2480  
Eº‹Sdk2Drv
(
iRv
);

2499 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLí
)

2501 
phyid_t
 
phyid
 = 0;

2502 
öt32
 
iRv
 = 
RT_ERR_OK
;

2503 
uöt32
 
ulLí
 = 0;

2505 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2507  
DRV_INVALID_LPORT
;

2509 if(
puiLí
 =
NULL
)

2511  
DRV_ERR_PARA
;

2514 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2515 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2516 
iRv
 = 
πk_swôch_p‹tMaxPktLí_gë
(
CHIPID
(
phyid
),
PORTID
’hyid), &
ulLí
);

2518 #ifde‡
CHIPSET_RTL8305


2519 
iRv
 = 
πk_swôch_p‹tMaxPktLí_gë
(
PORTID
(
phyid
), &
ulLí
);

2521 if(
RT_ERR_OK
 =
iRv
)

2523 *
puiLí
 = 
ulLí
;

2527 *
puiLí
 = 0;

2530  
Eº‹Sdk2Drv
(
iRv
);

2532 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2534 
DRV_RET_E
 
HÆ_FibîP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
)

2536 if(
NULL
 =
p°Cfg
)

2538  
DRV_ERR_PARA
;

2540 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2542  
DRV_INVALID_LPORT
;

2545 
RTK_PORT_DEBUG
("HÆ_FibîP‹tCfgInô,Ö‹t=%d\n",
lgcP‹t
);

2547 
SPIN_HAL_PORT_LOCK
;

2548 
mem˝y
(&(
g_°ComboP‹tCfg
[
lgcP‹t
][
PORT_TYPE_IS_FIBER
]), 
p°Cfg
, (
COMBO_PORT_CONFIG_S
));

2549 
SPIN_HAL_PORT_UNLOCK
;

2552 ()
ComboP‹tCfgCh™ge
(
CHIPID
(
P‹tLogic2PhyID
(
lgcP‹t
)), P‹tLogic2PhyID÷gcP‹t), 
PORT_MEDIA_FIBER
);

2554  
DRV_OK
;

2558 
DRV_RET_E
 
HÆ_C›≥rP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
)

2561 if(
NULL
 =
p°Cfg
)

2563  
DRV_ERR_PARA
;

2565 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2567  
DRV_INVALID_LPORT
;

2570 
RTK_PORT_DEBUG
("HÆ_C›≥rP‹tCfgInô,Ö‹t=%d\n",
lgcP‹t
);

2572 
SPIN_HAL_PORT_LOCK
;

2573 
mem˝y
(&(
g_°ComboP‹tCfg
[
lgcP‹t
][
PORT_TYPE_IS_COPPER
]), 
p°Cfg
, (
COMBO_PORT_CONFIG_S
));

2574 
SPIN_HAL_PORT_UNLOCK
;

2577 ()
ComboP‹tCfgCh™ge
(
CHIPID
(
P‹tLogic2PhyID
(
lgcP‹t
)), P‹tLogic2PhyID÷gcP‹t), 
PORT_MEDIA_COPPER
);

2579  
DRV_OK
;

2598 
VOID
 
SFP_GëBxTy≥Index
(
UINT8
 *
pucD©a
, 
UINT32
 
ulCodeVÆ
, UINT8 *
pucIndex
)

2600 
UINT8
 
ucIndexBX
 = 0;

2601 
UINT8
 
ucRbNomöÆ
 = 0;

2602 
UINT16
 
usWaveLí
 = 0;

2606 
ucRbNomöÆ
 = 
pucD©a
[
I2C_RB_NOMINAL_ADDR
];

2607 
usWaveLí
 = (
UINT16
)
pucD©a
[
I2C_WAVELENGTH_ADDR
] << 8;

2608 
usWaveLí
 |(
UINT16
)
pucD©a
[
I2C_WAVELENGTH_ADDR
 + 1];

2611 i‡((
usWaveLí
 > 
SFP_WARELENGTH_SHORT
Ë&& (usWaveLí < 
SFP_WARELENGTH_LONG
))

2613 
ucIndexBX
 += 1;

2617 
ucIndexBX
 += 0;

2620 i‡(
SFP_100X_BASE_BX_Y
 =
ulCodeVÆ
)

2622 i‡(
ucRbNomöÆ
 > 10)

2624 
ucIndexBX
 += 2;

2628 
ucIndexBX
 += 0;

2631 i‡(
SFP_100_BASE_BX_Y
 =
ulCodeVÆ
)

2636 *
pucIndex
 = 
ucIndexBX
;

2656 
DRV_RET_E
 
HÆ_GëFibîS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
)

2658 
UINT8
 
aucD©a
[
MAX_TRANSCEIVER_CODE_LEN
] = {0};

2659 
UINT8
 
aucTøns˚ivîCodes
[
I2C_TRANSCEIVER_CODES_LEN
];

2660 
UINT8
 
ucBXIndex
 = 0;

2661 
UINT32
 
ulRódLí
 = 0;

2662 
UINT32
 
ulTøns˚ivîCode
 = 0;

2664 if(
NULL
 =
puiS≥ed
)

2666  
DRV_ERR_PARA
;

2669 
mem£t
(
aucTøns˚ivîCodes
, 0, (aucTransceiverCodes));

2671 
ulRódLí
 = 
I2C_TRANSCEIVER_CODES_LEN
;

2673 
RTK_PORT_DEBUG
("lgcP‹t%d, I2C_TRANSCEIVER_CODES_ADDR=%x, ulRódLí=%d,\n",
lgcP‹t
, 
I2C_TRANSCEIVER_CODES_ADDR
,
ulRódLí
);

2674 if(
DRV_OK
 !
HÆ_I2cFibîP‹tRód
(
lgcP‹t
, 
I2C_TRANSCEIVER_CODES_ADDR
, 
aucTøns˚ivîCodes
, 
ulRódLí
, 
ADDRESS_IN_KERNEL_SPACE
))

2676  
DRV_I2C_READ_ERROR
;

2679 
ulTøns˚ivîCode
 = (
UINT32
)
aucTøns˚ivîCodes
[0] << 24;

2680 
ulTøns˚ivîCode
 |(
UINT32
)
aucTøns˚ivîCodes
[1] << 16;

2681 
ulTøns˚ivîCode
 |(
UINT32
)
aucTøns˚ivîCodes
[2] << 8;

2682 
ulTøns˚ivîCode
 |(
UINT32
)
aucTøns˚ivîCodes
[3];

2683 
ulTøns˚ivîCode
 &
I2C_RANSCEIVER_CODES_MASK
;

2685 
ulTøns˚ivîCode
)

2687 
SFP_100_BASE_SX1
:

2688 
SFP_100_BASE_SX2
:

2689 
SFP_100_BASE_SX3
:

2690 
SFP_100_BASE_LX1
:

2691 
SFP_100_BASE_LX2
:

2692 
SFP_100_BASE_LX3
:

2693 
SFP_100_BASE_BX_Y
:

2694 
SFP_100_BASE_ZX
:

2695 *
puiS≥ed
 = 
PORT_TYPE_FIBER_100
;

2696  
DRV_OK
;

2698 
SFP_1000_BASE_SX
:

2699 
SFP_1000_BASE_LX
:

2700 
SFP_1000_BASE_T_AN
:

2701 
SFP_1000_BASE_LX_AN
:

2702 
SFP_1000_BASE_PX
:

2703 *
puiS≥ed
 = 
PORT_TYPE_FIBER_1000
;

2704  
DRV_OK
;

2706 
SFP_100X_BASE_BX_Y
:

2707 
ulRódLí
 = 
MAX_TRANSCEIVER_CODE_LEN
;

2709 if(
DRV_OK
 !
HÆ_I2cFibîP‹tRód
(
lgcP‹t
, 
I2C_START
, 
aucD©a
, 
ulRódLí
, 
ADDRESS_IN_KERNEL_SPACE
))

2711  
DRV_I2C_READ_ERROR
;

2714 
SFP_GëBxTy≥Index
(
aucD©a
, 
ulTøns˚ivîCode
, &
ucBXIndex
);

2715 
ucBXIndex
)

2717 
SFP_100_BASE_BX_D
:

2718 
SFP_100_BASE_BX_U
:

2719 *
puiS≥ed
 = 
PORT_TYPE_FIBER_100
;

2720  
DRV_OK
;

2721 
SFP_1000_BASE_BX_D
:

2722 
SFP_1000_BASE_BX_U
:

2723 *
puiS≥ed
 = 
PORT_TYPE_FIBER_1000
;

2724  
DRV_OK
;

2726  
DRV_ERR_UNKNOW
;

2728 
SFP_STACK_PLUS
:

2729 
SFP_STACK
:

2730  
DRV_ERR_UNKNOW
;

2734  
DRV_ERR_UNKNOW
;

2755 
BOOL
 
ComboP‹tCfgCh™ge
(
uöt32
 
unô
, uöt32 
phyP‹t
, 
πk_p‹t_medü_t
 
íMedü
)

2757 
UINT32
 
uiP‹tTy≥
 = 0;

2758 
p‹t_num_t
 
lgcP‹t
;

2759 
COMBO_PORT_CONFIG_S
 
°ComboP‹tCfg
;

2760 
πk_íabÀ_t
 
íE«bÀ
 = 
DISABLED
;

2761 
P‹tTy≥_E
 
uiS≥ed
 = 
PORT_TYPE_FIBER_UNKNOWN
;

2762 
πk_p‹t_medü_t
 
íOldMedü
 = 
PORT_MEDIA_COPPER
;

2764 
lgcP‹t
 = 
P‹tPhyID2Logic
(
phyP‹t
);

2766 
RTK_PORT_DEBUG
("ComboP‹tCfgCh™ge,Ö‹t=%d\n",
lgcP‹t
);

2768 if(!
IS_COMBO_PORT
(
lgcP‹t
))

2770  
FALSE
;

2772 ()
πk_p‹t_phyComboP‹tMedü_gë
(
CHIPID
(
phyP‹t
), 
PORTID
’hyP‹t), &
íOldMedü
);

2774 
íMedü
)

2776 
PORT_MEDIA_COPPER
:

2778 if((
PORT_MEDIA_COPPER
 !
íOldMedü
Ë&& (
PORT_MEDIA_COPPER_AUTO
 !=ÉnOldMedia))

2780 
RTK_PORT_DEBUG
("%s, %d\n",
__FUNCTION__
,
__LINE__
);

2781  
TRUE
;

2783 
uiP‹tTy≥
 = 
PORT_TYPE_IS_COPPER
;

2786 
PORT_MEDIA_FIBER
:

2788 if((
PORT_MEDIA_FIBER
!
íOldMedü
Ë&& (
PORT_MEDIA_FIBER_AUTO
 !=ÉnOldMedia))

2790 
RTK_PORT_DEBUG
("%s, %d\n",
__FUNCTION__
,
__LINE__
);

2791  
TRUE
;

2793 
uiP‹tTy≥
 = 
PORT_TYPE_IS_FIBER
;

2797  
FALSE
;

2800 
RTK_PORT_DEBUG
("ComboP‹tCfgCh™ge,Ö‹t=%d, uiP‹tTy≥=%d\n",
lgcP‹t
,
uiP‹tTy≥
);

2803 
SPIN_HAL_PORT_LOCK
;

2804 
mem˝y
(&
°ComboP‹tCfg
, &(
g_°ComboP‹tCfg
[
lgcP‹t
][
uiP‹tTy≥
]), (
COMBO_PORT_CONFIG_S
));

2805 
SPIN_HAL_PORT_UNLOCK
;

2809 if(
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
)

2811 ()
HÆ_GëFibîS≥ed
(
lgcP‹t
, (
UINT32
 *)&
uiS≥ed
);

2812 
RTK_PORT_DEBUG
("HÆ_GëFibîS≥ed,Ö‹t=%d, uiS≥ed=%d\n",
lgcP‹t
,
uiS≥ed
);

2813 if(
PORT_TYPE_FIBER_100
 =
uiS≥ed
)

2815 
°ComboP‹tCfg
.
aut⁄eg_advît
 &~(
PORT_ABIL_1000MB_FD
);

2816 
°ComboP‹tCfg
.
aut⁄eg_advît
 &~(
PORT_ABIL_100MB_HD
);

2817 
°ComboP‹tCfg
.
aut⁄eg_advît
 |(
PORT_ABIL_100MB_FD
);

2818 
°ComboP‹tCfg
.
f‹˚_•ìd
 = 
PORT_SPEED_100
;

2822 
°ComboP‹tCfg
.
aut⁄eg_advît
 &~(
PORT_ABIL_100MB_FD
);

2823 
°ComboP‹tCfg
.
aut⁄eg_advît
 |(
PORT_ABIL_1000MB_FD
);

2824 
°ComboP‹tCfg
.
f‹˚_•ìd
 = 
PORT_SPEED_1000
;

2828 
RTK_PORT_DEBUG
("ComboP‹tCfgCh™ge,Ö‹t=%d,áut⁄eg_íabÀ=%d,\«ut⁄eg_advît=%d,\nf‹˚_•ìd=%d,\nf‹˚_du∂ex=%d\n",
lgcP‹t
,
°ComboP‹tCfg
.
aut⁄eg_íabÀ
,°ComboP‹tCfg.
aut⁄eg_advît
,°ComboP‹tCfg.
f‹˚_•ìd
,°ComboP‹tCfg.
f‹˚_du∂ex
);

2829 ()
HÆ_SëP‹tAbûôy
(
lgcP‹t
, 
°ComboP‹tCfg
.
aut⁄eg_advît
, 
uiP‹tTy≥
);

2831 i‡(
°ComboP‹tCfg
.
aut⁄eg_íabÀ
)

2834 ()
HÆ_SëP‹tAut⁄eg
(
lgcP‹t
, 
TRUE
, 
uiP‹tTy≥
);

2838 ()
HÆ_SëP‹tS≥ed
(
lgcP‹t
, 
°ComboP‹tCfg
.
f‹˚_•ìd
, 
uiP‹tTy≥
);

2839 ()
HÆ_SëP‹tDu∂ex
(
lgcP‹t
, 
°ComboP‹tCfg
.
f‹˚_du∂ex
, 
uiP‹tTy≥
);

2840 ()
HÆ_SëP‹tAut⁄eg
(
lgcP‹t
, 
FALSE
, 
uiP‹tTy≥
);

2842 ()
πk_p‹t_admöE«bÀ_gë
(
unô
, 
PORTID
(
phyP‹t
), &
íE«bÀ
);

2843 if(
ENABLED
 =
íE«bÀ
)

2846 
HÆ_SëP‹tE«bÀ
(
lgcP‹t
, 
FALSE
);

2848 
oßl_time_u¶ìp
(200000);

2849 
HÆ_SëP‹tE«bÀ
(
lgcP‹t
, 
TRUE
);

2854 if(
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
)

2856 
RTK_PORT_DEBUG
("HÆ_GëFibîS≥ed,Ö‹t=%d, uiS≥ed=%d\n",
lgcP‹t
,
uiS≥ed
);

2857 if(
PORT_TYPE_FIBER_100
 =
uiS≥ed
)

2860 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
unô
, 
PORTID
(
phyP‹t
), 
PORT_FIBER_MEDIA_100
);

2861  
TRUE
;

2865 ()
πk_p‹t_phyComboP‹tFibîMedü_£t
–
unô
, 
PORTID
(
phyP‹t
), 
PORT_FIBER_MEDIA_1000
);

2866  
TRUE
;

2870  
TRUE
;

2889 
DRV_RET_E
 
HÆ_P‹tLedInô
()

2892 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2893 ()
dÆ_esw_Æl_Àd_tu∫_⁄_™d_off
(
CHIPID
(
P‹tLogic2PhyID
(1)));

2895 #i‡
deföed
(
CHIPSET_RTL8305
)

2896 
πk_Àd_modeF‹˚_£t
(
LED_GROUP_1
, 
LED_FORCE_ON
);

2897 
m¶ìp
(500);

2898 
πk_Àd_modeF‹˚_£t
(
LED_GROUP_1
, 
LED_FORCE_NORMAL
);

2900  
DRV_OK
;

2902 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2903 
	#FIBER_PORT_1_NO
 25

	)

2904 
	#FIBER_PORT_2_NO
 26

	)

2923 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
)

2925 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2926 
phyid_t
 
phyid
 = 0;

2927 
UINT32
 
uiChùId
 = 0;

2928 
UINT32
 
ulVÆ
 = 0;

2930 
INT32
 
iRv
 = 
RT_ERR_OK
;

2932 #i‡
deföed
(
CHIPSET_RTL8305
)

2933 ()
uiLökSèã
;

2935 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

2937  
DRV_INVALID_LPORT
;

2939 if((
PORT_TYPE_IS_FIBER
 =
uiP‹tTy≥
Ë&& (
IS_COPPER_PORT
(
lgcP‹t
)))

2941  
DRV_INVALID_VALUE
;

2945 if((
lgcP‹t
 <
DEVICE1_SLOT0_PORT_NO
Ë|| (
PORT_TYPE_IS_COPPER
 =
uiP‹tTy≥
))

2947  
DRV_OK
;

2951 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

2952 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

2953 
uiChùId
 = 
CHIPID
(
phyid
);

2954 if((
iRv
 = 
dÆ_esw_Àd_so·w¨e_c⁄åﬁ0_gë
(
uiChùId
, &
ulVÆ
)Ë!
RT_ERR_OK
)

2956  
Eº‹Sdk2Drv
(
iRv
);

2960 if(
FIBER_PORT_1_NO
 =
lgcP‹t
)

2962 if(
PORT_LINK_UP
 =
uiLökSèã
)

2965 
ulVÆ
 |= 0x00000001;

2971 
ulVÆ
 &= ~(0x00000001);

2975 if(
FIBER_PORT_2_NO
 =
lgcP‹t
)

2977 if(
PORT_LINK_UP
 =
uiLökSèã
)

2980 
ulVÆ
 |= 0x00000100;

2986 
ulVÆ
 &= ~(0x00000100);

2990 
iRv
 = 
dÆ_esw_Àd_so·w¨e_c⁄åﬁ0_£t
(
uiChùId
, 
ulVÆ
);

2992  
Eº‹Sdk2Drv
(
iRv
);

3011 
DRV_RET_E
 
HÆ_SëI¡î«lLo›back
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
)

3013 
INT32
 
iRv
 = 
RT_ERR_OK
;

3014 
phyid_t
 
phyid
 = 0;

3016 
UINT32
 
d©a
;

3018 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

3020  
DRV_INVALID_LPORT
;

3022 if(!
ISVALID_LOOPBACK_VALUE
(
uiE«bÀ
))

3024  
DRV_INVALID_LOOPBACK_VALUE
;

3027 
uiE«bÀ
)

3029 
PORT_LOOPBACK_DISABLE
:

3032 
PORT_LOOPBACK_ENABLE
:

3036  
DRV_INVALID_LOOPBACK_VALUE
;

3038 if(
PORT_LOOPBACK_ENABLE
==
uiE«bÀ
)

3040 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

3041 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

3042 
iRv
=
πk_p‹t_phyReg_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),0,
PHY_REG_CONTROL
,&
d©a
);

3044 #i‡
deföed
(
CHIPSET_RTL8305
)

3045 
iRv
=
πk_p‹t_phyReg_gë
(
PORTID
(
phyid
),
PHY_REG_CONTROL
,&
d©a
);

3047 if(
DRV_OK
!=
Eº‹Sdk2Drv
(
iRv
))

3049  
Eº‹Sdk2Drv
(
iRv
);

3051 if(
d©a
&(1<<14))

3053  
DRV_OK
;

3055 
d©a
|=(1<<14);

3056 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

3057 
iRv
=
πk_p‹t_phyReg_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid),0,
PHY_REG_CONTROL
,
d©a
);

3059 #i‡
deföed
(
CHIPSET_RTL8305
)

3060 
iRv
=
πk_p‹t_phyReg_£t
(
PORTID
(
phyid
),
PHY_REG_CONTROL
,
d©a
);

3062  
Eº‹Sdk2Drv
(
iRv
);

3066 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

3067 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

3068 
iRv
=
πk_p‹t_phyReg_gë
(
CHIPID
(
phyid
), 
PORTID
’hyid),0,
PHY_REG_CONTROL
,&
d©a
);

3070 #i‡
deföed
(
CHIPSET_RTL8305
)

3071 
iRv
=
πk_p‹t_phyReg_gë
(
PORTID
(
phyid
),
PHY_REG_CONTROL
,&
d©a
);

3073 if(
DRV_OK
!=
Eº‹Sdk2Drv
(
iRv
))

3075  
Eº‹Sdk2Drv
(
iRv
);

3077 if(!(
d©a
&(1<<14)))

3079  
DRV_OK
;

3081 
d©a
&=~(1<<14);

3082 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

3083 
iRv
=
πk_p‹t_phyReg_£t
(
CHIPID
(
phyid
), 
PORTID
’hyid),0,
PHY_REG_CONTROL
,
d©a
);

3085 #i‡
deföed
(
CHIPSET_RTL8305
)

3086 
iRv
=
πk_p‹t_phyReg_£t
(
PORTID
(
phyid
),
PHY_REG_CONTROL
,
d©a
);

3088  
Eº‹Sdk2Drv
(
iRv
);

3094 
πk_p‹t_∑rm_öô
()

3096 
ii
;

3098 
¥ötk
("##### Hi call Hal_CopperPortCfgInit\n");

3099 
CÃLgcMaskAŒ
(&
isﬁ©e_ßve
);

3100  
ii
 = 0 ; iò< (
LOGIC_PORT_NO
+1); ii++ )

3102 
•dlx_ßve
[
ii
] = (
uöt32
)
PORT_AUTOAUTO
;

3107 #i‡
deföed
(
CHIPSET_RTL8305
)

3125 
DRV_RET_E
 
HÆ_Re°¨tP‹tNeg
(
p‹t_num_t
 
lgcP‹t
)

3127 
phyid_t
 
phyid
 = 0;

3128 
INT32
 
iRv
 = 
RT_ERR_OK
;

3129 
uöt32
 
phyD©a
 = 0;

3131 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

3133  
DRV_INVALID_LPORT
;

3136 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

3138 
iRv
 = 
πl8367b_£tAsicPHYReg
(
phyid
,
PHY_PAGE_ADDRESS
,0);

3139 if(
DRV_OK
!=
Eº‹Sdk2Drv
(
iRv
))

3141  
Eº‹Sdk2Drv
(
iRv
);

3144 
iRv
 = 
πl8367b_gëAsicPHYReg
(
phyid
,
PHY_CONTROL_REG
,&
phyD©a
);

3145 if(
DRV_OK
!=
Eº‹Sdk2Drv
(
iRv
))

3147  
Eº‹Sdk2Drv
(
iRv
);

3151 i‡(!(
phyD©a
 & (1U << 
PHY_CONTROL_REG_AUTO_NEGO_OFFSET
)))

3153  
DRV_INVALID_VALUE
;

3156 
phyD©a
 |(1U << 
PHY_CONTROL_REG_RESTART_AUTO_NEGO_OFFSET
);

3157 
iRv
 = 
πl8367b_£tAsicPHYReg
(
phyid
,
PHY_CONTROL_REG
,
phyD©a
);

3158 if(
DRV_OK
!=
Eº‹Sdk2Drv
(
iRv
))

3160  
Eº‹Sdk2Drv
(
iRv
);

3163 
iRv
 = 
πl8367b_£tAsicPHYReg
(
phyid
,
PHY_PAGE_ADDRESS
,0);

3164 if(
DRV_OK
!=
Eº‹Sdk2Drv
(
iRv
))

3166  
Eº‹Sdk2Drv
(
iRv
);

3169  
Eº‹Sdk2Drv
(
iRv
);

3173 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_qos.c

17 #ifde‡ 
__˝lu•lus


20 
	~<löux/kî√l.h
>

21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~<löux/°rög.h
>

29 
	~"hÆ_comm⁄.h
"

34 
	~<löux/•ölock_ty≥s.h
>

35 
	~<löux/•ölock.h
>

36 
	~<löux/¶ab.h
>

37 
	~"πk_≠i.h
"

38 
	~"πk_≠i_ext.h
"

53 
DRV_RET_E
 
HÆ_SëQosCpuInô
();

60 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

66 
UINT32
 
_qosI¡PriToDp
[
QOS_MAX_INTERNAL_PRIORITY
]={
QOS_COLOR_GREEEN
,QOS_COLOR_GREEEN,QOS_COLOR_GREEEN,

67 
QOS_COLOR_GREEEN
,QOS_COLOR_GREEEN,QOS_COLOR_GREEEN,QOS_COLOR_GREEEN,QOS_COLOR_GREEEN};

78 
	#HAL_DRV_QOS_1P_PRI_REMAP_GROUP
 0

	)

79 
	#HAL_DRV_QOS_DSCP_PRI_REMAP_GROUP
 0

	)

80 
	#HAL_DRV_QOS_PRI_SELECT_GROUP
 0

	)

81 
	#HAL_DRV_QOS_1P_PRI_REMARK_GROUP
 0

	)

102 
DRV_RET_E
 
HÆ_SëQosInô
()

104 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

105 
p‹t_num_t
 
Õ‹t
;

106 
UINT32
 
unô
, 
i
;

107 
πk_p‹t_t
 
p‹t
;

109 #ifde‡
CHIPSET_RTL8305


110 
πk_qos_¥i2queue_t
 
¥i2que
;

113 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

114 
UnôF‹
(
unô
)

118 ()
πk_qos_c⁄gAvoidAlgo_£t
(
unô
, 
CONG_AVOID_WTD
);

121 
LgcP‹tF‹
(
Õ‹t
)

123 
unô
 = 
P‹tLogci2ChùId
(
Õ‹t
);

124 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

131 ()
πk_qos_p‹t1pPriRem≠Group_£t
(
unô
, 
p‹t
, 
HAL_DRV_QOS_1P_PRI_REMAP_GROUP
);

132 ()
πk_qos_p‹tDs˝PriRem≠Group_£t
(
unô
, 
p‹t
, 
HAL_DRV_QOS_DSCP_PRI_REMAP_GROUP
);

135 ()
πk_qos_p‹tPriSñGroup_£t
(
unô
, 
p‹t
, 
HAL_DRV_QOS_PRI_SELECT_GROUP
);

139 ()
πk_qos_p‹t1pRem¨kGroup_£t
(
unô
, 
p‹t
, 
HAL_DRV_QOS_1P_PRI_REMARK_GROUP
);

140 ()
πk_qos_p‹t1pPriM≠Group_£t
(
unô
, 
p‹t
, 
HAL_DRV_QOS_1P_PRI_REMARK_GROUP
);

141 ()
πk_qos_1pRem¨kE«bÀ_£t
(
unô
, 
p‹t
, 
DISABLED
);

144 
i
 = 0; i < 
QOS_MAX_INTERNAL_PRIORITY
; i++)

146 #i‡(
QUEUE_NUM
 == 4)

148 if(
RT_ERR_OK
 !
πk_qos_p‹tPriM≠_£t
(
unô
, 
p‹t
, 
i
, i/2))

150  
DRV_ERR_UNKNOW
;

152 #ñi‡(
QUEUE_NUM
 == 8)

154 if(
RT_ERR_OK
 !
πk_qos_p‹tPriM≠_£t
(
unô
, 
p‹t
, 
i
, i))

156  
DRV_ERR_UNKNOW
;

158 #ñi‡(
QUEUE_NUM
 == 2)

160 if(
RT_ERR_OK
 !
πk_qos_p‹tPriM≠_£t
(
unô
, 
p‹t
, 
i
, i/4))

162  
DRV_ERR_UNKNOW
;

172 #ifde‡
CHIPSET_RTL8305


173 if(
RT_ERR_OK
!=
πk_qos_öô
(
QUEUE_NUM
))

175  
DRV_ERR_UNKNOW
;

177 #i‡(
QUEUE_NUM
 == 4)

179 
¥i2que
.
¥i2queue
[0]=0;

180 
¥i2que
.
¥i2queue
[1]=0;

181 
¥i2que
.
¥i2queue
[2]=1;

182 
¥i2que
.
¥i2queue
[3]=1;

183 
¥i2que
.
¥i2queue
[4]=2;

184 
¥i2que
.
¥i2queue
[5]=2;

185 
¥i2que
.
¥i2queue
[6]=3;

186 
¥i2que
.
¥i2queue
[7]=3;

187 if(
RT_ERR_OK
 !
πk_qos_¥iM≠_£t
(
QUEUE_NUM
,&
¥i2que
))

189  
DRV_ERR_UNKNOW
;

191 #ñi‡(
QUEUE_NUM
 == 8)

193 
¥i2que
.
¥i2queue
[0]=0;

194 
¥i2que
.
¥i2queue
[1]=1;

195 
¥i2que
.
¥i2queue
[2]=2;

196 
¥i2que
.
¥i2queue
[3]=3;

197 
¥i2que
.
¥i2queue
[4]=4;

198 
¥i2que
.
¥i2queue
[5]=5;

199 
¥i2que
.
¥i2queue
[6]=6;

200 
¥i2que
.
¥i2queue
[7]=7;

201 if(
RT_ERR_OK
 !
πk_qos_¥iM≠_£t
(
QUEUE_NUM
,&
¥i2que
))

203  
DRV_ERR_UNKNOW
;

205 #ñi‡(
QUEUE_NUM
 == 2)

206 
¥i2que
.
¥i2queue
[0]=0;

207 
¥i2que
.
¥i2queue
[1]=0;

208 
¥i2que
.
¥i2queue
[2]=0;

209 
¥i2que
.
¥i2queue
[3]=0;

210 
¥i2que
.
¥i2queue
[4]=1;

211 
¥i2que
.
¥i2queue
[5]=1;

212 
¥i2que
.
¥i2queue
[6]=1;

213 
¥i2que
.
¥i2queue
[7]=1;

215 if(
RT_ERR_OK
 !
πk_qos_¥iM≠_£t
(
QUEUE_NUM
,&
¥i2que
))

217  
DRV_ERR_UNKNOW
;

221 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

222  
HÆ_SëQosCpuInô
();

224  
DRV_OK
;

245 
DRV_RET_E
 
HÆ_Së1pIngªssPri‹ôyRem≠
(
qos_8021p_to_öçri_t
 
°1pToI¡Pri
)

247 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

248 
UINT32
 
unô
;

250 
UINT32
 
¥i1p
, 
ötPri
;

251 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

252 
UINT32
 
dp
;

256 
¥i1p
 = 0;Öri1∞< 
QOS_MAX_1P_PRIORITY
;Öri1p++)

258 if(
°1pToI¡Pri
.
öã∫ÆPri
[
¥i1p
] >
QOS_MAX_INTERNAL_PRIORITY
)

260  
DRV_ERR_PARA
;

263 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

264 
UnôF‹
(
unô
)

266 
¥i1p
 = 0;Öri1∞< 
QOS_MAX_1P_PRIORITY
;Öri1p++)

268 
ötPri
 = 
°1pToI¡Pri
.
öã∫ÆPri
[
¥i1p
];

269 
dp
 = 
_qosI¡PriToDp
[
ötPri
];

271 if(
RT_ERR_OK
 !
πk_qos_1pPriRem≠Group_£t
(
unô
, 
HAL_DRV_QOS_1P_PRI_REMAP_GROUP
, 
¥i1p
, 
ötPri
, 
dp
))

273  
DRV_ERR_UNKNOW
;

276 if(
RT_ERR_OK
 !
πk_qos_1pRem¨kGroup_£t
(
unô
, 
HAL_DRV_QOS_1P_PRI_REMARK_GROUP
, 
ötPri
, 
_qosI¡PriToDp
[ötPri], 
¥i1p
))

278  
DRV_ERR_UNKNOW
;

284 #ifde‡
CHIPSET_RTL8305


285 
¥i1p
 = 0;Öri1∞< 
QOS_MAX_1P_PRIORITY
;Öri1p++)

287 
ötPri
 = 
°1pToI¡Pri
.
öã∫ÆPri
[
¥i1p
];

290 if(
RT_ERR_OK
 !
πk_qos_1pPriRem≠_£t
(
¥i1p
, 
ötPri
))

292  
DRV_ERR_UNKNOW
;

296  
DRV_OK
;

316 
DRV_RET_E
 
HÆ_SëCos2QidRem≠
(
qos_8021p_to_öçri_t
 
°1pPri2qid
)

318 
πk_qos_¥i2queue_t
 
°qid
;

319 
UINT32
 
¥i1p
;

321 
¥i1p
 = 0;Öri1∞< 
QOS_MAX_1P_PRIORITY
;Öri1p++)

323 if(
°1pPri2qid
.
öã∫ÆPri
[
¥i1p
] >
QOS_MAX_1P_QUEUENO
)

325  
DRV_ERR_PARA
;

328 
°qid
.
¥i2queue
[
¥i1p
] = (
πk_uöt32
)
°1pPri2qid
.
öã∫ÆPri
[pri1p];

331 #ifde‡
CHIPSET_RTL8305


332 if(
RT_ERR_OK
 !
πk_qos_¥iM≠_£t
(
QUEUE_NUM
, &
°qid
))

334  
DRV_ERR_UNKNOW
;

338  
DRV_OK
;

358 
DRV_RET_E
 
HÆ_SëDs˝IngªssPri‹ôyRem≠
(
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
)

360 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

361 
UINT32
 
unô
;

363 
UINT32
 
¥iDs˝
, 
ötPri
;

364 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

365 
UINT32
 
dp
;

367 
¥iDs˝
 = 0;ÖriDs˝ < 
QOS_MAX_DSCP_PRIORITY
;ÖriDscp++)

369 if(
°Ds˝ToI¡Pri
.
öã∫ÆPri
[
¥iDs˝
] >
QOS_MAX_INTERNAL_PRIORITY
)

371  
DRV_ERR_PARA
;

374 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

375 
UnôF‹
(
unô
)

377 
¥iDs˝
 = 0;ÖriDs˝ < 
QOS_MAX_DSCP_PRIORITY
;ÖriDscp++)

379 
ötPri
 = 
°Ds˝ToI¡Pri
.
öã∫ÆPri
[
¥iDs˝
];

380 
dp
 = 
_qosI¡PriToDp
[
ötPri
];

382 if(
RT_ERR_OK
 !
πk_qos_ds˝PriRem≠Group_£t
(
unô
, 
HAL_DRV_QOS_DSCP_PRI_REMAP_GROUP
, 
¥iDs˝
, 
ötPri
, 
dp
))

384  
DRV_ERR_UNKNOW
;

389 #ifde‡
CHIPSET_RTL8305


390 
¥iDs˝
 = 0;ÖriDs˝ < 
QOS_MAX_DSCP_PRIORITY
;ÖriDscp++)

392 
ötPri
 = 
°Ds˝ToI¡Pri
.
öã∫ÆPri
[
¥iDs˝
];

395 if(
RT_ERR_OK
 !
πk_qos_ds˝PriRem≠_£t
(
¥iDs˝
, 
ötPri
))

397  
DRV_ERR_UNKNOW
;

401  
DRV_OK
;

422 
DRV_RET_E
 
HÆ_SëQosTru°Mode
(
UINT32
 
mode
)

424 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

425 
UINT32
 
unô
;

426 
πk_qos_¥iSñWeight_t
 
°PriSñWeight
;

428 #ifde‡
CHIPSET_RTL8305


429 
πk_¥i‹ôy_£À˘_t
 
°PriSñWeight
;

433 if(
QOS_COS
 =
mode
)

435 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

437 
°PriSñWeight
.
weight_of_ÊowBa£d
 = 6;

440 
°PriSñWeight
.
weight_of_ö√rTag
 = 5;

441 
°PriSñWeight
.
weight_of_ouãrTag
 = 4;

444 
°PriSñWeight
.
weight_of_dŸ1q
 = 3;

447 
°PriSñWeight
.
weight_of_p‹tBa£d
 = 2;

450 
°PriSñWeight
.
weight_of_ds˝
 = 1;

453 #ifde‡
CHIPSET_RTL8305


455 
°PriSñWeight
.
a˛_¥i
 = 8;

457 
°PriSñWeight
.
cvœn_¥i
 = 7;

458 
°PriSñWeight
.
svœn_¥i
 = 6;

459 
°PriSñWeight
.
dŸ1q_¥i
 = 5;

461 
°PriSñWeight
.
p‹t_¥i
 = 4;

463 
°PriSñWeight
.
ds˝_¥i
 = 3;

464 
°PriSñWeight
.
dmac_¥i
 = 2;

465 
°PriSñWeight
.
smac_¥i
 = 1;

468 if(
QOS_DSCP
 =
mode
)

470 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

472 
°PriSñWeight
.
weight_of_ÊowBa£d
 = 6;

475 
°PriSñWeight
.
weight_of_ds˝
 = 5;

478 
°PriSñWeight
.
weight_of_ö√rTag
 = 4;

479 
°PriSñWeight
.
weight_of_ouãrTag
 = 3;

483 
°PriSñWeight
.
weight_of_dŸ1q
 = 2;

485 
°PriSñWeight
.
weight_of_p‹tBa£d
 = 1;

488 #ifde‡
CHIPSET_RTL8305


490 
°PriSñWeight
.
a˛_¥i
 = 8;

492 
°PriSñWeight
.
cvœn_¥i
 = 6;

493 
°PriSñWeight
.
svœn_¥i
 = 5;

494 
°PriSñWeight
.
dŸ1q_¥i
 = 4;

496 
°PriSñWeight
.
p‹t_¥i
 = 3;

498 
°PriSñWeight
.
ds˝_¥i
 = 7;

499 
°PriSñWeight
.
dmac_¥i
 = 2;

500 
°PriSñWeight
.
smac_¥i
 = 1;

503 if(
QOS_PORT
 =
mode
)

505 #ifde‡
CHIPSET_RTL8305


507 
°PriSñWeight
.
a˛_¥i
 = 8;

509 
°PriSñWeight
.
cvœn_¥i
 = 6;

510 
°PriSñWeight
.
svœn_¥i
 = 5;

511 
°PriSñWeight
.
dŸ1q_¥i
 = 4;

513 
°PriSñWeight
.
p‹t_¥i
 = 7;

515 
°PriSñWeight
.
ds˝_¥i
 = 3;

516 
°PriSñWeight
.
dmac_¥i
 = 2;

517 
°PriSñWeight
.
smac_¥i
 = 1;

522  
DRV_ERR_PARA
;

524 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

525 
UnôF‹
(
unô
)

527 if(
RT_ERR_OK
 !
πk_qos_¥iSñGroup_£t
(
unô
, 
HAL_DRV_QOS_PRI_SELECT_GROUP
, &
°PriSñWeight
))

529  
DRV_ERR_UNKNOW
;

533 #ifde‡
CHIPSET_RTL8305


534 if(
RT_ERR_OK
 !
πk_qos_¥iSñ_£t
(&
°PriSñWeight
))

536  
DRV_ERR_UNKNOW
;

539  
DRV_OK
;

558 
DRV_RET_E
 
HÆ_SëQosQueueSchedul
(
QueueMode_S
 
°QueueScheduÀ
)

560 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

561 
πk_qos_schedulög_ty≥_t
 
queueMode
;

563 
πk_qos_queue_weights_t
 
°QueueWeight
;

564 
p‹t_num_t
 
Õ‹t
;

565 
UINT32
 
i
,
queue
;

566 
πk_p‹t_t
 
p‹t
;

567 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

568 
UINT32
 
unô
;

571 #i‡(
QUEUE_NUM
 > 
RTK_MAX_NUM_OF_QUEUE
)

572 
queue
 = 
RTK_MAX_NUM_OF_QUEUE
;

574 
queue
 = 
QUEUE_NUM
;

577 
°QueueScheduÀ
.
QueueMode
)

579 
QUEUE_MODE_HQ_WRR
:

580 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

581 
queueMode
 = 
WRR
;

584 
°QueueScheduÀ
.
Weight
[
queue
 - 1] = 0;

586 
QUEUE_MODE_WFQ
:

587 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

588 
queueMode
 = 
WFQ
;

591 
QUEUE_MODE_WRR
:

592 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

593 
queueMode
 = 
WRR
;

597  
DRV_ERR_PARA
;

600 
mem£t
(&
°QueueWeight
, 0, (
πk_qos_queue_weights_t
));

601 
i
 = 0; i < 
queue
; i++)

603 
°QueueWeight
.
weights
[
i
] = 
°QueueScheduÀ
.
Weight
[i];

606 
LgcP‹tF‹
(
Õ‹t
)

608 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

609 
unô
 = 
P‹tLogci2ChùId
(
Õ‹t
);

611 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

612 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

613 ()
πk_qos_schedulögAlg‹ôhm_£t
(
unô
, 
p‹t
, 
queueMode
);

614 ()
πk_qos_schedulögQueue_£t
(
unô
, 
p‹t
, &
°QueueWeight
);

616 #ifde‡
CHIPSET_RTL8305


617 ()
πk_qos_schedulögQueue_£t
(
p‹t
, &
°QueueWeight
);

620  
DRV_OK
;

639 
DRV_RET_E
 
HÆ_SëQosCpuInô
()

641 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

642 
UINT32
 
i
;

644 
πk_qos_queue_weights_t
 
°QueueWeight
;

645 #ifde‡
CHIPSET_RTL8305


646 
πk_qos_¥i2queue_t
 
¥i2que
;

649 #i‡
deföed
(
CHIPSET_RTL8328
Ë|| deföed(
CHIPSET_RTL8328L
)

651 ()
πk_qos_p‹t1pPriRem≠Group_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 
HAL_DRV_QOS_1P_PRI_REMAP_GROUP
);

652 ()
πk_qos_p‹tDs˝PriRem≠Group_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 
HAL_DRV_QOS_DSCP_PRI_REMAP_GROUP
);

655 ()
πk_qos_p‹tPriSñGroup_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 
HAL_DRV_QOS_PRI_SELECT_GROUP
);

658 
i
 = 0; i < 
QOS_MAX_INTERNAL_PRIORITY
; i++)

660 
πk_qos_p‹tPriM≠_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 
i
, i);

664 ()
πk_qos_schedulögAlg‹ôhm_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, 
WFQ
);

665 
°QueueWeight
.
weights
[0] = 1;

666 
°QueueWeight
.
weights
[1] = 1;

667 
°QueueWeight
.
weights
[2] = 1;

668 
°QueueWeight
.
weights
[3] = 1;

669 
°QueueWeight
.
weights
[4] = 1;

670 
°QueueWeight
.
weights
[5] = 1;

671 
°QueueWeight
.
weights
[6] = 1;

672 
°QueueWeight
.
weights
[7] = 1;

673 ()
πk_qos_schedulögQueue_£t
(
PHY_CPU_CHIPID
, 
PHY_CPU_PORTID
, &
°QueueWeight
);

675 #ifde‡
CHIPSET_RTL8305


676 
¥i2que
.
¥i2queue
[0]=0;

677 
¥i2que
.
¥i2queue
[1]=1;

678 
¥i2que
.
¥i2queue
[2]=2;

679 
¥i2que
.
¥i2queue
[3]=3;

680 
¥i2que
.
¥i2queue
[4]=4;

681 
¥i2que
.
¥i2queue
[5]=5;

682 
¥i2que
.
¥i2queue
[6]=6;

683 
¥i2que
.
¥i2queue
[7]=7;

684 
πk_qos_¥iM≠_£t
(
PHY_CPU_CHIPID
,&
¥i2que
);

685 
°QueueWeight
.
weights
[0] = 1;

686 
°QueueWeight
.
weights
[1] = 1;

687 
°QueueWeight
.
weights
[2] = 1;

688 
°QueueWeight
.
weights
[3] = 1;

689 
°QueueWeight
.
weights
[4] = 1;

690 
°QueueWeight
.
weights
[5] = 1;

691 
°QueueWeight
.
weights
[6] = 1;

692 
°QueueWeight
.
weights
[7] = 1;

693 
πk_qos_schedulögQueue_£t
(
PHY_CPU_CHIPID
,&
°QueueWeight
);

695  
DRV_OK
;

701 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_ratelimit.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 #ifde‡
CHIPSET_RTL8328


26 
	~<comm⁄/îr‹.h
>

27 
	~<πk/øã.h
>

28 
	~<comm⁄/π_ty≥.h
>

29 
	~<hÆ/comm⁄/hÆ˘æ.h
>

30 #ñi‡
deföed
(
CHIPSET_RTL8305
)

31 
	~"πk_≠i.h
"

32 
	~"πk_≠i_ext.h
"

33 
	~"πl8367b_asicdrv.h
"

34 
	~"πl8367b_asicdrv_mëî.h
"

49 
DRV_RET_E
 
HÆ_SëR©ñimôCpu
();

50 
DRV_RET_E
 
HÆ_gëEm±ySh¨eMëîIndx
(
UINT32
 *
pulMëîId
);

51 
DRV_RET_E
 
HÆ_gëSameSh¨eMëîIndx
(
UINT32
 
ulMëîVÆue
, UINT32 *
pulMëîId
);

88 
DRV_RET_E
 
HÆ_SëR©ñimôInô
()

91 
p‹t_num_t
 
Õ‹t
;

92 
UINT32
 
unô
;

93 
πk_p‹t_t
 
p‹t
;

94 
πk_øã_thªsh_t
 
°Thªsh
;

96 
°Thªsh
.
FC_On
 = 0x8F;

97 
°Thªsh
.
FC_Off
 = 0x7F;

100 
LgcP‹tF‹
(
Õ‹t
)

102 
unô
 = 
P‹tLogci2ChùId
(
Õ‹t
);

103 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

107 
πl8367b_£tAsicP‹tSmÆlIpg
(
p‹t
, (
πk_uöt32
)(
DISABLED
));

108 
πl8367b_£tAsicP‹tEgªssR©eIfg
((
πk_uöt32
)(
DISABLED
));

116 
UnôF‹
(
unô
)

118 ()
πk_øã_°‹mC⁄åﬁRe‰eshMode_£t
(
unô
, 
BASED_ON_BYTE
);

119 ()
πk_øã_°‹mC⁄åﬁIn˛udeIfg_£t
(
unô
, 
ENABLED
);

122  
HÆ_SëR©ñimôCpu
();

140 
DRV_RET_E
 
HÆ_SëR©ñimôCpu
()

142 
πk_qid_t
 
queue
;

143 
ªt_t
 
ªt
;

144 
πk_≠i_ªt_t
 
ApiRë
;

145 
DRV_RET_E
 
íRë
;

146 
UINT32
 
uiIpMëîId
;

147 
UINT32
 
uiOthMëîId
;

149 
ApiRë
 = 
πk_øã_egrB™dwidthCålR©e_£t
(
PHY_CPU_PORTID
, 
CPU_PORT_TOTAL_RATE_LIMIT
, 
ENABLED
);

150 i‡(
RT_ERR_OK
 !
ApiRë
)

152  
DRV_SDK_GEN_ERROR
;

157 ()
HÆ_gëSameSh¨eMëîIndx
(
CPU_PORT_TOTAL_RATE_LIMIT
, &
uiIpMëîId
);

158 i‡(
RTL_METER_ID_INVALID
 =
uiIpMëîId
)

162 
íRë
 = 
HÆ_gëEm±ySh¨eMëîIndx
(&
uiIpMëîId
);

163 i‡((
DRV_OK
 !
íRë
Ë|| (
RTL_METER_ID_INVALID
 =
uiIpMëîId
))

165  
DRV_ERR_UNKNOW
;

168 
ªt
 = 
πl8367b_£tAsicSh¨eMëî
(
uiIpMëîId
, 
CPU_PORT_TOTAL_RATE_LIMIT
, 
ENABLED
);

169 i‡(
RT_ERR_OK
 !
ªt
)

171  
DRV_SDK_GEN_ERROR
;

176 ()
HÆ_gëSameSh¨eMëîIndx
(
CPU_QUEUE_RATE_LIMIT
, &
uiOthMëîId
);

177 i‡(
RTL_METER_ID_INVALID
 =
uiOthMëîId
)

181 
íRë
 = 
HÆ_gëEm±ySh¨eMëîIndx
(&
uiOthMëîId
);

182 i‡((
DRV_OK
 !
íRë
Ë|| (
RTL_METER_ID_INVALID
 =
uiIpMëîId
))

184  
DRV_ERR_UNKNOW
;

187 
ªt
 = 
πl8367b_£tAsicSh¨eMëî
(
uiOthMëîId
, 
CPU_QUEUE_RATE_LIMIT
, 
ENABLED
);

188 i‡(
RT_ERR_OK
 !
ªt
)

190  
DRV_SDK_GEN_ERROR
;

194 
queue
 = 0; queuê< 
RTK_MAX_NUM_OF_QUEUE
; queue++)

196 if(
queue
 =
DRV_PACKET_PRI_IP_CPU
)

198 ()
πk_øã_egrQueueBwCålR©e_£t
(
PHY_CPU_PORTID
, 
queue
, 
uiIpMëîId
);

202 ()
πk_øã_egrQueueBwCålR©e_£t
(
PHY_CPU_PORTID
, 
queue
, 
uiOthMëîId
);

205 ()
πk_øã_egrQueueBwCålE«bÀ_£t
(
PHY_CPU_PORTID
, 
queue
, 
ENABLED
);

209  
DRV_OK
;

231 
DRV_RET_E
 
HÆ_SëR©ñimôByP‹t
(
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
lP‹tMask
, UINT32 
ulKBps
)

233 
p‹t_num_t
 
Õ‹t
;

234 
πk_p‹t_t
 
p‹t
;

235 
πk_≠i_ªt_t
 
πkApiRë
;

238 if(!(
ulKBps
 % 8))

240 
ulKBps
 = (ulKBps/8)*8;

243 
IfLgcMaskSë
(&
lP‹tMask
, 
Õ‹t
)

245 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

246 if(0 =
ulKBps
)

249 if(
DRV_RATELIMIT_TX
 =
dúe˘i⁄
)

252 
πkApiRë
 = 
πk_øã_egrB™dwidthCålR©e_£t
(
p‹t
, 
RTL8367B_QOS_RATE_INPUT_MAX
, 
DISABLED
);

253 i‡(
RT_ERR_OK
 !
πkApiRë
)

255  
DRV_SDK_GEN_ERROR
;

258 if(
DRV_RATELIMIT_RX
 =
dúe˘i⁄
)

261 
πkApiRë
 = 
πk_øã_igrB™dwidthCålR©e_£t
(
p‹t
, 
RTL8367B_QOS_RATE_INPUT_MAX
, 
DISABLED
, DISABLED);

262 i‡(
RT_ERR_OK
 !
πkApiRë
)

264  
DRV_SDK_GEN_ERROR
;

269  
DRV_ERR_PARA
;

275 if(
DRV_RATELIMIT_TX
 =
dúe˘i⁄
)

278 
πkApiRë
 = 
πk_øã_egrB™dwidthCålR©e_£t
(
p‹t
, 
ulKBps
, 
DISABLED
);

279 i‡(
RT_ERR_OK
 !
πkApiRë
)

281  
DRV_SDK_GEN_ERROR
;

284 if(
DRV_RATELIMIT_RX
 =
dúe˘i⁄
)

287 
πkApiRë
 = 
πk_øã_igrB™dwidthCålR©e_£t
(
p‹t
, 
ulKBps
, 
DISABLED
, DISABLED);

288 i‡(
RT_ERR_OK
 !
πkApiRë
)

290  
DRV_SDK_GEN_ERROR
;

295  
DRV_ERR_PARA
;

300  
DRV_OK
;

303 
UINT32
 
_HÆ_GëP‹tR©eByPî˚¡age
(
p‹t_num_t
 
Õ‹t
, UINT32 
≥r˚¡age
)

305 
UINT32
 
uiR©e
 = 0, 
uiS≥ed
 = 0;

307 if(
DRV_OK
 =
HÆ_GëP‹tS≥ed
(
Õ‹t
, &
uiS≥ed
))

309 if(
PORT_SPEED_10
 =
uiS≥ed
)

312 
uiR©e
 = 100*
≥r˚¡age
;

314 if(
PORT_SPEED_100
 =
uiS≥ed
)

317 
uiR©e
 = 1000*
≥r˚¡age
;

319 if(
PORT_SPEED_1000
 =
uiS≥ed
)

322 
uiR©e
 = 10000*
≥r˚¡age
;

330  
uiR©e
;

352 
DRV_RET_E
 
HÆ_SëR©ñimôSt‹mCé
(
STORM_CTLTYPE_E
 
˘lTy≥
, 
logic_pmask_t
 
lP‹tMask
, 
STORM_CTLRATE_S
 
°St‹m
)

354 
p‹t_num_t
 
Õ‹t
;

355 
πk_p‹t_t
 
phyP‹t
;

356 
UINT32
 
ulR©e
;

357 
πk_≠i_ªt_t
 
πkApiRë
;

360 i‡(
STORM_RATE_PPS
 =
°St‹m
.
øãTy≥
)

362  
DRV_ERR_PARA
;

365 
ulR©e
 = 
°St‹m
.
vÆue
;

367 
˘lTy≥
)

369 
STORM_DLF_CTRL
:

370 
IfLgcMaskSë
(&
lP‹tMask
, 
Õ‹t
)

372 
phyP‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

373 if((0 =
°St‹m
.
vÆue
) ||

374 ((100 =
°St‹m
.
vÆue
Ë&& (°St‹m.
øãTy≥
 =
STORM_RATE_PERCENT
)))

376 
ulR©e
 = 
RTL8367B_QOS_RATE_INPUT_MAX
;

380 
°St‹m
.
øãTy≥
)

382 
STORM_RATE_KBPS
:

384 
STORM_RATE_PERCENT
:

385 
ulR©e
 = 
_HÆ_GëP‹tR©eByPî˚¡age
(
Õ‹t
, 
°St‹m
.
vÆue
);

388  
DRV_ERR_PARA
;

393 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

394 
STORM_GROUP_UNKNOWN_MULTICAST
,

395 
RTL8367B_QOS_RATE_INPUT_MAX
,

396 
DISABLED
, 
MODE0
);

397 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

398 
STORM_GROUP_MULTICAST
,

399 
RTL8367B_QOS_RATE_INPUT_MAX
,

400 
DISABLED
, 
MODE0
);

401 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

402 
STORM_GROUP_BROADCAST
,

403 
RTL8367B_QOS_RATE_INPUT_MAX
,

404 
DISABLED
, 
MODE0
);

407 
πkApiRë
 = 
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

408 
STORM_GROUP_UNKNOWN_UNICAST
,

409 
ulR©e
,

410 
DISABLED
, 
MODE0
);

411 i‡(
RT_ERR_OK
 !
πkApiRë
)

413  
DRV_SDK_GEN_ERROR
;

417 
STORM_MCAST_CTRL
:

418 
IfLgcMaskSë
(&
lP‹tMask
, 
Õ‹t
)

420 
phyP‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

421 if((0 =
°St‹m
.
vÆue
) ||

422 ((100 =
°St‹m
.
vÆue
Ë&& (°St‹m.
øãTy≥
 =
STORM_RATE_PERCENT
)))

424 
ulR©e
 = 
RTL8367B_QOS_RATE_INPUT_MAX
;

428 
°St‹m
.
øãTy≥
)

430 
STORM_RATE_KBPS
:

432 
STORM_RATE_PERCENT
:

433 
ulR©e
 = 
_HÆ_GëP‹tR©eByPî˚¡age
(
Õ‹t
, 
°St‹m
.
vÆue
);

436  
DRV_ERR_PARA
;

441 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

442 
STORM_GROUP_UNKNOWN_UNICAST
,

443 
RTL8367B_QOS_RATE_INPUT_MAX
,

444 
DISABLED
, 
MODE0
);

445 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

446 
STORM_GROUP_BROADCAST
,

447 
RTL8367B_QOS_RATE_INPUT_MAX
,

448 
DISABLED
, 
MODE0
);

451 
πkApiRë
 = 
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

452 
STORM_GROUP_UNKNOWN_MULTICAST
,

453 
ulR©e
,

454 
DISABLED
, 
MODE0
);

455 
πkApiRë
 +
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

456 
STORM_GROUP_MULTICAST
,

457 
ulR©e
,

458 
DISABLED
, 
MODE0
);

459 i‡(
RT_ERR_OK
 !
πkApiRë
)

461  
DRV_SDK_GEN_ERROR
;

465 
STORM_BCAST_CTRL
:

466 
IfLgcMaskSë
(&
lP‹tMask
, 
Õ‹t
)

468 
phyP‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

469 if((0 =
°St‹m
.
vÆue
) ||

470 ((100 =
°St‹m
.
vÆue
Ë&& (°St‹m.
øãTy≥
 =
STORM_RATE_PERCENT
)))

472 
ulR©e
 = 
RTL8367B_QOS_RATE_INPUT_MAX
;

476 
°St‹m
.
øãTy≥
)

478 
STORM_RATE_KBPS
:

480 
STORM_RATE_PERCENT
:

481 
ulR©e
 = 
_HÆ_GëP‹tR©eByPî˚¡age
(
Õ‹t
, 
°St‹m
.
vÆue
);

484  
DRV_ERR_PARA
;

489 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

490 
STORM_GROUP_UNKNOWN_MULTICAST
,

491 
RTL8367B_QOS_RATE_INPUT_MAX
,

492 
DISABLED
, 
MODE0
);

493 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

494 
STORM_GROUP_MULTICAST
,

495 
RTL8367B_QOS_RATE_INPUT_MAX
,

496 
DISABLED
, 
MODE0
);

497 ()
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

498 
STORM_GROUP_UNKNOWN_UNICAST
,

499 
RTL8367B_QOS_RATE_INPUT_MAX
,

500 
DISABLED
, 
MODE0
);

503 
πkApiRë
 = 
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

504 
STORM_GROUP_BROADCAST
,

505 
ulR©e
,

506 
DISABLED
, 
MODE0
);

507 i‡(
RT_ERR_OK
 !
πkApiRë
)

509  
DRV_SDK_GEN_ERROR
;

513 
STORM_ALL_CTRL
:

514 
IfLgcMaskSë
(&
lP‹tMask
, 
Õ‹t
)

516 
phyP‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

517 if((0 =
°St‹m
.
vÆue
) ||

518 ((100 =
°St‹m
.
vÆue
Ë&& (°St‹m.
øãTy≥
 =
STORM_RATE_PERCENT
)))

520 
ulR©e
 = 
RTL8367B_QOS_RATE_INPUT_MAX
;

524 
°St‹m
.
øãTy≥
)

526 
STORM_RATE_KBPS
:

528 
STORM_RATE_PERCENT
:

529 
ulR©e
 = 
_HÆ_GëP‹tR©eByPî˚¡age
(
Õ‹t
, 
°St‹m
.
vÆue
);

532  
DRV_ERR_PARA
;

537 
πkApiRë
 = 
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

538 
STORM_GROUP_UNKNOWN_UNICAST
,

539 
ulR©e
,

540 
DISABLED
, 
MODE0
);

541 
πkApiRë
 = 
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

542 
STORM_GROUP_UNKNOWN_MULTICAST
,

543 
ulR©e
,

544 
DISABLED
, 
MODE0
);

545 
πkApiRë
 +
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

546 
STORM_GROUP_MULTICAST
,

547 
ulR©e
,

548 
DISABLED
, 
MODE0
);

549 
πkApiRë
 +
πk_°‹m_c⁄åﬁR©e_£t
(
phyP‹t
,

550 
STORM_GROUP_BROADCAST
,

551 
ulR©e
,

552 
DISABLED
, 
MODE0
);

553 i‡(
RT_ERR_OK
 !
πkApiRë
)

555  
DRV_SDK_GEN_ERROR
;

560  
DRV_ERR_PARA
;

562  
DRV_OK
;

581 
DRV_RET_E
 
HÆ_gëEm±ySh¨eMëîIndx
(
UINT32
 *
pulMëîId
)

583 
ªt_t
 
ªt
;

584 
πk_uöt32
 
uiMëîId
;

585 
πk_uöt32
 
uiMëîVÆue
;

586 
πk_uöt32
 
uiIfg
;

588 *
pulMëîId
 = 
RTL_METER_ID_INVALID
;

590 
uiMëîId
 = 0; uiMëîId < 
RTL8367B_METERNO
; uiMeterId++)

592 
uiMëîVÆue
 = 0;

593 
ªt
 = 
πl8367b_gëAsicSh¨eMëî
(
uiMëîId
, &
uiMëîVÆue
, &
uiIfg
);

594 i‡(
RT_ERR_OK
 !
ªt
)

596  
DRV_SDK_GEN_ERROR
;

599 i‡(0 =
uiMëîVÆue
)

601 *
pulMëîId
 = 
uiMëîId
;

606  
DRV_OK
;

625 
DRV_RET_E
 
HÆ_gëSameSh¨eMëîIndx
(
UINT32
 
ulMëîVÆue
, UINT32 *
pulMëîId
)

627 
ªt_t
 
ªt
;

628 
πk_uöt32
 
ulMëîId
;

629 
πk_uöt32
 
ulMëîVÆueTemp
;

630 
πk_uöt32
 
ulIfg
;

632 *
pulMëîId
 = 
RTL_METER_ID_INVALID
;

634 
ulMëîId
 = 0; ulMëîId < 
RTL8367B_METERNO
; ulMeterId++)

636 
ulMëîVÆueTemp
 = 0;

637 
ªt
 = 
πl8367b_gëAsicSh¨eMëî
(
ulMëîId
, &
ulMëîVÆueTemp
, &
ulIfg
);

638 i‡(
RT_ERR_OK
 !
ªt
)

640  
DRV_SDK_GEN_ERROR
;

643 i‡(0 !
ulMëîVÆueTemp
)

645 i‡(
ulMëîVÆue
 =
ulMëîVÆueTemp
)

647 *
pulMëîId
 = 
ulMëîId
;

653  
DRV_OK
;

657 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_rstp.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

24 
	~"πk_≠i.h
"

65 
DRV_RET_E
 
HÆ_GëSçP‹tSèã
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 * 
puiSèã
)

67 
phyid_t
 
phyid
 = 0;

68 
UINT32
 
uiP‹tId
 = 0;

69 
INT32
 
iRv
 = 
RT_ERR_OK
;

70 
πk_°p_°©e_t
 
íSçSèã
 = 0;

72 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

74  
DRV_INVALID_LPORT
;

77 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

78 
uiP‹tId
 = 
PORTID
(
phyid
);

80 
iRv
 = 
πk_°p_m°pSèã_gë
(0, 
uiP‹tId
, &
íSçSèã
);

81 if(
RT_ERR_OK
 !
iRv
)

83  
Eº‹Sdk2Drv
(
iRv
);

86 
íSçSèã
)

88 
STP_STATE_DISABLED
:

89 *
puiSèã
 = 
PORT_STATE_DISABLED
;

91 
STP_STATE_BLOCKING
:

92 *
puiSèã
 = 
PORT_STATE_BLOCKING
;

94 
STP_STATE_LEARNING
:

95 *
puiSèã
 = 
PORT_STATE_LEARNING
;

97 
STP_STATE_FORWARDING
:

98 *
puiSèã
 = 
PORT_STATE_FORWARDING
;

101  
DRV_ERR_UNKNOW
;

104  
DRV_OK
;

124 
DRV_RET_E
 
HÆ_SëSçP‹tSèã
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
)

126 
phyid_t
 
phyid
 = 0;

127 
UINT32
 
uiP‹tId
 = 0;

128 
INT32
 
iRv
 = 
RT_ERR_OK
;

129 
πk_°p_°©e_t
 
íSçSèã
 = 0;

131 if(!
IsVÆidLgcP‹t
(
lgcP‹t
))

133  
DRV_INVALID_LPORT
;

136 
uiSèã
)

138 
PORT_STATE_DISABLED
:

139 
íSçSèã
 = 
STP_STATE_DISABLED
;

141 
PORT_STATE_BLOCKING
:

142 
íSçSèã
 = 
STP_STATE_BLOCKING
;

144 
PORT_STATE_LEARNING
:

145 
íSçSèã
 = 
STP_STATE_LEARNING
;

147 
PORT_STATE_FORWARDING
:

148 
íSçSèã
 = 
STP_STATE_FORWARDING
;

151  
DRV_ERR_PARA
;

154 
phyid
 = 
P‹tLogic2PhyID
(
lgcP‹t
);

155 
uiP‹tId
 = 
PORTID
(
phyid
);

157 
iRv
 = 
πk_°p_m°pSèã_£t
(0, 
uiP‹tId
, 
íSçSèã
);

159  
Eº‹Sdk2Drv
(
iRv
);

165 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_special.c

18 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"drv_ªq.h
"

24 
	~<löux/°rög.h
>

25 
	~<löux/¶ab.h
>

26 #ifde‡
CHIPSET_RTL8328


27 
	~<πk/vœn.h
>

28 
	~<comm⁄/π_îr‹.h
>

29 
	~<hÆ/mac/ªg.h
>

30 
	~<hÆ/chùdef/esw/πk_esw_ªg_°ru˘.h
>

31 #ñi‡
deföed
(
CHIPSET_RTL8305
)

32 
	~"πk_≠i.h
"

33 
	~"πk_≠i_ext.h
"

35 
	~"hÆ_comm⁄.h
"

70 
DRV_RET_E
 
HÆ_SdkInôS≥cül
(
UINT32
 
unô
)

73 
INT32
 
iRë
 = 0;

77 
iRë
 = 
ªg_fõld_wrôe
(
unô
,
INT_ESW_PACKET_TO_CPU_PORT_FORMAT_CONTROL_RTL8328
,
ESW_TOCPUPKTFMTf
,1);

78 if(
RT_ERR_OK
 !
iRë
)

80 
¥ötk
("%s,%dÉº‹!\n",
__FUNCTION__
,
__LINE__
);

83 
iRë
 = 
πk_vœn_p‹tEgrI¬îTagE«bÀ_£t
(
unô
, 
PHY_CPU_PORTID
, 
ENABLED
);

84 if(
RT_ERR_OK
 !
iRë
)

86 
¥ötk
("%s,%dÉº‹!\n",
__FUNCTION__
,
__LINE__
);

89  
Eº‹Sdk2Drv
(
iRë
);

92 
unô
 = unit;

93  
DRV_OK
;

98 
DRV_RET_E
 
HÆ_SëCpuHódî
(
BOOL
 
bE«bÀ
)

100 #i‡
deföed
(
CHIPSET_RTL8305
)

101 
πk_≠i_ªt_t
 
tdRë
;

102 
πk_íabÀ_t
 
tdE«bÀ
;

105 i‡((
FALSE
 !
bE«bÀ
Ë&& (
TRUE
 != bEnable))

107  
DRV_ERR_PARA
;

109 #i‡
deföed
(
CHIPSET_RTL8305
)

110 i‡(
FALSE
 =
bE«bÀ
)

112 
tdE«bÀ
 = 
DISABLED
;

116 
tdE«bÀ
 = 
ENABLED
;

120 
tdRë
 = 
πk_˝u_ègP‹t_£t
(6, 
CPU_INSERT_TO_TRAPPING
);

121 i‡(
RT_ERR_OK
 !
tdRë
)

123  
DRV_SDK_GEN_ERROR
;

126 
tdRë
 = 
πk_˝u_íabÀ_£t
(
tdE«bÀ
);

127 i‡(
RT_ERR_OK
 !
tdRë
)

129  
DRV_SDK_GEN_ERROR
;

133  
DRV_OK
;

139 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_statistics.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 #ifde‡
CHIPSET_RTL8328


26 
	~<comm⁄/îr‹.h
>

27 
	~<πk/°©.h
>

28 
	~<comm⁄/π_ty≥.h
>

29 
	~<hÆ/comm⁄/hÆ˘æ.h
>

30 #ñi‡
deföed
(
CHIPSET_RTL8305
)

31 
	~"πk_≠i.h
"

32 
	~"πk_≠i_ext.h
"

90 
DRV_RET_E
 
HÆ_GëMibP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
)

92 
πk_°©_p‹t_ty≥_t
 
°P‹tSètTy≥
;

93 
UINT64
 
uŒVÆue
 = 0;

94 
πk_p‹t_t
 
p‹t
 = 0;

96 if(!
VALID_PORT
(
Õ‹t
))

98  
DRV_ERR_PARA
;

100 if(
NULL
 =
p_uŒSèt
)

102  
DRV_ERR_PARA
;

104 *
p_uŒSèt
 = 0;

105 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

107 
PktTy≥
)

109 
INOCTETS
:

110 
°P‹tSètTy≥
 = 
STAT_IfInO˘ës
;

112 
INUCAST
:

113 
°P‹tSètTy≥
 = 
STAT_IfInUˇ°Pkts
;

115 
INNUCAST
:

116 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsMu…iˇ°Pkts
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

117 *
p_uŒSèt
 +
uŒVÆue
;

118 
uŒVÆue
 = 0;

119 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsBrﬂdˇ°Pkts
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

120 *
p_uŒSèt
 +
uŒVÆue
;

121  
DRV_OK
;

122 
INDISCARDS
:

123 
°P‹tSètTy≥
 = 
STAT_EthîSètsDr›Evíts
;

125 
INERRS
:

126 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsDr›Evíts
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

127 *
p_uŒSèt
 +
uŒVÆue
;

128  
DRV_OK
;

129 
INUNKNOWN
:

130  
DRV_ERR_PARA
;

131 
OUTOCTETS
:

132 
°P‹tSètTy≥
 = 
STAT_IfOutO˘ës
;

134 
OUTUCAST
:

135 
°P‹tSètTy≥
 = 
STAT_IfOutUˇ°Pkts
;

137 
OUTNUCAST
:

138 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutMu…iˇ°Pkts
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

139 *
p_uŒSèt
 +
uŒVÆue
;

140 
uŒVÆue
 = 0;

141 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutBrﬂdˇ°Pkts
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

142 *
p_uŒSèt
 +
uŒVÆue
;

143  
DRV_OK
;

144 
OUTDISCARDS
:

145 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsCﬁlisi⁄s
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

146 *
p_uŒSèt
 +
uŒVÆue
;

147 
uŒVÆue
 = 0;

148 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3SètsL©eCﬁlisi⁄s
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

149 *
p_uŒSèt
 +
uŒVÆue
;

150  
DRV_OK
;

151 
OUTERRS
:

152 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsCﬁlisi⁄s
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

153 *
p_uŒSèt
 +
uŒVÆue
;

154 
uŒVÆue
 = 0;

155 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3SètsL©eCﬁlisi⁄s
, (
πk_°©_cou¡î_t
 *)&
uŒVÆue
);

156 *
p_uŒSèt
 +
uŒVÆue
;

157  
DRV_OK
;

158 
OUTQLEN
:

159 
HCINOCTETS
:

160 
HCINUCAST
:

161 
HCINMCAST
:

162 
HCINBCAST
:

163 
HCOUTOCTETS
:

164 
HCOUTUCAST
:

165 
HCOUTMCAST
:

166 
HCOUTBCAST
:

167  
DRV_ERR_PARA
;

168 
PORTDELAYEXEEDE_DISCARDS
:

169 
°P‹tSètTy≥
 = 
STAT_DŸ1dBa£P‹tDñayEx˚ededDisˇrds
;

171 
PORTMTUEXCEED_DISCARDS
:

172  
DRV_ERR_PARA
;

173 
TPPPORT_IN_FRAMES
:

174  
DRV_ERR_PARA
;

175 
TPPORT_OUT_FRAMS
:

176  
DRV_ERR_PARA
;

177 
PORT_IN_DISCARDS
:

178 
°P‹tSètTy≥
 = 
STAT_EthîSètsDr›Evíts
;

180 
DOT3STATSALIGNERR
:

181  
DRV_ERR_PARA
;

182 
DOT3STATSFCSERR
:

183 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsFCSEº‹s
;

185 
DOT3STATSSINGLECOLLISION
:

186 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsSögÀCﬁlisi⁄Fømes
;

188 
DOT3STATSMULTICOLLISION
:

189 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsMu…ùÀCﬁlisi⁄Fømes
;

191 
DOT3STATSSQETESTERR
:

192  
DRV_ERR_PARA
;

193 
DOT3STATSDEFERREDTX
:

194 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsDe„ºedTønsmissi⁄s
;

196 
DOT3STATSLATECOLLISION
:

197 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsL©eCﬁlisi⁄s
;

199 
DOT3STATSEXCOLLSION
:

200 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsEx˚ssiveCﬁlisi⁄s
;

202 
DOT3STATSINTERMACTXERR
:

203  
DRV_ERR_PARA
;

204 
DOT3STATSCARRIERSENSEERR
:

205  
DRV_ERR_PARA
;

206 
DOT3STATSFRAMETOOLONG
:

207 
°P‹tSètTy≥
 = 
STAT_EthîOvîsizeSèts
;

209 
DOT3STATSINTERMACRXERR
:

210  
DRV_ERR_PARA
;

211 
DOT3STATSSYMBOLERR
:

212 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsSymbﬁEº‹s
;

215  
DRV_ERR_PARA
;

218 if(
RT_ERR_OK
 =
πk_°©_p‹t_gë
(
p‹t
, 
°P‹tSètTy≥
, 
p_uŒSèt
))

220  
DRV_OK
;

223  
DRV_ERR_UNKNOW
;

241 
DRV_RET_E
 
HÆ_SëMibCou¡Sync
()

244  
DRV_OK
;

265 
DRV_RET_E
 
HÆ_SëMibCou¡Re£t
(
p‹t_num_t
 
Õ‹t
)

267 if(!
VALID_PORT
(
Õ‹t
))

269  
DRV_ERR_PARA
;

271 if(
RT_ERR_OK
 !
πk_°©_p‹t_ª£t
(
P‹tLogic2PhyP‹tId
(
Õ‹t
)))

273  
DRV_ERR_UNKNOW
;

276  
DRV_OK
;

299 
DRV_RET_E
 
HÆ_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
)

301 
UINT64
 
uŒVÆue
 = 0;

302 
πk_p‹t_t
 
p‹t
 = 0;

304 if(!
VALID_PORT
(
Õ‹t
))

306  
DRV_ERR_PARA
;

308 if(
NULL
 =
ªtu∫VÆue
)

310  
DRV_ERR_PARA
;

313 *
ªtu∫VÆue
 = 0;

314 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

315 
cou¡îName
)

317 
INPUT_TOTAL_PACKETS
:

318 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfInUˇ°Pkts
, &
uŒVÆue
);

319 *
ªtu∫VÆue
 +
uŒVÆue
;

320 
uŒVÆue
 = 0;

321 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsMu…iˇ°Pkts
, &
uŒVÆue
);

322 *
ªtu∫VÆue
 +
uŒVÆue
;

323 
uŒVÆue
 = 0;

324 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsBrﬂdˇ°Pkts
, &
uŒVÆue
);

325 *
ªtu∫VÆue
 +
uŒVÆue
;

326 
uŒVÆue
 = 0;

327 ()
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
INERRS
, &
uŒVÆue
);

328 *
ªtu∫VÆue
 +
uŒVÆue
;

331 
uŒVÆue
 = 0;

332 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3InPau£Fømes
, &
uŒVÆue
);

333 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

335 *
ªtu∫VÆue
 = 0;

336  
DRV_ERR_UNKNOW
;

338 *
ªtu∫VÆue
 -
uŒVÆue
;

341 
uŒVÆue
 = 0;

342 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3InPau£Fømes
, &
uŒVÆue
);

343 *
ªtu∫VÆue
 +
uŒVÆue
;

344 
uŒVÆue
 = 0;

345 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsUndîSizePkts
, &
uŒVÆue
);

346 *
ªtu∫VÆue
 +
uŒVÆue
;

347 
uŒVÆue
 = 0;

348 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3SètsFCSEº‹s
, &
uŒVÆue
);

349 *
ªtu∫VÆue
 +
uŒVÆue
;

350 
uŒVÆue
 = 0;

353 
uŒVÆue
 = 0;

354 ()
πk_°©_p‹t_gë
–
p‹t
, 
STAT_EthîSètsFøgmíts
, &
uŒVÆue
);

355 *
ªtu∫VÆue
 +
uŒVÆue
;

356 
uŒVÆue
 = 0;

357 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsJabbîs
, &
uŒVÆue
);

358 *
ªtu∫VÆue
 +
uŒVÆue
;

362 
uŒVÆue
 = 0;

363 
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
INERRS
, &
uŒVÆue
);

364 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

366 *
ªtu∫VÆue
 = 0;

367  
DRV_ERR_UNKNOW
;

369 *
ªtu∫VÆue
 -
uŒVÆue
;

370  
DRV_OK
;

371 
INPUT_TOTAL_BYTES
:

372 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfInO˘ës
, 
ªtu∫VÆue
);

373  
DRV_OK
;

374 
INPUT_TOTAL_BROADCASTS
:

375 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsBrﬂdˇ°Pkts
, 
ªtu∫VÆue
);

376  
DRV_OK
;

377 
INPUT_TOTAL_MULTICASTS
:

378 
uŒVÆue
 = 0;

379 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsMu…iˇ°Pkts
, &
uŒVÆue
);

380 *
ªtu∫VÆue
 +
uŒVÆue
;

382 
uŒVÆue
 = 0;

383 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3InPau£Fømes
, &
uŒVÆue
);

384 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

386 *
ªtu∫VÆue
 = 0;

387  
DRV_ERR_UNKNOW
;

389 *
ªtu∫VÆue
 -
uŒVÆue
;

390  
DRV_OK
;

391 
INPUT_ERRORS
:

392 
uŒVÆue
 = 0;

393 
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
INERRS
, &
uŒVÆue
);

394 *
ªtu∫VÆue
 +
uŒVÆue
;

396 
uŒVÆue
 = 0;

397 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3InPau£Fømes
, &
uŒVÆue
);

398 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

400 *
ªtu∫VÆue
 = 0;

401  
DRV_ERR_UNKNOW
;

403 *
ªtu∫VÆue
 -
uŒVÆue
;

404  
DRV_OK
;

405 
INPUT_PAUSE_PACKETS
:

406 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3InPau£Fømes
, 
ªtu∫VÆue
);

407  
DRV_OK
;

408 
OUTPUT_TOTAL_PACKETS
:

409 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutUˇ°Pkts
, &
uŒVÆue
);

410 *
ªtu∫VÆue
 +
uŒVÆue
;

411 
uŒVÆue
 = 0;

412 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutMu…iˇ°Pkts
, &
uŒVÆue
);

413 *
ªtu∫VÆue
 +
uŒVÆue
;

414 
uŒVÆue
 = 0;

415 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutBrﬂdˇ°Pkts
, &
uŒVÆue
);

416 *
ªtu∫VÆue
 +
uŒVÆue
;

417 
uŒVÆue
 = 0;

418 ()
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
OUTERRS
, &
uŒVÆue
);

419 *
ªtu∫VÆue
 +
uŒVÆue
;

420  
DRV_OK
;

421 
OUTPUT_TOTAL_BYTES
:

422 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutO˘ës
, 
ªtu∫VÆue
);

423  
DRV_OK
;

424 
OUTPUT_TOTAL_BROADCASTS
:

425 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutBrﬂdˇ°Pkts
, 
ªtu∫VÆue
);

426  
DRV_OK
;

427 
OUTPUT_TOTAL_MULTICASTS
:

428 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutMu…iˇ°Pkts
, 
ªtu∫VÆue
);

429  
DRV_OK
;

430 
OUTPUT_ERRORS
:

431  
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
OUTERRS
, 
ªtu∫VÆue
);

432 
OUTPUT_PAUSE_PACKETS
:

433 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3OutPau£Fømes
, 
ªtu∫VÆue
);

434  
DRV_OK
;

436  
DRV_ERR_PARA
;

460 
DRV_RET_E
 
HÆ_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
°©i°icsName
, 
UINT64
 *
ªtu∫VÆue
)

462 
πk_°©_p‹t_ty≥_t
 
°P‹tSètTy≥
;

463 
UINT64
 
uŒVÆue
 = 0;

464 
πk_p‹t_t
 
p‹t
 = 0;

466 if(!
VALID_PORT
(
Õ‹t
))

468  
DRV_ERR_PARA
;

470 if(
NULL
 =
ªtu∫VÆue
)

472  
DRV_ERR_PARA
;

475 *
ªtu∫VÆue
 = 0;

476 
p‹t
 = 
P‹tLogic2PhyP‹tId
(
Õ‹t
);

478 
°©i°icsName
)

481 
RxDr›Pkts
:

482 #i‡
deföed
(
CHIPSET_RTL8305
)

483 
°P‹tSètTy≥
 = 
STAT_DŸ1dTpP‹tInDisˇrds
;

487 
uŒVÆue
 = 0;

488 
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
INERRS
, &
uŒVÆue
);

489 *
ªtu∫VÆue
 +
uŒVÆue
;

491 
uŒVÆue
 = 0;

492 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3InPau£Fømes
, &
uŒVÆue
);

493 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

495 *
ªtu∫VÆue
 = 0;

496  
DRV_ERR_UNKNOW
;

498 *
ªtu∫VÆue
 -
uŒVÆue
;

500 
uŒVÆue
 = 0;

501 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsUndîSizePkts
, &
uŒVÆue
);

502 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

504 *
ªtu∫VÆue
 = 0;

505  
DRV_ERR_UNKNOW
;

507 *
ªtu∫VÆue
 -
uŒVÆue
;

508 
uŒVÆue
 = 0;

509 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3SètsFCSEº‹s
, &
uŒVÆue
);

510 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

512 *
ªtu∫VÆue
 = 0;

513  
DRV_ERR_UNKNOW
;

515 *
ªtu∫VÆue
 -
uŒVÆue
;

517 
uŒVÆue
 = 0;

518 ()
πk_°©_p‹t_gë
(
p‹t
, 
DOT3_STATS_ALIGNMENT_ERRORS_INDEX
, &
uŒVÆue
);

519 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

521 *
ªtu∫VÆue
 = 0;

522  
DRV_ERR_UNKNOW
;

524 *
ªtu∫VÆue
 -
uŒVÆue
;

526 
uŒVÆue
 = 0;

527 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsFøgmíts
, &
uŒVÆue
);

528 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

530 *
ªtu∫VÆue
 = 0;

531  
DRV_ERR_UNKNOW
;

533 *
ªtu∫VÆue
 -
uŒVÆue
;

534 
uŒVÆue
 = 0;

535 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsJabbîs
, &
uŒVÆue
);

536 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

538 *
ªtu∫VÆue
 = 0;

539  
DRV_ERR_UNKNOW
;

541 *
ªtu∫VÆue
 -
uŒVÆue
;

545  
DRV_OK
;

547 
RxO˘ës
:

548 
°P‹tSètTy≥
 = 
STAT_IfInO˘ës
;

550 
RxBrﬂdˇ°Pkts
:

551 #i‡
deföed
(
CHIPSET_RTL8305
)

552 
uŒVÆue
 = 0;

553 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsBrﬂdˇ°Pkts
, &
uŒVÆue
);

554 *
ªtu∫VÆue
 +
uŒVÆue
;

556 
uŒVÆue
 = 0;

557 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutBrﬂdˇ°Pkts
, &
uŒVÆue
);

558 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

560 *
ªtu∫VÆue
 = 0;

564 *
ªtu∫VÆue
 -
uŒVÆue
;

566  
DRV_OK
;

568 
°P‹tSètTy≥
 = 
STAT_EthîSètsBrﬂdˇ°Pkts
;

572 
RxMu…iˇ°Pkts
:

573 
uŒVÆue
 = 0;

574 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_EthîSètsMu…iˇ°Pkts
, &
uŒVÆue
);

575 *
ªtu∫VÆue
 +
uŒVÆue
;

577 
uŒVÆue
 = 0;

578 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3InPau£Fømes
, &
uŒVÆue
);

579 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

581 *
ªtu∫VÆue
 = 0;

582  
DRV_ERR_UNKNOW
;

584 *
ªtu∫VÆue
 -
uŒVÆue
;

586 #i‡
deföed
(
CHIPSET_RTL8305
)

587 
uŒVÆue
 = 0;

588 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutMu…iˇ°Pkts
, &
uŒVÆue
);

589 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

591 *
ªtu∫VÆue
 = 0;

595 *
ªtu∫VÆue
 -
uŒVÆue
;

598  
DRV_OK
;

599 
RxSACh™ges
:

600  
DRV_ERR_PARA
;

601 
RxUdîsizePkts
:

602 
°P‹tSètTy≥
 = 
STAT_EthîSètsUndîSizePkts
;

604 
RxOvîsizePkts
:

605 
°P‹tSètTy≥
 = 
STAT_EthîOvîsizeSèts
;

607 
RxFøgmít
:

608 
°P‹tSètTy≥
 = 
STAT_EthîSètsFøgmíts
;

610 
RxJabbîs
:

611 
°P‹tSètTy≥
 = 
STAT_EthîSètsJabbîs
;

613 
RxUniˇ°Pkts
:

614 
°P‹tSètTy≥
 = 
STAT_IfInUˇ°Pkts
;

616 
RxAlignmítEº‹s
:

617  
DRV_ERR_PARA
;

618 
RxFCSEº‹s
:

619 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsFCSEº‹s
;

621 
RxGoodO˘ës
:

622 
°P‹tSètTy≥
 = 
STAT_IfInO˘ës
;

624 
RxEx˚ssSizeDisc
:

625 
°P‹tSètTy≥
 = 
STAT_EthîOvîsizeSèts
;

627 
RxPau£Pkts
:

628 
°P‹tSètTy≥
 = 
STAT_DŸ3InPau£Fømes
;

630 
RxSymbﬁEº‹s
:

631 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsSymbﬁEº‹s
;

633 
RxQosQPkt
:

634  
DRV_ERR_PARA
;

635 
RxQosQO˘ë
:

636  
DRV_ERR_PARA
;

638 
TxDr›Pkts
:

640 
°P‹tSètTy≥
 = 
IF_OUT_DISCARDS_INDEX
;

643  
DRV_ERR_PARA
;

645 
TxO˘ës
:

646 
°P‹tSètTy≥
 = 
STAT_IfOutO˘ës
;

648 
TxBrﬂdˇ°Pkts
:

649 
°P‹tSètTy≥
 = 
STAT_IfOutBrﬂdˇ°Pkts
;

651 
TxMu…iˇ°Pkts
:

653 
uŒVÆue
 = 0;

654 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_IfOutMu…iˇ°Pkts
, &
uŒVÆue
);

655 *
ªtu∫VÆue
 +
uŒVÆue
;

657 
uŒVÆue
 = 0;

658 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3OutPau£Fømes
, &
uŒVÆue
);

659 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

661 *
ªtu∫VÆue
 = 0;

662  
DRV_ERR_UNKNOW
;

664 *
ªtu∫VÆue
 -
uŒVÆue
;

665  
DRV_OK
;

666 
TxCﬁlisi⁄s
:

667 
°P‹tSètTy≥
 = 
STAT_EthîSètsCﬁlisi⁄s
;

669 
TxUniˇ°Pkts
:

670 
°P‹tSètTy≥
 = 
STAT_IfOutUˇ°Pkts
;

672 
TxSögÀCﬁlisi⁄
:

673 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsSögÀCﬁlisi⁄Fømes
;

675 
TxMu…ùÀCﬁlisi⁄
:

676 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsMu…ùÀCﬁlisi⁄Fømes
;

678 
TxDe„ºedTønsmô
:

679 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsDe„ºedTønsmissi⁄s
;

681 
TxL©eCﬁlisi⁄
:

682 
°P‹tSètTy≥
 = 
STAT_DŸ3SètsL©eCﬁlisi⁄s
;

684 
TxPau£Pkts
:

685 
°P‹tSètTy≥
 = 
STAT_DŸ3OutPau£Fømes
;

687 
TxFømeInDisc
:

688  
DRV_ERR_PARA
;

689 
TxQoSQPkt
:

690  
DRV_ERR_PARA
;

691 
TxQoSQO˘ë
:

692  
DRV_ERR_PARA
;

693 
Pkt64O˘ës
:

694 
°P‹tSètTy≥
 = 
STAT_EthîSètsPkts64O˘ës
;

696 
Pkt65to127O˘ës
:

697 
°P‹tSètTy≥
 = 
STAT_EthîSètsPkts65to127O˘ës
;

699 
Pkt128to255O˘ës
:

700 
°P‹tSètTy≥
 = 
STAT_EthîSètsPkts128to255O˘ës
;

702 
Pkt256to511O˘ës
:

703 
°P‹tSètTy≥
 = 
STAT_EthîSètsPkts256to511O˘ës
;

705 
Pkt512to1023O˘ës
:

706 
°P‹tSètTy≥
 = 
STAT_EthîSètsPkts512to1023O˘ës
;

708 
Pkt1024to1522o˘ës
:

709 
°P‹tSètTy≥
 = 
STAT_EthîSètsPkts1024to1518O˘ës
;

711 
RxEºPkts
:

712 
uŒVÆue
 = 0;

713 
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
INERRS
, &
uŒVÆue
);

714 *
ªtu∫VÆue
 +
uŒVÆue
;

716 
uŒVÆue
 = 0;

717 ()
πk_°©_p‹t_gë
(
p‹t
, 
STAT_DŸ3SètsFCSEº‹s
, &
uŒVÆue
);

718 if((*
ªtu∫VÆue
Ë< 
uŒVÆue
)

720 *
ªtu∫VÆue
 = 0;

721  
DRV_ERR_UNKNOW
;

723 *
ªtu∫VÆue
 -
uŒVÆue
;

724  
DRV_OK
;

725 
TxEºPkts
:

726  
HÆ_GëMibP‹tSèti°ics
(
Õ‹t
, 
OUTERRS
, 
ªtu∫VÆue
);

728  
DRV_ERR_PARA
;

732 if(
RT_ERR_OK
 =
πk_°©_p‹t_gë
(
p‹t
, 
°P‹tSètTy≥
, 
ªtu∫VÆue
))

734  
DRV_OK
;

737  
DRV_ERR_UNKNOW
;

740 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_vlan.c

17 #ifde‡ 
__˝lu•lus


20 
	~<mw_ty≥.h
>

21 
	~"drv_pub.h
"

22 
	~"drv_ªq.h
"

23 
	~"hÆ_comm⁄.h
"

25 #ifde‡
CHIPSET_RTL8328


26 
	~<comm⁄/îr‹.h
>

27 
	~<comm⁄/π_îr‹.h
>

28 
	~<πk/vœn.h
>

29 
	~<hÆ/comm⁄/hÆ˘æ.h
>

30 #ñi‡
deföed
(
CHIPSET_RTL8305
)

31 
	~"πl8367b_asicdrv_vœn.h
"

32 
	~"πk_≠i.h
"

33 
	~"πk_≠i_ext.h
"

36 
	~<löux/•ölock_ty≥s.h
>

37 
	~<löux/•ölock.h
>

38 
	~<asm/uac˚ss.h
>

63 
•ölock_t
 
_•ö_hÆ_vœn_lock
 = 
SPIN_LOCK_UNLOCKED
;

65 
UINT32
 
_hÆ_vœn_num
 = 1;

74 
	#SPIN_HAL_MAC_LOCK
 
	`•ö_lock
(&
_•ö_hÆ_vœn_lock
)

	)

75 
	#SPIN_HAL_MAC_UNLOCK
 
	`•ö_u∆ock
(&
_•ö_hÆ_vœn_lock
)

	)

93 
DRV_RET_E
 
HÆ_GëVœnExi°Num
(
UINT32
 *
puiNum
)

95 if(
NULL
 =
puiNum
)

97  
DRV_ERR_PARA
;

100 
SPIN_HAL_MAC_LOCK
;

101 *
puiNum
 = 
_hÆ_vœn_num
;

102 
SPIN_HAL_MAC_UNLOCK
;

104  
DRV_OK
;

127 
DRV_RET_E
 
HÆ_SëVœnMode
(
UINT32
 
ulMode
)

129 
UINT32
 
ulUnô
, 
ulPP‹t
;

130 
ªt_t
 
ªt
;

132 
ulMode
)

134 
PVLAN
:

137 
ªt
 = 
πl8367b_£tAsicVœnFûãr
(
DISABLED
);

138 i‡(
RT_ERR_OK
 !
ªt
)

140  
DRV_SDK_GEN_ERROR
;

145 
PhyP‹tF‹
(
ulUnô
, 
ulPP‹t
)

148 
ªt
 = 
πl8367b_£tAsicVœnIngªssFûãr
(
ulPP‹t
, 
DISABLED
);

149 i‡(
RT_ERR_OK
 !
ªt
)

151  
DRV_SDK_GEN_ERROR
;

155 
ªt
 = 
πl8367b_£tAsicVœnEgªssTagMode
(
ulPP‹t
, 
EG_TAG_MODE_KEEP
);

156 i‡(
RT_ERR_OK
 !
ªt
)

158  
DRV_SDK_GEN_ERROR
;

162 
QVLAN
:

165 
ªt
 = 
πl8367b_£tAsicVœnFûãr
(
ENABLED
);

166 i‡(
RT_ERR_OK
 !
ªt
)

168  
DRV_SDK_GEN_ERROR
;

171 
PhyP‹tF‹
(
ulUnô
, 
ulPP‹t
)

174 
ªt
 = 
πl8367b_£tAsicVœnIngªssFûãr
(
ulPP‹t
, 
ENABLED
);

175 i‡(
RT_ERR_OK
 !
ªt
)

177  
DRV_SDK_GEN_ERROR
;

181 
ªt
 = 
πl8367b_£tAsicVœnEgªssTagMode
(
ulPP‹t
, 
EG_TAG_MODE_KEEP
);

182 i‡(
RT_ERR_OK
 !
ªt
)

184  
DRV_SDK_GEN_ERROR
;

189  
DRV_ERR_PARA
;

192  
DRV_OK
;

213 
DRV_RET_E
 
HÆ_SëVœnE¡ryCª©e
(
UINT32
 
ulVœnId
)

215 
UINT32
 
ulUnô
;

216 
UINT32
 
ulPP‹tid
;

217 
phy_pmask_t
 
°PhyMask
, 
°PhyMaskU¡ag
;

218 
πk_fid_t
 
fid
 = 0;

219 
πk_≠i_ªt_t
 
ªt
;

221 if(!
VALID_VLAN_ID
(
ulVœnId
))

223  
DRV_ERR_PARA
;

226 
CÃPhyMaskAŒ
(&
°PhyMask
);

227 
CÃPhyMaskAŒ
(&
°PhyMaskU¡ag
);

229 
UnôF‹
(
ulUnô
)

231 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMask
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡ag
.pmask[ulUnô]), &
fid
);

232 i‡(
RT_ERR_OK
 !
ªt
)

234  
DRV_SDK_GEN_ERROR
;

239 
PhyP‹tF‹
(
ulUnô
, 
ulPP‹tid
)

241 i‡(
RTK_PORTMASK_IS_PORT_SET
((
°PhyMask
.
pmask
[
ulUnô
]), 
ulPP‹tid
))

243  
DRV_OK
;

247 
fid
 = 0;

248 
UnôF‹
(
ulUnô
)

250 
ªt
 = 
πk_vœn_£t
(
ulVœnId
, (
°PhyMask
.
pmask
[
ulUnô
]), (
°PhyMaskU¡ag
.pmask[ulUnô]), 
fid
);

251 if(
RT_ERR_OK
 !
ªt
)

253  
DRV_SDK_GEN_ERROR
;

257 
SPIN_HAL_MAC_LOCK
;

258 
_hÆ_vœn_num
++;

259 
SPIN_HAL_MAC_UNLOCK
;

261  
DRV_OK
;

281 
DRV_RET_E
 
HÆ_SëVœnE¡ryDñëe
(
UINT32
 
ulVœnId
)

283 
BOOL
 
bExi°ed
 = 
FALSE
;

284 
UINT32
 
ulUnô
;

285 
UINT32
 
ulPP‹tid
;

286 
phy_pmask_t
 
°PhyMask
, 
°PhyMaskU¡ag
, 
°PhyMaskTmp
;

287 
πk_fid_t
 
fid
 = 0;

288 
πk_≠i_ªt_t
 
ªt
;

290 if(!
VALID_VLAN_ID
(
ulVœnId
))

292  
DRV_ERR_PARA
;

295 
CÃPhyMaskAŒ
(&
°PhyMask
);

296 
CÃPhyMaskAŒ
(&
°PhyMaskU¡ag
);

297 
SëPhyMaskAŒ
(&
°PhyMaskTmp
);

299 
UnôF‹
(
ulUnô
)

301 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMask
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡ag
.pmask[ulUnô]), &
fid
);

302 i‡(
RT_ERR_OK
 !
ªt
)

304  
DRV_SDK_GEN_ERROR
;

309 
PhyP‹tF‹
(
ulUnô
, 
ulPP‹tid
)

311 i‡(
RTK_PORTMASK_IS_PORT_SET
((
°PhyMask
.
pmask
[
ulUnô
]), 
ulPP‹tid
))

313 
bExi°ed
 = 
TRUE
;

318 i‡(
TRUE
 !
bExi°ed
)

320  
DRV_OK
;

323 
PhyMaskRemove
(&
°PhyMask
, &
°PhyMaskTmp
);

324 
PhyMaskRemove
(&
°PhyMaskU¡ag
, &
°PhyMaskTmp
);

326 
UnôF‹
(
ulUnô
)

328 
ªt
 = 
πk_vœn_£t
(
ulVœnId
, (
°PhyMask
.
pmask
[
ulUnô
]), (
°PhyMaskU¡ag
.pmask[ulUnô]), 
fid
);

329 if(
RT_ERR_OK
 !
ªt
)

331  
DRV_SDK_GEN_ERROR
;

335 
SPIN_HAL_MAC_LOCK
;

336 if(
_hÆ_vœn_num
 > 0)

338 
_hÆ_vœn_num
--;

340 
SPIN_HAL_MAC_UNLOCK
;

342  
DRV_OK
;

363 
DRV_RET_E
 
HÆ_SëVœnMembîRemove
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
)

365 
UINT32
 
ulUnô
;

366 
phy_pmask_t
 
°PhyMask
, 
°PhyMaskTmp
, 
°PhyMaskU¡agTmp
;

367 
πk_fid_t
 
fid
 = 0;

368 
πk_≠i_ªt_t
 
ªt
;

370 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

371 i‡((0 !
ulVœnId
Ë&& (!
VALID_VLAN_ID
(ulVlanId)))

373 i‡(!
VALID_VLAN_ID
(
ulVœnId
))

376  
DRV_ERR_PARA
;

379 
CÃPhyMaskAŒ
(&
°PhyMask
);

380 
CÃPhyMaskAŒ
(&
°PhyMaskTmp
);

381 
CÃPhyMaskAŒ
(&
°PhyMaskU¡agTmp
);

382 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

384 
UnôF‹
(
ulUnô
)

386 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMaskTmp
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡agTmp
.pmask[ulUnô]), &
fid
);

387 i‡(
RT_ERR_OK
 !
ªt
)

389  
DRV_SDK_GEN_ERROR
;

394 
PhyMaskRemove
(&
°PhyMaskTmp
, &
°PhyMask
);

395 
PhyMaskRemove
(&
°PhyMaskU¡agTmp
, &
°PhyMask
);

397 
fid
 = 0;

398 
UnôF‹
(
ulUnô
)

400 
ªt
 = 
πk_vœn_£t
(
ulVœnId
, (
°PhyMaskTmp
.
pmask
[
ulUnô
]), (
°PhyMaskU¡agTmp
.pmask[ulUnô]), 
fid
);

401 if(
RT_ERR_OK
 !
ªt
)

403  
DRV_SDK_GEN_ERROR
;

407  
DRV_OK
;

429 
DRV_RET_E
 
HÆ_SëVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
)

431 
UINT32
 
ulUnô
;

432 
phy_pmask_t
 
°PhyMask
, 
°PhyMaskU¡ag
, 
°PhyMaskTmp
, 
°PhyMaskU¡agTmp
;

433 
πk_fid_t
 
fid
 = 0;

434 
πk_≠i_ªt_t
 
ªt
;

436 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

437 i‡((0 !
ulVœnId
Ë&& (!
VALID_VLAN_ID
(ulVlanId)))

439 i‡(!
VALID_VLAN_ID
(
ulVœnId
))

442  
DRV_ERR_PARA
;

445 
CÃPhyMaskAŒ
(&
°PhyMask
);

446 
CÃPhyMaskAŒ
(&
°PhyMaskU¡ag
);

447 
CÃPhyMaskAŒ
(&
°PhyMaskTmp
);

448 
CÃPhyMaskAŒ
(&
°PhyMaskU¡agTmp
);

450 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

451 
MaskLogic2Phy
(&
°LgcMaskU¡ag
, &
°PhyMaskU¡ag
);

453 
UnôF‹
(
ulUnô
)

455 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMaskTmp
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡agTmp
.pmask[ulUnô]), &
fid
);

456 i‡(
RT_ERR_OK
 !
ªt
)

458  
DRV_SDK_GEN_ERROR
;

462 
PhyMaskOr
(&
°PhyMask
, &
°PhyMaskTmp
);

463 
PhyMaskOr
(&
°PhyMaskU¡ag
, &
°PhyMaskU¡agTmp
);

465 
fid
 = 0;

467 
UnôF‹
(
ulUnô
)

470 
¥ötk
("\nvid:%d, mem mask:0x%04X, u¡agged:0x%04X.\n",
ulVœnId
,

471 
°PhyMask
.
pmask
[
ulUnô
].
bôs
[0],

472 
°PhyMaskU¡ag
.
pmask
[
ulUnô
].
bôs
[0]);

474 
ªt
 = 
πk_vœn_£t
(
ulVœnId
, 
°PhyMask
.
pmask
[
ulUnô
], 
°PhyMaskU¡ag
.pmask[ulUnô], 
fid
);

475 if(
RT_ERR_OK
 !
ªt
)

477  
DRV_SDK_GEN_ERROR
;

481  
DRV_OK
;

501 
DRV_RET_E
 
HÆ_SëMcVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
)

503 
UINT32
 
ulUnô
;

504 
phy_pmask_t
 
°PhyMask
, 
°PhyMaskU¡ag
, 
°PhyMaskTmp
, 
°PhyMaskU¡agTmp
;

505 
πk_fid_t
 
fid
 = 0;

506 
πk_≠i_ªt_t
 
ªt
;

508 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

509 i‡((0 !
ulVœnId
Ë&& (!
VALID_VLAN_ID
(ulVlanId)))

511 i‡(!
VALID_VLAN_ID
(
ulVœnId
))

514  
DRV_ERR_PARA
;

517 
CÃPhyMaskAŒ
(&
°PhyMask
);

518 
CÃPhyMaskAŒ
(&
°PhyMaskU¡ag
);

519 
CÃPhyMaskAŒ
(&
°PhyMaskTmp
);

520 
CÃPhyMaskAŒ
(&
°PhyMaskU¡agTmp
);

522 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

523 
MaskLogic2Phy
(&
°LgcMaskU¡ag
, &
°PhyMaskU¡ag
);

525 
UnôF‹
(
ulUnô
)

527 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMaskTmp
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡agTmp
.pmask[ulUnô]), &
fid
);

528 i‡(
RT_ERR_OK
 !
ªt
)

530  
DRV_SDK_GEN_ERROR
;

534 
PhyMaskOr
(&
°PhyMask
, &
°PhyMaskTmp
);

535 
PhyMaskOr
(&
°PhyMaskU¡ag
, &
°PhyMaskU¡agTmp
);

537 
fid
 = 
RTK_IVL_MODE_FID
;

538 
UnôF‹
(
ulUnô
)

541 
¥ötk
("\nvid:%d, mem mask:0x%04X, u¡agged:0x%04X.\n",
ulVœnId
,

542 
°PhyMask
.
pmask
[
ulUnô
].
bôs
[0],

543 
°PhyMaskU¡ag
.
pmask
[
ulUnô
].
bôs
[0]);

545 
ªt
 = 
πk_vœn_£t
(
ulVœnId
, 
°PhyMask
.
pmask
[
ulUnô
], 
°PhyMaskU¡ag
.pmask[ulUnô], 
fid
);

546 if(
RT_ERR_OK
 !
ªt
)

548  
DRV_SDK_GEN_ERROR
;

552  
DRV_OK
;

574 
DRV_RET_E
 
HÆ_SëVœnPvid
(
UINT32
 
ulLgcP‹tNumbî
, UINT32 
ulPvid
)

576 
πk_¥i_t
 
¥i‹ôy
 = 0;

577 
πk_≠i_ªt_t
 
ªt
;

579 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

580 
¥i‹ôy
 = (
ulPvid
 & 0x0000F000) >> 12;

581 
ulPvid
 &= 0x0FFF;

583 i‡(7 < 
¥i‹ôy
)

585  
DRV_ERR_PARA
;

589 if(!
VALID_VLAN_ID
(
ulPvid
))

591  
DRV_ERR_PARA
;

593 if(!
IsVÆidLgcP‹t
(
ulLgcP‹tNumbî
))

595  
DRV_ERR_PARA
;

598 
ªt
 = 
πk_vœn_p‹tPvid_£t
(
P‹tLogic2PhyP‹tId
(
ulLgcP‹tNumbî
), 
ulPvid
, 
¥i‹ôy
);

599 i‡(
RT_ERR_OK
 !
ªt
)

601  
DRV_SDK_GEN_ERROR
;

604  
DRV_OK
;

626 
DRV_RET_E
 
HÆ_SëVœnP‹tVœnMembî
(
UINT32
 
ulLgcP‹tNumbî
, 
logic_pmask_t
 
°LgcMask
)

628 
UINT32
 
ulUnô
;

629 
phy_pmask_t
 
°PhyMask
;

630 
πk_≠i_ªt_t
 
ªt
;

632 if(!
IsVÆidLgcP‹t
(
ulLgcP‹tNumbî
))

634  
DRV_ERR_PARA
;

638 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

639 
PhyMaskAddCpuP‹t
(&
°PhyMask
);

641 
ulUnô
 = 
P‹tLogci2ChùId
(
ulLgcP‹tNumbî
);

642 
ªt
 = 
πk_p‹t_isﬁ©i⁄_£t
(
P‹tLogic2PhyP‹tId
(
ulLgcP‹tNumbî
), 
CHIPNMASK
(
ulUnô
, &
°PhyMask
));

643 i‡(
RT_ERR_OK
 !
ªt
)

645  
DRV_SDK_GEN_ERROR
;

648  
DRV_OK
;

651 
DRV_RET_E
 
HÆ_GëVœnMembî
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 *
p°LgcMask
,Üogic_pmask_à*
p°LgcMaskU¡ag
)

653 
UINT32
 
ulUnô
;

654 
phy_pmask_t
 
°PhyMaskTmp
, 
°PhyMaskU¡agTmp
;

655 
πk_fid_t
 
fid
 = 0;

656 
πk_≠i_ªt_t
 
ªt
;

658 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

659 i‡((0 !
ulVœnId
Ë&& (!
VALID_VLAN_ID
(ulVlanId)))

661 i‡(!
VALID_VLAN_ID
(
ulVœnId
))

664  
DRV_ERR_PARA
;

666 i‡((
NULL
 =
p°LgcMask
Ë|| (NULL =
p°LgcMaskU¡ag
))

668  
DRV_ERR_PARA
;

671 
UnôF‹
(
ulUnô
)

673 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMaskTmp
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡agTmp
.pmask[ulUnô]), &
fid
);

674 i‡(
RT_ERR_OK
 !
ªt
)

676  
DRV_SDK_GEN_ERROR
;

680 
MaskPhy2Logic
(&
°PhyMaskTmp
, 
p°LgcMask
);

681 
MaskPhy2Logic
(&
°PhyMaskU¡agTmp
, 
p°LgcMaskU¡ag
);

683  
DRV_OK
;

702 
DRV_RET_E
 
HÆ_AddCpuToVœnMembî
(
UINT32
 
ulVœnId
)

704 
UINT32
 
ulUnô
 = 0;

705 
phy_pmask_t
 
°PhyMask
;

706 
phy_pmask_t
 
°PhyMaskU¡ag
;

707 
πk_fid_t
 
fid
 = 0;

708 
πk_≠i_ªt_t
 
ªt
;

710 if(!
VALID_VLAN_ID
(
ulVœnId
))

712  
DRV_ERR_PARA
;

715 
CÃPhyMaskAŒ
(&
°PhyMask
);

716 
CÃPhyMaskAŒ
(&
°PhyMaskU¡ag
);

718 
UnôF‹
(
ulUnô
)

720 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMask
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡ag
.pmask[ulUnô]), &
fid
);

721 i‡(
RT_ERR_OK
 !
ªt
)

723  
DRV_SDK_GEN_ERROR
;

727 
PhyMaskAddCpuP‹t
(&
°PhyMask
);

728 
PhyMaskRemoveCpuP‹t
(&
°PhyMaskU¡ag
);

730 
fid
 = 0;

731 
UnôF‹
(
ulUnô
)

733 
ªt
 = 
πk_vœn_£t
(
ulVœnId
, (
°PhyMask
.
pmask
[
ulUnô
]), (
°PhyMaskU¡ag
.pmask[ulUnô]), 
fid
);

734 if(
RT_ERR_OK
 !
ªt
)

736  
DRV_SDK_GEN_ERROR
;

740  
DRV_OK
;

759 
DRV_RET_E
 
HÆ_RemoveCpuFromVœnMembî
(
UINT32
 
ulVœnId
)

761 
UINT32
 
ulUnô
 = 0;

762 
phy_pmask_t
 
°PhyMask
;

763 
phy_pmask_t
 
°PhyMaskU¡ag
;

764 
πk_fid_t
 
fid
 = 0;

765 
πk_≠i_ªt_t
 
ªt
;

767 if(!
VALID_VLAN_ID
(
ulVœnId
))

769  
DRV_ERR_PARA
;

772 
CÃPhyMaskAŒ
(&
°PhyMask
);

773 
CÃPhyMaskAŒ
(&
°PhyMaskU¡ag
);

775 
UnôF‹
(
ulUnô
)

777 
ªt
 = 
πk_vœn_gë
((
πk_vœn_t
)
ulVœnId
, &(
°PhyMask
.
pmask
[
ulUnô
]), &(
°PhyMaskU¡ag
.pmask[ulUnô]), &
fid
);

778 i‡(
RT_ERR_OK
 !
ªt
)

780  
DRV_SDK_GEN_ERROR
;

783 
PhyMaskRemoveCpuP‹t
(&
°PhyMask
);

784 
PhyMaskRemoveCpuP‹t
(&
°PhyMaskU¡ag
);

786 
fid
 = 0;

787 
UnôF‹
(
ulUnô
)

789 
ªt
 = 
πk_vœn_£t
(
ulVœnId
, (
°PhyMask
.
pmask
[
ulUnô
]), (
°PhyMaskU¡ag
.pmask[ulUnô]), 
fid
);

790 if(
RT_ERR_OK
 !
ªt
)

792  
DRV_SDK_GEN_ERROR
;

796  
DRV_OK
;

799 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

815 
DRV_RET_E
 
HÆ_GëP‹tBa£VœnE¡ry
(
UINT32
 *
puiE¡ryId
, 
πk_vœn_mbrcfg_t
 *
p°VœnE¡ry
)

817 
UINT32
 
i
;

818 
UINT32
 
uiVid
;

819 #ifde‡
CHIPSET_RTL8305


820 
UINT32
 
uiE¡ryIdTmp
 = 
RTL8367B_CVIDXNO
;

821 
πk_≠i_ªt_t
 
Rë
;

824 i‡((
NULL
 =
puiE¡ryId
Ë|| (NULL =
p°VœnE¡ry
))

826  
DRV_ERR_PARA
;

829 #ifde‡
CHIPSET_RTL8305


830 
uiVid
 = 
p°VœnE¡ry
->
evid
;

831 
i
 = 0; i < 
RTL8367B_CVIDXMAX
; i++)

833 
Rë
 = 
πk_vœn_mbrCfg_gë
(
i
, 
p°VœnE¡ry
);

834 i‡(
RT_ERR_OK
 !
Rë
)

836  
DRV_SDK_GEN_ERROR
;

839 i‡(
uiVid
 =
p°VœnE¡ry
->
evid
)

841 
uiE¡ryIdTmp
 = 
i
;

844 i‡(0 =(
p°VœnE¡ry
->
mbr
 & 0xFF))

846 i‡(
RTL8367B_CVIDXNO
 =
uiE¡ryIdTmp
)

848 
uiE¡ryIdTmp
 = 
i
;

853 *
puiE¡ryId
 = 
uiE¡ryIdTmp
;

856  
DRV_OK
;

875 
DRV_RET_E
 
HÆ_SëP‹tBa£VœnE¡ry
(
UINT32
 *
puiE¡ryId
, 
πk_vœn_mbrcfg_t
 *
p°VœnE¡ry
)

877 #ifde‡
CHIPSET_RTL8305


878 
πk_≠i_ªt_t
 
Rë
;

881 i‡((
NULL
 =
puiE¡ryId
Ë|| (NULL =
p°VœnE¡ry
))

883  
DRV_ERR_PARA
;

886 #ifde‡
CHIPSET_RTL8305


887 
Rë
 = 
πk_vœn_mbrCfg_£t
(*
puiE¡ryId
, 
p°VœnE¡ry
);

888 i‡(
RT_ERR_OK
 !
Rë
)

890  
DRV_SDK_GEN_ERROR
;

894  
DRV_OK
;

913 
DRV_RET_E
 
HÆ_DñP‹tBa£VœnMemb
(
UINT32
 
uiVœnId
, 
logic_pmask_t
 
°LgcMask
)

915 
UINT32
 
uiE¡ryId
;

916 
UINT32
 
uiUnô
;

917 
phy_pmask_t
 
°PhyMask
;

918 
πk_vœn_mbrcfg_t
 
°P‹tBa£Vœn
;

920 if(!
VALID_VLAN_ID
(
uiVœnId
))

922  
DRV_ERR_PARA
;

925 
CÃPhyMaskAŒ
(&
°PhyMask
);

926 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

928 
UnôF‹
(
uiUnô
)

931 
mem£t
(&
°P‹tBa£Vœn
,0,(stPortBaseVlan));

934 
°P‹tBa£Vœn
.
evid
 = (
UINT16
)
uiVœnId
;

936 i‡(
DRV_OK
 !
HÆ_GëP‹tBa£VœnE¡ry
(&
uiE¡ryId
, &
°P‹tBa£Vœn
))

938  
DRV_ERR_UNKNOW
;

941 
°P‹tBa£Vœn
.
evid
 = (
UINT16
)
uiVœnId
;

942 
°P‹tBa£Vœn
.
mbr
 &((
UINT16
)(~(
°PhyMask
.
pmask
[
uiUnô
].
bôs
[0])));

944 i‡(
DRV_OK
 !
HÆ_SëP‹tBa£VœnE¡ry
(&
uiE¡ryId
, &
°P‹tBa£Vœn
))

946  
DRV_ERR_UNKNOW
;

950  
DRV_OK
;

968 
DRV_RET_E
 
HÆ_CÃP‹tBa£VœnE¡ryByVid
(
UINT32
 
uiVœnId
)

970 
UINT32
 
uiE¡ryId
;

971 
UINT32
 
uiUnô
;

972 
DRV_RET_E
 
íRë
;

974 
πk_vœn_mbrcfg_t
 
°P‹tBa£Vœn
;

975 
πl8367b_u£r_vœn4kíåy
 
°4KVœnE¡ry
;

977 if(!
VALID_VLAN_ID
(
uiVœnId
))

979  
DRV_ERR_PARA
;

985 
UnôF‹
(
uiUnô
)

988 
mem£t
(&
°P‹tBa£Vœn
,0,(stPortBaseVlan));

991 
°P‹tBa£Vœn
.
evid
 = (
UINT16
)
uiVœnId
;

992 
íRë
 = 
HÆ_GëP‹tBa£VœnE¡ry
(&
uiE¡ryId
, &
°P‹tBa£Vœn
);

993 i‡(
DRV_OK
 !
íRë
)

995  
DRV_ERR_UNKNOW
;

998 i‡(
RTL8367B_CVIDXNO
 =
uiE¡ryId
)

1000 
¥ötk
("\nfunc:%s: DÿnŸ födÅh vœ¿ödexÉ¡ry.\n",
__FUNCTION__
);

1001  
DRV_OK
;

1006 
mem£t
(&
°4KVœnE¡ry
, 0, (st4KVlanEntry));

1007 
°4KVœnE¡ry
.
vid
 = (
UINT16
)
uiVœnId
;

1008 i‡(
RT_ERR_OK
 !
πl8367b_gëAsicVœn4kE¡ry
(&
°4KVœnE¡ry
))

1010  
DRV_ERR_UNKNOW
;

1014 
°P‹tBa£Vœn
.
mbr
 &
°4KVœnE¡ry
.mbr;

1015 i‡(0 !
°P‹tBa£Vœn
.
evid
)

1017 i‡(0 =(
°P‹tBa£Vœn
.
mbr
 & ~((1U << 
SWITCH_UPLINK_PHY_PORT
Ë| (1U << 
SWITCH_CPU_PHY_PORT
))))

1019 
°P‹tBa£Vœn
.
evid
 = 0;

1020 
°P‹tBa£Vœn
.
mbr
 = 0;

1024 i‡(
DRV_OK
 !
HÆ_SëP‹tBa£VœnE¡ry
(&
uiE¡ryId
, &
°P‹tBa£Vœn
))

1026  
DRV_ERR_UNKNOW
;

1030  
DRV_OK
;

1049 
DRV_RET_E
 
HÆ_AddP‹tBa£VœnMemb
(
UINT32
 
uiVœnId
, 
logic_pmask_t
 
°LgcMask
)

1051 
UINT32
 
uiE¡ryId
;

1052 
UINT32
 
uiUnô
;

1053 
phy_pmask_t
 
°PhyMask
;

1054 
πk_vœn_mbrcfg_t
 
°P‹tBa£Vœn
;

1056 if(!
VALID_VLAN_ID
(
uiVœnId
))

1058 
¥ötk
("\nfunc:%s,Üöe:%d.\n",
__FUNCTION__
,
__LINE__
);

1059  
DRV_ERR_PARA
;

1062 
CÃPhyMaskAŒ
(&
°PhyMask
);

1063 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

1065 
UnôF‹
(
uiUnô
)

1068 
mem£t
(&
°P‹tBa£Vœn
,0,(stPortBaseVlan));

1071 
°P‹tBa£Vœn
.
evid
 = (
UINT16
)
uiVœnId
;

1073 i‡(
DRV_OK
 !
HÆ_GëP‹tBa£VœnE¡ry
(&
uiE¡ryId
, &
°P‹tBa£Vœn
))

1075 
¥ötk
("\nfunc:%s,Üöe:%d.\n",
__FUNCTION__
,
__LINE__
);

1076  
DRV_ERR_UNKNOW
;

1079 
°P‹tBa£Vœn
.
evid
 = (
UINT16
)
uiVœnId
;

1080 
°P‹tBa£Vœn
.
mbr
 |((
UINT16
)
°PhyMask
.
pmask
[
uiUnô
].
bôs
[0]);

1082 i‡(
DRV_OK
 !
HÆ_SëP‹tBa£VœnE¡ry
(&
uiE¡ryId
, &
°P‹tBa£Vœn
))

1084 
¥ötk
("\nfunc:%s,Üöe:%d.\n",
__FUNCTION__
,
__LINE__
);

1085  
DRV_ERR_UNKNOW
;

1089  
DRV_OK
;

1107 
DRV_RET_E
 
HÆ_AddP‹tBa£VœnMemByIndx
(
UINT32
 
uiE¡ryId
, 
logic_pmask_t
 
°LgcMask
)

1109 
UINT32
 
uiUnô
;

1110 
phy_pmask_t
 
°PhyMask
;

1111 
πk_vœn_mbrcfg_t
 
°P‹tBa£Vœn
;

1113 if(
RTL8367B_CVIDXMAX
 < 
uiE¡ryId
)

1115  
DRV_ERR_PARA
;

1118 
CÃPhyMaskAŒ
(&
°PhyMask
);

1119 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

1121 
UnôF‹
(
uiUnô
)

1123 
mem£t
(&
°P‹tBa£Vœn
,0,(stPortBaseVlan));

1125 i‡(
RT_ERR_OK
 !
πk_vœn_mbrCfg_gë
(
uiE¡ryId
, &
°P‹tBa£Vœn
))

1127  
DRV_SDK_GEN_ERROR
;

1130 
°P‹tBa£Vœn
.
mbr
 |(
UINT16
)(
°PhyMask
.
pmask
[
uiUnô
].
bôs
[0]);

1132 i‡(
RT_ERR_OK
 !
πk_vœn_mbrCfg_£t
(
uiE¡ryId
, &
°P‹tBa£Vœn
))

1134  
DRV_SDK_GEN_ERROR
;

1138  
DRV_OK
;

1157 
DRV_RET_E
 
HÆ_DñP‹tBa£VœnMemByIndx
(
UINT32
 
uiE¡ryId
, 
logic_pmask_t
 
°LgcMask
)

1159 
UINT32
 
uiUnô
;

1160 
phy_pmask_t
 
°PhyMask
;

1161 
πk_vœn_mbrcfg_t
 
°P‹tBa£Vœn
;

1163 if(
RTL8367B_CVIDXMAX
 < 
uiE¡ryId
)

1165  
DRV_ERR_PARA
;

1168 
CÃPhyMaskAŒ
(&
°PhyMask
);

1169 
MaskLogic2Phy
(&
°LgcMask
, &
°PhyMask
);

1171 
UnôF‹
(
uiUnô
)

1173 
mem£t
(&
°P‹tBa£Vœn
,0,(stPortBaseVlan));

1175 i‡(
RT_ERR_OK
 !
πk_vœn_mbrCfg_gë
(
uiE¡ryId
, &
°P‹tBa£Vœn
))

1177  
DRV_SDK_GEN_ERROR
;

1180 
°P‹tBa£Vœn
.
mbr
 &(
UINT16
)(~(
°PhyMask
.
pmask
[
uiUnô
].
bôs
[0]));

1182 i‡(
RT_ERR_OK
 !
πk_vœn_mbrCfg_£t
(
uiE¡ryId
, &
°P‹tBa£Vœn
))

1184  
DRV_SDK_GEN_ERROR
;

1188  
DRV_OK
;

1207 
DRV_RET_E
 
HÆ_SëP‹tVœnIngªssFûãr
(
UINT32
 
uiLP‹t
, 
BOOL
 
bE«bÀ
)

1209 
UINT32
 
uiPP‹t
;

1210 
πk_íabÀ_t
 
tdE«bÀ
;

1212 if((!
IsVÆidLgcP‹t
(
uiLP‹t
)) ||

1213 ((
TRUE
 !
bE«bÀ
Ë&& (
FALSE
 != bEnable)))

1215  
DRV_ERR_PARA
;

1218 
uiPP‹t
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

1220 i‡(
TRUE
 =
bE«bÀ
)

1222 
tdE«bÀ
 = 
ENABLED
;

1226 
tdE«bÀ
 = 
DISABLED
;

1229 i‡(
RT_ERR_OK
 !
πk_vœn_p‹tIgrFûãrE«bÀ_£t
(
uiPP‹t
, 
tdE«bÀ
))

1231  
DRV_ERR_UNKNOW
;

1234  
DRV_OK
;

1253 
DRV_RET_E
 
HÆ_SëP‹tVœnIngªssMode
–
UINT32
 
uiLP‹t
, 
PORT_INGRESS_MODE_E
 
íIngªssMode
)

1255 
UINT32
 
uiPP‹t
;

1256 
ªt_t
 
RëVÆ
 = 
RT_ERR_OK
;

1257 
πl8367b_acc‰amëy≥
 
íAccFømeTy≥
;

1259 if((!
IsVÆidLgcP‹t
(
uiLP‹t
)) ||

1260 (
PORT_IN_FRAM_END
 <
íIngªssMode
))

1262  
DRV_ERR_PARA
;

1266 
uiPP‹t
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

1267 i‡(
INVALID_PORT
 =
uiPP‹t
)

1269  
DRV_ERR_UNKNOW
;

1272 
íIngªssMode
)

1274 
PORT_IN_FRAM_BOTH
:

1275 
íAccFømeTy≥
 = 
FRAME_TYPE_BOTH
;

1277 
PORT_IN_FRAM_TAGGED_ONLY
:

1278 
íAccFømeTy≥
 = 
FRAME_TYPE_TAGGED_ONLY
;

1280 
PORT_IN_FRAM_UNTAGGED_ONLY
:

1281 
íAccFømeTy≥
 = 
FRAME_TYPE_UNTAGGED_ONLY
;

1284  
DRV_ERR_PARA
;

1287 
RëVÆ
 = 
πl8367b_£tAsicVœnAc˝ëFømeTy≥
(
uiPP‹t
, 
íAccFømeTy≥
);

1288 i‡(
RT_ERR_OK
 !
RëVÆ
)

1290  
DRV_ERR_UNKNOW
;

1293  
DRV_OK
;

1312 
DRV_RET_E
 
HÆ_SëP‹tVœnEgªssMode
–
UINT32
 
uiLP‹t
, 
PORT_EGRESS_MODE_E
 
íEgªssMode
)

1314 
UINT32
 
uiPP‹t
;

1315 
ªt_t
 
RëVÆ
 = 
RT_ERR_OK
;

1316 
πl8367b_egègmode
 
íEgTagMode
;

1318 if((!
IsVÆidLgcP‹t
(
uiLP‹t
)) ||

1319 (
PORT_EG_TAG_MODE_END
 <
íEgªssMode
))

1321  
DRV_ERR_PARA
;

1324 
uiPP‹t
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

1325 i‡(
INVALID_PORT
 =
uiPP‹t
)

1327  
DRV_ERR_UNKNOW
;

1330 
íEgªssMode
)

1332 
PORT_EG_TAG_MODE_ORI
:

1333 
íEgTagMode
 = 
EG_TAG_MODE_ORI
;

1335 
PORT_EG_TAG_MODE_KEEP
:

1336 
íEgTagMode
 = 
EG_TAG_MODE_KEEP
;

1338 
PORT_EG_TAG_MODE_PRI_TAG
:

1339 
íEgTagMode
 = 
EG_TAG_MODE_PRI_TAG
;

1341 
PORT_EG_TAG_MODE_REAL_KEEP
:

1342 
íEgTagMode
 = 
EG_TAG_MODE_REAL_KEEP
;

1345  
DRV_ERR_PARA
;

1348 
RëVÆ
 = 
πl8367b_£tAsicVœnEgªssTagMode
(
uiPP‹t
, 
íEgTagMode
);

1349 i‡(
RT_ERR_OK
 !
RëVÆ
)

1351  
DRV_ERR_UNKNOW
;

1354  
DRV_OK
;

1358 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_l2_tx.c

18 #ifde‡ 
__˝lu•lus


21 
	~<löux/autoc⁄f.h
>

22 
	~<mw_ty≥.h
>

23 
	~<löux/smp_lock.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/√tdevi˚.h
>

27 
	~<löux/ëhîdevi˚.h
>

28 
	~<löux/öô.h
>

29 
	~<löux/¶ab.h
>

30 
	~<löux/¥oc_fs.h
>

31 
	~<löux/£q_fûe.h
>

32 #ifde‡
CHIPSET_RTL8328L


33 
	~<drv/nic/nic.h
>

34 
	~<drv/swc‹e/sys.h
>

36 
	~"drv_pub.h
"

37 
	~"drv_ªq.h
"

38 
	~<löux/if_vœn.h
>

39 
	~"hÆ_comm⁄.h
"

40 #ifde‡
CHIPSET_OPL6750


41 
	~"›l_drv.h
"

44 #ifde‡
CHIPSET_RTL8328L


45 
	#PKTBUF_ALLOC
(
size
Ë
	`kmÆloc
(size, 
GFP_ATOMIC
)

	)

46 
	#PKTBUF_FREE
(
pktbuf
Ë
	`k‰ì
’ktbuf)

	)

48 
	#RESERVE_SPACE
 32

	)

49 
	#MAX_FRAME_LEN
 1518

	)

50 
	#MIN_FRAME_LEN
 60

	)

54 
	#OPL_CPU_IPORT_GBE
 0

	)

55 
	#OPL_CPU_IPORT_PON
 1

	)

56 
	#OPL_CPU_IPORT_INVALID
 0xFF

	)

60 
	#MAX_TABLE_ENTRY_COUNT
 64

	)

61 
	#MAC_TABLE_AGING_TICK
 1

	)

64 
	sègETH_MAC_TABLE_ENTRY


66 
©omic_t
 
ucAge
;

67 
íP‹t
;

68 
usVœn
;

69 
aucMac
[6];

70 } 
	tETH_MAC_TABLE_ENTRY_S
;

72 
ETH_MAC_TABLE_ENTRY_S
 
m_a°DrvMacTabÀ
[
MAX_TABLE_ENTRY_COUNT
];

73 
timî_li°
 
mac_èb_timî
;

75 
•ölock_t
 
mac_èb_lock
=
SPIN_LOCK_UNLOCKED
;

77 #ifde‡
CHIPSET_RTL8328L


78 
UINT32
 
_qosI¡PriToDp
[
QOS_MAX_INTERNAL_PRIORITY
];

95 
l2_tx_ˇŒback
(
uöt32
 
unô
, 
drv_nic_pkt_t
 *
pPackë
, *
pCookõ
)

97 
sk_buff
 *
	gpSkb
;

98 ()
	gunô
;

99 ()
	gpCookõ
;

101 i‡(
	gNULL
 =
pPackë
)

103 
_exô
;

106 
	gpSkb
 = (
sk_buff
 *)(
pPackë
->
buf_id
);

107 i‡(
	gNULL
 =
pSkb
)

109 
PKTBUF_FREE
(
pPackë
);

110 
	g_exô
;

113 
dev_k‰ì_skb_úq
(
pSkb
);

115 
PKTBUF_FREE
(
pPackë
);

116 
	g_exô
:

136 
DRV_RET_E
 
k_l2_£nd_by_p‹t
(
sk_buff
 *
pSkb
, 
l2_£nd_›
 *
›
)

138 
drv_nic_pkt_t
 *
	gpPackë
;

139 
p‹t_num_t
 
	gÕ‹t
=0;

140 
phyid_t
 
	gphyid
 = 0;

142 if(
	gNULL
==
pSkb
 || 
NULL
==
›
)

144  
DRV_ERR_PARA
;

146 if(
	gpSkb
->
	gÀn
>
	gMAX_FRAME_LEN
)

148 
dev_k‰ì_skb
(
pSkb
);

149  
	gDRV_L2_SEND_ERR
;

151 if((
	g›
->
	gucPri‹ôy
!=
L2_NO_PRIORITY
)&&(
›
->
ucPri‹ôy
>
QOS_MAX_INTERNAL_PRIORITY
))

153 
dev_k‰ì_skb
(
pSkb
);

154  
	gDRV_L2_SEND_ERR
;

157 
	gpPackë
 = 
PKTBUF_ALLOC
((
drv_nic_pkt_t
));

158 i‡(
	gNULL
 =
pPackë
)

160 
dev_k‰ì_skb
(
pSkb
);

161  
	gDRV_L2_SEND_ERR
;

164 if(
	g›
->
	gusVid
!=0)

166 
pSkb
=
__vœn_put_èg
’Skb,
›
->
usVid
);

170 
	gpPackë
->
	gas_txèg
 = 1;

174 
	gpPackë
->
	gtx_èg
.
	gd°_p‹t_mask
=0;

175 
IfLgcMaskSë
(&
›
->
p‹tmask
, 
Õ‹t
)

177 
	gphyid
=
P‹tLogic2PhyID
(
Õ‹t
);

178 
	gpPackë
->
	gtx_èg
.
	gd°_p‹t_mask
|=((0x1<<
PORTID
(
phyid
)));

180 
	gpPackë
->
	gtx_èg
.
	gas_d°_p‹t_mask
=1;

181 if(
	g›
->
	gucPri‹ôy
!=
L2_NO_PRIORITY
)

183 
pPackë
->
tx_èg
.
as_¥i‹ôy
=1;

184 
	gpPackë
->
	gtx_èg
.
	gas_p‹t_ªm¨k
=1;

185 
	gpPackë
->
	gtx_èg
.
	g¥i‹ôy
=
›
->
ucPri‹ôy
;

186 
	gpPackë
->
	gtx_èg
.
	gdr›_¥e˚dí˚
=
_qosI¡PriToDp
[
›
->
ucPri‹ôy
];

190 
	gpPackë
->
	gtx_èg
.
	gas_¥i‹ôy
=0;

192 
	gpPackë
->
	gtx_èg
.
	gl2_ªˇlcuœã
=1;

193 
	gpPackë
->
	gtx_èg
.
	gl3_ªˇlcuœã
=0;

194 
	gpPackë
->
	gtx_èg
.
	gl4_ªˇlcuœã
=0;

195 
	gpPackë
->
	gtx_èg
.
	gÊags
=0;

196 if(
	g›
->
	gucLogicE«bÀ
==
L2_LOGIC_ENABLE
)

199 
pPackë
->
tx_èg
.
Êags
|=0x3EFF;

204 
	gpPackë
->
	gtx_èg
.
	gÊags
|=0x80;

208 
	gpPackë
->
	gbuf_id
 = (*)
pSkb
;

209 
	gpPackë
->
	ghód
 = 
pSkb
->
hód
;

210 
	gpPackë
->
	gd©a
 = 
pSkb
->
d©a
;

211 
	gpPackë
->
	gèû
 = 
pSkb
->
èû
;

212 
	gpPackë
->
	gíd
 = 
pSkb
->
íd
;

213 
	gpPackë
->
	gÀngth
 = 
pSkb
->
Àn
;

214 
	gpPackë
->
	g√xt
 = 
NULL
;

215 i‡(
	gRT_ERR_OK
 !
drv_nic_pkt_tx
(
›
->
ucDevid
, 
pPackë
,
l2_tx_ˇŒback
, 
NULL
))

217 
PKTBUF_FREE
(
pPackë
);

218 
dev_k‰ì_skb
(
pSkb
);

219  
	gDRV_L2_SEND_ERR
;

221  
	gDRV_OK
;

225 
⁄u_°¨t_xmô_ù‹t
(
sk_buff
 *
skb
, 
›l_˝u_ù‹t
);

242 
skb_push_qèg
(
sk_buff
 *
pSkb
, 
UINT16
 
usVid
, 
UINT8
 
ucPri‹ôy
)

244 if(
	gusVid
){

246 
skb_push
(
pSkb
, 4);

247 
memmove
(
pSkb
->
d©a
,

248 
pSkb
->
d©a
 + 4,

249 (2 * 
MAC_ADDR_LEN
));

250 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
) = 0x81;

251 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
 + 1) = 0x00;

252 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
 + 2Ë(
uöt8_t
)(((
usVid
 >> 8Ë& 0xFË| (
ucPri‹ôy
 << 5));

253 *(
	gpSkb
->
	gd©a
 + 
	gRTL_HEADER_OFF
 + 3Ë
usVid
 & 0xFF;

271 
INT32
 
check_add_dñ_πl_hód
(
UINT8
 * 
pBuf
, INT32 
Àn
, 
UINT32
* 
πl_µ‹t
)

273 
UINT8
 *
	gpbufTmp
 = 
NULL
;

274 
RTL_HEADER_S
 
	g°RéHódî
;

275 
INT32
 
	gπl_size
 = (
°RéHódî
);

277 i‡((
	gNULL
 =
pBuf
) ||

278 (60 > 
Àn
) ||

279 (
NULL
 =
πl_µ‹t
))

284 *
	gπl_µ‹t
 = 
OPL_CPU_IPORT_INVALID
;

286 #i‡(1 =
SWITCH_HEADER_POSITION_BEHIND_SRC_MAC
)

289 i‡((0x81 =
pBuf
[12]) && (0x00 ==ÖBuf[13]))

291 
pbufTmp
 = 
pBuf
 + 16;

292 
	gÀn
 -= 4;

296 
	gpbufTmp
 = 
pBuf
 + 12;

299 if((0x88 =
pbufTmp
[0]) && (0x99 ==ÖbufTmp[1])){

300 
mem˝y
((
uöt8_t
 *)&
°RéHódî
, 
pbufTmp
, (
size_t
)
πl_size
);

301 *
	gπl_µ‹t
 = (
UINT32
)
°RéHódî
.
usPP‹tMask
;

303 
mem˝y
(
pbufTmp
,ÖbufTmp+
πl_size
, (
size_t
)((
Àn
 -Ñtl_size) - 12));

305  
	gπl_size
;

309 
	gpbufTmp
 = 
pBuf
 + 
Àn
 - 
πl_size
;

310 if((0x88 =
pbufTmp
[0]) && (0x99 ==ÖbufTmp[1])){

311 
mem˝y
((
uöt8_t
 *)&
°RéHódî
, 
pbufTmp
, (
size_t
)
πl_size
);

312 *
	gπl_µ‹t
 = (
UINT32
)
°RéHódî
.
usPP‹tMask
;

313  
	gπl_size
;

336 
DRV_RET_E
 
HÆ_L2£nd
(*
pMsg
,
UINT
 
uiLí
,
l2_£nd_›
 *
pOp
)

338 #ifde‡
CHIPSET_RTL8305


339 
UINT32
 
	guiLP‹t
;

341 
phyid_t
 
	gphyid
;

342 
sk_buff
 *
	gpSkb
=
NULL
;

343 
RTL_HEADER_S
 
	g°RéHódî
;

344 
	g›l_˝u_ù‹t
;

346 if((
	gNULL
 =
pMsg
Ë|| (0 =
uiLí
Ë|| (
MAX_FRAME_LEN
 < uiLíË|| (
NULL
 =
pOp
))

348  
DRV_ERR_PARA
;

351 
	gpSkb
 = 
Æloc_skb
(
uiLí
+
RESERVE_SPACE
,
GFP_KERNEL
);

352 if(
	gNULL
 =
pSkb
)

354  
DRV_L2_SEND_ERR
;

356 
skb_ª£rve
(
pSkb
, 
RESERVE_SPACE
);

359 if(
c›y_‰om_u£r
(
skb_put
(
pSkb
,
uiLí
),
pMsg
,uiLen))

361 
dev_k‰ì_skb
(
pSkb
);

362  
	gDRV_L2_SEND_ERR
;

366 i‡((0x81 =
pSkb
->
d©a
[12]) && (0x00 ==ÖSkb->data[13]))

368 
UINT16
 
usVœnId
;

369 
	gusVœnId
 = ((
pSkb
->
d©a
[14] & 0xF) << 8) +ÖSkb->data[15];

370 if((0 =
usVœnId
) || (0xFFF == usVlanId))

372 
memmove
(
pSkb
->
d©a
+15,ÖSkb->data+11, 12);

374 
skb_puŒ
(
pSkb
, 4);

376 
	guiLí
 = (
uiLí
 >(
MIN_FRAME_LEN
 + 4))? (uiLen - 4) : MIN_FRAME_LEN;

380 if((
LgcMaskNŸNuŒ
(&(
pOp
->
p‹tmask
))Ë|| (
T°LgcMaskBôNoCheck
((
LOGIC_UPPON_PORT
), (&(pOp->portmask))))){

382 
IfLgcMaskSëNoCheck
(&(
pOp
->
p‹tmask
), 
uiLP‹t
)

385 
skb_push_qèg
(
pSkb
, 
pOp
->
usVid
,ÖOp->
ucPri‹ôy
);

387 i‡(
	gLOGIC_PON_PORT
 =
uiLP‹t
)

389 
›l_˝u_ù‹t
 = 
OPL_CPU_IPORT_PON
;

395 
	g›l_˝u_ù‹t
 = 
OPL_CPU_IPORT_GBE
;

399 
	gphyid
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

400 
mem£t
(&
°RéHódî
, 0, (stRtlHeader));

401 
	g°RéHódî
.
	gusEthTy≥
 = 0x8899;

402 
	g°RéHódî
.
	gucPrŸocﬁ
 = 0x04;

403 
	g°RéHódî
.
	gusPP‹tMask
 = (
UINT16
)(1U << 
phyid
);

407 #i‡(1 =
SWITCH_HEADER_POSITION_BEHIND_SRC_MAC
)

409 
skb_push
(
pSkb
, (
°RéHódî
));

410 
memmove
(
pSkb
->
d©a
,

411 
pSkb
->
d©a
 + (
°RéHódî
),

412 
RTL_HEADER_OFF
);

413 
mem˝y
(
pSkb
->
d©a
 + 
RTL_HEADER_OFF
, &
°RéHódî
, (stRtlHeader));

416 
skb_push
(
pSkb
, (
°RéHódî
));

417 
memmove
(
pSkb
->
d©a
,

418 
pSkb
->
d©a
 + (
°RéHódî
),

419 
uiLí
);

420 
mem˝y
(
pSkb
->
d©a
 + 
uiLí
, &
°RéHódî
, (stRtlHeader));

425 i‡(
⁄u_°¨t_xmô_ù‹t
(
pSkb
, 
›l_˝u_ù‹t
))

427 
dev_k‰ì_skb
(
pSkb
);

428  
	gDRV_L2_SEND_ERR
;

435 
skb_push_qèg
(
pSkb
, 
pOp
->
usVid
,ÖOp->
ucPri‹ôy
);

438 i‡(
⁄u_°¨t_xmô_ù‹t
(
pSkb
, 
OPL_CPU_IPORT_GBE
))

440 
dev_k‰ì_skb
(
pSkb
);

441  
	gDRV_L2_SEND_ERR
;

444  
	gDRV_OK
;

451 #ifde‡
CHIPSET_RTL8328L


452 
sk_buff
 *
	gpSkb
=
NULL
;

454 if(
	gpMsg
==
NULL
 || 0 ==
uiLí
 || NULL =
pOp
)

456  
DRV_ERR_PARA
;

458 
	gpSkb
=
Æloc_skb
(
uiLí
+
RESERVE_SPACE
,
GFP_KERNEL
);

459 if(
	gpSkb
==
NULL
)

461  
DRV_L2_SEND_ERR
;

463 
skb_ª£rve
(
pSkb
, 
CPU_SPACE
);

465 if(
c›y_‰om_u£r
(
skb_put
(
pSkb
,
uiLí
),
pMsg
,uiLen))

467 
dev_k‰ì_skb
(
pSkb
);

468  
	gDRV_L2_SEND_ERR
;

470 
	gpSkb
->
	gnh
.
	gøw
 = 
pSkb
->
d©a
+
ETH_HLEN
;

471 
	gpSkb
->
	gmac
.
	gøw
 =
pSkb
->
d©a
;

472  
k_l2_£nd_by_p‹t
(
pSkb
,
pOp
);

474 #ifde‡
CHIPSET_OPL6750
 && 
CHIPSET_RTL8305


476 
dev_queue_xmô
(
sk_buff
 *
skb
);

478 
UINT32
 
	guiLP‹t
;

479 
phyid_t
 
	gphyid
;

480 
sk_buff
 *
	gpSkb
=
NULL
;

481 
OPL_HEADER_EGRESS_S
 
	g°O∂Hódî
;

482 
RTL_HEADER_S
 
	g°RéHódî
;

484 if((
	gpMsg
 =
NULL
Ë|| (0 ==
uiLí
Ë|| (
MAX_FRAME_LEN
 < uiLíË|| (NULL =
pOp
))

486  
DRV_ERR_PARA
;

489 
	gpSkb
=
Æloc_skb
(
uiLí
+
RESERVE_SPACE
,
GFP_KERNEL
);

490 if(
	gpSkb
==
NULL
)

492  
DRV_L2_SEND_ERR
;

500 
skb_ª£rve
(
pSkb
, 
CPU_SPACE
);

503 if(
c›y_‰om_u£r
(
skb_put
(
pSkb
,
uiLí
),
pMsg
,uiLen))

505 
dev_k‰ì_skb
(
pSkb
);

506  
	gDRV_L2_SEND_ERR
;

510 i‡((0x81 =
pSkb
->
d©a
[12]) && (0x00 ==ÖSkb->data[13]))

512 
UINT16
 
usVœnId
;

513 
	gusVœnId
 = ((
pSkb
->
d©a
[14] & 0xF) << 8) +ÖSkb->data[15];

514 if((0 =
usVœnId
) || (0xFFF == usVlanId))

516 
memmove
(
pSkb
->
d©a
 + 12,ÖSkb->d©®+ 16, 
uiLí
 - 16);

521 
	gpSkb
->
	gèû
 -= 4;

522 
	gpSkb
->
	gÀn
 -= 4;

524 
	guiLí
 = (
uiLí
 >(
MIN_FRAME_LEN
 + 4))? (uiLen - 4) : MIN_FRAME_LEN;

528 
mem£t
(&
°O∂Hódî
, 0, (stOplHeader));

529 
mem£t
(&
°RéHódî
, 0, (stRtlHeader));

531 
IfLgcMaskSë
(&(
pOp
->
p‹tmask
), 
uiLP‹t
)

534 i‡(
	gLOGIC_PON_PORT
 =
uiLP‹t
)

539 
°O∂Hódî
.
ï‹t
 = 1;

546 
	g°O∂Hódî
.
	gï‹t
 = 0;

550 
	gphyid
 = 
P‹tLogic2PhyID
(
uiLP‹t
);

551 
	g°RéHódî
.
	gusPP‹tMask
 |(
UINT16
)(1U << 
phyid
);

556 
mem˝y
(
pSkb
->
hód
, &
°O∂Hódî
, (stOplHeader));

559 
memmove
(
pSkb
->
d©a
 + 
RTL_HEADER_OFF
 + (
°RéHódî
),

560 
pSkb
->
d©a
 + 
RTL_HEADER_OFF
,

561 
uiLí
 - 
RTL_HEADER_OFF
);

562 
mem˝y
(
pSkb
->
d©a
 + 
RTL_HEADER_OFF
, &
°RéHódî
, (stRtlHeader));

563 ()
skb_put
(
pSkb
,(
°RéHódî
));

566 i‡(
	gNET_XMIT_SUCCESS
 !
dev_queue_xmô
(
pSkb
))

568 
dev_k‰ì_skb
(
pSkb
);

569  
	gDRV_L2_SEND_ERR
;

572 
dev_k‰ì_skb
(
pSkb
);

573  
	gDRV_OK
;

580 
HÆ_ã°_L2£nd
(
sk_buff
 *
skb
)

582 
l2_£nd_›
 
	gOp
;

583 
l2_£nd_›
* 
	gpOp
&
Op
;

584 
	gã°_Êag
=0;

586 
	gã°_Êag
++;

587 
	gOp
.
	gp‹tmask
.
	gpbôs
[0] = (1 << 
ã°_Êag
);

588 
	gOp
.
	gusVid
 = 0xF34;

589 
	gOp
.
	gucPri‹ôy
 = 6;

591 
HÆ_L2£nd
(
skb
->
d©a
, skb->
Àn
, 
pOp
);

594 
Drv_MT_Age
(
Êag
)

596 
	gi
 = 0;

597 ()
	gÊag
;

599 
•ö_lock_bh
(&
mac_èb_lock
);

601 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

603 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
)){

604 
©omic_dec
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
);

608 
•ö_u∆ock_bh
(&
mac_èb_lock
);

610 
mod_timî
(&
mac_èb_timî
, 
jiffõs
 + 
MAC_TABLE_AGING_TICK
* 
HZ
);

615 
Drv_MT_CÀ¨
()

617 
	gi
 = 0;

619 
•ö_lock_bh
(&
mac_èb_lock
);

620 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

624 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
)){

625 
©omic_£t
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
, 1);

628 
©omic_£t
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
, 0);

631 
•ö_u∆ock_bh
(&
mac_èb_lock
);

636 
Drv_MT_LookF‹E¡ry
(
aucMac
[6])

638 
	gi
 = 0;

640 i‡(
	gNULL
 =
aucMac
)

645 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

647 i‡–(
	gm_a°DrvMacTabÀ
[
i
].
	gaucMac
[0] =
aucMac
[0])

648 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[1] ==áucMac[1])

649 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[2] ==áucMac[2])

650 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[3] ==áucMac[3])

651 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[4] ==áucMac[4])

652 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[5] ==áucMac[5]))

655 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) > 0)

657  
i
;

681 
Drv_MT_GëP‹tByMac
(
aucMac
[6], 
uöt16_t
* 
pVid
)

683 
	gi
 = 0;

685 i‡(
	gNULL
 =
aucMac
)

687  
OPL_CPU_IPORT_INVALID
;

690 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

692 i‡–(
	gm_a°DrvMacTabÀ
[
i
].
	gaucMac
[0] =
aucMac
[0])

693 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[1] ==áucMac[1])

694 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[2] ==áucMac[2])

695 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[3] ==áucMac[3])

696 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[4] ==áucMac[4])

697 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[5] ==áucMac[5]))

699 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) > 0)

701 * 
pVid
 = 
m_a°DrvMacTabÀ
[
i
].
usVœn
;

702  ()
	gm_a°DrvMacTabÀ
[
i
].
	gíP‹t
;

707  
	gOPL_CPU_IPORT_INVALID
;

710 
Drv_MT_LookF‹Em±yOrOlde°E¡ry
()

712 
	gi
 = 0;

713 
	gmö_ödex
 = 0;

715 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

717 i‡(0 =
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
))

719  
i
;

721 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) <átomic_read(&m_astDrvMacTable[i].ucAge))

723 
	gmö_ödex
 = 
i
;

727  
	gmö_ödex
;

730 
Drv_MT_AddE¡ry
(* 
pucPkt
, 
íP‹t
)

732 
	giIndex
 = -1;

733 * 
	gpucSrcMac
 = 
NULL
;

735 i‡(
	gNULL
 =
pucPkt
)

740 
	gpucSrcMac
 = 
pucPkt
 + 6;

741 if((0xFF =
pucSrcMac
[0]) && (0xFF ==ÖucSrcMac[1]) && (0xFF ==ÖucSrcMac[2]) && \

742 (0xFF =
pucSrcMac
[3]) && (0xFF ==ÖucSrcMac[4]) && (0xFF ==ÖucSrcMac[5]))

748 
	giIndex
 = 
Drv_MT_LookF‹E¡ry
(
pucSrcMac
);

749 i‡((-1 =
iIndex
Ë|| (
MAX_TABLE_ENTRY_COUNT
 <= iIndex))

751 
iIndex
 = 
Drv_MT_LookF‹Em±yOrOlde°E¡ry
();

752 i‡((-1 =
iIndex
Ë|| (iIndex >
MAX_TABLE_ENTRY_COUNT
))

758 
•ö_lock_bh
(&
mac_èb_lock
);

759 
©omic_£t
(&
m_a°DrvMacTabÀ
[
iIndex
].
ucAge
, 0xFF);

761 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gíP‹t
 = (
uöt32_t
)
íP‹t
;

762 i‡((0x81 =
pucPkt
[12]) && (0x00 ==ÖucPkt[13]))

764 
m_a°DrvMacTabÀ
[
iIndex
].
usVœn
 = 
pucPkt
[14] << 8 |ÖucPkt[15];

768 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gusVœn
 = 0;

771 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[0] = 
pucSrcMac
[0];

772 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[1] = 
pucSrcMac
[1];

773 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[2] = 
pucSrcMac
[2];

774 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[3] = 
pucSrcMac
[3];

775 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[4] = 
pucSrcMac
[4];

776 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[5] = 
pucSrcMac
[5];

777 
•ö_u∆ock_bh
(&
mac_èb_lock
);

782 
zj_debug
(
£q_fûe
 *
m
, *
v
)

784 
	gii
;

785 
uöt8_t
* 
	gmac
;

787 ()
	gv
;

789  
	gii
 = 0 ; iò< 
	gMAX_TABLE_ENTRY_COUNT
; ii++ )

791 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
ii
].
ucAge
)){

792 
	gmac
 = 
m_a°DrvMacTabÀ
[
ii
].
aucMac
;

793 
£q_¥ötf
(
m
, "Index=%d, ucAge=%d,mac=%02x:%02x:%02x:%02x:%02x:%02x,ÉnPort=%d,usVlan=%d\n", \

794 
ii
, 
©omic_ªad
(&
m_a°DrvMacTabÀ
[ii].
ucAge
), \

795 
mac
[0],mac[1],mac[2],mac[3],mac[4],mac[5], \

796 
m_a°DrvMacTabÀ
[
ii
].
íP‹t
, m_a°DrvMacTabÀ[ii].
usVœn
);

803 
__öô
 
πl_l2_öô
()

806 
•ö_lock_öô
(&
mac_èb_lock
);

807 
Drv_MT_CÀ¨
();

809 
öô_timî
(&
mac_èb_timî
);

810 
	gmac_èb_timî
.
	gfun˘i⁄
 = 
Drv_MT_Age
;

811 
	gmac_èb_timî
.
	gd©a
 = 0;

812 
mod_timî
(&
mac_èb_timî
, 
jiffõs
 + (
MAC_TABLE_AGING_TICK
 * 
HZ
));

817 
moduÀ_öô
(
πl_l2_öô
);

819 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/hal_common.h

17 #i‚de‡
_HAL_COMMON_H_


18 
	#_HAL_COMMON_H_


	)

20 #ifde‡ 
__˝lu•lus


24 
	~"drv_pub.h
"

26 
	#PHY_CPU_PORTID
 
	`PORTID
(
	`PORT_PHYID
(
LOGIC_CPU_PORT
))

	)

27 
	#PHY_CPU_CHIPID
 
	`CHIPID
(
	`PORT_PHYID
(
LOGIC_CPU_PORT
))

	)

30 
	#HAL_PORT_LINKUP_TYPE_DOWN
 0

	)

31 
	#HAL_PORT_LINKUP_TYPE_COPPER_UP
 1

	)

32 
	#HAL_PORT_LINKUP_TYPE_FIBER_UP
 2

	)

36 
	#LOGIC_PORT_MASK_CPARE
(
_Õ‹tmask1
,
_Õ‹tmask2
,
ªsu…
) \

38 
UINT
 
i
; \

39 
ªsu…
 = 
TRUE
; \

40 
i
 = 0; i < (
PORT_MASK_WORD_MAX
); i++) \

42 i‡(
_Õ‹tmask1
.
pbôs
[
i
] !
_Õ‹tmask2
.pbits[i]) \

44 
ªsu…
 = 
FALSE
; \

48 } 0);

	)

51 
	#P‹tLogic2PhyP‹tId
(
_Õ‹t
Ë
	`PORTID
(
	`P‹tLogic2PhyID
((_Õ‹t)))

	)

52 
	#P‹tLogci2ChùId
(
_Õ‹t
Ë
	`CHIPID
(
	`P‹tLogic2PhyID
((_Õ‹t)))

	)

54 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
);

55 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
);

56 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
);

58 
UINT32
 
HÆ_GëP‹tTy≥
(
p‹t_num_t
 
lgcP‹t
);

60 
DRV_RET_E
 
HÆ_GëP‹tLökupTy≥
(
phyid_t
 
phyid
, 
UINT32
 *
pulLökupTy≥
);

62 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiAbûôy
, UINT32 
uiP‹tTy≥
);

63 
DRV_RET_E
 
HÆ_GëP‹tCuºítLök
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLök
);

64 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
);

65 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiFlow˘æ
);

66 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiJumbo
);

67 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLí
);

68 
DRV_RET_E
 
HÆ_GëP‹tLökMask
(
logic_pmask_t
 *
p°P‹tMask
);

69 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p°P‹tMask
);

70 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
);

72 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMedium
);

73 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMedium
);

74 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiPrio
);

75 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
);

76 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAbûôy
, UINT32 
uiP‹tTy≥
);

77 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAut⁄
, UINT32 
uiP‹tTy≥
);

78 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
, UINT32 
uiP‹tTy≥
);

79 
DRV_RET_E
 
HÆ_SëP‹tE«bÀ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
);

80 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPau£Tx
, UINT32 
uiPau£Rx
);

81 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiJumbo
);

82 
DRV_RET_E
 
HÆ_SëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMdix
);

83 
DRV_RET_E
 
HÆ_SëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPrio
);

84 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
, UINT32 
uiP‹tTy≥
);

85 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
);

86 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p°P‹tMask
);

87 
DRV_RET_E
 
HÆ_P‹tLedInô
();

88 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
);

89 
DRV_RET_E
 
HÆ_FibîP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
);

90 
DRV_RET_E
 
HÆ_C›≥rP‹tCfgInô
(
p‹t_num_t
 
lgcP‹t
, 
COMBO_PORT_CONFIG_S
 *
p°Cfg
);

91 
DRV_RET_E
 
HÆ_GëFibîS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
);

94 
DRV_RET_E
 
HÆ_SëP‹tSpdlx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSpdlx
);

95 
DRV_RET_E
 
HÆ_SëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
ªg_no
, UINT32 
ªg_vÆ
);

96 
DRV_RET_E
 
HÆ_GëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
pRegVÆ
, UINT32 
ªg_no
);

97 
DRV_RET_E
 
HÆ_GëSpdlxSë
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
uiSpdlx
);

98 
DRV_RET_E
 
HÆ_GëIsﬁ©eSë
(
logic_pmask_t
 *
p°P‹tMask
);

102 
DRV_RET_E
 
HÆ_SëAggrMode
(
UINT32
 
ulMode
);

103 
DRV_RET_E
 
HÆ_SëAggrGroup
(
agg_gΩ_num_t
 
gΩNum
, 
logic_pmask_t
 
°LgcMask
);

106 
DRV_RET_E
 
HÆ_GëVœnExi°Num
(
UINT32
 *
puiNum
);

107 
DRV_RET_E
 
HÆ_SëVœnMode
(
UINT32
 
ulMode
);

108 
DRV_RET_E
 
HÆ_SëVœnE¡ryCª©e
(
UINT32
 
ulVœnE¡ry
);

109 
DRV_RET_E
 
HÆ_SëVœnE¡ryDñëe
(
UINT32
 
ulVœnE¡ry
);

110 
DRV_RET_E
 
HÆ_SëVœnMembîRemove
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
);

111 
DRV_RET_E
 
HÆ_SëVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
);

112 
DRV_RET_E
 
HÆ_SëMcVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
);

113 
DRV_RET_E
 
HÆ_SëVœnPvid
(
UINT32
 
ulLgcP‹tNumbî
, UINT32 
ulPvid
);

114 
DRV_RET_E
 
HÆ_SëVœnP‹tVœnMembî
(
UINT32
 
ulLgcP‹tNumbî
, 
logic_pmask_t
 
°LgcMask
);

115 
DRV_RET_E
 
HÆ_GëVœnMembî
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 * 
p°LgcMask
,Üogic_pmask_à* 
p°LgcMaskU¡ag
);

116 
DRV_RET_E
 
HÆ_AddCpuToVœnMembî
(
UINT32
 
ulVœnId
);

117 
DRV_RET_E
 
HÆ_RemoveCpuFromVœnMembî
(
UINT32
 
ulVœnId
);

119 
DRV_RET_E
 
HÆ_SëCpuP‹tMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
);

120 
DRV_RET_E
 
HÆ_SëMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
, 
logic_pmask_t
 
°P‹tMask
);

121 
DRV_RET_E
 
HÆ_GëMacLó∫E«bÀ
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulE«bÀ
);

122 
DRV_RET_E
 
HÆ_SëMacCpuMacAdd
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addªss
);

123 
DRV_RET_E
 
HÆ_SëMacFlushUˇ°Mac
(
mac_dñëe_t
 
°MacDñëe
);

124 
DRV_RET_E
 
HÆ_SëMacAddUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
);

125 
DRV_RET_E
 
HÆ_SëMacDñUˇ°Mac
(
mac_uˇ°_t
 
mac_uˇ°
);

126 
DRV_RET_E
 
HÆ_SëMacAddMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
);

127 
DRV_RET_E
 
HÆ_SëMacDñMˇ°Mac
(
mac_mˇ°_t
 
mac_mˇ°
);

128 
DRV_RET_E
 
HÆ_SëMacAgeTime
(
UINT32
 
ulSec⁄d
);

129 
DRV_RET_E
 
HÆ_SëMacLó∫Limô
(
UINT32
 
ulLgcP‹t
, UINT32 
uLlimô
, UINT32 
ulDisF‹w¨d
);

130 
DRV_RET_E
 
HÆ_GëMacUˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
);

131 
DRV_RET_E
 
HÆ_GëMacMˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
);

132 
DRV_RET_E
 
HÆ_SëMacSëMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
);

133 
DRV_RET_E
 
HÆ_SëMacLookFaûFrd
(
logic_pmask_t
 
°P‹tMask
);

134 
DRV_RET_E
 
HÆ_GëMacLó∫Cou¡
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulCou¡
);

135 
DRV_RET_E
 
HÆ_Re‰eshUCa°
(
UINT32
 
ulI¡îvÆ
);

137 
DRV_RET_E
 
HÆ_GëMacUˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

138 
DRV_RET_E
 
HÆ_GëMacNextVÆidUˇ°
(
UINT32
 
uiSèπIndex
, 
mac_dump_uˇ°_èb_t
* 
p°Uˇ°E¡ry
, UINT32 *
puiCuºítIndex
);

139 
DRV_RET_E
 
HÆ_GëMacMˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

140 
DRV_RET_E
 
HÆ_GëMacNextVÆidMˇ°
(
UINT32
 
uiSèπIndex
, 
mac_mˇ°_t
* 
p°Mˇ°E¡ry
, UINT32 *
puiCuºítIndex
);

141 
DRV_RET_E
 
HÆ_GëMacUˇ°DumpS‹ãd
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
);

142 
DRV_RET_E
 
HÆ_SëMacTøpToCpu
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
);

143 
DRV_RET_E
 
HÆ_GëMacFödC⁄Êi˘Mac
(
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
);

145 
DRV_RET_E
 
HÆ_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
);

147 
DRV_RET_E
 
HÆ_GëMacByIndex
(
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 * 
p°TmpMacE¡ry
);

148 
DRV_RET_E
 
HÆ_GëMacM‹eByIndex
(
UINT32
 
ulSèπIdx
, UINT32 
ulGëCou¡
,

149 
ULONG
 
u£rPoöãr
, 
UINT32
* 
pulCou¡Out
, UINT32* 
pulNextIdx
, UINT32 
ulPD©aTy≥
);

151 
DRV_RET_E
 
HÆ_GëMacExa˘
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 * 
p°TmpMac
);

152 
DRV_RET_E
 
HÆ_GëMˇ°Cou¡
(
UINT32
 * 
pulMˇ°Cou¡
);

153 
DRV_RET_E
 
HÆ_SëMˇ°LookupMissDr›
(
UINT32
 
ulE«bÀ
);

154 
DRV_RET_E
 
HÆ_SëIgmpPktA˘i⁄
(
UINT32
 
ulA˘i⁄
);

155 
DRV_RET_E
 
HÆ_SëUnKnowIp4Mˇ°A˘
(
MCAST_UNKNOW_ACT_E
 
íA˘Mode
);

157 
DRV_RET_E
 
HÆ_SëMúr‹Group
(
p‹t_num_t
 
múr‹De°P‹t
, 
logic_pmask_t
 
ögªssMask
,Üogic_pmask_à
egªssMask
);

158 
HÆ_InôMúr‹A˛GΩ
();

159 
DRV_RET_E
 
HÆ_SëMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
, 
UINT32
 *
puiMúr‹GΩId
);

160 
DRV_RET_E
 
HÆ_DñMúr‹A˛GΩ
(
p‹t_num_t
 
múr‹D°P‹t
);

163 
DRV_RET_E
 
HÆ_GëMibP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
);

164 
DRV_RET_E
 
HÆ_SëMibCou¡Sync
();

165 
DRV_RET_E
 
HÆ_SëMibCou¡Re£t
(
p‹t_num_t
 
Õ‹t
);

166 
DRV_RET_E
 
HÆ_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
);

167 
DRV_RET_E
 
HÆ_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
°©i°icsName
, 
UINT64
 *
ªtu∫VÆue
);

170 
DRV_RET_E
 
HÆ_SëR©ñimôInô
();

171 
DRV_RET_E
 
HÆ_SëR©ñimôByP‹t
(
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
lP‹tMask
, UINT32 
ulKBps
);

172 
DRV_RET_E
 
HÆ_SëR©ñimôSt‹mCé
(
STORM_CTLTYPE_E
 
˘lTy≥
, 
logic_pmask_t
 
lP‹tMask
, 
STORM_CTLRATE_S
 
°St‹m
);

175 
DRV_RET_E
 
HÆ_SëQosInô
();

176 
DRV_RET_E
 
HÆ_Së1pIngªssPri‹ôyRem≠
(
qos_8021p_to_öçri_t
 
°1pToI¡Pri
);

177 
DRV_RET_E
 
HÆ_SëDs˝IngªssPri‹ôyRem≠
(
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
);

178 
DRV_RET_E
 
HÆ_SëQosTru°Mode
(
UINT32
 
mode
);

179 
DRV_RET_E
 
HÆ_SëQosQueueSchedul
(
QueueMode_S
 
°QueueScheduÀ
);

180 
DRV_RET_E
 
HÆ_SëCos2QidRem≠
(
qos_8021p_to_öçri_t
 
°1pPri2qid
);

183 
DRV_RET_E
 
HÆ_SëA˛Inô
();

184 
DRV_RET_E
 
HÆ_SëVœnI¡îÁ˚Add
(
vœn_id_t
 
vid
, 
mac_addªss_t
 
mac_addªss
);

185 
DRV_RET_E
 
HÆ_SëVœnI¡îÁ˚Dñ
(
vœn_id_t
 
vid
);

186 
DRV_RET_E
 
HÆ_A˛Te°
();

187 
DRV_RET_E
 
HÆ_A˛RuÀF‹EﬂmFûãrCª©e
(
UINT32
 
uiLP‹tId
,

188 
UINT32
 
uiRuÀPª˚dí˚
,

189 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,

190 
ACL_DIRECTION_E
 
íA˛Dú
,

191 
VOID
 *
pRuÀVÆue
);

192 
DRV_RET_E
 
HÆ_A˛RuÀF‹EﬂmFûãrDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiRuÀPª˚dí˚
, 
ACL_DIRECTION_E
 
íA˛Dú
);

193 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkCª©e
(
UINT32
 
uiLP‹tId
,

194 
UINT32
 
uiRuÀPª˚dí˚
,

195 
ACL_TRUST_MODE_E
 
uiA˛RuÀTy≥
,

196 
VOID
 *
pRuÀVÆue
,

197 
VOID
 *
pRem¨kPri
);

198 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkDñëe
(
UINT32
 
uiLP‹tId
, UINT32 
uiRuÀPª˚dí˚
);

199 
DRV_RET_E
 
HÆ_A˛RuÀF‹CtcClfRmkCÀ¨
(
UINT32
 
uiLP‹tId
);

201 
	s_l3_rouã_s_
 {

202 
ù_addªss_t
 
	gde°_ù
;

203 
ù_addªss_t
 
	g√xth›_ù
;

204 
mac_addªss_t
 
	gmac_add
;

205 
UINT8
 
	g¥e„ªn˚
;

206 
UINT8
 
	gù_mask_Àn
;

207 
vœn_id_t
 
	gvid
;

208 
UINT8
 
	ga˘i⁄
;

209 }
	tl3Rouã_t
;

211 
	#HAL_L3_ACT_ROUTE_HIT
 0x01

	)

212 
	#HAL_L3_ACT_ROUTE_ADD
 0x02

	)

213 
	#HAL_L3_ACT_ROUTE_CPU
 0x04

	)

215 
BOOL
 
HÆ_IsNextH›
(
mac_addªss_t
 
mac_add
, 
vœn_id_t
 
vid
);

216 
DRV_RET_E
 
HÆ_AddDúe˘Uˇ°Rouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

217 
DRV_RET_E
 
HÆ_DñDúe˘Uˇ°Rouã
(
ù_addªss_t
 
de°_ù
, 
vœn_id_t
 
vid
);

218 
DRV_RET_E
 
HÆ_AddNëw‹kUˇ°Rouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

219 
DRV_RET_E
 
HÆ_DñNëw‹kUˇ°Rouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

220 
DRV_RET_E
 
HÆ_AgeNëw‹kUˇ°RouãNh›
(
ù_addªss_t
 
√xth›_ù
, 
vœn_id_t
 
vid
);

221 
DRV_RET_E
 
HÆ_AddLoˇlRouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

222 
DRV_RET_E
 
HÆ_DñLoˇlRouã
(
l3Rouã_t
 *
p°RouãE¡ry
);

223 
DRV_RET_E
 
	gHÆ_In°ÆlMacA˛RuÀ


224 (
logic_pmask_t
 *
	gp°P‹tMask
, 
vœn_id_t
 
	gusVid
, 
drv_a˛_li°_macBa£d_t
 *
	gp°MbRuÀ
, 
BOOL
 
	gbFœg
);

225 
DRV_RET_E
 
	gHÆ_In°ÆlIpA˛RuÀ


226 (
logic_pmask_t
 *
	gp°P‹tMask
, 
vœn_id_t
 
	gusVid
, 
drv_a˛_li°_ùBa£d_t
 *
	gp°IbRuÀ
, 
BOOL
 
	gbFœg
);

227 
DRV_RET_E
 
HÆ_Reö°ÆlA˛
(
UINT16
 
usA˛Prio
, 
logic_pmask_t
 *
lP‹tLi°
);

228 
DRV_RET_E
 
HÆ_RemoveA˛
(
UINT16
 
usA˛Prio
);

229 
DRV_RET_E
 
HÆ_RemoveA˛RuÀByRuÀId
(
UINT16
 
usA˛Prio
, 
UINT32
 
ulId
, 
BOOL
 
bFœg
);

230 
DRV_RET_E
 
HÆ_RemoveA˛RuÀByRuÀPrio
(
UINT16
 
usA˛Prio
, UINT16 
usRuÀPrio
);

231 
DRV_RET_E
 
HÆ_A˛E¡ryC™AŒoc
(
fõld_íåy_¥i_ty≥
 
ty≥
, 
UINT32
 
cou¡
, UINT32 
ulLogEn
);

232 
DRV_RET_E
 
HÆ_dh˝•_dr›_dh˝s
(
logic_pmask_t
 *
p°Lp‹tLi°
);

233 
DRV_RET_E
 
HÆ_dh˝•_c›y_dh˝s
(
logic_pmask_t
 *
p°Lp‹tLi°
);

234 
DRV_RET_E
 
HÆ_dh˝•_ùfûãr_íabÀ
(
logic_pmask_t
 *
p°Lp‹tMask
);

235 
DRV_RET_E
 
HÆ_dh˝•_dr›_¨p
(
BOOL
 
íabÀ
);

236 
DRV_RET_E
 
HÆ_AgeRouãByP‹t
(
p‹t_num_t
 
Õ‹t
);

237 
DRV_RET_E
 
HÆ_AgeRouãByVœn
(
vœn_id_t
 
vid
);

240 
DRV_RET_E
 
HÆ_SëEEEByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

241 
DRV_RET_E
 
HÆ_SëAutoPwrDwnByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

244 
DRV_RET_E
 
HÆ_GëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
);

247 
DRV_RET_E
 
HÆ_GëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 * 
pulSèã
);

248 
DRV_RET_E
 
HÆ_SëSçP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulSèã
);

252 
DRV_RET_E
 
HÆ_soc_ªg_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 * 
pulD©a
);

253 
DRV_RET_E
 
HÆ_soc_ªg_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 
ulD©a
);

254 
DRV_RET_E
 
HÆ_soc_mem_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
);

255 
DRV_RET_E
 
HÆ_soc_mem_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulTabÀ
, UINT32 
ulAddr
, UINT32 * 
pulE¡ryD©a
);

257 #ifde‡
CHIPSET_RTL8328


258 
DRV_RET_E
 
HÆ_GëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 * 
pulD©a
);

259 
DRV_RET_E
 
HÆ_SëCpuAddr
(
UINT32
 
ulCpuAddr
, UINT32 
ulD©a
);

261 
DRV_RET_E
 
HÆ_SëCPUP‹tJumbo
(
UINT32
 
uiLí
);

266 
DRV_RET_E
 
HÆ_SwôchInô
();

269 
DRV_RET_E
 
HÆ_L2£nd
(*
pMsg
,
UINT
 
uiLí
,
l2_£nd_›
 *
pOp
);

270 
DRV_RET_E
 
HÆ_SëI¡î«lLo›back
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
);

275 
	gEïromOk
=0,

276 
	gAckEº‹
,

277 
	gPoötEº‹
,

278 
	gOutOfR™g
,

279 
	gOutOfAddr
,

280 
	gGpioPöEº‹


281 }
	tEEPROM_RET
;

285 
	gEEPROM_I2C_SCL_PIN
=0,

286 
	gEEPROM_I2C_SDA_PIN
,

287 
	gEEPROM_I2C_PIN_END


288 }
	tEEPROM_I2C_PIN_DEFINE
;

292 #ifde‡
CHIPSET_OPL6750


293 
DRV_RET_E
 
HÆ_CpuInô
();

297 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_convert.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"hÆ_comm⁄.h
"

24 
	~<löux/°rög.h
>

25 #ifde‡
CHIPSET_RTL8328


26 
	~<comm⁄/π_îr‹.h
>

27 
	~<comm⁄/utû/π_utû.h
>

28 
	~<comm⁄/π_ty≥.h
>

30 #ifde‡
UT_TEST


31 
	~<°dio.h
>

32 
	~<°rög.h
>

50 
BOOL
 
IsVÆidPhyID
(
phyid_t
 
uiPhyID
)

52 
UINT32
 
uiP‹tId
 = 
PORTID
(
uiPhyID
);

53 
UINT32
 
uiChùID
 = 
CHIPID
(
uiPhyID
);

55 if(
uiChùID
 >
MAX_CHIP_NUM
)

57  
FALSE
;

60 if(
uiP‹tId
 >
g_szChùMaxP‹t
[
uiChùID
])

62  
FALSE
;

66  
TRUE
;

85 
phyid_t
 
P‹tLogic2PhyID
(
p‹t_num_t
 
ucLogicP‹t
)

87 i‡(!
IsVÆidLgcP‹t
(
ucLogicP‹t
)) {

88 
ASSERT
(
IsVÆidLgcP‹t
(
ucLogicP‹t
));

89  
INVALID_PORT
;

91  
PORT_PHYID
(
ucLogicP‹t
);

109 
p‹t_num_t
 
P‹tPhyID2Logic
(
phyid_t
 
uiPhyId
)

111 
p‹t_num_t
 
Õ‹t
 = 
INVALID_PORT
;

112 
UINT32
 
ulChùId
 = 0;

113 
UINT32
 
ulid
 = 0;

114 
UINT32
 
ulP‹tSèπ
 = 0;

116 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

117 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

118  
INVALID_PORT
;

121 
ulChùId
 = 
CHIPID
(
uiPhyId
);

122 
ulid
=0; ulid<
ulChùId
; ulid++)

124 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulid
];

127 
Õ‹t
 = 
TOLGCPORT
(
ulP‹tSèπ
 + 
PORTID
(
uiPhyId
));

128 if(
STACK_PORT
 =
Õ‹t
)

130  
INVALID_PORT
;

134  
Õ‹t
;

155 
SëPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

157 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

158 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

161 if(
NULL
 =
phyPMask_±r
) {

162 
ASSERT
(
NULL
 !
phyPMask_±r
);

166 
RTK_PORTMASK_PORT_SET
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId));

186 
CÃPhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

188 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

189 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

192 if(
NULL
 =
phyPMask_±r
) {

193 
ASSERT
(
NULL
 !
phyPMask_±r
);

197 
RTK_PORTMASK_PORT_CLEAR
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId));

216 
CÃPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

218 
UINT32
 
chùId
 = 0;

220 if(
NULL
 =
phyPMask_±r
) {

221 
ASSERT
(
NULL
 !
phyPMask_±r
);

225 
chùId
=0; chùId<
CHIP_NO
; chipId++)

227 
RTK_PORTMASK_RESET
(
CHIPNMASK
(
chùId
, 
phyPMask_±r
));

246 
SëPhyMaskAŒ
(
phy_pmask_t
 *
phyPMask_±r
)

248 
p‹t_num_t
 
µ‹t
 = 0;

249 
UINT32
 
chùId
 = 0;

250 
phyid_t
 
uiPhyId
 = 0;

252 if(
NULL
 =
phyPMask_±r
) {

253 
ASSERT
(
NULL
 !
phyPMask_±r
);

257 
mem£t
(
phyPMask_±r
, 0x00, (
phy_pmask_t
));

258 
PhyP‹tF‹
(
chùId
, 
µ‹t
)

260 
uiPhyId
 = 
TOPHYID
(
chùId
, 
µ‹t
);

261 
SëPhyMaskBô
(
uiPhyId
, 
phyPMask_±r
);

263 
PhyMaskAddCpuP‹t
(
phyPMask_±r
);

282 
BOOL
 
T°PhyMaskBô
(
phyid_t
 
uiPhyId
, 
phy_pmask_t
 *
phyPMask_±r
)

284 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

285 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

286  
FALSE
;

288 if(
NULL
 =
phyPMask_±r
) {

289 
ASSERT
(
NULL
 !
phyPMask_±r
);

290  
FALSE
;

293 if(
RTK_PORTMASK_IS_PORT_SET
(
phyPMask_±r
->
pmask
[
CHIPID
(
uiPhyId
)], 
PORTID
(uiPhyId)))

295  
TRUE
;

299  
FALSE
;

319 
MaskLogic2Phy
(
logic_pmask_t
 *
lgcPMask_±r
, 
phy_pmask_t
 *
phyPMask_±r
)

321 
p‹t_num_t
 
lP‹tNo
;

322 
phyid_t
 
uiPhyId
;

324 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

326 
ASSERT
(
NULL
 !
phyPMask_±r
);

327 
ASSERT
(
NULL
 !
lgcPMask_±r
);

331 
CÃPhyMaskAŒ
(
phyPMask_±r
);

333 
LgcP‹tF‹
(
lP‹tNo
)

335 if(
T°LgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
))

337 
uiPhyId
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

338 if(
uiPhyId
 =
INVALID_PORT
)

342 
SëPhyMaskBô
(
uiPhyId
 ,
phyPMask_±r
);

346 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

347 i‡(
T°LgcMaskBô
(
LOGIC_PON_PORT
, 
lgcPMask_±r
))

349 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_PON_PORT
);

350 if(
uiPhyId
 !
INVALID_PORT
)

352 
SëPhyMaskBô
(
uiPhyId
 ,
phyPMask_±r
);

356 i‡(
T°LgcMaskBô
(
LOGIC_CPU_PORT
, 
lgcPMask_±r
))

358 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_CPU_PORT
);

359 if(
uiPhyId
 !
INVALID_PORT
)

361 
SëPhyMaskBô
(
uiPhyId
 ,
phyPMask_±r
);

383 
MaskPhy2Logic
(
phy_pmask_t
 *
phyPMask_±r
, 
logic_pmask_t
 *
lgcPMask_±r
)

385 
p‹t_num_t
 
lP‹tNo
 = 0;

386 
phyid_t
 
uiPhyId
 = 0;

388 if((
NULL
 =
lgcPMask_±r
Ë|| (NULL =
phyPMask_±r
))

390 
ASSERT
(
NULL
 !
phyPMask_±r
);

391 
ASSERT
(
NULL
 !
lgcPMask_±r
);

395 
CÃLgcMaskAŒ
(
lgcPMask_±r
);

397 
LgcP‹tF‹
(
lP‹tNo
)

399 
uiPhyId
 = 
P‹tLogic2PhyID
(
lP‹tNo
);

400 if(
uiPhyId
 =
INVALID_PORT
)

404 if(
T°PhyMaskBô
(
uiPhyId
, 
phyPMask_±r
))

406 
SëLgcMaskBô
(
lP‹tNo
, 
lgcPMask_±r
);

410 #i‡
deföed
(
CONFIG_PRODUCT_ET704LA
)

411 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_PON_PORT
);

412 if(
uiPhyId
 !
INVALID_PORT
)

414 if(
T°PhyMaskBô
(
uiPhyId
, 
phyPMask_±r
))

416 
SëLgcMaskBô
(
LOGIC_PON_PORT
, 
lgcPMask_±r
);

420 
uiPhyId
 = 
P‹tLogic2PhyID
(
LOGIC_CPU_PORT
);

421 if(
uiPhyId
 !
INVALID_PORT
)

423 if(
T°PhyMaskBô
(
uiPhyId
, 
phyPMask_±r
))

425 
SëLgcMaskBô
(
LOGIC_CPU_PORT
, 
lgcPMask_±r
);

433 #ifde‡
CHIPSET_RTL8305


434 
UINT32
 
bô›_numbîOfSëBôsInAºay
(UINT32 *
pAºay
, UINT32 
¨øySize
)

436 
UINT32
 
ödex
;

437 
UINT32
 
vÆue
;

438 
UINT32
 
numOfBôs
;

440 i‡(
NULL
 =
pAºay
)

445 
numOfBôs
 = 0;

447 
ödex
 = 0; index < 
¨øySize
; index++)

449 
vÆue
 = 
pAºay
[
ödex
];

451 
vÆue
 = value - ((value >> 1) & 0x55555555);

452 
vÆue
 = (value & 0x33333333) + ((value >> 2) & 0x33333333);

453 
numOfBôs
 =+ (((((
vÆue
 + (value >> 4)) & 0xF0F0F0F)) * 0x1010101) >> 24);

456  
numOfBôs
;

476 
INT32
 
GëPhyMskP‹tNum
(
phy_pmask_t
 *
phyPMask_±r
)

478 
INT32
 
num
 = 0;

479 
UINT32
 
chùId
 = 0;

481 
chùId
=0; chùId<
CHIP_NO
; chipId++)

483 
num
 +(
INT32
)
RTK_PORTMASK_GET_PORT_COUNT
(
CHIPNMASK
(
chùId
, 
phyPMask_±r
));

486  
num
;

505 
PhyMaskC›y
(
phy_pmask_t
 *
d°Msk
,phy_pmask_à*
§cMsk
)

507 if((
NULL
 =
d°Msk
Ë|| (NULL =
§cMsk
))

509 
ASSERT
(
NULL
 !
d°Msk
);

510 
ASSERT
(
NULL
 !
§cMsk
);

513 
mem˝y
(
d°Msk
,
§cMsk
,(
phy_pmask_t
));

532 
PhyMaskAnd
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

534 
UINT32
 
chùId
 = 0;

536 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

538 
ASSERT
(
NULL
 !
mska
);

539 
ASSERT
(
NULL
 !
mskb
);

543 
chùId
=0; chùId<
CHIP_NO
; chipId++)

545 
RTK_PORTMASK_AND
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

565 
PhyMaskOr
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

567 
UINT32
 
chùId
 = 0;

569 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

571 
ASSERT
(
NULL
 !
mska
);

572 
ASSERT
(
NULL
 !
mskb
);

575 
chùId
=0; chùId<
CHIP_NO
; chipId++)

577 
RTK_PORTMASK_OR
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

597 
PhyMaskX‹
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

599 
UINT32
 
chùId
 = 0;

601 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

603 
ASSERT
(
NULL
 !
mska
);

604 
ASSERT
(
NULL
 !
mskb
);

607 
chùId
=0; chùId<
CHIP_NO
; chipId++)

609 
RTK_PORTMASK_XOR
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

629 
PhyMaskRemove
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

631 
UINT32
 
chùId
 = 0;

633 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

635 
ASSERT
(
NULL
 !
mska
);

636 
ASSERT
(
NULL
 !
mskb
);

639 
chùId
=0; chùId<
CHIP_NO
; chipId++)

641 
RTK_PORTMASK_REMOVE
(
CHIPNMASK
(
chùId
, 
mska
), CHIPNMASK(chùId, 
mskb
));

661 
PhyMaskNeg©e
(
phy_pmask_t
 *
mska
,phy_pmask_à*
mskb
)

663 
UINT32
 
chùId
 = 0;

665 if((
NULL
 =
mska
Ë|| (NULL =
mskb
))

667 
ASSERT
(
NULL
 !
mska
);

668 
ASSERT
(
NULL
 !
mskb
);

672 
chùId
=0; chùId<
CHIP_NO
; chipId++)

674 
RTK_PORTMASK_REVERT
(
CHIPNMASK
(
chùId
, 
mskb
));

676 
PhyMaskC›y
(
mska
, 
mskb
);

694 
PhyMaskAddCpuP‹t
(
phy_pmask_t
 *
mska
)

696 
phyid_t
 
uiPhyId
 = 0;

698 if(
NULL
 =
mska
)

700 
ASSERT
(
NULL
 !
mska
);

703 
uiPhyId
 = 
PORT_PHYID
(
LOGIC_CPU_PORT
);

705 
SëPhyMaskBô
(
uiPhyId
, 
mska
);

723 
PhyMaskRemoveCpuP‹t
(
phy_pmask_t
 *
mska
)

725 
phyid_t
 
uiPhyId
 = 0;

727 if(
NULL
 =
mska
)

729 
ASSERT
(
NULL
 !
mska
);

732 
uiPhyId
 = 
PORT_PHYID
(
LOGIC_CPU_PORT
);

734 
CÃPhyMaskBô
(
uiPhyId
, 
mska
);

753 
phyid_t
 
PhyGëSèckP‹t
(
UINT32
 
ulUnô
, UINT32 
ulSèckIndex
)

755 
p‹t_num_t
 
µ‹t
 = 0;

756 
UINT32
 
iM©chC¡
 = 0;

757 
UINT32
 
ulChùId
 = 0;

758 
UINT32
 
ulP‹tSèπ
 = 0;

760 
ulChùId
=0; ulChùId<
ulUnô
; ulChipId++)

762 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulChùId
];

765 
µ‹t
=0;Öp‹t<
g_szChùMaxP‹t
[
ulUnô
];Öport++)

767 if(
STACK_PORT
 =
TOLGCPORT
(
ulP‹tSèπ
+
µ‹t
))

769 
iM©chC¡
++;

770 if(
ulSèckIndex
 =
iM©chC¡
)

772  
TOPHYID
(
ulUnô
, 
µ‹t
);

777  
INVALID_PORT
;

797 
BOOL
 
IsSèckP‹t
(
phyid_t
 
uiPhyId
)

799 i‡(!
IsVÆidPhyID
(
uiPhyId
)) {

800 
ASSERT
(
IsVÆidPhyID
(
uiPhyId
));

801  
FALSE
;

804 if(
STACK_PORT
 =
P‹tPhyID2Logic
(
uiPhyId
))

806  
TRUE
;

810  
FALSE
;

831 
PhyMaskAddSèckP‹t
(
phy_pmask_t
 *
mska
)

833 
UINT32
 
chùId
 = 0;

834 
UINT32
 
ulChùId
 = 0;

835 
UINT32
 
ulP‹tSèπ
 = 0;

836 
p‹t_num_t
 
µ‹t
 = 0;

837 
p‹t_num_t
 
Õ‹t
 = 0;

839 if(
NULL
 =
mska
)

841 
ASSERT
(
NULL
 !
mska
);

845 
PhyP‹tF‹
(
chùId
, 
µ‹t
)

847 
ulP‹tSèπ
 = 0;

848 
ulChùId
=0; ulChùId<
chùId
; ulChipId++)

850 
ulP‹tSèπ
 +
g_szChùMaxP‹t
[
ulChùId
];

852 
Õ‹t
 = 
TOLGCPORT
(
ulP‹tSèπ
 + 
µ‹t
);

853 if(
STACK_PORT
 =
Õ‹t
)

855 
SëPhyMaskBô
(
TOPHYID
(
chùId
, 
µ‹t
), 
mska
);

875 
DRV_RET_E
 
Eº‹Sdk2Drv
(
INT32
 
iRtkEº‹
)

877 
iRtkEº‹
)

879 
RT_ERR_FAILED
:

880  
DRV_SDK_GEN_ERROR
;

881 
RT_ERR_OK
:

882  
DRV_OK
;

883 
RT_ERR_INPUT
:

884  
DRV_SDK_INVALID_PARA
;

885 
RT_ERR_UNIT_ID
:

886  
DRV_SDK_INVALID_UNIT
;

887 
RT_ERR_PORT_ID
:

888  
DRV_SDK_INVALID_PORTID
;

889 
RT_ERR_PORT_MASK
:

890  
DRV_SDK_INVALID_MASK
;

891 
RT_ERR_PORT_LINKDOWN
:

892  
DRV_SDK_PORT_LINKDOWN
;

893 
RT_ERR_ENTRY_INDEX
:

894  
DRV_SDK_INVALID_ENTRY_INDEX
;

895 
RT_ERR_NULL_POINTER
:

896  
DRV_SDK_NULL_POINTER
;

897 
RT_ERR_QUEUE_ID
:

898  
DRV_SDK_INVALID_QUEUE_ID
;

899 
RT_ERR_QUEUE_NUM
:

900  
DRV_SDK_INVALID_QUEUE_NUM
;

901 
RT_ERR_BUSYWAIT_TIMEOUT
:

902  
DRV_SDK_BUSYWAIT_TIMEOUT
;

903 
RT_ERR_MAC
:

904  
DRV_SDK_INVALID_MAC
;

905 
RT_ERR_OUT_OF_RANGE
:

906  
DRV_SDK_OUT_OF_RANGE
;

907 
RT_ERR_CHIP_NOT_SUPPORTED
:

908  
DRV_SDK_CHIP_NOT_SUPPORTED
;

909 
RT_ERR_SMI
:

910  
DRV_SDK_INVALID_SMI
;

911 
RT_ERR_NOT_INIT
:

912  
DRV_SDK_NOT_INIT
;

913 
RT_ERR_CHIP_NOT_FOUND
:

914  
DRV_SDK_CHIP_NOT_FOUND
;

915 
RT_ERR_NOT_ALLOWED
:

916  
DRV_SDK_NOT_ALLOWED
;

917 
RT_ERR_DRIVER_NOT_FOUND
:

918  
DRV_SDK_DRIVER_NOT_FOUND
;

919 
RT_ERR_SEM_LOCK_FAILED
:

920  
DRV_SDK_SEM_LOCK_FAILED
;

921 
RT_ERR_SEM_UNLOCK_FAILED
:

922  
DRV_SDK_SEM_UNLOCK_FAILED
;

923 #ifde‡
CHIPSET_RTL8328


924 
RT_ERR_THREAD_EXIST
:

925  
DRV_SDK_THREAD_EXIST
;

926 
RT_ERR_THREAD_CREATE_FAILED
:

927  
DRV_SDK_THREAD_CREATE_FAILED
;

928 
RT_ERR_FWD_ACTION
:

929  
DRV_SDK_INVALID_FWD_ACTION
;

930 
RT_ERR_IPV4_ADDRESS
:

931  
DRV_SDK_INVALID_IPV4_ADDRESS
;

932 
RT_ERR_IPV6_ADDRESS
:

933  
DRV_SDK_INVALID_IPV6_ADDRESS
;

934 
RT_ERR_PRIORITY
:

935  
DRV_SDK_INVALID_PRIORITY
;

936 
RT_ERR_FID
:

937  
DRV_SDK_INVALID_FID
;

938 
RT_ERR_ENTRY_NOTFOUND
:

939  
DRV_SDK_ENTRY_NOTFOUND
;

940 
RT_ERR_DROP_PRECEDENCE
:

941  
DRV_SDK_DROP_PRECEDENCE
;

942 
RT_ERR_NOT_FINISH
:

943  
DRV_SDK_NOT_FINISH
;

944 
RT_ERR_TIMEOUT
:

945  
DRV_SDK_TIMEOUT
;

946 
RT_ERR_REG_ARRAY_INDEX_1
:

947  
DRV_SDK_INVALID_REG_ARRAY_INDEX_1
;

948 
RT_ERR_REG_ARRAY_INDEX_2
:

949  
DRV_SDK_INVALID_REG_ARRAY_INDEX_2
;

950 
RT_ERR_ETHER_TYPE
:

951  
DRV_SDK_INVALID_ETHER_TYPE
;

952 
RT_ERR_PHY_FIBER_LINKUP
:

953  
DRV_SDK_ERR_PHY_FIBER_LINKUP
;

956 
ASSERT
(
iRtkEº‹
 =
RT_ERR_OK
);

957  
DRV_SDK_GEN_ERROR
;

962 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_l2_tx.c

18 #ifde‡ 
__˝lu•lus


21 
	~<löux/autoc⁄f.h
>

22 
	~<mw_ty≥.h
>

23 
	~<löux/smp_lock.h
>

24 
	~<löux/kî√l.h
>

25 
	~<löux/•ölock.h
>

26 
	~<löux/√tdevi˚.h
>

27 
	~<löux/ëhîdevi˚.h
>

28 
	~<löux/öô.h
>

29 
	~<löux/¶ab.h
>

30 
	~<löux/¥oc_fs.h
>

31 
	~<löux/£q_fûe.h
>

32 
	~"drv_pub.h
"

33 
	~"drv_ªq.h
"

34 
	~<löux/if_vœn.h
>

35 
	~"hÆ_comm⁄.h
"

36 #ifde‡
CHIPSET_OPL6750


37 
	~"›l_drv.h
"

40 
	#RESERVE_SPACE
 32

	)

41 
	#MAX_FRAME_LEN
 1518

	)

42 
	#MIN_FRAME_LEN
 60

	)

46 
	#OPL_CPU_IPORT_GBE
 0

	)

47 
	#OPL_CPU_IPORT_PON
 1

	)

48 
	#OPL_CPU_IPORT_INVALID
 0xFF

	)

52 
	#MAX_TABLE_ENTRY_COUNT
 64

	)

53 
	#MAC_TABLE_AGING_TICK
 1

	)

56 
	sègETH_MAC_TABLE_ENTRY


58 
©omic_t
 
ucAge
;

59 
íP‹t
;

60 
usVœn
;

61 
aucMac
[6];

62 } 
	tETH_MAC_TABLE_ENTRY_S
;

64 
ETH_MAC_TABLE_ENTRY_S
 
m_a°DrvMacTabÀ
[
MAX_TABLE_ENTRY_COUNT
];

65 
timî_li°
 
mac_èb_timî
;

67 
•ölock_t
 
mac_èb_lock
=
SPIN_LOCK_UNLOCKED
;

69 
⁄u_°¨t_xmô_ù‹t
(
sk_buff
 *
skb
, 
›l_˝u_ù‹t
);

86 
skb_push_qèg
(
sk_buff
 *
pSkb
, 
UINT16
 
usVid
, 
UINT8
 
ucPri‹ôy
)

88 if(
	gusVid
){

90 
skb_push
(
pSkb
, 4);

91 
memmove
(
pSkb
->
d©a
,

92 
pSkb
->
d©a
 + 4,

93 (2 * 
MAC_ADDR_LEN
));

94 *(
	gpSkb
->
	gd©a
 + (2 * 
	gMAC_ADDR_LEN
)) = 0x81;

95 *(
	gpSkb
->
	gd©a
 + (2 * 
	gMAC_ADDR_LEN
) + 1) = 0x00;

96 *(
	gpSkb
->
	gd©a
 + (2 * 
	gMAC_ADDR_LEN
Ë+ 2Ë(
uöt8_t
)(((
usVid
 >> 8Ë& 0xFË| (
ucPri‹ôy
 << 5));

97 *(
	gpSkb
->
	gd©a
 + (2 * 
	gMAC_ADDR_LEN
Ë+ 3Ë
usVid
 & 0xFF;

116 
DRV_RET_E
 
HÆ_L2£nd
(*
pMsg
,
UINT
 
uiLí
,
l2_£nd_›
 *
pOp
)

118 
UINT32
 
	guiLP‹t
;

119 
sk_buff
 *
	gpSkb
=
NULL
;

120 
	g›l_˝u_ù‹t
;

122 if((
	gNULL
 =
pMsg
Ë|| (0 =
uiLí
Ë|| (
MAX_FRAME_LEN
 < uiLíË|| (
NULL
 =
pOp
))

124  
DRV_ERR_PARA
;

127 
	gpSkb
 = 
Æloc_skb
(
uiLí
+
RESERVE_SPACE
,
GFP_KERNEL
);

128 if(
	gNULL
 =
pSkb
)

130  
DRV_L2_SEND_ERR
;

132 
skb_ª£rve
(
pSkb
, 
RESERVE_SPACE
);

135 if(
c›y_‰om_u£r
(
skb_put
(
pSkb
,
uiLí
),
pMsg
,uiLen))

137 
dev_k‰ì_skb
(
pSkb
);

138  
	gDRV_L2_SEND_ERR
;

142 i‡((0x81 =
pSkb
->
d©a
[12]) && (0x00 ==ÖSkb->data[13]))

144 
UINT16
 
usVœnId
;

145 
	gusVœnId
 = ((
pSkb
->
d©a
[14] & 0xF) << 8) +ÖSkb->data[15];

146 if((0 =
usVœnId
) || (0xFFF == usVlanId))

148 
memmove
(
pSkb
->
d©a
+15,ÖSkb->data+11, 12);

150 
skb_puŒ
(
pSkb
, 4);

152 
	guiLí
 = (
uiLí
 >(
MIN_FRAME_LEN
 + 4))? (uiLen - 4) : MIN_FRAME_LEN;

156 if((
LgcMaskNŸNuŒ
(&(
pOp
->
p‹tmask
))Ë|| (
T°LgcMaskBôNoCheck
((
LOGIC_UPPON_PORT
), (&(pOp->portmask))))){

158 
IfLgcMaskSëNoCheck
(&(
pOp
->
p‹tmask
), 
uiLP‹t
)

161 
skb_push_qèg
(
pSkb
, 
pOp
->
usVid
,ÖOp->
ucPri‹ôy
);

164 i‡(
	gLOGIC_PON_PORT
 =
uiLP‹t
)

166 
›l_˝u_ù‹t
 = 
OPL_CPU_IPORT_PON
;

171 
	g›l_˝u_ù‹t
 = 
OPL_CPU_IPORT_GBE
;

175 i‡(
⁄u_°¨t_xmô_ù‹t
(
pSkb
, 
›l_˝u_ù‹t
))

177 
dev_k‰ì_skb
(
pSkb
);

178  
	gDRV_L2_SEND_ERR
;

185 
skb_push_qèg
(
pSkb
, 
pOp
->
usVid
,ÖOp->
ucPri‹ôy
);

188 i‡(
⁄u_°¨t_xmô_ù‹t
(
pSkb
, 
OPL_CPU_IPORT_GBE
))

190 
dev_k‰ì_skb
(
pSkb
);

191  
	gDRV_L2_SEND_ERR
;

194  
	gDRV_OK
;

197 
HÆ_ã°_L2£nd
(
sk_buff
 *
skb
)

199 
l2_£nd_›
 
	gOp
;

200 
l2_£nd_›
* 
	gpOp
&
Op
;

201 
	gã°_Êag
=0;

203 
	gã°_Êag
++;

204 
	gOp
.
	gp‹tmask
.
	gpbôs
[0] = (1 << 
ã°_Êag
);

205 
	gOp
.
	gusVid
 = 0xF34;

206 
	gOp
.
	gucPri‹ôy
 = 6;

208 
HÆ_L2£nd
(
skb
->
d©a
, skb->
Àn
, 
pOp
);

211 
Drv_MT_Age
(
Êag
)

213 
	gi
 = 0;

214 ()
	gÊag
;

216 
•ö_lock_bh
(&
mac_èb_lock
);

218 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

220 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
)){

221 
©omic_dec
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
);

225 
•ö_u∆ock_bh
(&
mac_èb_lock
);

227 
mod_timî
(&
mac_èb_timî
, 
jiffõs
 + 
MAC_TABLE_AGING_TICK
* 
HZ
);

232 
Drv_MT_CÀ¨
()

234 
	gi
 = 0;

236 
•ö_lock_bh
(&
mac_èb_lock
);

237 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

241 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
)){

242 
©omic_£t
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
, 1);

245 
©omic_£t
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
, 0);

248 
•ö_u∆ock_bh
(&
mac_èb_lock
);

253 
Drv_MT_LookF‹E¡ry
(
aucMac
[6])

255 
	gi
 = 0;

257 i‡(
	gNULL
 =
aucMac
)

262 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

264 i‡–(
	gm_a°DrvMacTabÀ
[
i
].
	gaucMac
[0] =
aucMac
[0])

265 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[1] ==áucMac[1])

266 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[2] ==áucMac[2])

267 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[3] ==áucMac[3])

268 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[4] ==áucMac[4])

269 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[5] ==áucMac[5]))

272 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) > 0)

274  
i
;

298 
Drv_MT_GëP‹tByMac
(
aucMac
[6], 
uöt16_t
* 
pVid
)

300 
	gi
 = 0;

302 i‡(
	gNULL
 =
aucMac
)

304  
OPL_CPU_IPORT_INVALID
;

307 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

309 i‡–(
	gm_a°DrvMacTabÀ
[
i
].
	gaucMac
[0] =
aucMac
[0])

310 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[1] ==áucMac[1])

311 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[2] ==áucMac[2])

312 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[3] ==áucMac[3])

313 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[4] ==áucMac[4])

314 && (
m_a°DrvMacTabÀ
[
i
].
aucMac
[5] ==áucMac[5]))

316 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) > 0)

318 * 
pVid
 = 
m_a°DrvMacTabÀ
[
i
].
usVœn
;

319  ()
	gm_a°DrvMacTabÀ
[
i
].
	gíP‹t
;

324  
	gOPL_CPU_IPORT_INVALID
;

327 
Drv_MT_LookF‹Em±yOrOlde°E¡ry
()

329 
	gi
 = 0;

330 
	gmö_ödex
 = 0;

332 
	gi
 = 0; i < 
	gMAX_TABLE_ENTRY_COUNT
; i++)

334 i‡(0 =
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
))

336  
i
;

338 i‡(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
i
].
ucAge
) <átomic_read(&m_astDrvMacTable[i].ucAge))

340 
	gmö_ödex
 = 
i
;

344  
	gmö_ödex
;

347 
Drv_MT_AddE¡ry
(* 
pucPkt
, 
íP‹t
)

349 
	giIndex
 = -1;

350 * 
	gpucSrcMac
 = 
NULL
;

352 i‡(
	gNULL
 =
pucPkt
)

357 
	gpucSrcMac
 = 
pucPkt
 + 6;

358 if((0xFF =
pucSrcMac
[0]) && (0xFF ==ÖucSrcMac[1]) && (0xFF ==ÖucSrcMac[2]) && \

359 (0xFF =
pucSrcMac
[3]) && (0xFF ==ÖucSrcMac[4]) && (0xFF ==ÖucSrcMac[5]))

365 
	giIndex
 = 
Drv_MT_LookF‹E¡ry
(
pucSrcMac
);

366 i‡((-1 =
iIndex
Ë|| (
MAX_TABLE_ENTRY_COUNT
 <= iIndex))

368 
iIndex
 = 
Drv_MT_LookF‹Em±yOrOlde°E¡ry
();

369 i‡((-1 =
iIndex
Ë|| (iIndex >
MAX_TABLE_ENTRY_COUNT
))

375 
•ö_lock_bh
(&
mac_èb_lock
);

376 
©omic_£t
(&
m_a°DrvMacTabÀ
[
iIndex
].
ucAge
, 0xFF);

378 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gíP‹t
 = (
uöt32_t
)
íP‹t
;

379 i‡((0x81 =
pucPkt
[12]) && (0x00 ==ÖucPkt[13]))

381 
m_a°DrvMacTabÀ
[
iIndex
].
usVœn
 = 
pucPkt
[14] << 8 |ÖucPkt[15];

385 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gusVœn
 = 0;

388 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[0] = 
pucSrcMac
[0];

389 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[1] = 
pucSrcMac
[1];

390 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[2] = 
pucSrcMac
[2];

391 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[3] = 
pucSrcMac
[3];

392 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[4] = 
pucSrcMac
[4];

393 
	gm_a°DrvMacTabÀ
[
iIndex
].
	gaucMac
[5] = 
pucSrcMac
[5];

395 
¥ötk
("\nATU:mac=%02X%02X-%02X%02X-%02X%02X.port=%d\n",

396 
m_a°DrvMacTabÀ
[
iIndex
].
aucMac
[0],m_astDrvMacTable[iIndex].aucMac[1],

397 
m_a°DrvMacTabÀ
[
iIndex
].
aucMac
[2],m_astDrvMacTable[iIndex].aucMac[3],

398 
m_a°DrvMacTabÀ
[
iIndex
].
aucMac
[4],m_astDrvMacTable[iIndex].aucMac[5],

399 
m_a°DrvMacTabÀ
[
iIndex
].
íP‹t
);

401 
•ö_u∆ock_bh
(&
mac_èb_lock
);

406 
zj_debug
(
£q_fûe
 *
m
, *
v
)

408 
	gii
;

409 
uöt8_t
* 
	gmac
;

411 ()
	gv
;

413  
	gii
 = 0 ; iò< 
	gMAX_TABLE_ENTRY_COUNT
; ii++ )

415 if(
©omic_ªad
(&
m_a°DrvMacTabÀ
[
ii
].
ucAge
)){

416 
	gmac
 = 
m_a°DrvMacTabÀ
[
ii
].
aucMac
;

417 
£q_¥ötf
(
m
, "Index=%d, ucAge=%d,mac=%02x:%02x:%02x:%02x:%02x:%02x,ÉnPort=%d,usVlan=%d\n", \

418 
ii
, 
©omic_ªad
(&
m_a°DrvMacTabÀ
[ii].
ucAge
), \

419 
mac
[0],mac[1],mac[2],mac[3],mac[4],mac[5], \

420 
m_a°DrvMacTabÀ
[
ii
].
íP‹t
, m_a°DrvMacTabÀ[ii].
usVœn
);

427 
__öô
 
πl_l2_öô
()

430 
•ö_lock_öô
(&
mac_èb_lock
);

431 
Drv_MT_CÀ¨
();

433 
öô_timî
(&
mac_èb_timî
);

434 
	gmac_èb_timî
.
	gfun˘i⁄
 = 
Drv_MT_Age
;

435 
	gmac_èb_timî
.
	gd©a
 = 0;

436 
mod_timî
(&
mac_èb_timî
, 
jiffõs
 + (
MAC_TABLE_AGING_TICK
 * 
HZ
));

441 
moduÀ_öô
(
πl_l2_öô
);

443 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_port.c

17 #ifde‡ 
__˝lu•lus


21 
	~<mw_ty≥.h
>

22 
	~"drv_pub.h
"

23 
	~"hÆ_comm⁄.h
"

24 
	~<löux/°rög.h
>

25 #ifde‡
UT_TEST


26 
	~<°dio.h
>

27 
	~<°rög.h
>

30 
DRV_RET_E
 
HÆ_SëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPau£Tx
, UINT32 
uiPau£Rx
)

32 
lgcP‹t
 =ÜgcPort;

33 
uiPau£Tx
 = uiPauseTx;

34 
uiPau£Rx
 = uiPauseRx;

36  
DRV_OK
;

39 
DRV_RET_E
 
HÆ_GëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMedium
)

41 
lgcP‹t
 =ÜgcPort;

42 
puiMedium
 =ÖuiMedium;

44  
DRV_OK
;

47 
DRV_RET_E
 
HÆ_GëP‹tCuºítLök
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLök
)

49 
lgcP‹t
 =ÜgcPort;

50 
puiLök
 =ÖuiLink;

52  
DRV_OK
;

55 
DRV_RET_E
 
HÆ_GëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiAbûôy
, UINT32 
uiP‹tTy≥
)

57 
lgcP‹t
 =ÜgcPort;

58 
puiAbûôy
 =ÖuiAbility;

59 
uiP‹tTy≥
 = uiPortType;

61  
DRV_OK
;

64 
DRV_RET_E
 
HÆ_GëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
)

66 
lgcP‹t
 =ÜgcPort;

67 
puiS≥ed
 =ÖuiSpeed;

69  
DRV_OK
;

72 
DRV_RET_E
 
HÆ_GëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
)

74 
lgcP‹t
 =ÜgcPort;

75 
puiDu∂ex
 =ÖuiDuplex;

77  
DRV_OK
;

80 
DRV_RET_E
 
HÆ_GëP‹tLökMask
(
logic_pmask_t
 *
p°P‹tMask
)

82 
p°P‹tMask
 =ÖstPortMask;

84  
DRV_OK
;

87 
DRV_RET_E
 
HÆ_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
p°P‹tMask
)

89 
p°P‹tMask
 =ÖstPortMask;

91  
DRV_OK
;

94 
DRV_RET_E
 
HÆ_GëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
)

96 
lgcP‹t
 =ÜgcPort;

97 
puiMdix
 =ÖuiMdix;

99  
DRV_OK
;

102 
DRV_RET_E
 
HÆ_GëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiPrio
)

104 
lgcP‹t
 =ÜgcPort;

105 
puiPrio
 =ÖuiPrio;

107  
DRV_OK
;

110 
DRV_RET_E
 
HÆ_GëP‹tFlow˘æ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiFlow˘æ
)

112 
lgcP‹t
 =ÜgcPort;

113 
puiFlow˘æ
 =ÖuiFlowctrl;

115  
DRV_OK
;

118 
DRV_RET_E
 
HÆ_GëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiJumbo
)

120 
lgcP‹t
 =ÜgcPort;

121 
puiJumbo
 =ÖuiJumbo;

123  
DRV_OK
;

126 
DRV_RET_E
 
HÆ_GëP‹tMaxFømeLí
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiLí
)

128 
lgcP‹t
 =ÜgcPort;

129 
puiLí
 =ÖuiLen;

131  
DRV_OK
;

134 
DRV_RET_E
 
HÆ_GëFibîS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
)

136 
lgcP‹t
 =ÜgcPort;

137 
puiS≥ed
 =ÖuiSpeed;

139  
DRV_OK
;

142 
DRV_RET_E
 
HÆ_P‹tLedInô
()

144  
DRV_OK
;

147 
DRV_RET_E
 
HÆ_SëP‹tLed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiLökSèã
, UINT32 
uiP‹tTy≥
)

149 
lgcP‹t
 =ÜgcPort;

150 
uiLökSèã
 = uiLinkState;

151 
uiP‹tTy≥
 = uiPortType;

153  
DRV_OK
;

156 
DRV_RET_E
 
HÆ_I2cFibîInô
(
VOID
)

158  
DRV_OK
;

161 
DRV_RET_E
 
HÆ_SëAggrMode
(
UINT32
 
ulMode
)

163 
ulMode
 = ulMode;

165  
DRV_OK
;

168 
DRV_RET_E
 
HÆ_SëAggrGroup
(
agg_gΩ_num_t
 
gΩNum
, 
logic_pmask_t
 
°LgcMask
)

170 
gΩNum
 = grpNum;

171 
mem˝y
(&
°LgcMask
, &°LgcMask, (
logic_pmask_t
));

173  
DRV_OK
;

176 
DRV_RET_E
 
HÆ_GëVœnExi°Num
(
UINT32
 *
puiNum
)

178 
puiNum
 =ÖuiNum;

179  
DRV_OK
;

182 
DRV_RET_E
 
HÆ_SëVœnMode
(
UINT32
 
ulMode
)

184 
ulMode
 = ulMode;

185  
DRV_OK
;

188 
DRV_RET_E
 
HÆ_SëVœnE¡ryCª©e
(
UINT32
 
ulVœnId
)

190 
ulVœnId
 = ulVlanId;

191  
DRV_OK
;

194 
DRV_RET_E
 
HÆ_SëVœnE¡ryDñëe
(
UINT32
 
ulVœnId
)

196 
ulVœnId
 = ulVlanId;

197  
DRV_OK
;

200 
DRV_RET_E
 
HÆ_SëVœnMembîRemove
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
)

202 
ulVœnId
 = ulVlanId;

203 
mem˝y
(&
°LgcMask
, &°LgcMask, (
logic_pmask_t
));

204  
DRV_OK
;

207 
DRV_RET_E
 
HÆ_SëVœnMembîAdd
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
)

209 
ulVœnId
 = ulVlanId;

210 
mem˝y
(&
°LgcMask
, &°LgcMask, (
logic_pmask_t
));

211 
mem˝y
(&
°LgcMaskU¡ag
, &°LgcMaskU¡ag, (
logic_pmask_t
));

212  
DRV_OK
;

215 
DRV_RET_E
 
HÆ_SëVœnPvid
(
UINT32
 
ulLgcP‹tNumbî
, UINT32 
ulPvid
)

217 
ulLgcP‹tNumbî
 = ulLgcPortNumber;

218 
ulPvid
 = ulPvid;

219  
DRV_OK
;

222 
DRV_RET_E
 
HÆ_SëVœnP‹tVœnMembî
(
UINT32
 
ulLgcP‹tNumbî
, 
logic_pmask_t
 
°LgcMask
)

224 
ulLgcP‹tNumbî
 = ulLgcPortNumber;

225 
mem˝y
(&
°LgcMask
, &°LgcMask, (
logic_pmask_t
));

226  
DRV_OK
;

229 
DRV_RET_E
 
HÆ_GëVœnMembî
(
UINT32
 
ulVœnId
, 
logic_pmask_t
 *
p°LgcMask
,Üogic_pmask_à*
p°LgcMaskU¡ag
)

231 
ulVœnId
 = ulVlanId;

232 
p°LgcMask
 =ÖstLgcMask;

233 
p°LgcMaskU¡ag
 =ÖstLgcMaskUntag;

234  
DRV_OK
;

237 
DRV_RET_E
 
HÆ_AddCpuToVœnMembî
(
UINT32
 
ulVœnId
)

239 
ulVœnId
 = ulVlanId;

240  
DRV_OK
;

243 
DRV_RET_E
 
HÆ_RemoveCpuFromVœnMembî
(
UINT32
 
ulVœnId
)

245 
ulVœnId
 = ulVlanId;

246  
DRV_OK
;

249 
DRV_RET_E
 
HÆ_SëCpuP‹tMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
)

251 
ulE«bÀ
 = ulEnable;

252  
DRV_OK
;

255 
DRV_RET_E
 
HÆ_SëMacLó∫E«bÀ
(
UINT32
 
ulE«bÀ
, 
logic_pmask_t
 
°P‹tMask
)

257 
ulE«bÀ
 = ulEnable;

258 
mem˝y
(&
°P‹tMask
, &°P‹tMask, (
logic_pmask_t
));

259  
DRV_OK
;

262 
DRV_RET_E
 
HÆ_GëMacLó∫E«bÀ
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulE«bÀ
)

264 
ulLgcP‹t
 = ulLgcPort;

265 
pulE«bÀ
 =ÖulEnable;

266  
DRV_OK
;

269 
DRV_RET_E
 
HÆ_SëMacCpuMacAdd
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addªss
)

271 
tdVid
 =ÅdVid;

272 
mem˝y
(
mac_addªss
, mac_addªss, 
MAC_ADDR_LEN
);

273  
DRV_OK
;

276 
DRV_RET_E
 
HÆ_SëMacFlushUˇ°Mac
(
mac_dñëe_t
 
°MacDñëe
)

278 
mem˝y
(&
°MacDñëe
, &°MacDñëe, (
mac_dñëe_t
));

279  
DRV_OK
;

282 
DRV_RET_E
 
HÆ_SëMacAddUˇ°Mac
(
mac_uˇ°_t
 
°MacUˇ°
)

284 
mem˝y
(&
°MacUˇ°
, &°MacUˇ°, (
mac_uˇ°_t
));

285  
DRV_OK
;

288 
DRV_RET_E
 
HÆ_SëMacDñUˇ°Mac
(
mac_uˇ°_t
 
°MacUˇ°
)

290 
mem˝y
(&
°MacUˇ°
, &°MacUˇ°, (
mac_uˇ°_t
));

291  
DRV_OK
;

294 
DRV_RET_E
 
HÆ_SëMacAddMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

296 
mem˝y
(&
°MacMˇ°
, &°MacMˇ°, (
mac_mˇ°_t
));

297  
DRV_OK
;

300 
DRV_RET_E
 
HÆ_SëMacDñMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

302 
mem˝y
(&
°MacMˇ°
, &°MacMˇ°, (
mac_mˇ°_t
));

303  
DRV_OK
;

306 
DRV_RET_E
 
HÆ_SëMacAgeTime
(
UINT32
 
ulSec⁄d
)

308 
ulSec⁄d
 = ulSecond;

309  
DRV_OK
;

312 
DRV_RET_E
 
HÆ_SëMacLó∫Limô
(
UINT32
 
ulLgcP‹t
, UINT32 
uLlimô
, UINT32 
ulDisF‹w¨d
)

314 
ulLgcP‹t
 = ulLgcPort;

315 
uLlimô
 = uLlimit;

316 
ulDisF‹w¨d
 = ulDisForward;

318  
DRV_OK
;

321 
DRV_RET_E
 
HÆ_GëMacUˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
)

323 
tdVid
 =ÅdVid;

324 
p°MacUˇ°
 =ÖstMacUcast;

325 
mem˝y
(
mac_addr
, mac_addr, 
MAC_ADDR_LEN
);

326  
DRV_OK
;

329 
DRV_RET_E
 
HÆ_GëMacMˇ°Mac
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
)

331 
tdVid
 =ÅdVid;

332 
p°MacMˇ°
 =ÖstMacMcast;

333 
mem˝y
(
mac_addr
, mac_addr, 
MAC_ADDR_LEN
);

334  
DRV_OK
;

337 
DRV_RET_E
 
HÆ_SëMacLookFaûFrd
(
logic_pmask_t
 
°P‹tMask
)

339 
mem˝y
(&
°P‹tMask
, &°P‹tMask, (
logic_pmask_t
));

340  
DRV_OK
;

343 
DRV_RET_E
 
HÆ_GëMacLó∫Cou¡
(
UINT32
 
ulLgcP‹t
, UINT32 *
pulCou¡
)

345 
ulLgcP‹t
 = ulLgcPort;

346 
pulCou¡
 =ÖulCount;

348  
DRV_OK
;

351 
DRV_RET_E
 
HÆ_Re‰eshUCa°
(
UINT32
 
ulI¡îvÆ
)

353 
ulI¡îvÆ
 = ulInterval;

355  
DRV_OK
;

358 
DRV_RET_E
 
HÆ_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
)

360 
uiIndex
 = uiIndex;

361 
¥i‹ôy
 =Öriority;

362 
a˘i⁄
 =áction;

363  
DRV_OK
;

366 
DRV_RET_E
 
HÆ_GëMacUˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

368 
u£rPoöãr
 = userPointer;

369 
pulCou¡Out
 =ÖulCountOut;

370 
ulPD©aTy≥
 = ulPDataType;

371  
DRV_OK
;

374 
DRV_RET_E
 
HÆ_GëMacMˇ°Dump
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

376 
u£rPoöãr
 = userPointer;

377 
pulCou¡Out
 =ÖulCountOut;

378 
ulPD©aTy≥
 = ulPDataType;

379  
DRV_OK
;

382 
DRV_RET_E
 
HÆ_GëMacUˇ°DumpS‹ãd
(
ULONG
 
u£rPoöãr
, 
UINT32
 *
pulCou¡Out
, UINT32 
ulPD©aTy≥
)

384 
u£rPoöãr
 = userPointer;

385 
pulCou¡Out
 =ÖulCountOut;

386 
ulPD©aTy≥
 = ulPDataType;

387  
DRV_OK
;

390 
DRV_RET_E
 
HÆ_SëMacTøpToCpu
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
)

392 
Õ‹t
 =Üport;

393 
¥i‹ôy
 =Öriority;

394 
mem˝y
(&
°TøpSë
, &°TøpSë, (
mac_å≠_£t_t
));

395  
DRV_OK
;

398 
DRV_RET_E
 
HÆ_GëMacFödC⁄Êi˘Mac
(
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
)

400 
p°MacOp
 =ÖstMacOp;

401 
mem˝y
(&
°MacOp
, &°MacOp, (
Mac_›_t
));

402  
DRV_OK
;

405 
DRV_RET_E
 
HÆ_GëMacByIndex
(
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 * 
p°TmpMacE¡ry
)

407 
ulSèπIdx
 = ulStartIdx;

408 
p°TmpMacE¡ry
 =ÖstTmpMacEntry;

409  
DRV_OK
;

412 
DRV_RET_E
 
HÆ_GëMacM‹eByIndex
(
UINT32
 
ulSèπIdx
, UINT32 
ulGëCou¡
, 
ULONG
 
u£rPoöãr
, UINT32* 
pulCou¡Out
, UINT32* 
pulNextIdx
, UINT32 
ulPD©aTy≥
)

414 
ulSèπIdx
 = ulStartIdx;

415 
ulGëCou¡
 = ulGetCount;

416 
u£rPoöãr
 = userPointer;

417 
pulCou¡Out
 =ÖulCountOut;

418 
pulNextIdx
 =ÖulNextIdx;

419 
ulPD©aTy≥
 = ulPDataType;

420  
DRV_OK
;

423 
DRV_RET_E
 
HÆ_GëMacExa˘
(
vœn_id_t
 
tdVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 *
p°TmpMac
)

425 
tdVid
 =ÅdVid;

426 
p°TmpMac
 =ÖstTmpMac;

427 
mem˝y
(
mac_addr
, mac_addr, 
MAC_ADDR_LEN
);

428  
DRV_OK
;

431 
DRV_RET_E
 
HÆ_GëMˇ°Cou¡
(
UINT32
 * 
pulMˇ°Cou¡
)

433 
pulMˇ°Cou¡
 =ÖulMcastCount;

434  
DRV_OK
;

437 
DRV_RET_E
 
HÆ_SëMˇ°LookupMissDr›
(
UINT32
 
ulE«bÀ
)

439 
ulE«bÀ
 = ulEnable;

440  
DRV_OK
;

443 
DRV_RET_E
 
HÆ_SëIgmpPktA˘i⁄
(
UINT32
 
ulA˘i⁄
)

445 
ulA˘i⁄
 = ulAction;

446  
DRV_OK
;

449 
DRV_RET_E
 
HÆ_SëP‹tIsﬁ©eMask
(
logic_pmask_t
 *
p°P‹tMask
)

451 
p°P‹tMask
 =ÖstPortMask;

452  
DRV_OK
;

455 
DRV_RET_E
 
HÆ_SëMúr‹Group
(
p‹t_num_t
 
múr‹De°P‹t
, 
logic_pmask_t
 
ögªssMask
,Üogic_pmask_à
egªssMask
)

457 
múr‹De°P‹t
 = mirrorDestPort;

458 
mem˝y
(&
ögªssMask
, &ögªssMask, (
logic_pmask_t
));

459 
mem˝y
(&
egªssMask
, &egªssMask, (
logic_pmask_t
));

460  
DRV_OK
;

463 
DRV_RET_E
 
HÆ_GëMibP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
)

465 
Õ‹t
 =Üport;

466 
p_uŒSèt
 =Ö_ullStat;

467 
mem˝y
(&
PktTy≥
, &PktTy≥, (
MIB_IfSètTy≥_t
));

468  
DRV_OK
;

471 
DRV_RET_E
 
HÆ_SëMibCou¡Sync
()

473  
DRV_OK
;

476 
DRV_RET_E
 
HÆ_SëMibCou¡Re£t
(
p‹t_num_t
 
Õ‹t
)

478 
Õ‹t
 =Üport;

480  
DRV_OK
;

483 
DRV_RET_E
 
HÆ_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
)

485 
Õ‹t
 =Üport;

486 
cou¡îName
 = counterName;

487 
ªtu∫VÆue
 =ÑeturnValue;

488  
DRV_OK
;

491 
DRV_RET_E
 
HÆ_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
°©i°icsName
, 
UINT64
 *
ªtu∫VÆue
)

493 
Õ‹t
 =Üport;

494 
°©i°icsName
 = statisticsName;

495 
ªtu∫VÆue
 =ÑeturnValue;

496  
DRV_OK
;

499 
DRV_RET_E
 
HÆ_SëR©ñimôInô
()

501  
DRV_OK
;

504 
DRV_RET_E
 
HÆ_SëR©ñimôByP‹t
(
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
lP‹tMask
, UINT32 
ulKBps
)

506 
dúe˘i⁄
 = direction;

507 
ulKBps
 = ulKBps;

508 
mem˝y
(&
lP‹tMask
, &lP‹tMask, (
logic_pmask_t
));

509  
DRV_OK
;

512 
DRV_RET_E
 
HÆ_SëR©ñimôSt‹mCé
(
STORM_CTLTYPE_E
 
˘lTy≥
, 
logic_pmask_t
 
lP‹tMask
, 
STORM_CTLRATE_S
 
°St‹m
)

514 
˘lTy≥
 = ctlType;

515 
mem˝y
(&
lP‹tMask
, &lP‹tMask, (
logic_pmask_t
));

516 
mem˝y
(&
°St‹m
,&°St‹m, (
STORM_CTLRATE_S
));

517  
DRV_OK
;

520 
DRV_RET_E
 
HÆ_SëQosInô
()

522  
DRV_OK
;

525 
DRV_RET_E
 
HÆ_Së1pIngªssPri‹ôyRem≠
(
qos_8021p_to_öçri_t
 
°1pToI¡Pri
)

527 
mem˝y
(&
°1pToI¡Pri
,&°1pToI¡Pri, (
qos_8021p_to_öçri_t
));

528  
DRV_OK
;

531 
DRV_RET_E
 
HÆ_SëDs˝IngªssPri‹ôyRem≠
(
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
)

533 
mem˝y
(&
°Ds˝ToI¡Pri
,&°Ds˝ToI¡Pri, (
qos_ds˝_to_öçri_t
));

534  
DRV_OK
;

537 
DRV_RET_E
 
HÆ_SëQosTru°Mode
(
UINT32
 
mode
)

539 
mode
 = mode;

540  
DRV_OK
;

543 
DRV_RET_E
 
HÆ_SëQosQueueSchedul
(
QueueMode_S
 
°QueueScheduÀ
)

545 
mem˝y
(&
°QueueScheduÀ
,&°QueueScheduÀ, (
QueueMode_S
));

546  
DRV_OK
;

549 
DRV_RET_E
 
HÆ_SëCos2QidRem≠
(
qos_8021p_to_öçri_t
 
°1pPri2qid
)

551 
mem˝y
(&
°1pPri2qid
,&°1pPri2qid, (
qos_8021p_to_öçri_t
));

552  
DRV_OK
;

555 
DRV_RET_E
 
HÆ_soc_ªg_ªad
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 *
pulD©a
)

557 
ulChùNum
 = ulChipNum;

558 
ulRegIndex
 = ulRegIndex;

559 
pulD©a
 =ÖulData;

560  
DRV_OK
;

563 
DRV_RET_E
 
HÆ_soc_ªg_wrôe
(
UINT32
 
ulChùNum
, UINT32 
ulRegIndex
, UINT32 
ulD©a
)

565 
ulChùNum
 = ulChipNum;

566 
ulRegIndex
 = ulRegIndex;

567 
ulD©a
 = ulData;

568  
DRV_OK
;

571 
DRV_RET_E
 
HÆ_SëA˛Inô
()

573  
DRV_OK
;

576 
DRV_RET_E
 
HÆ_SëVœnI¡îÁ˚Add
(
vœn_id_t
 
vid
, 
mac_addªss_t
 
mac_addªss
)

578 
vid
 = vid;

579 
mem˝y
(
mac_addªss
,mac_addªss, 
MAC_ADDR_LEN
);

580  
DRV_OK
;

583 
DRV_RET_E
 
HÆ_SëVœnI¡îÁ˚Dñ
(
vœn_id_t
 
vid
)

585 
vid
 = vid;

586  
DRV_OK
;

589 
DRV_RET_E
 
HÆ_SëEEEByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
)

591 
∂p‹tMask
 =ÖlportMask;

592 
íabÀ
 =Énable;

593  
DRV_OK
;

596 
DRV_RET_E
 
HÆ_SëAutoPwrDwnByP‹t
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
)

598 
∂p‹tMask
 =ÖlportMask;

599 
íabÀ
 =Énable;

600  
DRV_OK
;

603 
DRV_RET_E
 
HÆ_GëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
)

605 
Õ‹t
 =Üport;

606 
p°Düg
 =ÖstDiag;

607  
DRV_OK
;

610 
DRV_RET_E
 
HÆ_GëSçP‹tSèã
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 * 
puiSèã
)

612 
lgcP‹t
 =ÜgcPort;

613 
puiSèã
 =ÖuiState;

614  
DRV_OK
;

617 
DRV_RET_E
 
HÆ_SëSçP‹tSèã
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
)

619 
lgcP‹t
 =ÜgcPort;

620 
uiSèã
 = uiState;

621  
DRV_OK
;

624 
DRV_RET_E
 
HÆ_SëI¡î«lLo›back
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
)

626 
lgcP‹t
 =ÜgcPort;

627 
uiE«bÀ
 = uiEnable;

628  
DRV_OK
;

631 
DRV_RET_E
 
HÆ_SëP‹tMedium
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMedium
)

633 
lgcP‹t
 =ÜgcPort;

634 
uiMedium
 = uiMedium;

635  
DRV_OK
;

638 
DRV_RET_E
 
HÆ_SëP‹tPri‹ôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiPrio
)

640 
lgcP‹t
 =ÜgcPort;

641 
uiPrio
 = uiPrio;

642  
DRV_OK
;

645 
DRV_RET_E
 
HÆ_SëP‹tMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMdix
)

647 
lgcP‹t
 =ÜgcPort;

648 
uiMdix
 = uiMdix;

649  
DRV_OK
;

652 
DRV_RET_E
 
HÆ_SëP‹tE«bÀ
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiE«bÀ
)

654 
lgcP‹t
 =ÜgcPort;

655 
uiE«bÀ
 = uiEnable;

656  
DRV_OK
;

659 
DRV_RET_E
 
HÆ_SëP‹tJumbo
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiJumbo
)

661 
lgcP‹t
 =ÜgcPort;

662 
uiJumbo
 = uiJumbo;

663  
DRV_OK
;

666 
DRV_RET_E
 
HÆ_SëP‹tTxRx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
)

668 
lgcP‹t
 =ÜgcPort;

669 
uiSèã
 = uiState;

670  
DRV_OK
;

673 
DRV_RET_E
 
HÆ_SëP‹tAbûôy
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAbûôy
, UINT32 
uiP‹tTy≥
)

675 
lgcP‹t
 =ÜgcPort;

676 
uiAbûôy
 = uiAbility;

677 
uiP‹tTy≥
 = uiPortType;

678  
DRV_OK
;

681 
DRV_RET_E
 
HÆ_SëP‹tAut⁄eg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiAut⁄
, UINT32 
uiP‹tTy≥
)

683 
lgcP‹t
 =ÜgcPort;

684 
uiAut⁄
 = uiAuton;

685 
uiP‹tTy≥
 = uiPortType;

686  
DRV_OK
;

689 
DRV_RET_E
 
HÆ_SëP‹tS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
, UINT32 
uiP‹tTy≥
)

691 
lgcP‹t
 =ÜgcPort;

692 
uiS≥ed
 = uiSpeed;

693 
uiP‹tTy≥
 = uiPortType;

694  
DRV_OK
;

697 
DRV_RET_E
 
HÆ_SëP‹tDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
, UINT32 
uiP‹tTy≥
)

699 
lgcP‹t
 =ÜgcPort;

700 
uiDu∂ex
 = uiDuplex;

701 
uiP‹tTy≥
 = uiPortType;

702  
DRV_OK
;

705 
DRV_RET_E
 
HÆ_SëP‹tSpdlx
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSpdlx
)

707 
lgcP‹t
 =ÜgcPort;

708 
uiSpdlx
 = uiSpdlx;

709  
DRV_OK
;

712 
DRV_RET_E
 
HÆ_SëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
ªg_no
, UINT32 
ªg_vÆ
)

714 
lgcP‹t
 =ÜgcPort;

715 
ªg_no
 =Ñeg_no;

716 
ªg_vÆ
 =Ñeg_val;

717  
DRV_OK
;

720 
DRV_RET_E
 
HÆ_GëPhyReg
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
pRegVÆ
, UINT32 
ªg_no
)

722 
lgcP‹t
 =ÜgcPort;

723 
ªg_no
 =Ñeg_no;

724 
pRegVÆ
 =ÖRegVal;

725  
DRV_OK
;

728 
DRV_RET_E
 
HÆ_GëSpdlxSë
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
* 
uiSpdlx
)

730 
lgcP‹t
 =ÜgcPort;

731 
uiSpdlx
 = uiSpdlx;

732  
DRV_OK
;

735 
DRV_RET_E
 
HÆ_GëIsﬁ©eSë
(
logic_pmask_t
 *
p°P‹tMask
)

737 
p°P‹tMask
 =ÖstPortMask;

738  
DRV_OK
;

741 
DRV_RET_E
 
HÆ_I2cFibîP‹tRód
(
p‹t_num_t
 
lgcP‹t
, 
UINT16
 
usAddr
, 
UINT8
* 
pucD©a
, 
UINT32
 
ulLí
, UINT32 
ulPD©aTy≥
)

743 
lgcP‹t
 =ÜgcPort;

744 
usAddr
 = usAddr;

745 
pucD©a
 =ÖucData;

746 
ulLí
 = ulLen;

747 
ulPD©aTy≥
 = ulPDataType;

748  
DRV_OK
;

751 
DRV_RET_E
 
HÆ_SëMacSëMˇ°Mac
(
mac_mˇ°_t
 
°MacMˇ°
)

753 
mem˝y
(&
°MacMˇ°
,&°MacMˇ°, (
mac_mˇ°_t
));

754  
DRV_OK
;

756 #ifde‡ 
__˝lu•lus


	@/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_smi.c

4 #ifde‡ 
__˝lu•lus


9 
HÆ_MdioRegi°îRód
(
devi˚Addr
,
ªgAddr
,*
d©a0
);

10 
HÆ_MdioRegi°îWrôe
(
devi˚Addr
,
ªgAddr
,
d©a0
);

28 
sögÀ_£tMiiReg
(
ªg
, 
vÆue
)

30 
	gªtVÆ
;

32 
	gªtVÆ
 = 
HÆ_MdioRegi°îWrôe
(0, ()
ªg
, ()
vÆue
);

33 if(
	gªtVÆ
 != 0)

55 
sögÀ_gëMiiReg
(
ªg
, *
pVÆue
)

57 
	gusRegD©a
 = 0;

58 
	gªtVÆ
;

60 
	gªtVÆ
 = 
HÆ_MdioRegi°îRód
(0, ()
ªg
, &
usRegD©a
);

61 if(
	gªtVÆ
 != 0)

64 *
	gpVÆue
 = 
usRegD©a
;

84 
sögÀ_£tDbgReg
(
ªg
, 
vÆue
)

87 ()
HÆ_MdioRegi°îWrôe
(0, 0x1D, ()
ªg
);

89 ()
HÆ_MdioRegi°îWrôe
(0, 0x1E, ()
vÆue
);

110 
sögÀ_gëDbgReg
(
ªg
, *
pVÆue
)

112 
	gusRegD©a
 = 0;

113 *
	gpVÆue
 = 0;

115 ()
HÆ_MdioRegi°îWrôe
(0, 0x1D, ()
ªg
);

117 ()
HÆ_MdioRegi°îRód
(0, 0x1E, &
usRegD©a
);

118 *
	gpVÆue
 = 
usRegD©a
;

123 #ifde‡ 
__˝lu•lus


	@/usr/include/linux/if_vlan.h

13 #i‚de‡
_LINUX_IF_VLAN_H_


14 
	#_LINUX_IF_VLAN_H_


	)

20 
	evœn_io˘l_cmds
 {

21 
	mADD_VLAN_CMD
,

22 
	mDEL_VLAN_CMD
,

23 
	mSET_VLAN_INGRESS_PRIORITY_CMD
,

24 
	mSET_VLAN_EGRESS_PRIORITY_CMD
,

25 
	mGET_VLAN_INGRESS_PRIORITY_CMD
,

26 
	mGET_VLAN_EGRESS_PRIORITY_CMD
,

27 
	mSET_VLAN_NAME_TYPE_CMD
,

28 
	mSET_VLAN_FLAG_CMD
,

29 
	mGET_VLAN_REALDEV_NAME_CMD
,

30 
	mGET_VLAN_VID_CMD


33 
	evœn_Êags
 {

34 
	mVLAN_FLAG_REORDER_HDR
 = 0x1,

35 
	mVLAN_FLAG_GVRP
 = 0x2,

36 
	mVLAN_FLAG_LOOSE_BINDING
 = 0x4,

39 
	evœn_«me_ty≥s
 {

40 
	mVLAN_NAME_TYPE_PLUS_VID
,

41 
	mVLAN_NAME_TYPE_RAW_PLUS_VID
,

42 
	mVLAN_NAME_TYPE_PLUS_VID_NO_PAD
,

43 
	mVLAN_NAME_TYPE_RAW_PLUS_VID_NO_PAD
,

44 
	mVLAN_NAME_TYPE_HIGHEST


47 
	svœn_io˘l_¨gs
 {

48 
	mcmd
;

49 
	mdevi˚1
[24];

52 
	mdevi˚2
[24];

53 
	mVID
;

54 
	mskb_¥i‹ôy
;

55 
	m«me_ty≥
;

56 
	mböd_ty≥
;

57 
	mÊag
;

58 } 
	mu
;

60 
	mvœn_qos
;

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

7 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

8 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#SI_LOAD_SHIFT
 16

	)

13 
	ssysöfo
 {

14 
	mu±ime
;

15 
	mlﬂds
[3];

16 
	mtŸÆøm
;

17 
	m‰ìøm
;

18 
	msh¨edøm
;

19 
	mbuf„ºam
;

20 
	mtŸÆsw≠
;

21 
	m‰ìsw≠
;

22 
	m¥ocs
;

23 
	m∑d
;

24 
	mtŸÆhigh
;

25 
	m‰ìhigh
;

26 
	mmem_unô
;

27 
	m_f
[20-2*()-()];

31 
	#BUILD_BUG_ON
(
c⁄dôi⁄
Ë(()
	`BUILD_BUG_ON_ZERO
(c⁄dôi⁄))

	)

34 
	#MAYBE_BUILD_BUG_ON
(
c⁄d
Ë(()([1 - 2 * !!(c⁄d)]))

	)

37 
	#BUILD_BUG_ON_NOT_POWER_OF_2
(
n
) \

38 
	`BUILD_BUG_ON
((
n
Ë=0 || ((“Ë& (“Ë- 1)Ë!0))

	)

44 
	#BUILD_BUG_ON_ZERO
(
e
Ë((°ru˘ { :-!!”); }))

	)

45 
	#BUILD_BUG_ON_NULL
(
e
Ë((*)(°ru˘ { :-!!”); }))

	)

48 
	#__FUNCTION__
 (
__func__
)

	)

51 #ifde‡
CONFIG_NUMA


52 
	#NUMA_BUILD
 1

	)

54 
	#NUMA_BUILD
 0

	)

58 #ifde‡
CONFIG_FTRACE_MCOUNT_RECORD


59 
	#REBUILD_DUE_TO_FTRACE_MCOUNT_RECORD


	)

	@/usr/include/linux/netdevice.h

25 #i‚de‡
_LINUX_NETDEVICE_H


26 
	#_LINUX_NETDEVICE_H


	)

28 
	~<löux/if.h
>

29 
	~<löux/if_ëhî.h
>

30 
	~<löux/if_∑ckë.h
>

31 
	~<löux/if_lök.h
>

34 
	#MAX_ADDR_LEN
 32

	)

42 
	s√t_devi˚_°©s
 {

43 
	mrx_∑ckës
;

44 
	mtx_∑ckës
;

45 
	mrx_byãs
;

46 
	mtx_byãs
;

47 
	mrx_îr‹s
;

48 
	mtx_îr‹s
;

49 
	mrx_dr›≥d
;

50 
	mtx_dr›≥d
;

51 
	mmu…iˇ°
;

52 
	mcﬁlisi⁄s
;

55 
	mrx_Àngth_îr‹s
;

56 
	mrx_ovî_îr‹s
;

57 
	mrx_¸c_îr‹s
;

58 
	mrx_‰ame_îr‹s
;

59 
	mrx_fifo_îr‹s
;

60 
	mrx_mis£d_îr‹s
;

63 
	mtx_ab‹ãd_îr‹s
;

64 
	mtx_ˇºõr_îr‹s
;

65 
	mtx_fifo_îr‹s
;

66 
	mtx_hóπbót_îr‹s
;

67 
	mtx_wödow_îr‹s
;

70 
	mrx_com¥es£d
;

71 
	mtx_com¥es£d
;

77 
	mIF_PORT_UNKNOWN
 = 0,

78 
	mIF_PORT_10BASE2
,

79 
	mIF_PORT_10BASET
,

80 
	mIF_PORT_AUI
,

81 
	mIF_PORT_100BASET
,

82 
	mIF_PORT_100BASETX
,

83 
	mIF_PORT_100BASEFX


	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/string.h

20 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

81 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

83 
	`__w¨n_mem£t_zîo_Àn
 ();

84  
__de°
;

86  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

87 
	}
}

89 #ifde‡
__USE_BSD


90 
__exã∫_Æways_ölöe
 

91 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

92 
size_t
 
__Àn
))

94 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

95 
	}
}

97 
__exã∫_Æways_ölöe
 

98 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

100 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

101 
	}
}

104 
__exã∫_Æways_ölöe
 *

105 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

107  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

108 
	}
}

110 #ifde‡
__USE_GNU


111 
__exã∫_Æways_ölöe
 *

112 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

114  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

119 
__exã∫_Æways_ölöe
 *

120 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

121 
size_t
 
__Àn
))

123  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

124 
	}
}

127 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

128 
size_t
 
__de°Àn
Ë
__THROW
;

129 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

130 
__c⁄°
 *
__§c
,

131 
size_t
 
__n
), 
°≤˝y
);

133 
__exã∫_Æways_ölöe
 *

134 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

136 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

137 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

138  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

139  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

140 
	}
}

143 
__exã∫_Æways_ölöe
 *

144 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

146  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

147 
	}
}

150 
__exã∫_Æways_ölöe
 *

151 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

152 
size_t
 
__Àn
))

154  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

155 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡
_FORTIFY_SOURCE
 > 1

313 
	#__USE_FORTIFY_LEVEL
 2

	)

315 
	#__USE_FORTIFY_LEVEL
 1

	)

318 
	#__USE_FORTIFY_LEVEL
 0

	)

322 
	~<bôs/¥edefs.h
>

325 
	#__STDC_ISO_10646__
 200009L

	)

333 #unde‡
__GNU_LIBRARY__


334 
	#__GNU_LIBRARY__
 6

	)

338 
	#__GLIBC__
 2

	)

339 
	#__GLIBC_MINOR__
 12

	)

341 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

342 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

345 #i‡
deföed
 
__GNUC__
 \

346 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

347 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

348 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

349 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

353 #i‚de‡
__ASSEMBLER__


354 #i‚de‡
_SYS_CDEFS_H


355 
	~<sys/cdefs.h
>

360 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


361 
	#__USE_LARGEFILE
 1

	)

362 
	#__USE_LARGEFILE64
 1

	)

368 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

369 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

370 && 
deföed
 
	g__exã∫_ölöe


371 
	#__USE_EXTERN_INLINES
 1

	)

376 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

377 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

378 && 
deföed
 
	g__exã∫_ölöe


379 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

387 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_DONT_BRIDGE
 0x800

	)

74 
	#IFF_IN_NETPOLL
 0x1000

	)

75 
	#IFF_DISABLE_NETPOLL
 0x2000

	)

77 
	#IF_GET_IFACE
 0x0001

	)

78 
	#IF_GET_PROTO
 0x0002

	)

81 
	#IF_IFACE_V35
 0x1000

	)

82 
	#IF_IFACE_V24
 0x1001

	)

83 
	#IF_IFACE_X21
 0x1002

	)

84 
	#IF_IFACE_T1
 0x1003

	)

85 
	#IF_IFACE_E1
 0x1004

	)

86 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

87 
	#IF_IFACE_X21D
 0x1006

	)

90 
	#IF_PROTO_HDLC
 0x2000

	)

91 
	#IF_PROTO_PPP
 0x2001

	)

92 
	#IF_PROTO_CISCO
 0x2002

	)

93 
	#IF_PROTO_FR
 0x2003

	)

94 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

95 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

96 
	#IF_PROTO_X25
 0x2006

	)

97 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

98 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

99 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

100 
	#IF_PROTO_FR_PVC
 0x200A

	)

101 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

102 
	#IF_PROTO_RAW
 0x200C

	)

106 
	mIF_OPER_UNKNOWN
,

107 
	mIF_OPER_NOTPRESENT
,

108 
	mIF_OPER_DOWN
,

109 
	mIF_OPER_LOWERLAYERDOWN
,

110 
	mIF_OPER_TESTING
,

111 
	mIF_OPER_DORMANT
,

112 
	mIF_OPER_UP
,

117 
	mIF_LINK_MODE_DEFAULT
,

118 
	mIF_LINK_MODE_DORMANT
,

131 
	sifm≠
 {

132 
	mmem_°¨t
;

133 
	mmem_íd
;

134 
	mba£_addr
;

135 
	múq
;

136 
	mdma
;

137 
	mp‹t
;

141 
	sif_£âögs
 {

142 
	mty≥
;

143 
	msize
;

146 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

147 
cisco_¥Ÿo
 *
	mcisco
;

148 
‰_¥Ÿo
 *
	m‰
;

149 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

150 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

153 
sync_£rül_£âögs
 *
	msync
;

154 
ã1_£âögs
 *
	mã1
;

155 } 
	mifs_ifsu
;

165 
	si‰eq
 {

166 
	#IFHWADDRLEN
 6

	)

169 
	mi‰n_«me
[
IFNAMSIZ
];

170 } 
	mi‰_i‰n
;

173 
sockaddr
 
	mi‰u_addr
;

174 
sockaddr
 
	mi‰u_d°addr
;

175 
sockaddr
 
	mi‰u_brﬂdaddr
;

176 
sockaddr
 
	mi‰u_√tmask
;

177 
sockaddr
 
	mi‰u_hwaddr
;

178 
	mi‰u_Êags
;

179 
	mi‰u_ivÆue
;

180 
	mi‰u_mtu
;

181 
ifm≠
 
	mi‰u_m≠
;

182 
	mi‰u_¶ave
[
IFNAMSIZ
];

183 
	mi‰u_√w«me
[
IFNAMSIZ
];

184 * 
	mi‰u_d©a
;

185 
if_£âögs
 
	mi‰u_£âögs
;

186 } 
	mi‰_i‰u
;

189 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

190 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

191 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

192 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

193 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

194 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

195 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

196 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

197 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

198 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

199 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

200 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

201 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

202 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

203 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

204 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

205 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

214 
	sifc⁄f
 {

215 
	mifc_Àn
;

217 *
	mifcu_buf
;

218 
i‰eq
 *
	mifcu_ªq
;

219 } 
	mifc_ifcu
;

221 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

222 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_ATMFATE
 0x8884

	)

78 
	#ETH_P_PAE
 0x888E

	)

79 
	#ETH_P_AOE
 0x88A2

	)

80 
	#ETH_P_TIPC
 0x88CA

	)

81 
	#ETH_P_1588
 0x88F7

	)

82 
	#ETH_P_FCOE
 0x8906

	)

83 
	#ETH_P_FIP
 0x8914

	)

84 
	#ETH_P_EDSA
 0xDADA

	)

90 
	#ETH_P_802_3
 0x0001

	)

91 
	#ETH_P_AX25
 0x0002

	)

92 
	#ETH_P_ALL
 0x0003

	)

93 
	#ETH_P_802_2
 0x0004

	)

94 
	#ETH_P_SNAP
 0x0005

	)

95 
	#ETH_P_DDCMP
 0x0006

	)

96 
	#ETH_P_WAN_PPP
 0x0007

	)

97 
	#ETH_P_PPP_MP
 0x0008

	)

98 
	#ETH_P_LOCALTALK
 0x0009

	)

99 
	#ETH_P_CAN
 0x000C

	)

100 
	#ETH_P_PPPTALK
 0x0010

	)

101 
	#ETH_P_TR_802_2
 0x0011

	)

102 
	#ETH_P_MOBITEX
 0x0015

	)

103 
	#ETH_P_CONTROL
 0x0016

	)

104 
	#ETH_P_IRDA
 0x0017

	)

105 
	#ETH_P_ECONET
 0x0018

	)

106 
	#ETH_P_HDLC
 0x0019

	)

107 
	#ETH_P_ARCNET
 0x001A

	)

108 
	#ETH_P_DSA
 0x001B

	)

109 
	#ETH_P_TRAILER
 0x001C

	)

110 
	#ETH_P_PHONET
 0x00F5

	)

111 
	#ETH_P_IEEE802154
 0x00F6

	)

112 
	#ETH_P_CAIF
 0x00F7

	)

118 
	sëhhdr
 {

119 
	mh_de°
[
ETH_ALEN
];

120 
	mh_sour˚
[
ETH_ALEN
];

121 
__be16
 
	mh_¥Ÿo
;

122 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

40 
	sπ∆_lök_°©s64
 {

41 
__u64
 
	mrx_∑ckës
;

42 
__u64
 
	mtx_∑ckës
;

43 
__u64
 
	mrx_byãs
;

44 
__u64
 
	mtx_byãs
;

45 
__u64
 
	mrx_îr‹s
;

46 
__u64
 
	mtx_îr‹s
;

47 
__u64
 
	mrx_dr›≥d
;

48 
__u64
 
	mtx_dr›≥d
;

49 
__u64
 
	mmu…iˇ°
;

50 
__u64
 
	mcﬁlisi⁄s
;

53 
__u64
 
	mrx_Àngth_îr‹s
;

54 
__u64
 
	mrx_ovî_îr‹s
;

55 
__u64
 
	mrx_¸c_îr‹s
;

56 
__u64
 
	mrx_‰ame_îr‹s
;

57 
__u64
 
	mrx_fifo_îr‹s
;

58 
__u64
 
	mrx_mis£d_îr‹s
;

61 
__u64
 
	mtx_ab‹ãd_îr‹s
;

62 
__u64
 
	mtx_ˇºõr_îr‹s
;

63 
__u64
 
	mtx_fifo_îr‹s
;

64 
__u64
 
	mtx_hóπbót_îr‹s
;

65 
__u64
 
	mtx_wödow_îr‹s
;

68 
__u64
 
	mrx_com¥es£d
;

69 
__u64
 
	mtx_com¥es£d
;

73 
	sπ∆_lök_ifm≠
 {

74 
__u64
 
	mmem_°¨t
;

75 
__u64
 
	mmem_íd
;

76 
__u64
 
	mba£_addr
;

77 
__u16
 
	múq
;

78 
__u8
 
	mdma
;

79 
__u8
 
	mp‹t
;

83 
	mIFLA_UNSPEC
,

84 
	mIFLA_ADDRESS
,

85 
	mIFLA_BROADCAST
,

86 
	mIFLA_IFNAME
,

87 
	mIFLA_MTU
,

88 
	mIFLA_LINK
,

89 
	mIFLA_QDISC
,

90 
	mIFLA_STATS
,

91 
	mIFLA_COST
,

92 
	#IFLA_COST
 
IFLA_COST


	)

93 
	mIFLA_PRIORITY
,

94 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

95 
	mIFLA_MASTER
,

96 
	#IFLA_MASTER
 
IFLA_MASTER


	)

97 
	mIFLA_WIRELESS
,

98 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

99 
	mIFLA_PROTINFO
,

100 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

101 
	mIFLA_TXQLEN
,

102 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

103 
	mIFLA_MAP
,

104 
	#IFLA_MAP
 
IFLA_MAP


	)

105 
	mIFLA_WEIGHT
,

106 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

107 
	mIFLA_OPERSTATE
,

108 
	mIFLA_LINKMODE
,

109 
	mIFLA_LINKINFO
,

110 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

111 
	mIFLA_NET_NS_PID
,

112 
	mIFLA_IFALIAS
,

113 
	mIFLA_NUM_VF
,

114 
	mIFLA_VFINFO_LIST
,

115 
	mIFLA_STATS64
,

116 
	mIFLA_VF_PORTS
,

117 
	mIFLA_PORT_SELF
,

118 
	m__IFLA_MAX


122 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

125 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

126 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

159 
	mIFLA_INET6_UNSPEC
,

160 
	mIFLA_INET6_FLAGS
,

161 
	mIFLA_INET6_CONF
,

162 
	mIFLA_INET6_STATS
,

163 
	mIFLA_INET6_MCAST
,

164 
	mIFLA_INET6_CACHEINFO
,

165 
	mIFLA_INET6_ICMP6STATS
,

166 
	m__IFLA_INET6_MAX


169 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

171 
	siÊa_ˇcheöfo
 {

172 
__u32
 
	mmax_ªasm_Àn
;

173 
__u32
 
	mt°amp
;

174 
__u32
 
	mªachabÀ_time
;

175 
__u32
 
	mªå™s_time
;

179 
	mIFLA_INFO_UNSPEC
,

180 
	mIFLA_INFO_KIND
,

181 
	mIFLA_INFO_DATA
,

182 
	mIFLA_INFO_XSTATS
,

183 
	m__IFLA_INFO_MAX
,

186 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

191 
	mIFLA_VLAN_UNSPEC
,

192 
	mIFLA_VLAN_ID
,

193 
	mIFLA_VLAN_FLAGS
,

194 
	mIFLA_VLAN_EGRESS_QOS
,

195 
	mIFLA_VLAN_INGRESS_QOS
,

196 
	m__IFLA_VLAN_MAX
,

199 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

201 
	siÊa_vœn_Êags
 {

202 
__u32
 
	mÊags
;

203 
__u32
 
	mmask
;

207 
	mIFLA_VLAN_QOS_UNSPEC
,

208 
	mIFLA_VLAN_QOS_MAPPING
,

209 
	m__IFLA_VLAN_QOS_MAX


212 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

214 
	siÊa_vœn_qos_m≠pög
 {

215 
__u32
 
	m‰om
;

216 
__u32
 
	mto
;

221 
	mIFLA_MACVLAN_UNSPEC
,

222 
	mIFLA_MACVLAN_MODE
,

223 
	m__IFLA_MACVLAN_MAX
,

226 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

228 
	emacvœn_mode
 {

229 
	mMACVLAN_MODE_PRIVATE
 = 1,

230 
	mMACVLAN_MODE_VEPA
 = 2,

231 
	mMACVLAN_MODE_BRIDGE
 = 4,

237 
	mIFLA_VF_INFO_UNSPEC
,

238 
	mIFLA_VF_INFO
,

239 
	m__IFLA_VF_INFO_MAX
,

242 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

245 
	mIFLA_VF_UNSPEC
,

246 
	mIFLA_VF_MAC
,

247 
	mIFLA_VF_VLAN
,

248 
	mIFLA_VF_TX_RATE
,

249 
	m__IFLA_VF_MAX
,

252 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

254 
	siÊa_vf_mac
 {

255 
__u32
 
	mvf
;

256 
__u8
 
	mmac
[32];

259 
	siÊa_vf_vœn
 {

260 
__u32
 
	mvf
;

261 
__u32
 
	mvœn
;

262 
__u32
 
	mqos
;

265 
	siÊa_vf_tx_øã
 {

266 
__u32
 
	mvf
;

267 
__u32
 
	møã
;

270 
	siÊa_vf_öfo
 {

271 
__u32
 
	mvf
;

272 
__u8
 
	mmac
[32];

273 
__u32
 
	mvœn
;

274 
__u32
 
	mqos
;

275 
__u32
 
	mtx_øã
;

294 
	mIFLA_VF_PORT_UNSPEC
,

295 
	mIFLA_VF_PORT
,

296 
	m__IFLA_VF_PORT_MAX
,

299 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

302 
	mIFLA_PORT_UNSPEC
,

303 
	mIFLA_PORT_VF
,

304 
	mIFLA_PORT_PROFILE
,

305 
	mIFLA_PORT_VSI_TYPE
,

306 
	mIFLA_PORT_INSTANCE_UUID
,

307 
	mIFLA_PORT_HOST_UUID
,

308 
	mIFLA_PORT_REQUEST
,

309 
	mIFLA_PORT_RESPONSE
,

310 
	m__IFLA_PORT_MAX
,

313 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

315 
	#PORT_PROFILE_MAX
 40

	)

316 
	#PORT_UUID_MAX
 16

	)

317 
	#PORT_SELF_VF
 -1

	)

320 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

321 
	mPORT_REQUEST_PREASSOCIATE_RR
,

322 
	mPORT_REQUEST_ASSOCIATE
,

323 
	mPORT_REQUEST_DISASSOCIATE
,

327 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

328 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

329 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

330 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

331 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

332 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

333 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

335 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

336 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

337 
	mPORT_PROFILE_RESPONSE_INVALID
,

338 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

339 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

340 
	mPORT_PROFILE_RESPONSE_ERROR
,

343 
	siÊa_p‹t_vsi
 {

344 
__u8
 
	mvsi_mgr_id
;

345 
__u8
 
	mvsi_ty≥_id
[3];

346 
__u8
 
	mvsi_ty≥_vîsi⁄
;

347 
__u8
 
	m∑d
[3];

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

42 
	#PACKET_AUXDATA
 8

	)

43 
	#PACKET_ORIGDEV
 9

	)

44 
	#PACKET_VERSION
 10

	)

45 
	#PACKET_HDRLEN
 11

	)

46 
	#PACKET_RESERVE
 12

	)

47 
	#PACKET_TX_RING
 13

	)

48 
	#PACKET_LOSS
 14

	)

49 
	#PACKET_VNET_HDR
 15

	)

50 
	#PACKET_TX_TIMESTAMP
 16

	)

52 
	sçackë_°©s
 {

53 
	mç_∑ckës
;

54 
	mç_dr›s
;

57 
	sçackë_auxd©a
 {

58 
__u32
 
	mç_°©us
;

59 
__u32
 
	mç_Àn
;

60 
__u32
 
	mç_¢≠Àn
;

61 
__u16
 
	mç_mac
;

62 
__u16
 
	mç_√t
;

63 
__u16
 
	mç_vœn_tci
;

67 
	#TP_STATUS_KERNEL
 0x0

	)

68 
	#TP_STATUS_USER
 0x1

	)

69 
	#TP_STATUS_COPY
 0x2

	)

70 
	#TP_STATUS_LOSING
 0x4

	)

71 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

74 
	#TP_STATUS_AVAILABLE
 0x0

	)

75 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

76 
	#TP_STATUS_SENDING
 0x2

	)

77 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

79 
	sçackë_hdr
 {

80 
	mç_°©us
;

81 
	mç_Àn
;

82 
	mç_¢≠Àn
;

83 
	mç_mac
;

84 
	mç_√t
;

85 
	mç_£c
;

86 
	mç_u£c
;

89 
	#TPACKET_ALIGNMENT
 16

	)

90 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

91 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

93 
	sçackë2_hdr
 {

94 
__u32
 
	mç_°©us
;

95 
__u32
 
	mç_Àn
;

96 
__u32
 
	mç_¢≠Àn
;

97 
__u16
 
	mç_mac
;

98 
__u16
 
	mç_√t
;

99 
__u32
 
	mç_£c
;

100 
__u32
 
	mç_n£c
;

101 
__u16
 
	mç_vœn_tci
;

104 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

106 
	eçackë_vîsi⁄s
 {

107 
	mTPACKET_V1
,

108 
	mTPACKET_V2
,

124 
	sçackë_ªq
 {

125 
	mç_block_size
;

126 
	mç_block_ƒ
;

127 
	mç_‰ame_size
;

128 
	mç_‰ame_ƒ
;

131 
	s∑ckë_mªq
 {

132 
	mmr_ifödex
;

133 
	mmr_ty≥
;

134 
	mmr_Æí
;

135 
	mmr_addªss
[8];

138 
	#PACKET_MR_MULTICAST
 0

	)

139 
	#PACKET_MR_PROMISC
 1

	)

140 
	#PACKET_MR_ALLMULTI
 2

	)

141 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

28 
	#MAX_LINKS
 32

	)

30 
	g√t
;

32 
	ssockaddr_∆
 {

33 
ß_Ámûy_t
 
	m∆_Ámûy
;

34 
	m∆_∑d
;

35 
__u32
 
	m∆_pid
;

36 
__u32
 
	m∆_groups
;

39 
	s∆msghdr
 {

40 
__u32
 
	m∆msg_Àn
;

41 
__u16
 
	m∆msg_ty≥
;

42 
__u16
 
	m∆msg_Êags
;

43 
__u32
 
	m∆msg_£q
;

44 
__u32
 
	m∆msg_pid
;

49 
	#NLM_F_REQUEST
 1

	)

50 
	#NLM_F_MULTI
 2

	)

51 
	#NLM_F_ACK
 4

	)

52 
	#NLM_F_ECHO
 8

	)

55 
	#NLM_F_ROOT
 0x100

	)

56 
	#NLM_F_MATCH
 0x200

	)

57 
	#NLM_F_ATOMIC
 0x400

	)

58 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

61 
	#NLM_F_REPLACE
 0x100

	)

62 
	#NLM_F_EXCL
 0x200

	)

63 
	#NLM_F_CREATE
 0x400

	)

64 
	#NLM_F_APPEND
 0x800

	)

75 
	#NLMSG_ALIGNTO
 4

	)

76 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

77 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

78 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

79 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

80 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

81 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

82 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

83 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

84 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

85 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

86 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

88 
	#NLMSG_NOOP
 0x1

	)

89 
	#NLMSG_ERROR
 0x2

	)

90 
	#NLMSG_DONE
 0x3

	)

91 
	#NLMSG_OVERRUN
 0x4

	)

93 
	#NLMSG_MIN_TYPE
 0x10

	)

95 
	s∆msgîr
 {

96 
	mîr‹
;

97 
∆msghdr
 
	mmsg
;

100 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

101 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

102 
	#NETLINK_PKTINFO
 3

	)

103 
	#NETLINK_BROADCAST_ERROR
 4

	)

104 
	#NETLINK_NO_ENOBUFS
 5

	)

106 
	s∆_pktöfo
 {

107 
__u32
 
	mgroup
;

110 
	#NET_MAJOR
 36

	)

113 
	mNETLINK_UNCONNECTED
 = 0,

114 
	mNETLINK_CONNECTED
,

126 
	s∆©å
 {

127 
__u16
 
	m∆a_Àn
;

128 
__u16
 
	m∆a_ty≥
;

141 
	#NLA_F_NESTED
 (1 << 15)

	)

142 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

143 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

145 
	#NLA_ALIGNTO
 4

	)

146 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

147 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	#dma_addr_t
 
dma_addr_t


	)

6 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

9 #i‚de‡
__ASSEMBLY__


11 
	tumode_t
;

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

60 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

61 
	#__FD_ISSET
(
d
, 
£t
) \

62 ((
	`__FDS_BITS
 (
£t
)[
	`__FDELT
 (
d
)] & 
	`__FDMASK
 (d)Ë!0)

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
127
5987
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_convert.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_acl.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_aggr.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_cablediag.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_dispatch.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_gpio.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_ieee8023az.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_init.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_mac.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_mirror.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_port.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_qos.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_ratelimit.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_rstp.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_special.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_statistics.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_stub.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_drv_vlan.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/ar_l2_tx.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/atheros/hal_common.h
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/broadcom/hal_convert.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/hal_common.h
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/hello.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_convert.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_acl.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_aggr.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_cablediag.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_dispatch.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_eeprom.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_gpio.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_ieee8023az.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_init.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_mac.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_mirror.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_port.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_qos.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_ratelimit.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_rstp.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_special.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_statistics.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_drv_vlan.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/realtek/rtk_l2_tx.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/hal_common.h
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_convert.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_l2_tx.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_port.c
/home/wanghuanyu/BG/bg_develop/product/bg/drv/hal/switch/singleport/single_smi.c
/usr/include/linux/if_vlan.h
/usr/include/linux/kernel.h
/usr/include/linux/netdevice.h
/usr/include/linux/string.h
/usr/include/stdio.h
/usr/include/string.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/if.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_link.h
/usr/include/linux/if_packet.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/predefs.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/netlink.h
/usr/include/linux/socket.h
/usr/include/linux/types.h
/usr/include/stdlib.h
/usr/include/sys/cdefs.h
/usr/include/alloca.h
/usr/include/asm/types.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/libc-lock.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/posix_types.h
/usr/include/sys/types.h
/usr/include/wchar.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/errno.h
/usr/include/gnu/option-groups.h
/usr/include/linux/stddef.h
/usr/include/pthread.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/time.h
/usr/include/wctype.h
/usr/include/asm-generic/int-ll64.h
/usr/include/bits/errno.h
/usr/include/bits/select.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigset.h
/usr/include/bits/time.h
/usr/include/sched.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/sched.h
/usr/include/linux/errno.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm/errno.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/errno-base.h
