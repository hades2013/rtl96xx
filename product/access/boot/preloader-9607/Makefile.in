# global veriable

# color code
NONE            := \033[00m
BLACK           := \033[22;30m
RED             := \033[01;31m
GREEN           := \033[22;32m
BROWN           := \033[22;33m
BLUE            := \033[22;34m
MAGENTA         := \033[22;35m
CYAN            := \033[22;36m
GRAY            := \033[22;37m
DARK_GRAY       := \033[01;30m
LIGHT_RED       := \033[01;31m
LIGHT_GREEN     := \033[01;32m
YELLOW          := \033[01;33m
LIGHT_BLUE      := \033[01;34m
LIGHT_MAGENTA   := \033[01;35m
LIGHT_CYAN      := \033[01;36m
WHITE           := \033[01;37m

DATE_TAG:=$(shell date)
VER_FILE:=./revision
REL_VER_FILE:=./rel_ver

ifeq ($(wildcard ./.svn), ./.svn)
SVN_REV:=$(shell svn info 2>/dev/null | grep '^Last Changed Rev' | awk '{print $$NF}')
DUMMY:=$(shell echo revision="svn$(SVN_REV)" > $(VER_FILE).tmp)
DUMMY:=$(shell cmp -s $(VER_FILE) $(VER_FILE).tmp && rm -f $(VER_FILE).tmp || mv -f $(VER_FILE).tmp $(VER_FILE))
ifeq ($(gen_rel_ver), 1)
DUMMY:=$(shell echo rel_ver="REL_R$(SVN_REV)" > $(REL_VER_FILE))
endif
else ifeq ($(wildcard ./.git),./.git)
GIT_VCODE := git log | head -c 15 | sed -e 's|commit ||'
GIT_MCODE := git status | grep 'modified:' > /dev/null 2>&1 && echo 'M' || echo ''
GIT_REV := $(shell $(GIT_VCODE))
GIT_REV := $(GIT_REV)$(shell $(GIT_MCODE))
DUMMY:=$(shell echo revision="$(GIT_REV)" > $(VER_FILE).tmp)
DUMMY:=$(shell cmp -s $(VER_FILE) $(VER_FILE).tmp && rm -f $(VER_FILE).tmp || mv -f $(VER_FILE).tmp $(VER_FILE))
endif

ifeq ($(wildcard $(VER_FILE)), $(VER_FILE))
include $(VER_FILE)
else
revision:="NA"
endif
ifeq ($(wildcard $(REL_VER_FILE)), $(REL_VER_FILE))
include $(REL_VER_FILE)
else
rel_ver:="REL_NA"
endif

CC:=$(CROSS_COMPILE)gcc
AS:=$(CROSS_COMPILE)as
LD:=$(CROSS_COMPILE)ld
OC:=$(CROSS_COMPILE)objcopy
OD:=$(CROSS_COMPILE)objdump
RE:=$(CROSS_COMPILE)readelf
NM:=$(CROSS_COMPILE)nm
TBASE ?= 0

BEFORE_COMPOSE := util_src

PLATFORM_DIR := $(PRELOADER_DIR)/platform
SOC_H	:= $(RELEASE_DIR)/soc.h
SOC_IN_H := $(PRELOADER_DIR)/include/soc.in.h
UTIL_SRC := $(UTIL_DIR)/src
PLATFORM_NAME := $(OTTO_ROOT)/platform_name
#test if platform/current exists
ARCH_H := $(PLATFORM_DIR)/current/arch.h
ifeq ($(wildcard $(PLATFORM_NAME)), $(PLATFORM_NAME))
    include $(PLATFORM_NAME)

    PROJ_H := $(shell ls $(OTTO_ROOT)/vendors/$(project_name)/proj.h 2> /dev/null)
    PROJ_VER := $(OTTO_ROOT)/vendors/$(project_name)/proj_ver 
endif

# Createprj list for vendors folder
ifeq ($(prj),)
release_prj := $(addprefix vendors/,$(project_name))
release_file := $(addprefix preloader/platform/,$(platform_name))
else
release_prj := $(addprefix vendors/,$(prj))
release_file := $(shell for dir in $(addprefix vendors/,$(prj)) ; do grep "^variable preloader_platform" $$dir/soc.tcl  | tr -s "[\t]" " "| cut -d " " -f3; done)
release_file := $(addprefix preloader/platform/,$(release_file))
endif

#release_prj := $(addprefix otto/vendors/,$(prj)) $(addprefix otto/vendors/,$(project_name))
#grep find platform name
#release_file := $(shell for dir in $(addprefix vendors/,$(prj)) $(addprefix vendors/,$(project_name)) ; do grep "^variable preloader_platform" $$dir/soc.tcl  | tr -s "[\t]" " "| cut -d " " -f3; done)
#release_file := $(addprefix otto/preloader/platform/,$(release_file))
#release_file := $(shell for dir in  $(release_prj)) ; do grep "^variable preloader_platform" $$dir/soc.tcl  | tr -s "[\t]" " "| cut -d " " -f3; done)
#release_file := $(addprefix otto/preloader/platform/,$(release_file))

TO_RELEASE := toolkit_path.in release util/otto_composer util/parts_db Makefile revision
TO_RELEASE_SRC := $(TO_RELEASE) util preloader/*.c preloader/*.lds preloader/Makefile preloader/Makefile.pcfg preloader/arch_care.in preloader/include preloader/lib  preloader/soc
TO_RELEASE_SRC := $(TO_RELEASE_SRC) Makefile.in

# Create supported preconfig platform list
ifeq ($(wildcard ./vendors), ./vendors)
  PRE_CFG_LIST:=$(shell ls ./vendors)
  PRE_CFG_LIST:=$(PRE_CFG_LIST:current=)
  PRE_CFG_LIST:=$(addprefix preconfig_,$(PRE_CFG_LIST))
else
  PRE_CFG_LIST:=""
endif

# test if make release
ifeq ($(MAKECMDGOALS),release_src)
    MAKE_RELEASE := 1
    RELEASE_LIST := $(TO_RELEASE_SRC)
endif
ifeq ($(MAKECMDGOALS),release)
    MAKE_RELEASE := 1
    RELEASE_LIST := $(TO_RELEASE)
endif
ifeq ($(MAKE_RELEASE), 1)
    RELEASE_FILE := otto-$(revision).tar.gz
endif


# For preloader, make should only valid before `make release'
ifeq ($(QUIET),0)
  COND_MAKEe =|| echo "$@ is not available for preloader after release."
else
  COND_MAKEe:=|| echo -n ""
endif
CFLAGS_OPT ?= -Os
COND_MAKE_PRELOADER=test -f ./preloader/Makefile && $(MAKE) $(PARA_FLAG) -C preloader -f Makefile $@ $(COND_MAKEe)
COND_MAKE_PRECONFIG=test -f ./preloader/Makefile.pcfg && $(MAKE) -C preloader -f Makefile.pcfg $@ $(COND_MAKEe)

help:
	@echo "Supported Targets in OTTO: "
	@echo ""
	@echo "* make help"
	@echo "    this information"
	@echo "* make preconfig_PLATFORM"
	@echo "    supported platforms:" $(PRE_CFG_LIST)
	@echo "* make all"
	@echo "    conduct images of Preloader"
	@echo "* make release/release_src"
	@echo "    prepare files for release or source-code release"
	@echo ""
	@echo "Optional"
	@echo "* make build_test"
	@echo "    build all platforms for test before commit"
	@echo ""
	@echo "Build Steps:"
	@echo "  1) make preconfig_..."
	@echo "  2) make all"

preconfig_clean:
	@$(COND_MAKE_PRECONFIG)

$(PRE_CFG_LIST):
	@$(COND_MAKE_PRECONFIG)
	@$(MAKE) $(SOC_H)

all: $(SOC_H) 
	@$(COND_MAKE_PRELOADER)

$(SOC_H): $(SOC_IN_H) $(ARCH_H) $(PROJ_H)
	@if [ ! "$(platform_name)" ] ; then \
	    echo "Error: 'make preconfig_PLATFORM' was not executed before"; exit 1; \
	else \
	    $(COND_MAKE_PRECONFIG) ; \
	fi

util_src:
	@[ -f $(UTIL_SRC)/Makefile ] && $(MAKE) -C $(UTIL_SRC) all $(COND_MAKEe)

release: 
	@$(MAKE) -C $(UTIL_SRC) clean
	@$(MAKE) util_src
	@-rm -f otto $(RELEASE_FILE)
	@ln -sf . otto
	@tar zcvf $(RELEASE_FILE) $(patsubst %,otto/%,$(RELEASE_LIST)) --exclude=.svn
	@-rm -f otto revision
	@echo ---------------------------------------------------
	@echo "           $(RELEASE_FILE) was created"
	@echo ---------------------------------------------------

release_src: 
	if [ ! "$(platform_name)" ] && [ -z "$(release_file)" ] ; then \
	    echo "Error: 'make preconfig_PROJECT' was not executed before"; exit 1; \
	fi
	@$(MAKE) -C $(UTIL_SRC) clean
	@$(MAKE) util_src
	@-rm -f otto $(RELEASE_FILE)
	@ln -sf . otto
	@tar zcvf $(RELEASE_FILE) $(patsubst %,otto/%,$(RELEASE_LIST) $(release_prj) $(release_file)) --exclude=.svn
	@-rm -f otto revision
	@echo ---------------------------------------------------
	@echo "           $(RELEASE_FILE) was created"
	@echo ---------------------------------------------------

clean distclean:
	@$(COND_MAKE_PRECONFIG)
	@[ -f $(UTIL_SRC)/Makefile ] && $(MAKE) -C $(UTIL_SRC) $@ $(COND_MAKEe)
	@-rm -f ./release/loader.img ./total_verification.cfg

total_verification.cfg:
	@cp toolkit_for_verification.cfg $@

build_test: total_verification.cfg
	@while read test_platform test_delimiter test_toolkit_path ;\
	do \
		test -e ./vendors/$${test_platform} || continue ;\
		rm -rf release ;\
		export BUILD_CMD="$(MAKE) CROSS_COMPILE=$${test_toolkit_path} preconfig_$${test_platform} all" ;\
		echo -n $${BUILD_CMD} ;\
		PARA_FLAG=-j $${BUILD_CMD} > /dev/null 2>&1 ;\
		test -e ./release/plr.img && echo " $(GREEN)[Pass]$(NONE)" || echo " $(RED)[Fail]$(NONE)" ;\
	done < $^

.PHONY: caffeine600mg
caffeine600mg:
	@$(MAKE) -C nor_spif_programmer clean all

.EXPORT_ALL_VARIABLES:
.PHONY: $(PRE_CFG_LIST) all release release_src clean distclean help build_test
