/*
 * Copyright (C) 2009 Realtek Semiconductor Corp.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 *
 * Purpose : Realtek Switch SDK Rtdrv Netfilter Module in the SDK.
 *
 * Feature : Realtek Switch SDK Rtdrv Netfilter Module
 *
 */

#ifndef __RTDRV_NETFILTER_H__
#define __RTDRV_NETFILTER_H__

/*
 * Include Files
*/
#include <hal/mac/reg.h>
#include <rtk/acl.h>
#include <rtk/classify.h>
#include <rtk/cpu.h>
#include <rtk/debug.h>
#include <rtk/dot1x.h>
#include <rtk/intr.h>
#include <rtk/l2.h>
#include <rtk/led.h>
#include <rtk/mirror.h>
#include <rtk/oam.h>
#include <rtk/ponmac.h>
#include <rtk/port.h>
#include <rtk/qos.h>
#include <rtk/rate.h>
#include <rtk/rldp.h>
#include <rtk/sec.h>
#include <rtk/stat.h>
#include <rtk/stp.h>
#include <rtk/svlan.h>
#include <rtk/switch.h>
#include <rtk/trap.h>
#include <rtk/trunk.h>
#include <rtk/vlan.h>
#include <rtk/rtusr/rtusr_pkt.h>
#include <rtk/gpio.h>
#include <rtk/i2c.h>
#include <rtk/l34.h>
#include <rtk/l34lite.h>
#include <rtk/epon.h>
#include <rtk/time.h>

#if (CONFIG_GPON_VERSION < 2)
#include <rtk/gpon.h>
#else
#include <rtk/gponv2.h>
#include <module/gpon/gpon.h>
#endif

#if defined(CONFIG_RTK_L34_ENABLE) && CONFIG_RTK_L34_ENABLE > 0
#include <rtk_rg_liteRomeDriver.h>
#if defined(CONFIG_RG_CALLBACK) && CONFIG_RG_CALLBACK > 0
#include <rtk_rg_callback.h>
#endif
#endif

/*
 * Symbol Definition
 */
#define RTDRV_BASE_CTL	                	    (64+1024+64+64+9000)

#define RTDRV_ACL_OFFSET                        1 /* 0 will be used by RTDRV_INIT_RTKAPI */
#define RTDRV_CLASSIFY_OFFSET                   (RTDRV_ACL_OFFSET      + 100)
#define RTDRV_CPU_OFFSET                        (RTDRV_CLASSIFY_OFFSET + 100)
#define RTDRV_DEBUG_OFFSET                      (RTDRV_CPU_OFFSET      + 100)
#define RTDRV_DOT1X_OFFSET                      (RTDRV_DEBUG_OFFSET    + 100)
#define RTDRV_INTR_OFFSET                       (RTDRV_DOT1X_OFFSET    + 100)
#define RTDRV_L2_OFFSET                         (RTDRV_INTR_OFFSET     + 100)
#define RTDRV_L34_OFFSET                        (RTDRV_L2_OFFSET       + 100)
#define RTDRV_LED_OFFSET                        (RTDRV_L34_OFFSET      + 100)
#define RTDRV_MIRROR_OFFSET                     (RTDRV_LED_OFFSET      + 100)
#define RTDRV_OAM_OFFSET                        (RTDRV_MIRROR_OFFSET   + 100)
#define RTDRV_PONMAC_OFFSET                     (RTDRV_OAM_OFFSET      + 100)
#define RTDRV_PORT_OFFSET                       (RTDRV_PONMAC_OFFSET   + 100)
#define RTDRV_QOS_OFFSET                        (RTDRV_PORT_OFFSET     + 100)
#define RTDRV_RLDP_OFFSET                       (RTDRV_QOS_OFFSET      + 100)
#define RTDRV_SEC_OFFSET                        (RTDRV_RLDP_OFFSET     + 100)
#define RTDRV_STAT_OFFSET                       (RTDRV_SEC_OFFSET      + 100)
#define RTDRV_STP_OFFSET                        (RTDRV_STAT_OFFSET     + 100)
#define RTDRV_SVLAN_OFFSET                      (RTDRV_STP_OFFSET      + 100)
#define RTDRV_SWITCH_OFFSET                     (RTDRV_SVLAN_OFFSET    + 100)
#define RTDRV_TRAP_OFFSET                       (RTDRV_SWITCH_OFFSET   + 100)
#define RTDRV_TRUNK_OFFSET                      (RTDRV_TRAP_OFFSET     + 100)
#define RTDRV_VLAN_OFFSET                       (RTDRV_TRUNK_OFFSET    + 100)
#define RTDRV_GPON_OFFSET                       (RTDRV_VLAN_OFFSET     + 100)
#define RTDRV_PKT_OFFSET                        (RTDRV_GPON_OFFSET     + 100)
#define RTDRV_RATE_OFFSET                       (RTDRV_PKT_OFFSET      + 100)
#define RTDRV_REG_OFFSET                        (RTDRV_RATE_OFFSET     + 100)
#define RTDRV_GPIO_OFFSET                       (RTDRV_REG_OFFSET	   + 100)
#define RTDRV_I2C_OFFSET                        (RTDRV_GPIO_OFFSET     + 100)
#define RTDRV_L34_LITE_OFFSET	                (RTDRV_I2C_OFFSET      + 100)
#define RTDRV_RG_OFFSET             			(RTDRV_L34_LITE_OFFSET + 100)
#define RTDRV_EPON_OFFSET             			(RTDRV_RG_OFFSET       + 100)
#define RTDRV_TIME_OFFSET             			(RTDRV_EPON_OFFSET       + 100)
#define RTDRV_END_OFFSET                        (RTDRV_TIME_OFFSET     + 100)

/***** RTDRV_SET *****/
#define RTDRV_INIT_RTKAPI                       (RTDRV_BASE_CTL)
#define RTDRV_SET_MAX                           (RTDRV_BASE_CTL + RTDRV_END_OFFSET)


enum rtdrv_reg_set_e
{
    RTDRV_REG_REGISTER_SET = (RTDRV_BASE_CTL + RTDRV_REG_OFFSET),
    RTDRV_TABLE_WRITE,
    RTDRV_REG_ADDRESS_SET,
    RTDRV_PHY_REG_SET,
    RTDRV_SOC_ADDRESS_SET
};

enum rtdrv_acl_set_e
{
    RTDRV_ACL_BASED_SET= (RTDRV_BASE_CTL + RTDRV_ACL_OFFSET + 1),
    RTDRV_ACL_INIT,
    RTDRV_ACL_TEMPLATE_SET,
    RTDRV_ACL_FIELDSELECT_SET,
    RTDRV_ACL_IGRRULEFIELD_ADD,
    RTDRV_ACL_IGRRULEENTRY_ADD,
    RTDRV_ACL_IGRRULEENTRY_DEL,
    RTDRV_ACL_IGRRULEENTRY_DELALL,
    RTDRV_ACL_IGRUNMATCHACTION_SET,
    RTDRV_ACL_IGRSTATE_SET,
    RTDRV_ACL_IPRANGE_SET,
    RTDRV_ACL_VIDRANGE_SET,
    RTDRV_ACL_PORTRANGE_SET,
    RTDRV_ACL_PACKETLENGTHRANGE_SET,
    RTDRV_ACL_IGRRULEMODE_SET,
    RTDRV_ACL_IGRPERMITSTATE_SET,
};

enum rtdrv_classify_set_e
{
    RTDRV_CLASSIFY_BASED_SET= (RTDRV_BASE_CTL + RTDRV_CLASSIFY_OFFSET + 1),
    RTDRV_CLASSIFY_INIT,
    RTDRV_CLASSIFY_CFGENTRY_ADD,
    RTDRV_CLASSIFY_CFGENTRY_DEL,
    RTDRV_CLASSIFY_FIELD_ADD,
    RTDRV_CLASSIFY_UNMATCHACTION_SET,
    RTDRV_CLASSIFY_PORTRANGE_SET,
    RTDRV_CLASSIFY_IPRANGE_SET,
    RTDRV_CLASSIFY_CFSEL_SET,
    RTDRV_CLASSIFY_CFPRI2DSCP_SET,
    RTDRV_CLASSIFY_PERMIT_SEL_SET,
    RTDRV_CLASSIFY_US1PREMARK_PRIOR_SET,

};

enum rtdrv_cpu_set_e
{
    RTDRV_CPU_BASED_SET= (RTDRV_BASE_CTL + RTDRV_CPU_OFFSET + 1),
    RTDRV_CPU_INIT,
    RTDRV_CPU_AWAREPORTMASK_SET,
    RTDRV_CPU_TAGFORMAT_SET,
    RTDRV_CPU_TRAPINSERTTAG_SET,

};

enum rtdrv_debug_set_e
{
    RTDRV_DEBUG_BASED_SET= (RTDRV_BASE_CTL + RTDRV_DEBUG_OFFSET + 1),
    RTDRV_DEBUG_ADDRESS_DUMP_SET,
    RTDRV_DEBUG_EN_LOG_SET,
    RTDRV_DEBUG_LOGLV_SET,
    RTDRV_DEBUG_LOGLVMASK_SET,
    RTDRV_DEBUG_LOGTYPE_SET,
    RTDRV_DEBUG_LOGFORMAT_SET,
    RTDRV_DEBUG_MODMASK_SET,
};

enum rtdrv_dot1x_set_e
{
    RTDRV_DOT1X_BASED_SET= (RTDRV_BASE_CTL + RTDRV_DOT1X_OFFSET + 1),
    RTDRV_DOT1X_INIT,
    RTDRV_DOT1X_UNAUTHPACKETOPER_SET,
    RTDRV_DOT1X_PORTBASEDENABLE_SET,
    RTDRV_DOT1X_PORTBASEDAUTHSTATUS_SET,
    RTDRV_DOT1X_PORTBASEDDIRECTION_SET,
    RTDRV_DOT1X_MACBASEDENABLE_SET,
    RTDRV_DOT1X_MACBASEDDIRECTION_SET,
    RTDRV_DOT1X_GUESTVLAN_SET,
    RTDRV_DOT1X_GUESTVLANBEHAVIOR_SET,
    RTDRV_DOT1X_TRAPPRI_SET,
};

enum rtdrv_intr_set_e
{
    RTDRV_INTR_BASED_SET= (RTDRV_BASE_CTL + RTDRV_INTR_OFFSET + 1),
    RTDRV_INTR_INIT,
    RTDRV_INTR_POLARITY_SET,
    RTDRV_INTR_IMR_SET,
    RTDRV_INTR_IMS_CLEAR,
    RTDRV_INTR_SPEEDCHANGESTATUS_CLEAR,
    RTDRV_INTR_LINKUPSTATUS_CLEAR,
    RTDRV_INTR_LINKDOWNSTATUS_CLEAR,
    RTDRV_INTR_GPHYSTATUS_CLEAR,
    RTDRV_INTR_IMR_RESTORE,

};

enum rtdrv_l2_set_e
{
    RTDRV_L2_BASED_SET= (RTDRV_BASE_CTL + RTDRV_L2_OFFSET + 1),
    RTDRV_L2_INIT,
    RTDRV_L2_FLUSHLINKDOWNPORTADDRENABLE_SET,
    RTDRV_L2_TABLE_CLEAR,
    RTDRV_L2_LIMITLEARNINGOVERSTATUS_CLEAR,
    RTDRV_L2_LIMITLEARNINGCNT_SET,
    RTDRV_L2_LIMITLEARNINGCNTACTION_SET,
    RTDRV_L2_PORTLIMITLEARNINGOVERSTATUS_CLEAR,
    RTDRV_L2_PORTLIMITLEARNINGCNT_SET,
    RTDRV_L2_PORTLIMITLEARNINGCNTACTION_SET,
    RTDRV_L2_AGING_SET,
    RTDRV_L2_PORTAGINGENABLE_SET,
    RTDRV_L2_LOOKUPMISSACTION_SET,
    RTDRV_L2_PORTLOOKUPMISSACTION_SET,
    RTDRV_L2_LOOKUPMISSFLOODPORTMASK_SET,
    RTDRV_L2_LOOKUPMISSFLOODPORTMASK_ADD,
    RTDRV_L2_LOOKUPMISSFLOODPORTMASK_DEL,
    RTDRV_L2_NEWMACOP_SET,
    RTDRV_L2_ADDR_ADD,
    RTDRV_L2_ADDR_DEL,
    RTDRV_L2_ADDR_DELALL,
    RTDRV_L2_MCASTADDR_ADD,
    RTDRV_L2_MCASTADDR_DEL,
    RTDRV_L2_ILLEGALPORTMOVEACTION_SET,
    RTDRV_L2_IPMCMODE_SET,
    RTDRV_L2_IPMCGROUPLOOKUPMISSHASH_SET,
    RTDRV_L2_IPMCGROUP_ADD,
    RTDRV_L2_IPMCGROUP_DEL,
    RTDRV_L2_PORTIPMCACTION_SET,
    RTDRV_L2_IPMCASTADDR_ADD,
    RTDRV_L2_IPMCASTADDR_DEL,
    RTDRV_L2_SRCPORTEGRFILTERMASK_SET,
    RTDRV_L2_EXTPORTEGRFILTERMASK_SET,
    RTDRV_L2_CAM_STATE_SET,    

};

enum rtdrv_l34_set_e
{
    RTDRV_L34_BASED_SET= (RTDRV_BASE_CTL + RTDRV_L34_OFFSET + 1),
    RTDRV_L34_INIT,
    RTDRV_L34_NETIFTABLE_SET,
    RTDRV_L34_ARPTABLE_SET,
    RTDRV_L34_ARPTABLE_DEL,
    RTDRV_L34_PPPOETABLE_SET,
    RTDRV_L34_ROUTINGTABLE_SET,
    RTDRV_L34_ROUTINGTABLE_DEL,
    RTDRV_L34_NEXTHOPTABLE_SET,
    RTDRV_L34_EXTINTIPTABLE_SET,
    RTDRV_L34_EXTINTIPTABLE_DEL,
    RTDRV_L34_NAPTINBOUNDTABLE_SET,
    RTDRV_L34_NAPTOUTBOUNDTABLE_SET,
    RTDRV_L34_IPMCTRANSTABLE_SET,
    RTDRV_L34_TABLE_RESET,
    RTDRV_L34_BINDINGTABLE_SET,
    RTDRV_L34_BINDINGACTION_SET,
    RTDRV_L34_WANTYPETABLE_SET,
    RTDRV_L34_IPV6ROUTINGTABLE_SET,
    RTDRV_L34_IPV6NEIGHBORTABLE_SET,
    RTDRV_L34_HSABMODE_SET,
    RTDRV_L34_PORTWANMAP_SET,
    RTDRV_L34_GLOBALSTATE_SET,
    RTDRV_L34_LOOKUPMODE_SET,
    RTDRV_L34_LOOKUPPORTMAP_SET,
    RTDRV_L34_WANROUTMODE_SET,
    RTDRV_L34_HSDSTATE_SET,
    RTDRV_L34_HWL4TRFWRKTBL_SET,
    RTDRV_L34_HWARPTRFWRKTBL_SET,

};

enum rtdrv_led_set_e
{
    RTDRV_LED_BASED_SET= (RTDRV_BASE_CTL + RTDRV_LED_OFFSET + 1),
    RTDRV_LED_INIT,
    RTDRV_LED_OPERATION_SET,
    RTDRV_LED_SERIALMODE_SET,
    RTDRV_LED_BLINKRATE_SET,
    RTDRV_LED_CONFIG_SET,
    RTDRV_LED_MODEFORCE_SET,
    RTDRV_LED_PARALLELENABLE_SET,
    RTDRV_LED_PONALARM_SET,
    RTDRV_LED_PONWARNING_SET,
};

enum rtdrv_mirror_set_e
{
    RTDRV_MIRROR_BASED_SET= (RTDRV_BASE_CTL + RTDRV_MIRROR_OFFSET + 1),
    RTDRV_MIRROR_INIT,
    RTDRV_MIRROR_PORTBASED_SET,
    RTDRV_MIRROR_PORTISO_SET,

};

enum rtdrv_oam_set_e
{
    RTDRV_OAM_BASED_SET= (RTDRV_BASE_CTL + RTDRV_OAM_OFFSET + 1),
    RTDRV_OAM_INIT,
    RTDRV_OAM_PARSERACTION_SET,
    RTDRV_OAM_MULTIPLEXERACTION_SET
};

enum rtdrv_ponmac_set_e
{
    RTDRV_PONMAC_BASED_SET= (RTDRV_BASE_CTL + RTDRV_PONMAC_OFFSET + 1),
    RTDRV_PONMAC_INIT,
    RTDRV_PONMAC_QUEUE_ADD,
    RTDRV_PONMAC_QUEUE_DEL,
    RTDRV_PONMAC_FLOW2QUEUE_SET,
    RTDRV_PONMAC_SCHEDULINGTYPE_SET,
    RTDRV_PONMAC_QUEUEDRAINOUT_SET,

};

enum rtdrv_port_set_e
{
    RTDRV_PORT_BASED_SET= (RTDRV_BASE_CTL + RTDRV_PORT_OFFSET + 1),
    RTDRV_PORT_INIT,
    RTDRV_PORT_PHYAUTONEGOENABLE_SET,
    RTDRV_PORT_PHYAUTONEGOABILITY_SET,
    RTDRV_PORT_PHYFORCEMODEABILITY_SET,
    RTDRV_PORT_PHYREG_SET,
    RTDRV_PORT_PHYMASTERSLAVE_SET,
    RTDRV_PORT_PHYTESTMODE_SET,
    RTDRV_PORT_ISOLATION_SET,
    RTDRV_PORT_ISOLATIONEXT_SET,
    RTDRV_PORT_ISOLATIONL34_SET,
    RTDRV_PORT_ISOLATIONEXTL34_SET,
    RTDRV_PORT_ISOLATIONENTRY_SET,
    RTDRV_PORT_ISOLATIONENTRYEXT_SET,
    RTDRV_PORT_ISOLATIONCTAGPKTCONFIG_SET,
    RTDRV_PORT_ISOLATIONL34PKTCONFIG_SET,
    RTDRV_PORT_ISOLATIONIPMCLEAKY_SET,
    RTDRV_PORT_ISOLATIONPORTLEAKY_SET,
    RTDRV_PORT_ISOLATIONLEAKY_SET,
    RTDRV_PORT_MACREMOTELOOPBACKENABLE_SET,
    RTDRV_PORT_MACLOCALLOOPBACKENABLE_SET,
    RTDRV_PORT_ADMINENABLE_SET,
    RTDRV_PORT_SPECIALCONGEST_SET,
    RTDRV_PORT_SPECIALCONGESTSTATUS_CLEAR,
    RTDRV_PORT_GREENENABLE_SET,
    RTDRV_PORT_PHYCROSSOVERMODE_SET,
    RTDRV_PORT_ENHANCEDFID_SET,
    RTDRV_PORT_MACFORCEABILITY_SET,
    RTDRV_PORT_MACFORCEABILITYSTATE_SET,
    RTDRV_PORT_MACEXTMODE_SET,
    RTDRV_PORT_MACEXTRGMIIDELAY_SET,
    RTDRV_PORT_GIGALITEENABLE_SET,
};

enum rtdrv_qos_set_e
{
    RTDRV_QOS_BASED_SET= (RTDRV_BASE_CTL + RTDRV_QOS_OFFSET + 1),
    RTDRV_QOS_INIT,
    RTDRV_QOS_PRISELGROUP_SET,
    RTDRV_QOS_PORTPRI_SET,
    RTDRV_QOS_DSCPPRIREMAPGROUP_SET,
    RTDRV_QOS_1PPRIREMAPGROUP_SET,
    RTDRV_QOS_PRIMAP_SET,
    RTDRV_QOS_PORTPRIMAP_SET,
    RTDRV_QOS_1PREMARKENABLE_SET,
    RTDRV_QOS_1PREMARKGROUP_SET,
    RTDRV_QOS_DSCPREMARKENABLE_SET,
    RTDRV_QOS_DSCPREMARKGROUP_SET,
    RTDRV_QOS_PORTDSCPREMARKSRCSEL_SET,
    RTDRV_QOS_DSCP2DSCPREMARKGROUP_SET,
    RTDRV_QOS_FWD2CPUPRIREMAP_SET,
    RTDRV_QOS_SCHEDULINGQUEUE_SET,
    RTDRV_QOS_PORTPRISELGROUP_SET,
    RTDRV_QOS_SCHEDULINGTYPE_SET,
};

enum rtdrv_rldp_set_e
{
    RTDRV_RLDP_BASED_SET= (RTDRV_BASE_CTL + RTDRV_RLDP_OFFSET + 1),
    RTDRV_RLDP_INIT,
    RTDRV_RLDP_CONFIG_SET,
    RTDRV_RLDP_PORTCONFIG_SET,
    RTDRV_RLDP_PORTSTATUS_CLEAR,
    RTDRV_RLPP_INIT,
    RTDRV_RLPP_TRAPTYPE_SET,
};

enum rtdrv_sec_set_e
{
    RTDRV_SEC_BASED_SET= (RTDRV_BASE_CTL + RTDRV_SEC_OFFSET + 1),
    RTDRV_SEC_INIT,
    RTDRV_SEC_PORTATTACKPREVENTSTATE_SET,
    RTDRV_SEC_ATTACKPREVENT_SET,
    RTDRV_SEC_ATTACKFLOODTHRESH_SET
};

typedef struct rtdrv_timeCfg_s
{
    rtk_port_t                  	port;
    rtk_enable_t                	enable;
    rtk_time_timeStamp_t        	timeStamp;
    uint32                      	sign;
    uint32                      	freq;
    rtk_time_ptpMsgType_t       	type;
    rtk_time_ptpIgrMsg_action_t 	igr_action;
    rtk_time_ptpEgrMsg_action_t 	egr_action;
    uint32                      	delay;
}rtdrv_timeCfg_t;


enum rtdrv_stat_set_e
{
    RTDRV_STAT_BASED_SET= (RTDRV_BASE_CTL + RTDRV_STAT_OFFSET + 1),
    RTDRV_STAT_INIT,
    RTDRV_STAT_GLOBAL_RESET,
    RTDRV_STAT_PORT_RESET,
    RTDRV_STAT_LOG_RESET,
    RTDRV_STAT_RSTCNTVALUE_SET,
    RTDRV_STAT_LOGCTRL_SET,
    RTDRV_STAT_MIBCNTMODE_SET,
    RTDRV_STAT_MIBLATCHTIMER_SET,
    RTDRV_STAT_MIBSYNCMODE_SET,
    RTDRV_STAT_MIBCNTTAGLEN_SET
};

enum rtdrv_stp_set_e
{
    RTDRV_STP_BASED_SET= (RTDRV_BASE_CTL + RTDRV_STP_OFFSET + 1),
    RTDRV_STP_INIT,
    RTDRV_STP_MSTPSTATE_SET,
};


enum rtdrv_svlan_set_e
{
    RTDRV_SVLAN_BASED_SET= (RTDRV_BASE_CTL + RTDRV_SVLAN_OFFSET + 1),
    RTDRV_SVLAN_INIT,
    RTDRV_SVLAN_CREATE,
    RTDRV_SVLAN_DESTROY,
    RTDRV_SVLAN_PORTSVID_SET,
    RTDRV_SVLAN_SERVICEPORT_SET,
    RTDRV_SVLAN_MEMBERPORT_SET,
    RTDRV_SVLAN_TPIDENTRY_SET,
    RTDRV_SVLAN_PRIORITYREF_SET,
    RTDRV_SVLAN_MEMBERPORTENTRY_SET,
    RTDRV_SVLAN_IPMC2S_ADD,
    RTDRV_SVLAN_IPMC2S_DEL,
    RTDRV_SVLAN_L2MC2S_ADD,
    RTDRV_SVLAN_L2MC2S_DEL,
    RTDRV_SVLAN_SP2C_ADD,
    RTDRV_SVLAN_SP2C_DEL,
    RTDRV_SVLAN_DMACVIDSELSTATE_SET,
    RTDRV_SVLAN_UNMATCHACTION_SET,
    RTDRV_SVLAN_UNTAGACTION_SET,
    RTDRV_SVLAN_C2S_ADD,
    RTDRV_SVLAN_C2S_DEL,
    RTDRV_SVLAN_TRAPPRI_SET,
    RTDRV_SVLAN_DEIKEEPSTATE_SET,
    RTDRV_SVLAN_LOOKUPTYPE_SET,
    RTDRV_SVLAN_SP2CUNMATCHCTAGGING_SET,
    RTDRV_SVLAN_PRIORITY_SET,
    RTDRV_SVLAN_FID_SET,
    RTDRV_SVLAN_FIDENABLE_SET,
    RTDRV_SVLAN_ENHANCEDFID_SET,
    RTDRV_SVLAN_ENHANCEDFIDENABLE_SET,
    RTDRV_SVLAN_DMACVIDSELFORCEDSTATE_SET,

};

enum rtdrv_switch_set_e
{
    RTDRV_SWITCH_BASED_SET= (RTDRV_BASE_CTL + RTDRV_SWITCH_OFFSET + 1),
    RTDRV_SWITCH_INIT,
    RTDRV_SWITCH_PORT2PORTMASK_SET,
    RTDRV_SWITCH_PORT2PORTMASK_CLEAR,
    RTDRV_SWITCH_ALLPORTMASK_SET,
    RTDRV_SWITCH_ALLEXTPORTMASK_SET,
    RTDRV_SWITCH_MAXPKTLENLINKSPEED_SET,
    RTDRV_SWITCH_MGMTMACADDR_SET,
    RTDRV_SWITCH_CHIP_RESET,
    RTDRV_SWITCH_VERSION_GET,
};

enum rtdrv_trap_set_e
{
    RTDRV_TRAP_BASED_SET= (RTDRV_BASE_CTL + RTDRV_TRAP_OFFSET + 1),
    RTDRV_TRAP_INIT,
    RTDRV_TRAP_REASONTRAPTOCPUPRIORITY_SET,
    RTDRV_TRAP_IGMPCTRLPKT2CPUENABLE_SET,
    RTDRV_TRAP_MLDCTRLPKT2CPUENABLE_SET,
    RTDRV_TRAP_PORTIGMPMLDCTRLPKTACTION_SET,
    RTDRV_TRAP_IPMCASTPKT2CPUENABLE_SET,
    RTDRV_TRAP_L2MCASTPKT2CPUENABLE_SET,
    RTDRV_TRAP_RMAACTION_SET,
    RTDRV_TRAP_RMAPRI_SET,
    RTDRV_TRAP_OAMPDUACTION_SET,
    RTDRV_TRAP_OAMPDUPRI_SET,

};

enum rtdrv_trunk_set_e
{
    RTDRV_TRUNK_BASED_SET= (RTDRV_BASE_CTL + RTDRV_TRUNK_OFFSET + 1),
    RTDRV_TRUNK_INIT,
    RTDRV_TRUNK_DISTRIBUTIONALGORITHM_SET,
    RTDRV_TRUNK_PORT_SET,
    RTDRV_TRUNK_HASHMAPPINGTABLE_SET,
    RTDRV_TRUNK_MODE_SET,
    RTDRV_TRUNK_TRAFFICSEPARATE_SET,
    RTDRV_TRUNK_TRAFFICPAUSE_SET,

};

enum rtdrv_vlan_set_e
{
    RTDRV_VLAN_BASED_SET= (RTDRV_BASE_CTL + RTDRV_VLAN_OFFSET + 1),
    RTDRV_VLAN_INIT,
    RTDRV_VLAN_CREATE,
    RTDRV_VLAN_DESTROY,
    RTDRV_VLAN_DESTROYALL,
    RTDRV_VLAN_FID_SET,
    RTDRV_VLAN_FIDMODE_SET,
    RTDRV_VLAN_PORT_SET,
    RTDRV_VLAN_EXTPORT_SET,
    RTDRV_VLAN_STG_SET,
    RTDRV_VLAN_PRIORITY_SET,
    RTDRV_VLAN_PRIORITYENABLE_SET,
    RTDRV_VLAN_POLICINGENABLE_SET,
    RTDRV_VLAN_POLICINGMETERIDX_SET,
    RTDRV_VLAN_PORTACCEPTFRAMETYPE_SET,
    RTDRV_VLAN_VLANFUNCTIONENABLE_SET,
    RTDRV_VLAN_PORTIGRFILTERENABLE_SET,
    RTDRV_VLAN_LEAKY_SET,
    RTDRV_VLAN_PORTLEAKY_SET,
    RTDRV_VLAN_KEEPTYPE_SET,
    RTDRV_VLAN_PORTPVID_SET,
    RTDRV_VLAN_EXTPORTPVID_SET,
    RTDRV_VLAN_PROTOGROUP_SET,
    RTDRV_VLAN_PORTPROTOVLAN_SET,
    RTDRV_VLAN_TAGMODE_SET,
    RTDRV_VLAN_PORTFID_SET,
    RTDRV_VLAN_PORTPRIORITY_SET,
    RTDRV_VLAN_PORTEGRTAGKEEPTYPE_SET,
    RTDRV_VLAN_TRANSPARENTENABLE_SET,
    RTDRV_VLAN_CFIKEEPENABLE_SET,
    RTDRV_VLAN_RESERVEDVIDACTION_SET,
    RTDRV_VLAN_TAGMODEIP4MC_SET,
    RTDRV_VLAN_TAGMODEIP6MC_SET,
    RTDRV_VLAN_LUTSVLANHASHSTATE_SET,
};


enum rtdrv_rate_set_e
{
    RTDRV_RATE_INIT = (RTDRV_BASE_CTL + RTDRV_RATE_OFFSET),
    RTDRV_RATE_PORTIGRBANDWIDTHCTRLRATE_SET,
    RTDRV_RATE_PORTIGRBANDWIDTHCTRLINCLUDEIFG_SET,
    RTDRV_RATE_PORTEGRBANDWIDTHCTRLRATE_SET,
    RTDRV_RATE_EGRBANDWIDTHCTRLINCLUDEIFG_SET,
    RTDRV_RATE_PORTEGRBANDWIDTHCTRLINCLUDEIFG_SET,
    RTDRV_RATE_EGRQUEUEBWCTRLENABLE_SET,
    RTDRV_RATE_EGRQUEUEBWCTRLMETERIDX_SET,
    RTDRV_RATE_STORMCONTROLMETERIDX_SET,
    RTDRV_RATE_STORMCONTROLPORTENABLE_SET,
    RTDRV_RATE_STORMCONTROLENABLE_SET,
    RTDRV_RATE_STORMBYPASS_SET,
    RTDRV_RATE_SHAREMETER_SET,
    RTDRV_RATE_SHAREMETERBUCKET_SET,
    RTDRV_RATE_SHAREMETEREXCEED_CLEAR
};

enum rtdrv_gpon_set_e
{
    RTDRV_GPON_SN_SET = (RTDRV_BASE_CTL + RTDRV_GPON_OFFSET),
    RTDRV_GPON_PWD_SET,
    RTDRV_GPON_ACTIVE,
    RTDRV_GPON_DEACTIVE,
    RTDRV_GPON_PARA_SET,
    RTDRV_GPON_TCONT_ADD,
    RTDRV_GPON_TCONT_DEL,
    RTDRV_GPON_DS_FLOW_ADD,
    RTDRV_GPON_US_FLOW_ADD,
    RTDRV_GPON_BC_PASS_SET,
    RTDRV_GPON_NON_MC_PASS_SET,
    RTDRV_GPON_IP_PTN_SET,
    RTDRV_GPON_FLT_MODE_SET,
    RTDRV_GPON_FS_MODE_SET,
    RTDRV_GPON_MAC_ENTRY_ADD,
    RTDRV_GPON_MAC_ENTRY_DEL,
    RTDRV_GPON_RDI_SET,
    RTDRV_GPON_PWR_LEVEL_SET,
    RTDRV_GPON_TX_LASER_SET,
    RTDRV_GPON_FS_IDLE_SET,
#if 0
    RTDRV_GPON_FS_PRBS_SET,
#endif
    RTDRV_GPON_TEST_SET,
    RTDRV_GPON_INITIAL,
    RTDRV_GPON_DEINITIAL,
    RTDRV_GPON_DEBUG_SET,
    RTDRV_GPON_UNIT_TEST,
#if defined(OLD_FPGA_DEFINED)
    RTDRV_GPON_PKTGEN_CFG,
    RTDRV_GPON_PKTGEN_BUF,
#endif
    RTDRV_GPON_OMCI_TX,
    RTDRV_GPON_AUTO_TCONT_SET,
    RTDRV_GPON_AUTO_BOH_SET,
    RTDRV_GPON_EQD_OFFSET_SET,
    RTDRV_GPON_AUTODISTX_SET,
    RTDRV_GPON_EXTMSG_SET,
};

enum rtdrv_pkt_set_e
{
    RTDRV_PKT_SEND = (RTDRV_BASE_CTL + RTDRV_PKT_OFFSET),
    RTDRV_PKT_RXDUMP_ENABLE,
    RTDRV_PKT_RXDUMP_CLEAR
};

enum rtdrv_gpio_set_e
{
    RTDRV_GPIO_INIT= (RTDRV_BASE_CTL + RTDRV_GPIO_OFFSET),
    RTDRV_GPIO_STATE_SET,
    RTDRV_GPIO_MODE_SET,
    RTDRV_GPIO_DATABIT_SET,
    RTDRV_GPIO_INTR_SET,
    RTDRV_GPIO_IMS_SET,
};

enum rtdrv_i2c_set_e
{
    RTDRV_I2C_INIT = (RTDRV_BASE_CTL + RTDRV_I2C_OFFSET),
    RTDRV_I2C_ENABLE_SET,
    RTDRV_I2C_WIDTH_SET,
    RTDRV_I2C_WRITE,
    RTDRV_I2C_CLOCK_SET,
    RTDRV_I2C_EEPMIRROR_SET,
    RTDRV_I2C_EEPMIRROR_WRITE,
};


enum rtdrv_l34lite_set_e
{
    RTDRV_L34_LITE_INIT = (RTDRV_BASE_CTL + RTDRV_L34_LITE_OFFSET),
    RTDRV_L34_NETIF_CREATE,
    RTDRV_L34_NETIFPPPOE_SET,
    RTDRV_L34_NETIFVLAN_SET,
    RTDRV_L34_NETIFROUTINGSTATE_SET,
    RTDRV_L34_NETIFMTU_SET,
    RTDRV_L34_NETIFIPADDR_SET,
    RTDRV_L34_NETIFNAT_SET,
    RTDRV_L34_NETIFSTATE_SET,
    RTDRV_L34_NETIF_DEL,
    RTDRV_L34_ARP_ADD,
    RTDRV_L34_ARP_DEL,
    RTDRV_L34_ROUTE_ADD,
    RTDRV_L34_ROUTE_DEL,
    RTDRV_L34_CONNECTTRACK_ADD,
    RTDRV_L34_CONNECTTRACK_DEL,
    RTDRV_L34_ROUTE6_ADD,
    RTDRV_L34_ROUTE6_DEL,
    RTDRV_L34_NEIGH6_ADD,
    RTDRV_L34_NEIGH6_DEL,
    RTDRV_L34_NETIFIP6ADDR_ADD,
    RTDRV_L34_NETIFIP6ADDR_DEL,
    RTDRV_L34_NETIFGATEWAY_SET,
    RTDRV_L34_NETIF_SET,
    RTDRV_L34_NETIFMAC_SET,
};

#if defined(CONFIG_RTK_L34_ENABLE) && CONFIG_RTK_L34_ENABLE > 0
/* RG SET ENUM */
enum rtdrv_rg_set_e{
    RTDRV_RG_DHCPSERVERSTATICALLOC_DEL=(RTDRV_BASE_CTL +RTDRV_RG_OFFSET),
	RTDRV_RG_DHCPREQUEST_SET,
    RTDRV_RG_INTERFACE_DEL,
    RTDRV_RG_CVLAN_DEL,
    RTDRV_RG_VLANBINDING_DEL,
    RTDRV_RG_ALGSERVERINLANAPPSIPADDR_DEL,
    RTDRV_RG_ALGAPPS_SET,
    RTDRV_RG_VIRTUALSERVER_DEL,
    RTDRV_RG_ACLFILTERANDQOS_DEL,
    RTDRV_RG_MACFILTER_DEL,
    RTDRV_RG_URLFILTERSTRING_DEL,
    RTDRV_RG_UPNPCONNECTION_DEL,
    RTDRV_RG_NAPTCONNECTION_DEL,
    RTDRV_RG_MULTICASTFLOW_DEL,
    RTDRV_RG_MACENTRY_DEL,
    RTDRV_RG_ARPENTRY_DEL,
    RTDRV_RG_NEIGHBORENTRY_DEL,
    RTDRV_RG_SOFTWARESOURCEADDRLEARNINGLIMIT_SET,
    RTDRV_RG_DOSPORTMASKENABLE_SET,
    RTDRV_RG_DOSTYPE_SET,
    RTDRV_RG_DOSFLOODTYPE_SET,
    RTDRV_RG_PORTMIRROR_SET,
    RTDRV_RG_PORTMIRROR_CLEAR,
    RTDRV_RG_PORTEGRBANDWIDTHCTRLRATE_SET,
    RTDRV_RG_PORTIGRBANDWIDTHCTRLRATE_SET,
    RTDRV_RG_PHYPORTFORCEABILITY_SET,
    RTDRV_RG_PORTMIBINFO_CLEAR,
    RTDRV_RG_STORMCONTROL_DEL,
    RTDRV_RG_SHAREMETER_SET,
	RTDRV_RG_QOSSTRICTPRIORITYORWEIGHTFAIRQUEUE_SET,
    RTDRV_RG_QOSINTERNALPRIMAPTOQUEUEID_SET,
    RTDRV_RG_QOSINTERNALPRIDECISIONBYWEIGHT_SET,
    RTDRV_RG_QOSDSCPREMAPTOINTERNALPRI_SET,
	RTDRV_RG_QOSPORTBASEDPRIORITY_SET,
	RTDRV_RG_QOSDOT1PPRIREMAPTOINTERNALPRI_SET,
	RTDRV_RG_QOSDSCPREMARKEGRESSPORTENABLEANDSRCSELECT_SET,
	RTDRV_RG_QOSDSCPREMARKBYINTERNALPRI_SET,
	RTDRV_RG_QOSDSCPREMARKBYDSCP_SET,
	RTDRV_RG_QOSDOT1PPRIREMARKBYINTERNALPRIEGRESSPORTENABLE_SET,
	RTDRV_RG_QOSDOT1PPRIREMARKBYINTERNALPRI_SET,
	RTDRV_RG_NAPTEXTPORTFREE,
};
#endif
enum rtdrv_epon_set_e
{
    RTDRV_EPON_INIT = (RTDRV_BASE_CTL + RTDRV_EPON_OFFSET),
    RTDRV_EPON_INTRMASK_SET,
    RTDRV_EPON_INTR_DISABLEALL,
    RTDRV_EPON_LLID_ENTRY_SET,
    RTDRV_EPON_FORCELASERSTATE_SET,
    RTDRV_EPON_LASERTIME_SET,
    RTDRV_EPON_REGISTERREQ_SET,
    RTDRV_EPON_CHURNINGKEY_SET,
    RTDRV_EPON_USFECSTATE_SET,
    RTDRV_EPON_DSFECSTATE_SET,
    RTDRV_EPON_MIBGLOBAL_RESET,
    RTDRV_EPON_MIBLLIDIDX_RESET,
    RTDRV_EPON_MPCPTIMEOUTVAL_SET,
    RTDRV_EPON_OPTICALPOLARITY_SET,
    RTDRV_EPON_FECSTATE_SET,
};



enum rtdrv_time_set_e
{
    RTDRV_TIME_BASED_SET= (RTDRV_BASE_CTL + RTDRV_TIME_OFFSET + 1),
    RTDRV_TIME_PORTTRANSPARENTENABLE_SET,
    RTDRV_TIME_INIT,
    RTDRV_TIME_PORTPTPENABLE_SET,
    RTDRV_TIME_REFTIME_SET,
    RTDRV_TIME_FREQUENCY_SET,
    RTDRV_TIME_PTPIGRMSGACTION_SET,
    RTDRV_TIME_PTPEGRMSGACTION_SET,
    RTDRV_TIME_MEANPATHDELAY_SET,
    RTDRV_TIME_RXTIME_SET,
};

/***** end of RTDRV_SET *****/



/***** RTDRV_GET *****/
#define RTDRV_GET_MAX                           (RTDRV_BASE_CTL + RTDRV_END_OFFSET)



enum rtdrv_reg_get_e
{
    RTDRV_REG_REGISTER_GET = (RTDRV_BASE_CTL + RTDRV_REG_OFFSET),
    RTDRV_REG_IDX2ADDR_GET,
    RTDRV_REG_IDXMAX_GET,
    RTDRV_REG_INFO_GET,
    RTDRV_TABLE_READ,
    RTDRV_REG_ADDRESS_GET,
    RTDRV_PHY_REG_GET,
    RTDRV_SOC_ADDRESS_GET
};

enum rtdrv_acl_get_e
{
    RTDRV_ACL_BASED_GET= (RTDRV_BASE_CTL + RTDRV_ACL_OFFSET + 1),
    RTDRV_ACL_TEMPLATE_GET,
    RTDRV_ACL_FIELDSELECT_GET,
    RTDRV_ACL_IGRRULEENTRY_GET,
    RTDRV_ACL_IGRUNMATCHACTION_GET,
    RTDRV_ACL_IGRSTATE_GET,
    RTDRV_ACL_IPRANGE_GET,
    RTDRV_ACL_VIDRANGE_GET,
    RTDRV_ACL_PORTRANGE_GET,
    RTDRV_ACL_PACKETLENGTHRANGE_GET,
    RTDRV_ACL_IGRRULEMODE_GET,
    RTDRV_ACL_IGRPERMITSTATE_GET,
};

enum rtdrv_classify_get_e
{
    RTDRV_CLASSIFY_BASED_GET= (RTDRV_BASE_CTL + RTDRV_CLASSIFY_OFFSET + 1),
    RTDRV_CLASSIFY_CFGENTRY_GET,
    RTDRV_CLASSIFY_UNMATCHACTION_GET,
    RTDRV_CLASSIFY_PORTRANGE_GET,
    RTDRV_CLASSIFY_IPRANGE_GET,
    RTDRV_CLASSIFY_CFSEL_GET,
    RTDRV_CLASSIFY_CFPRI2DSCP_GET,
    RTDRV_CLASSIFY_PERMIT_SEL_GET,
    RTDRV_CLASSIFY_US1PREMARK_PRIOR_GET,

};

enum rtdrv_cpu_get_e
{
    RTDRV_CPU_BASED_GET= (RTDRV_BASE_CTL + RTDRV_CPU_OFFSET + 1),
    RTDRV_CPU_AWAREPORTMASK_GET,
    RTDRV_CPU_TAGFORMAT_GET,
    RTDRV_CPU_TRAPINSERTTAG_GET,

};

enum rtdrv_debug_get_e
{
    RTDRV_DEBUG_BASED_GET= (RTDRV_BASE_CTL + RTDRV_DEBUG_OFFSET + 1),
    RTDRV_DEBUG_EN_LOG_GET,
    RTDRV_DEBUG_LOGLV_GET,
    RTDRV_DEBUG_LOGLVMASK_GET,
    RTDRV_DEBUG_LOGTYPE_GET,
    RTDRV_DEBUG_LOGFORMAT_GET,
    RTDRV_DEBUG_MODMASK_GET,
    RTDRV_DEBUG_LOGCFG_GET,
};

enum rtdrv_dot1x_get_e
{
    RTDRV_DOT1X_BASED_GET= (RTDRV_BASE_CTL + RTDRV_DOT1X_OFFSET + 1),
    RTDRV_DOT1X_UNAUTHPACKETOPER_GET,
    RTDRV_DOT1X_PORTBASEDENABLE_GET,
    RTDRV_DOT1X_PORTBASEDAUTHSTATUS_GET,
    RTDRV_DOT1X_PORTBASEDDIRECTION_GET,
    RTDRV_DOT1X_MACBASEDENABLE_GET,
    RTDRV_DOT1X_MACBASEDDIRECTION_GET,
    RTDRV_DOT1X_GUESTVLAN_GET,
    RTDRV_DOT1X_GUESTVLANBEHAVIOR_GET,
    RTDRV_DOT1X_TRAPPRI_GET,
};

enum rtdrv_intr_get_e
{
    RTDRV_INTR_BASED_GET= (RTDRV_BASE_CTL + RTDRV_INTR_OFFSET + 1),
    RTDRV_INTR_POLARITY_GET,
    RTDRV_INTR_IMR_GET,
    RTDRV_INTR_IMS_GET,
    RTDRV_INTR_SPEEDCHANGESTATUS_GET,
    RTDRV_INTR_LINKUPSTATUS_GET,
    RTDRV_INTR_LINKDOWNSTATUS_GET,
    RTDRV_INTR_GPHYSTATUS_GET,
};

enum rtdrv_l2_get_e
{
    RTDRV_L2_BASED_GET= (RTDRV_BASE_CTL + RTDRV_L2_OFFSET + 1),
    RTDRV_L2_FLUSHLINKDOWNPORTADDRENABLE_GET,
    RTDRV_L2_UCASTADDR_FLUSH,
    RTDRV_L2_LIMITLEARNINGOVERSTATUS_GET,
    RTDRV_L2_LEARNINGCNT_GET,
    RTDRV_L2_LIMITLEARNINGCNT_GET,
    RTDRV_L2_LIMITLEARNINGCNTACTION_GET,
    RTDRV_L2_PORTLIMITLEARNINGOVERSTATUS_GET,
    RTDRV_L2_PORTLEARNINGCNT_GET,
    RTDRV_L2_PORTLIMITLEARNINGCNT_GET,
    RTDRV_L2_PORTLIMITLEARNINGCNTACTION_GET,
    RTDRV_L2_AGING_GET,
    RTDRV_L2_PORTAGINGENABLE_GET,
    RTDRV_L2_LOOKUPMISSACTION_GET,
    RTDRV_L2_PORTLOOKUPMISSACTION_GET,
    RTDRV_L2_LOOKUPMISSFLOODPORTMASK_GET,
    RTDRV_L2_NEWMACOP_GET,
    RTDRV_L2_NEXTVALIDADDR_GET,
    RTDRV_L2_NEXTVALIDADDRONPORT_GET,
    RTDRV_L2_NEXTVALIDMCASTADDR_GET,
    RTDRV_L2_NEXTVALIDIPMCASTADDR_GET,
    RTDRV_L2_NEXTVALIDENTRY_GET,
    RTDRV_L2_ADDR_GET,
    RTDRV_L2_MCASTADDR_GET,
    RTDRV_L2_ILLEGALPORTMOVEACTION_GET,
    RTDRV_L2_IPMCMODE_GET,
    RTDRV_L2_IPMCGROUPLOOKUPMISSHASH_GET,
    RTDRV_L2_IPMCGROUP_GET,
    RTDRV_L2_PORTIPMCACTION_GET,
    RTDRV_L2_IPMCASTADDR_GET,
    RTDRV_L2_SRCPORTEGRFILTERMASK_GET,
    RTDRV_L2_EXTPORTEGRFILTERMASK_GET,
	RTDRV_L2_CAM_STATE_GET,

};

enum rtdrv_l34_get_e
{
    RTDRV_L34_BASED_GET= (RTDRV_BASE_CTL + RTDRV_L34_OFFSET + 1),
    RTDRV_L34_NETIFTABLE_GET,
    RTDRV_L34_ARPTABLE_GET,
    RTDRV_L34_PPPOETABLE_GET,
    RTDRV_L34_ROUTINGTABLE_GET,
    RTDRV_L34_NEXTHOPTABLE_GET,
    RTDRV_L34_EXTINTIPTABLE_GET,
    RTDRV_L34_NAPTINBOUNDTABLE_GET,
    RTDRV_L34_NAPTOUTBOUNDTABLE_GET,
    RTDRV_L34_IPMCTRANSTABLE_GET,
    RTDRV_L34_BINDINGTABLE_GET,
    RTDRV_L34_BINDINGACTION_GET,
    RTDRV_L34_WANTYPETABLE_GET,
    RTDRV_L34_IPV6ROUTINGTABLE_GET,
    RTDRV_L34_IPV6NEIGHBORTABLE_GET,
    RTDRV_L34_HSABMODE_GET,
    RTDRV_L34_HSADATA_GET,
    RTDRV_L34_HSBDATA_GET,
    RTDRV_L34_PORTWANMAP_GET,
    RTDRV_L34_GLOBALSTATE_GET,
    RTDRV_L34_LOOKUPMODE_GET,
    RTDRV_L34_LOOKUPPORTMAP_GET,
    RTDRV_L34_WANROUTMODE_GET,
    RTDRV_L34_ARPTRFINDICATOR_GET,
    RTDRV_L34_NAPTTRFINDICATOR_GET,
    RTDRV_L34_PPPTRFINDICATOR_GET,
    RTDRV_L34_NEIGHTRFINDICATOR_GET,
    RTDRV_L34_HSDSTATE_GET,
    RTDRV_L34_HWL4TRFWRKTBL_GET,
    RTDRV_L34_L4TRFTB_GET,
    RTDRV_L34_HWL4TRFWRKTBL_CLEAR,
    RTDRV_L34_HWARPTRFWRKTBL_GET,
    RTDRV_L34_ARPTRFTB_GET,
    RTDRV_L34_HWARPTRFWRKTBL_CLEAR,
    RTDRV_L34_NAPTTRFINDICATOR_GET_ALL,
    RTDRV_L34_ARPTRFINDICATOR_GET_ALL,
};

enum rtdrv_led_get_e
{
    RTDRV_LED_BASED_GET= (RTDRV_BASE_CTL + RTDRV_LED_OFFSET + 1),
    RTDRV_LED_OPERATION_GET,
    RTDRV_LED_SERIALMODE_GET,
    RTDRV_LED_BLINKRATE_GET,
    RTDRV_LED_CONFIG_GET,
    RTDRV_LED_MODEFORCE_GET,
    RTDRV_LED_PARALLELENABLE_GET,
    RTDRV_LED_PONALARM_GET,
    RTDRV_LED_PONWARNING_GET,
};

enum rtdrv_mirror_get_e
{
    RTDRV_MIRROR_BASED_GET= (RTDRV_BASE_CTL + RTDRV_MIRROR_OFFSET + 1),
    RTDRV_MIRROR_PORTBASED_GET,
    RTDRV_MIRROR_PORTISO_GET,

};

enum rtdrv_oam_get_e
{
    RTDRV_OAM_BASED_GET= (RTDRV_BASE_CTL + RTDRV_OAM_OFFSET + 1),
    RTDRV_OAM_PARSERACTION_GET,
    RTDRV_OAM_MULTIPLEXERACTION_GET
};

enum rtdrv_ponmac_get_e
{
    RTDRV_PONMAC_BASED_GET= (RTDRV_BASE_CTL + RTDRV_PONMAC_OFFSET + 1),
    RTDRV_PONMAC_QUEUE_GET,
    RTDRV_PONMAC_FLOW2QUEUE_GET,
	RTDRV_PONMAC_SCHEDULINGTYPE_GET,
    RTDRV_PONMAC_TRANSCEIVER_GET,
    RTDRV_PONMAC_MODE_GET,
    RTDRV_PONMAC_MODE_SET
};

enum rtdrv_port_get_e
{
    RTDRV_PORT_BASED_GET= (RTDRV_BASE_CTL + RTDRV_PORT_OFFSET + 1),
    RTDRV_PORT_LINK_GET,
    RTDRV_PORT_SPEEDDUPLEX_GET,
    RTDRV_PORT_FLOWCTRL_GET,
    RTDRV_PORT_PHYAUTONEGOENABLE_GET,
    RTDRV_PORT_PHYAUTONEGOABILITY_GET,
    RTDRV_PORT_PHYFORCEMODEABILITY_GET,
    RTDRV_PORT_PHYREG_GET,
    RTDRV_PORT_PHYMASTERSLAVE_GET,
    RTDRV_PORT_PHYTESTMODE_GET,
    RTDRV_PORT_CPUPORTID_GET,
    RTDRV_PORT_ISOLATION_GET,
    RTDRV_PORT_ISOLATIONEXT_GET,
    RTDRV_PORT_ISOLATIONL34_GET,
    RTDRV_PORT_ISOLATIONEXTL34_GET,
    RTDRV_PORT_ISOLATIONENTRY_GET,
    RTDRV_PORT_ISOLATIONENTRYEXT_GET,
    RTDRV_PORT_ISOLATIONCTAGPKTCONFIG_GET,
    RTDRV_PORT_ISOLATIONL34PKTCONFIG_GET,
    RTDRV_PORT_ISOLATIONIPMCLEAKY_GET,
    RTDRV_PORT_ISOLATIONPORTLEAKY_GET,
    RTDRV_PORT_ISOLATIONLEAKY_GET,
    RTDRV_PORT_MACREMOTELOOPBACKENABLE_GET,
    RTDRV_PORT_MACLOCALLOOPBACKENABLE_GET,
    RTDRV_PORT_ADMINENABLE_GET,
    RTDRV_PORT_SPECIALCONGEST_GET,
    RTDRV_PORT_SPECIALCONGESTSTATUS_GET,
    RTDRV_PORT_GREENENABLE_GET,
    RTDRV_PORT_PHYCROSSOVERMODE_GET,
    RTDRV_PORT_ENHANCEDFID_GET,
    RTDRV_PORT_RTCTRESULT_GET,
    RTDRV_PORT_RTCT_START,
    RTDRV_PORT_MACFORCEABILITY_GET,
    RTDRV_PORT_MACFORCEABILITYSTATE_GET,
    RTDRV_PORT_MACEXTMODE_GET,
    RTDRV_PORT_MACEXTRGMIIDELAY_GET,
    RTDRV_PORT_GIGALITEENABLE_GET,
};

enum rtdrv_qos_get_e
{
    RTDRV_QOS_BASED_GET= (RTDRV_BASE_CTL + RTDRV_QOS_OFFSET + 1),
    RTDRV_QOS_PRISELGROUP_GET,
    RTDRV_QOS_PORTPRI_GET,
    RTDRV_QOS_DSCPPRIREMAPGROUP_GET,
    RTDRV_QOS_1PPRIREMAPGROUP_GET,
    RTDRV_QOS_PRIMAP_GET,
    RTDRV_QOS_PORTPRIMAP_GET,
    RTDRV_QOS_1PREMARKENABLE_GET,
    RTDRV_QOS_1PREMARKGROUP_GET,
    RTDRV_QOS_DSCPREMARKENABLE_GET,
    RTDRV_QOS_DSCPREMARKGROUP_GET,
    RTDRV_QOS_PORTDSCPREMARKSRCSEL_GET,
    RTDRV_QOS_DSCP2DSCPREMARKGROUP_GET,
    RTDRV_QOS_FWD2CPUPRIREMAP_GET,
    RTDRV_QOS_SCHEDULINGQUEUE_GET,
    RTDRV_QOS_PORTPRISELGROUP_GET,
    RTDRV_QOS_SCHEDULINGTYPE_GET,

};

enum rtdrv_rldp_get_e
{
    RTDRV_RLDP_BASED_GET= (RTDRV_BASE_CTL + RTDRV_RLDP_OFFSET + 1),
    RTDRV_RLDP_CONFIG_GET,
    RTDRV_RLDP_PORTCONFIG_GET,
    RTDRV_RLDP_STATUS_GET,
    RTDRV_RLDP_PORTSTATUS_GET,
    RTDRV_RLPP_TRAPTYPE_GET,
};

enum rtdrv_sec_get_e
{
    RTDRV_SEC_BASED_GET= (RTDRV_BASE_CTL + RTDRV_SEC_OFFSET + 1),
    RTDRV_SEC_PORTATTACKPREVENTSTATE_GET,
    RTDRV_SEC_ATTACKPREVENT_GET,
    RTDRV_SEC_ATTACKFLOODTHRESH_GET
};

enum rtdrv_stat_get_e
{
    RTDRV_STAT_BASED_GET= (RTDRV_BASE_CTL + RTDRV_STAT_OFFSET + 1),
    RTDRV_STAT_RSTCNTVALUE_GET,
    RTDRV_STAT_GLOBAL_GET,
    RTDRV_STAT_GLOBAL_GETALL,
    RTDRV_STAT_PORT_GET,
    RTDRV_STAT_PORT_GETALL,
    RTDRV_STAT_LOG_GET,
    RTDRV_STAT_LOGCTRL_GET,
    RTDRV_STAT_MIBCNTMODE_GET,
    RTDRV_STAT_MIBLATCHTIMER_GET,
    RTDRV_STAT_MIBSYNCMODE_GET,
    RTDRV_STAT_MIBCNTTAGLEN_GET,
    RTDRV_STAT_PKTINFO_GET
};

enum rtdrv_stp_get_e
{
    RTDRV_STP_BASED_GET= (RTDRV_BASE_CTL + RTDRV_STP_OFFSET + 1),
    RTDRV_STP_MSTPSTATE_GET,
};


enum rtdrv_svlan_get_e
{
    RTDRV_SVLAN_BASED_GET= (RTDRV_BASE_CTL + RTDRV_SVLAN_OFFSET + 1),
    RTDRV_SVLAN_PORTSVID_GET,
    RTDRV_SVLAN_SERVICEPORT_GET,
    RTDRV_SVLAN_MEMBERPORT_GET,
    RTDRV_SVLAN_TPIDENTRY_GET,
    RTDRV_SVLAN_PRIORITYREF_GET,
    RTDRV_SVLAN_MEMBERPORTENTRY_GET,
    RTDRV_SVLAN_IPMC2S_GET,
    RTDRV_SVLAN_L2MC2S_GET,
    RTDRV_SVLAN_SP2C_GET,
    RTDRV_SVLAN_DMACVIDSELSTATE_GET,
    RTDRV_SVLAN_UNMATCHACTION_GET,
    RTDRV_SVLAN_UNTAGACTION_GET,
    RTDRV_SVLAN_C2S_GET,
    RTDRV_SVLAN_TRAPPRI_GET,
    RTDRV_SVLAN_DEIKEEPSTATE_GET,
    RTDRV_SVLAN_LOOKUPTYPE_GET,
    RTDRV_SVLAN_SP2CUNMATCHCTAGGING_GET,
    RTDRV_SVLAN_PRIORITY_GET,
    RTDRV_SVLAN_FID_GET,
    RTDRV_SVLAN_FIDENABLE_GET,
    RTDRV_SVLAN_ENHANCEDFID_GET,
    RTDRV_SVLAN_ENHANCEDFIDENABLE_GET,
    RTDRV_SVLAN_DMACVIDSELFORCEDSTATE_GET,
};

enum rtdrv_switch_get_e
{
    RTDRV_SWITCH_BASED_GET= (RTDRV_BASE_CTL + RTDRV_SWITCH_OFFSET + 1),
    RTDRV_SWITCH_DEVICEINFO_GET,
    RTDRV_SWITCH_PHYPORTID_GET,
    RTDRV_SWITCH_LOGICALPORT_GET,
    RTDRV_SWITCH_PORTIDINMASK_CHECK,
    RTDRV_SWITCH_PORTMASK_CLEAR,
    RTDRV_SWITCH_NEXTPORTINMASK_GET,
    RTDRV_SWITCH_MAXPKTLENLINKSPEED_GET,
    RTDRV_SWITCH_MGMTMACADDR_GET,

};

enum rtdrv_trap_get_e
{
    RTDRV_TRAP_BASED_GET= (RTDRV_BASE_CTL + RTDRV_TRAP_OFFSET + 1),
    RTDRV_TRAP_REASONTRAPTOCPUPRIORITY_GET,
    RTDRV_TRAP_IGMPCTRLPKT2CPUENABLE_GET,
    RTDRV_TRAP_MLDCTRLPKT2CPUENABLE_GET,
    RTDRV_TRAP_PORTIGMPMLDCTRLPKTACTION_GET,
    RTDRV_TRAP_IPMCASTPKT2CPUENABLE_GET,
    RTDRV_TRAP_L2MCASTPKT2CPUENABLE_GET,
    RTDRV_TRAP_RMAACTION_GET,
    RTDRV_TRAP_RMAPRI_GET,
    RTDRV_TRAP_OAMPDUACTION_GET,
    RTDRV_TRAP_OAMPDUPRI_GET,
};

enum rtdrv_trunk_get_e
{
    RTDRV_TRUNK_BASED_GET= (RTDRV_BASE_CTL + RTDRV_TRUNK_OFFSET + 1),
    RTDRV_TRUNK_DISTRIBUTIONALGORITHM_GET,
    RTDRV_TRUNK_PORT_GET,
    RTDRV_TRUNK_HASHMAPPINGTABLE_GET,
    RTDRV_TRUNK_MODE_GET,
    RTDRV_TRUNK_TRAFFICSEPARATE_GET,
    RTDRV_TRUNK_PORTQUEUEEMPTY_GET,
    RTDRV_TRUNK_TRAFFICPAUSE_GET,

};

enum rtdrv_vlan_get_e
{
    RTDRV_VLAN_BASED_GET= (RTDRV_BASE_CTL + RTDRV_VLAN_OFFSET + 1),
    RTDRV_VLAN_FID_GET,
    RTDRV_VLAN_FIDMODE_GET,
    RTDRV_VLAN_PORT_GET,
    RTDRV_VLAN_EXTPORT_GET,
    RTDRV_VLAN_STG_GET,
    RTDRV_VLAN_PRIORITY_GET,
    RTDRV_VLAN_PRIORITYENABLE_GET,
    RTDRV_VLAN_POLICINGENABLE_GET,
    RTDRV_VLAN_POLICINGMETERIDX_GET,
    RTDRV_VLAN_PORTACCEPTFRAMETYPE_GET,
    RTDRV_VLAN_VLANFUNCTIONENABLE_GET,
    RTDRV_VLAN_PORTIGRFILTERENABLE_GET,
    RTDRV_VLAN_LEAKY_GET,
    RTDRV_VLAN_PORTLEAKY_GET,
    RTDRV_VLAN_KEEPTYPE_GET,
    RTDRV_VLAN_PORTPVID_GET,
    RTDRV_VLAN_EXTPORTPVID_GET,
    RTDRV_VLAN_PROTOGROUP_GET,
    RTDRV_VLAN_PORTPROTOVLAN_GET,
    RTDRV_VLAN_TAGMODE_GET,
    RTDRV_VLAN_PORTFID_GET,
    RTDRV_VLAN_PORTPRIORITY_GET,
    RTDRV_VLAN_PORTEGRTAGKEEPTYPE_GET,
    RTDRV_VLAN_TRANSPARENTENABLE_GET,
    RTDRV_VLAN_CFIKEEPENABLE_GET,
    RTDRV_VLAN_RESERVEDVIDACTION_GET,
    RTDRV_VLAN_TAGMODEIP4MC_GET,
    RTDRV_VLAN_TAGMODEIP6MC_GET,
    RTDRV_VLAN_LUTSVLANHASHSTATE_GET,


};


enum rtdrv_rate_get_e
{
    RTDRV_RATE_PORTIGRBANDWIDTHCTRLRATE_GET= (RTDRV_BASE_CTL + RTDRV_RATE_OFFSET + 1),
    RTDRV_RATE_PORTIGRBANDWIDTHCTRLINCLUDEIFG_GET,
    RTDRV_RATE_PORTEGRBANDWIDTHCTRLRATE_GET,
    RTDRV_RATE_EGRBANDWIDTHCTRLINCLUDEIFG_GET,
    RTDRV_RATE_PORTEGRBANDWIDTHCTRLINCLUDEIFG_GET,
    RTDRV_RATE_EGRQUEUEBWCTRLENABLE_GET,
    RTDRV_RATE_EGRQUEUEBWCTRLMETERIDX_GET,
    RTDRV_RATE_STORMCONTROLMETERIDX_GET,
    RTDRV_RATE_STORMCONTROLPORTENABLE_GET,
    RTDRV_RATE_STORMCONTROLENABLE_GET,
    RTDRV_RATE_STORMBYPASS_GET,
    RTDRV_RATE_SHAREMETER_GET,
    RTDRV_RATE_SHAREMETERBUCKET_GET,
    RTDRV_RATE_SHAREMETEREXCEED_GET
};

enum rtdrv_gpon_get_e
{
    RTDRV_GPON_SN_GET = (RTDRV_BASE_CTL + RTDRV_GPON_OFFSET),
    RTDRV_GPON_PWD_GET,
    RTDRV_GPON_STATE_GET,
    RTDRV_GPON_ALARM_GET,
    RTDRV_GPON_PARA_GET,
    RTDRV_GPON_TCONT_GET,
    RTDRV_GPON_DS_FLOW_GET,
    RTDRV_GPON_US_FLOW_GET,
    RTDRV_GPON_BC_PASS_GET,
    RTDRV_GPON_NON_MC_PASS_GET,
    RTDRV_GPON_IP_PTN_GET,
    RTDRV_GPON_FLT_MODE_GET,
    RTDRV_GPON_FS_MODE_GET,
    RTDRV_GPON_MAC_ENTRY_GET,
    RTDRV_GPON_RDI_GET,
    RTDRV_GPON_PWR_LEVEL_GET,
    RTDRV_GPON_TX_LASER_GET,
    RTDRV_GPON_FS_IDLE_GET,
#if 0
    RTDRV_GPON_FS_PRBS_GET,
#endif
    RTDRV_GPON_DS_FEC_GET,
    RTDRV_GPON_VERSION_SHOW,
    RTDRV_GPON_DEV_SHOW,
    RTDRV_GPON_GTC_SHOW,
    RTDRV_GPON_TCONT_SHOW,
    RTDRV_GPON_DS_FLOW_SHOW,
    RTDRV_GPON_US_FLOW_SHOW,
    RTDRV_GPON_MAC_TABLE_SHOW,
    RTDRV_GPON_GLB_CNT_SHOW,
    RTDRV_GPON_TCONT_CNT_SHOW,
    RTDRV_GPON_FLOW_CNT_SHOW,
    RTDRV_GPON_TEST_GET,
    RTDRV_GPON_AUTO_TCONT_GET,
    RTDRV_GPON_AUTO_BOH_GET,
    RTDRV_GPON_EQD_OFFSET_GET,
    RTDRV_GPON_EXTMSG_GET,
};


enum rtdrv_pkt_get_e
{
    RTDRV_PKT_RXDUMP_GET = (RTDRV_BASE_CTL + RTDRV_PKT_OFFSET),
    RTDRV_PKTFIFO_RXDUMP_GET
};

enum rtdrv_gpio_get_e
{
    RTDRV_GPIO_STATE_GET= (RTDRV_BASE_CTL + RTDRV_GPIO_OFFSET),
    RTDRV_GPIO_MODE_GET,
    RTDRV_GPIO_DATABIT_GET,
    RTDRV_GPIO_INTR_GET,
    RTDRV_GPIO_IMS_GET,
};

enum rtdrv_i2c_get_e
{
    RTDRV_I2C_ENABLE_GET = (RTDRV_BASE_CTL + RTDRV_I2C_OFFSET),
    RTDRV_I2C_WIDTH_GET,
    RTDRV_I2C_READ,
    RTDRV_I2C_CLOCK_GET,
    RTDRV_I2C_EEPMIRROR_GET,
    RTDRV_I2C_EEPMIRROR_READ,
};


enum rtdrv_l34lite_get_e
{
    RTDRV_L34_NETIF_GET = (RTDRV_BASE_CTL + RTDRV_L34_LITE_OFFSET),
    RTDRV_L34_ARP_GET,
    RTDRV_L34_ROUTE_GET,
    RTDRV_L34_CONNECTTRACK_GET,
    RTDRV_L34_GLOBALCFG_GET,
    RTDRV_L34_ROUTE6_GET,
    RTDRV_L34_NEIGH6_GET,

};

#if defined(CONFIG_RTK_L34_ENABLE) && CONFIG_RTK_L34_ENABLE > 0
/* RG GET ENUM */
enum rtdrv_rg_get_e{
    RTDRV_RG_DRIVERVERSION_GET =  (RTDRV_BASE_CTL +RTDRV_RG_OFFSET),
    RTDRV_RG_INITPARAM_GET,
    RTDRV_RG_INITPARAM_SET,
    RTDRV_RG_LANINTERFACE_ADD,
    RTDRV_RG_DHCPSERVERSTATICALLOC_ADD,
    RTDRV_RG_DHCPSERVERSTATICALLOC_FIND,
    RTDRV_RG_WANINTERFACE_ADD,
    RTDRV_RG_STATICINFO_SET,
    RTDRV_RG_DHCPCLIENTINFO_SET,
    RTDRV_RG_PPPOECLIENTINFOBEFOREDIAL_SET,
    RTDRV_RG_PPPOECLIENTINFOAFTERDIAL_SET,
    RTDRV_RG_INTFINFO_FIND,
    RTDRV_RG_CVLAN_ADD,
    RTDRV_RG_VLANBINDING_ADD,
    RTDRV_RG_VLANBINDING_FIND,
    RTDRV_RG_ALGSERVERINLANAPPSIPADDR_ADD,
    RTDRV_RG_ALGAPPS_GET,
    RTDRV_RG_DMZHOST_SET,
    RTDRV_RG_DMZHOST_GET,
    RTDRV_RG_VIRTUALSERVER_ADD,
    RTDRV_RG_VIRTUALSERVER_FIND,
    RTDRV_RG_ACLFILTERANDQOS_ADD,
    RTDRV_RG_ACLFILTERANDQOS_FIND,
    RTDRV_RG_MACFILTER_ADD,
    RTDRV_RG_MACFILTER_FIND,
    RTDRV_RG_URLFILTERSTRING_ADD,
    RTDRV_RG_URLFILTERSTRING_FIND,
    RTDRV_RG_UPNPCONNECTION_ADD,
    RTDRV_RG_UPNPCONNECTION_FIND,
    RTDRV_RG_NAPTCONNECTION_ADD,
    RTDRV_RG_NAPTCONNECTION_FIND,
    RTDRV_RG_MULTICASTFLOW_ADD,
    RTDRV_RG_MULTICASTFLOW_FIND,
    RTDRV_RG_MULTICASTDATAINGRESSALLLOWEDPORTMASK_SET,
    RTDRV_RG_MULTICASTDATAINGRESSALLLOWEDPORTMASK_GET,
    RTDRV_RG_MACENTRY_ADD,
    RTDRV_RG_MACENTRY_FIND,
    RTDRV_RG_ARPENTRY_ADD,
    RTDRV_RG_ARPENTRY_FIND,
    RTDRV_RG_NEIGHBORENTRY_ADD,
    RTDRV_RG_NEIGHBORENTRY_FIND,
    RTDRV_RG_SOFTWARESOURCEADDRLEARNINGLIMIT_GET,
    RTDRV_RG_DOSPORTMASKENABLE_GET,
    RTDRV_RG_DOSTYPE_GET,
    RTDRV_RG_DOSFLOODTYPE_GET,
    RTDRV_RG_PORTMIRROR_GET,
    RTDRV_RG_PORTEGRBANDWIDTHCTRLRATE_GET,
    RTDRV_RG_PORTIGRBANDWIDTHCTRLRATE_GET,
    RTDRV_RG_PHYPORTFORCEABILITY_GET,
    RTDRV_RG_PORTMIBINFO_GET,
    RTDRV_RG_STORMCONTROL_ADD,
    RTDRV_RG_STORMCONTROL_FIND,
    RTDRV_RG_SHAREMETER_GET,
	RTDRV_RG_QOSSTRICTPRIORITYORWEIGHTFAIRQUEUE_GET,
    RTDRV_RG_QOSINTERNALPRIMAPTOQUEUEID_GET,
    RTDRV_RG_QOSINTERNALPRIDECISIONBYWEIGHT_GET,
    RTDRV_RG_QOSDSCPREMAPTOINTERNALPRI_GET,
	RTDRV_RG_QOSPORTBASEDPRIORITY_GET,
	RTDRV_RG_QOSDOT1PPRIREMAPTOINTERNALPRI_GET,
	RTDRV_RG_QOSDSCPREMARKEGRESSPORTENABLEANDSRCSELECT_GET,
	RTDRV_RG_QOSDSCPREMARKBYINTERNALPRI_GET,
	RTDRV_RG_QOSDSCPREMARKBYDSCP_GET,
	RTDRV_RG_QOSDOT1PPRIREMARKBYINTERNALPRIEGRESSPORTENABLE_GET,
	RTDRV_RG_QOSDOT1PPRIREMARKBYINTERNALPRI_GET,
	RTDRV_RG_PORTBASEDCVLANID_GET,
	RTDRV_RG_NAPTEXTPORTGET,
};
#endif

enum rtdrv_EPON_get_e
{
    RTDRV_EPON_INTRMASK_GET = (RTDRV_BASE_CTL + RTDRV_EPON_OFFSET),
    RTDRV_EPON_INTR_GET,
    RTDRV_EPON_LLID_ENTRY_GET,
    RTDRV_EPON_FORCELASERSTATE_GET,
    RTDRV_EPON_LASERTIME_GET,
    RTDRV_EPON_SYNCTIME_GET,
    RTDRV_EPON_REGISTERREQ_GET,
    RTDRV_EPON_CHURNINGKEY_GET,
    RTDRV_EPON_USFECSTATE_GET,
    RTDRV_EPON_DSFECSTATE_GET,
    RTDRV_EPON_MIBCOUNTER_GET,
    RTDRV_EPON_LOSSTATE_GET,
    RTDRV_EPON_MPCPTIMEOUTVAL_GET,
    RTDRV_EPON_OPTICALPOLARITY_GET,
    RTDRV_EPON_FECSTATE_GET,
    RTDRV_EPON_LLIDENTRYNUM_GET
};


enum rtdrv_time_get_e
{
    RTDRV_TIME_BASED_GET= (RTDRV_BASE_CTL + RTDRV_TIME_OFFSET + 1),
    RTDRV_TIME_PORTTRANSPARENTENABLE_GET,
    RTDRV_TIME_PORTPTPENABLE_GET,
    RTDRV_TIME_CURTIME_GET,
    RTDRV_TIME_CURTIME_LATCH,
    RTDRV_TIME_REFTIME_GET,
    RTDRV_TIME_FREQUENCY_GET,
    RTDRV_TIME_PTPIGRMSGACTION_GET,
    RTDRV_TIME_PTPEGRMSGACTION_GET,
    RTDRV_TIME_MEANPATHDELAY_GET,
    RTDRV_TIME_RXTIME_GET,
};


/***** end of RTDRV_GET *****/



/*module API parameter*/
typedef struct rtdrv_regCfg_s
{
    uint32  reg;
    uint32  bit;
    uint32  value;
} rtdrv_regCfg_t;




typedef struct rtdrv_addrCfg_s
{
    uint32  address;
    uint32  value;
} rtdrv_addrCfg_t;


/*
 * Data Declaration
 */
typedef struct rtdrv_logCfg_s
{
    uint32 log_level;
    uint32 log_level_mask;
    uint32 log_level_type;
    uint32 log_module_mask;
    uint32 log_format;
} rtdrv_logCfg_t;

typedef struct rtdrv_ponAlarm_s
{
    rtk_gpon_alarm_type_t   type;
    int32                   status;
} rtdrv_ponAlarm_t;

typedef union rtdrv_pon_union_u
{
    rtk_gpon_onu_activation_para_t  timer;
    rtk_gpon_laser_para_t           laser;
    rtk_gpon_ds_physical_para_t     ds_phy;
    rtk_gpon_ds_ploam_para_t        ds_plm;
    rtk_gpon_ds_bwMap_para_t        ds_bw;
    rtk_gpon_ds_gem_para_t          ds_gem;
    rtk_gpon_ds_eth_para_t          ds_eth;
    rtk_gpon_ds_omci_para_t         ds_omci;
    rtk_gpon_us_physical_para_t     us_phy;
    rtk_gpon_us_ploam_para_t        us_plm;
    rtk_gpon_us_dbr_para_t          us_dbr;

} rtdrv_pon_union_t;

typedef struct rtdrv_ponPara_s
{
    rtk_gpon_patameter_type_t   type;
    rtdrv_pon_union_t           para;
} rtdrv_ponPara_t;

typedef struct rtdrv_tcont_s
{
    rtk_gpon_tcont_ind_t        ind;
    rtk_gpon_tcont_attr_t       attr;
} rtdrv_tcont_t;

typedef struct rtdrv_dsFlow_s
{
    uint32                  flowId;
    rtk_gpon_dsFlow_attr_t  attr;
} rtdrv_dsFlow_t;

typedef struct rtdrv_usFlow_s
{
    uint32                  flowId;
    rtk_gpon_usFlow_attr_t  attr;
} rtdrv_usFlow_t;

typedef struct rtdrv_tcont_cnt_s
{
    uint32                              tcont;
    rtk_gpon_tcont_performance_type_t   cnt_type;
} rtdrv_tcont_cnt_t;

typedef struct rtdrv_flow_cnt_s
{
    uint32                              flow;
    rtk_gpon_flow_performance_type_t    cnt_type;
} rtdrv_flow_cnt_t;

typedef struct rtdrv_ip_ptn_s
{
    uint32 ipv4_pattern;
    uint32 ipv6_pattern;

} rtdrv_ip_ptn_t;

typedef struct rtdrv_fs_mode_s
{
    rtk_gpon_mc_force_mode_t ipv4;
    rtk_gpon_mc_force_mode_t ipv6;

} rtdrv_fs_mode_t;


typedef struct rtdrv_mac_entry_s
{
    uint32                      index;
    rtk_gpon_macTable_entry_t   entry;
} rtdrv_mac_entry_t;



#if defined(OLD_FPGA_DEFINED)
typedef struct rtdrv_pktGen_s
{
    uint32  item;
    uint32  tcont;
    uint32  gem;
    int32   omci;
    uint32  buf_len;
    uint8   buf[2048];
} rtdrv_pktGen_t;
#endif

typedef struct rtdrv_phyCfg_s
{
    uint8   phy_id;
    uint8   reg;
    uint16  value;
} rtdrv_phyCfg_t;


typedef struct rtdrv_pktdbg_s
{
    struct  pkt_dbg_tx_info tx_info;
    struct  pkt_dbg_rx_info rx_info;
    uint32  enable;
    uint16  length;
    uint16  rx_length;
    uint8   buf[2048];
} rtdrv_pktdbg_t;

typedef struct rtdrv_pktfifodbg_s
{
    uint16   fifo_idx;
    uint8   valid;
    uint8   buf[64];
} rtdrv_pktfifodbg_t;

typedef struct rtdrv_rateCfg_s
{
    rtk_port_t      port;
    uint32          rate;
    rtk_enable_t    ifgInclude;
    rtk_enable_t    enable;
    rtk_qid_t       queue;
    uint32          meterIndex;
    rtk_rate_storm_group_t  stormType;
    uint32                  index;
    rtk_rate_storm_group_ctrl_t  stormCtrl;
    rtk_storm_bypass_t type;
    uint32 bucketSize;
    uint32 isExceed;
} rtdrv_rateCfg_t;


typedef struct rtdrv_aclCfg_s
{
    rtk_acl_template_t          	aclTemplate;
    rtk_acl_field_entry_t       	fieldEntry;
    rtk_acl_ingress_entry_t     	aclRule;
    rtk_acl_field_t             	aclField;
    uint32                      	index;
    rtk_port_t                  	port;
    rtk_filter_unmatch_action_type_t	action;
    rtk_enable_t                	state;
    rtk_acl_rangeCheck_ip_t     	ipRangeEntry;
    rtk_acl_rangeCheck_vid_t    	vidRangeEntry;
    rtk_acl_rangeCheck_l4Port_t 	l4PortRangeEntry;
    rtk_acl_rangeCheck_pktLength_t	pktLenRangeEntry;
    rtk_acl_igr_rule_mode_t     	mode;
}rtdrv_aclCfg_t;

typedef struct rtdrv_vlanCfg_s
{
    rtk_vlan_t                  	vid;
    uint32                      	restoreDefaultVlan;
    rtk_fid_t                   	fid;
    rtk_fidMode_t               	mode;
    rtk_portmask_t              	memberPortmask;
    rtk_portmask_t              	untagPortmask;
    rtk_portmask_t              	member_portmask;
    rtk_portmask_t              	untag_portmask;
    rtk_portmask_t              	ext_portmask;
    rtk_stg_t                   	stg;
    rtk_pri_t                   	priority;
    rtk_enable_t                	enable;
    uint32                      	index;
    rtk_port_t                  	port;
    rtk_vlan_acceptFrameType_t  	acceptFrameType;
    rtk_leaky_type_t            	leakyType;
    rtk_vlan_keep_type_t        	keepType;
    uint32                      	pvid;
    uint32                      	extPort;
    uint32                      	protoGroupIdx;
    rtk_vlan_protoGroup_t       	protoGroup;
    rtk_vlan_protoVlanCfg_t     	vlanCfg;
    rtk_vlan_tagMode_t          	tagMode;
    rtk_port_t                  	egr_port;
    rtk_portmask_t              	igr_portmask;
    rtk_vlan_tagKeepType_t      	type;
    rtk_vlan_resVidAction_t     	action_vid0;
    rtk_vlan_resVidAction_t     	action_vid4095;
    rtk_vlan_tagModeIpmc_t          tagModeIpmc;
}rtdrv_vlanCfg_t;

typedef struct rtdrv_portCfg_s
{
    rtk_port_t                  	port;
    rtk_port_linkStatus_t       	linkStatus;
    rtk_port_speed_t            	speed;
    rtk_port_duplex_t           	duplex;
    uint32                      	txStatus;
    uint32                      	rxStatus;
    rtk_enable_t                	enable;
    rtk_port_phy_ability_t      	ability;
    rtk_enable_t                	flowControl;
    uint32                      	page;
    rtk_port_phy_reg_t          	reg;
    uint32                      	data;
    rtk_port_masterSlave_t      	masterSlave;
    rtk_port_phy_test_mode_t    	testMode;
    rtk_portmask_t              	portmask;
    rtk_portmask_t              	extPortmask;
    rtk_port_isoConfig_t        	mode;
    rtk_leaky_type_t            	type;
    uint32                      	second;
    uint32                      	status;
    rtk_port_crossOver_mode_t   	crossoverMode;
    rtk_efid_t                  	efid;
    rtk_rtctResult_t            	result;
	rtk_port_macAbility_t			macAbility;
    rtk_port_ext_mode_t         	ext_mode;
    uint32                      	txDelay;
    uint32                      	rxDelay;
}rtdrv_portCfg_t;

typedef struct rtdrv_unitCfg_s
{
    uint32  data;
    uint64  data64;
} rtdrv_unitCfg_t;

typedef struct rtdrv_gpioCfg_s
{
    uint32                      	gpioId;
    rtk_enable_t                	enable;
    rtk_gpio_mode_t            mode;
    uint32                        	data;
	rtk_gpio_intrMode_t				intrMode;

}rtdrv_gpioCfg_t;

typedef struct rtdrv_i2cCfg_s
{
    rtk_i2c_port_t                  port;
    rtk_enable_t                	enable;
    rtk_i2c_width_t             	width;
    uint32                      	devID;
    uint32                      	regAddr;
    uint32                      	data;
    uint32                          clock;
    rtk_i2c_addr_ext_mode_t         addrExtMode;
}rtdrv_i2cCfg_t;

typedef struct rtdrv_intrCfg_s
{
    rtk_intr_polarity_t         	polar;
    rtk_intr_type_t             	intr;
    rtk_enable_t                	enable;
    rtk_enable_t                	status;
    rtk_portmask_t              	portMask;
    uint32                      	imrValue;
}rtdrv_intrCfg_t;


typedef struct rtdrv_rldpCfg_s
{
    rtk_rldp_config_t           	config;
    rtk_port_t                  	port;
    rtk_rldp_portConfig_t       	portConfig;
    rtk_rldp_status_t           	status;
    rtk_rldp_portStatus_t       	portStatus;
    rtk_rlpp_trapType_t         	type;
}rtdrv_rldpCfg_t;


typedef struct rtdrv_ponmacCfg_s
{
    rtk_ponmac_queue_t          	queue;
    rtk_ponmac_queueCfg_t       	queueCfg;
    uint32                      	flow;
    rtk_qos_scheduling_type_t   	queueType;
    rtk_transceiver_parameter_type_t    type;
    rtk_transceiver_data_t              data;
    rtk_ponmac_mode_t               mode;
}rtdrv_ponmacCfg_t;


typedef struct rtdrv_stpCfg_s
{
    uint32                      	msti;
    rtk_port_t                  	port;
    rtk_stp_state_t             	stpState;
}rtdrv_stpCfg_t;


typedef struct rtdrv_switchCfg_s
{
    rtk_switch_devInfo_t        	devInfo;
    rtk_switch_port_name_t      	portName;
    int32                       	portId;
    rtk_portmask_t              	portMask;
    rtk_switch_maxPktLen_linkSpeed_t	speed;
    uint32                      	len;
    rtk_mac_t                   	mac;
    uint32                      	chipId;
    uint32                      	rev;
    uint32                      	subtype;
}rtdrv_switchCfg_t;


typedef struct rtdrv_ledCfg_s
{
    rtk_led_operation_t         	opMode;
    rtk_led_active_t            	active;
    rtk_led_blinkGroup_t        	group;
    rtk_led_blink_rate_t        	blinkRate;
    uint32                      	ledIdx;
    rtk_led_type_t              	type;
    rtk_led_config_t            	config;
    rtk_led_force_mode_t        	mode;
    rtk_enable_t                	state;
}rtdrv_ledCfg_t;


typedef struct rtdrv_svlanCfg_s
{
    rtk_vlan_t                  	svid;
    rtk_port_t                  	port;
    rtk_enable_t                	enable;
    rtk_portmask_t              	svlanPortmask;
    rtk_portmask_t              	svlanUntagPortmask;
    uint32                      	svlanIndex;
    uint32                      	svlanTagId;
    uint32                      	svlan_index;
    uint32                      	svlan_tag_id;
    rtk_svlan_pri_ref_t         	ref;
    rtk_svlan_memberCfg_t       	svlan_cfg;
    ipaddr_t                    	ipmc;
    ipaddr_t                    	ipmcMsk;
    rtk_mac_t                   	mac;
    rtk_mac_t                   	macMsk;
    rtk_port_t                  	dstPort;
    rtk_vlan_t                  	cvid;
    rtk_svlan_action_t          	action;
    rtk_pri_t                   	priority;
    rtk_svlan_lookupType_t      	type;
    rtk_enable_t                	state;
    rtk_fid_t                   	fid;
    rtk_efid_t                  	efid;
}rtdrv_svlanCfg_t;


typedef struct rtdrv_qosCfg_s
{
    uint32                      	grpIdx;
    rtk_qos_priSelWeight_t      	weightOfPriSel;
    rtk_port_t                  	port;
    rtk_pri_t                   	intPri;
    uint32                      	dscp;
    uint32                      	dp;
    rtk_pri_t                   	dot1pPri;
    uint32                      	group;
    rtk_qos_pri2queue_t         	pri2qid;
    rtk_enable_t                	enable;
    rtk_qos_dscpRmkSrc_t        	type;
    uint32                      	rmkDscp;
    rtk_pri_t                   	rempPri;
    rtk_qos_queue_weights_t     	qweights;
    uint32                    	    priSelGrpIdx;
    rtk_qos_scheduling_type_t   	queueType;
}rtdrv_qosCfg_t;

typedef struct rtdrv_classifyCfg_s
{
    rtk_classify_cfg_t          	    classifyCfg;
    uint32                      	    entryIdx;
    rtk_classify_field_t        	    classifyField;
    rtk_classify_unmatch_action_t	    action;
    rtk_classify_rangeCheck_l4Port_t	rangeEntry;
    rtk_classify_rangeCheck_ip_t	    ipRangeEntry;
    rtk_port_t                  	    port;
    rtk_classify_cf_sel_t       	    cfSel;
    rtk_pri_t                   	    pri;
    rtk_dscp_t                  	    dscp;
    rtk_classify_permit_sel_t   	    permitSel;
    rtk_classify_us_1premark_prior_t    prior;
}rtdrv_classifyCfg_t;

typedef struct rtdrv_l2Cfg_s
{
    rtk_enable_t                	enable;
    rtk_l2_flushCfg_t           	config;
    uint32                      	status;
    uint32                      	macCnt;
    rtk_l2_limitLearnCntAction_t	learningAction;
    rtk_port_t                  	port;
    uint32                      	agingTime;
    rtk_l2_lookupMissType_t     	type;
    rtk_action_t                	action;
    rtk_portmask_t              	flood_portmask;
    rtk_port_t                  	flood_port;
    rtk_l2_newMacLrnMode_t      	lrnMode;
    rtk_action_t                	fwdAction;
    int32                       	scanIdx;
    rtk_l2_ucastAddr_t          	l2UcastData;
    rtk_l2_mcastAddr_t          	l2McastData;
    rtk_l2_ipMcastAddr_t        	ipMcastData;
    rtk_l2_addr_table_t         	l2Entry;
    rtk_l2_ucastAddr_t          	l2Addr;
    uint32                      	includeStatic;
    rtk_l2_mcastAddr_t          	mcastAddr;
    rtk_l2_ipmcMode_t           	mode;
    rtk_l2_ipmcHashOp_t         	ipmcHash;
    ipaddr_t                    	gip;
    rtk_portmask_t              	portmask;
    rtk_l2_ipMcastAddr_t        	ipmcastAddr;
    rtk_portmask_t              	filter_portmask;
    rtk_portmask_t              	ext_portmask;
}rtdrv_l2Cfg_t;


typedef struct rtdrv_l34Cfg_s
{
    uint32                      		idx;
    rtk_l34_netif_entry_t       	netifEntry;
    rtk_l34_arp_entry_t         	arpEntry;
    rtk_l34_pppoe_entry_t       	ppEntry;
    rtk_l34_routing_entry_t     	routEntry;
    rtk_l34_nexthop_entry_t     	nextHopEntry;
    rtk_l34_ext_intip_entry_t   	extIpEntry;
    int8                        		forced;
    rtk_l34_naptInbound_entry_t 	naptrEntry;
    rtk_l34_naptOutbound_entry_t	naptEntry;
    rtk_l34_ipmcTrans_entry_t   	ipmcEntry;
    rtk_l34_table_type_t        	type;
    rtk_binding_entry_t         		bindEntry;
    rtk_l34_bindType_t          	bindType;
    rtk_l34_bindAct_t           		bindAction;
    rtk_wanType_entry_t         	wanTypeEntry;
    rtk_ipv6Routing_entry_t     	ipv6RoutEntry;
    rtk_ipv6Neighbor_entry_t    	ipv6NeighborEntry;
    rtk_l34_hsba_mode_t         	hsabMode;
    rtk_l34_hsa_t               		hsaData;
    rtk_l34_hsb_t               		hsbData;
    rtk_l34_portWanMapType_t    	portWanMapType;
    rtk_l34_portWanMap_entry_t  	portWanMapEntry;
    rtk_l34_globalStateType_t   	stateType;
    rtk_enable_t                		state;
    rtk_l34_lookupMode_t        	lookupMode;
    rtk_l34_portType_t          	portType;
    uint32                      		portId;
    uint32                      		wanIdx;
    rtk_l34_wanRouteMode_t      	wanRouteMode;
	uint32                      		index;
    rtk_enable_t                		arpIndicator;
    rtk_enable_t                		naptIndicator;
    rtk_enable_t                		pppIndicator;
    rtk_enable_t                		neighIndicator;
    rtk_enable_t                	       hsdState;
    rtk_l34_l4_trf_t            		l4TrfTable;
    uint32                      		l4EntryIndex;
    rtk_enable_t                		indicator;
    rtk_l34_arp_trf_t           		arpTrfTable;
    uint32                      		arpEntryIndex;
    uint32                      		naptMaps;
    uint32                      		arpMaps;
}rtdrv_l34Cfg_t;


typedef struct rtdrv_l34liteCfg_s
{
    uint32                      	netifId;
    rtk_l34_netifType_t         	netifType;
    rtk_mac_t                   	ifmac;
    rtk_enable_t                	pppState;
    uint32                      	sessionId;
    rtk_enable_t                	passThroughState;
    rtk_vlan_t                  	vid;
    rtk_pri_t                   	defaultPri;
    rtk_enable_t                	routingState;
    uint32                      	mtu;
    rtk_ip_addr_t               	ipaddr;
    uint32                      	ipmask;
    rtk_l34_natType_t           	natType;
    rtk_ip_addr_t               	internalp;
    rtk_enable_t                	ifState;
    rtk_l34_netifInfo_t         	netifInfo;
    rtk_mac_t                   	mac;
    rtk_l34_arpInfo_t           	arpInfo;
    rtk_l34_routeType_t         	routeType;
    rtk_l34_routeTable_t        	routeTable;
    uint32                      	routeIndex;
    rtk_l34_routeInfo_t         	routeInfo;
    rtk_l34_direct_t            	dir;
    rtk_l34_tuple_t             	tuple;
    rtk_ip_addr_t               	natIp;
    uint16                      	natport;
    rtk_l34_connectInfo_t       	connectInfo;
    rtk_l34_global_cfg_t        	globalCfg;
    rtk_l34_ipv6RouteType_t     	route6Type;
    rtk_l34_route6Table_t       	route6Table;
    rtk_ipv6_addr_t             	ip6addr;
    uint32                      	prefixLen;
    uint32                      	index;
    rtk_l34_route6Info_t        	route6Info;
    rtk_l34_neigh6Info_t        	neigh6Info;
    rtk_mac_t                   	gatewayMac;
    rtk_mac_t                   	hwAddr;
}rtdrv_l34liteCfg_t;


typedef struct rtdrv_trunkCfg_s
{
    uint32                      	trkGid;
    uint32                      	algoBitmask;
    rtk_portmask_t              	trunkMemberPortmask;
    uint32                      	trk_gid;
    rtk_trunk_hashVal2Port_t    	hash2Port_array;
    rtk_trunk_mode_t            	mode;
    rtk_trunk_separateType_t    	separateType;
    rtk_portmask_t              	empty_portmask;
    rtk_enable_t                	enable;
}rtdrv_trunkCfg_t;


typedef struct rtdrv_mirrorCfg_s
{
    rtk_port_t                  	mirroringPort;
    rtk_portmask_t              	mirroredRxPortmask;
    rtk_portmask_t              	mirroredTxPortmask;
    rtk_enable_t                	enable;
}rtdrv_mirrorCfg_t;


typedef struct rtdrv_dot1xCfg_s
{
    rtk_port_t                  	port;
    rtk_action_t                	unauthAction;
    rtk_enable_t                	enable;
    rtk_dot1x_auth_status_t     	port_auth;
    rtk_dot1x_direction_t       	port_direction;
    rtk_dot1x_direction_t       	mac_direction;
    rtk_vlan_t                  	guest_vlan;
    rtk_dot1x_guestVlanBehavior_t	behavior;
    rtk_pri_t                   	priority;
}rtdrv_dot1xCfg_t;

typedef struct rtdrv_cpuCfg_s
{
    rtk_portmask_t              	port_mask;
    rtk_cpu_tag_fmt_t           	mode;
    rtk_enable_t                	state;
}rtdrv_cpuCfg_t;

typedef struct rtdrv_trapCfg_s
{
    rtk_trap_reason_type_t      	type;
    rtk_pri_t                   	priority;
    rtk_enable_t                	enable;
    rtk_port_t                  	port;
    rtk_trap_igmpMld_type_t     	igmpMldType;
    rtk_action_t                	action;
    rtk_mac_t                   	rmaFrame;
    rtk_trap_rma_action_t       	rmaAction;
}rtdrv_trapCfg_t;

typedef struct rtdrv_eponCfg_s
{
    rtk_epon_intrType_t         	intrType;
    rtk_enable_t                	state;
    uint8                       	llidIdx;
    rtk_epon_llid_entry_t       	llidEntry;
    rtk_epon_laser_status_t     	laserStatus;
    uint8                       	lasetOnTime;
    uint8                       	lasetOffTime;
    uint8                       	syncTime;
    rtk_epon_regReq_t           	regEntry;
    rtk_epon_churningKeyEntry_t 	entry;
    rtk_epon_counter_t          	counter;
    uint32                      	timeVal;
    rtk_epon_polarity_t         	polarity;
    uint32                      	num;    
}rtdrv_eponCfg_t;


#if defined(CONFIG_RTK_L34_ENABLE) && CONFIG_RTK_L34_ENABLE > 0
/* RG CFG */
typedef struct rtdrv_rg_driverVersion_get_s
{
    rtk_rg_VersionString_t      	version_string;
} rtdrv_rg_driverVersion_get_t;

typedef struct rtdrv_rg_initParam_get_s
{
    rtk_rg_initParams_t         	init_param;
} rtdrv_rg_initParam_get_t;

typedef struct rtdrv_rg_initParam_set_s
{
    rtk_rg_initParams_t         	init_param;
} rtdrv_rg_initParam_set_t;

typedef struct rtdrv_rg_lanInterface_add_s
{
    rtk_rg_lanIntfConf_t        	lan_info;
    int                         	intf_idx;
} rtdrv_rg_lanInterface_add_t;

typedef struct rtdrv_rg_wanInterface_add_s
{
    rtk_rg_wanIntfConf_t        	wanintf;
    int                         	wan_intf_idx;
} rtdrv_rg_wanInterface_add_t;


typedef struct rtdrv_rg_dhcpRequest_set_s
{
    int                                 wan_intf_idx;
} rtdrv_rg_dhcpRequest_set_t;

typedef struct rtdrv_rg_staticInfo_set_s
{
    int                         	wan_intf_idx;
    rtk_rg_ipStaticInfo_t     	static_info;
} rtdrv_rg_staticInfo_set_t;

typedef struct rtdrv_rg_dhcpClientInfo_set_s
{
    int                         	wan_intf_idx;
    rtk_rg_ipDhcpClientInfo_t 	dhcpClient_info;
} rtdrv_rg_dhcpClientInfo_set_t;

typedef struct rtdrv_rg_pppoeClientInfoBeforeDial_set_s
{
    int                         	wan_intf_idx;
    rtk_rg_pppoeClientInfoBeforeDial_t	app_info;
} rtdrv_rg_pppoeClientInfoBeforeDial_set_t;

typedef struct rtdrv_rg_pppoeClientInfoAfterDial_set_s
{
    int                         	wan_intf_idx;
    rtk_rg_pppoeClientInfoAfterDial_t	clientPppoe_info;
} rtdrv_rg_pppoeClientInfoAfterDial_set_t;

typedef struct rtdrv_rg_interface_del_s
{
    int                         	lan_or_wan_intf_idx;
} rtdrv_rg_interface_del_t;

typedef struct rtdrv_rg_intfInfo_find_s
{
    rtk_rg_intfInfo_t           	intf_info;
    int                         	valid_lan_or_wan_intf_idx;
} rtdrv_rg_intfInfo_find_t;

typedef struct rtdrv_rg_vlanBinding_add_s
{
    rtk_rg_vlanBinding_t        	vlan_binding_info;
    int                         	vlan_binding_idx;
} rtdrv_rg_vlanBinding_add_t;

typedef struct rtdrv_rg_vlanBinding_del_s
{
    int                         	vlan_binding_idx;
} rtdrv_rg_vlanBinding_del_t;

typedef struct rtdrv_rg_vlanBinding_find_s
{
    rtk_rg_vlanBinding_t        	vlan_binding_info;
    int                         	valid_idx;
} rtdrv_rg_vlanBinding_find_t;

typedef struct rtdrv_rg_algServerInLanAppsIpAddr_add_s
{
    rtk_rg_alg_serverIpMapping_t        srvIpMapping;
} rtdrv_rg_algServerInLanAppsIpAddr_add_t;

typedef struct rtdrv_rg_algServerInLanAppsIpAddr_del_s
{
    rtk_rg_alg_type_t                   delServerMapping;
} rtdrv_rg_algServerInLanAppsIpAddr_del_t;

typedef struct rtdrv_rg_algApps_set_s
{
    rtk_rg_alg_type_t                   alg_app;
} rtdrv_rg_algApps_set_t;

typedef struct rtdrv_rg_algApps_get_s
{
    rtk_rg_alg_type_t                   alg_app;
} rtdrv_rg_algApps_get_t;


typedef struct rtdrv_rg_virtualServer_add_s
{
    rtk_rg_virtualServer_t      	virtual_server;
    int                         	virtual_server_idx;
} rtdrv_rg_virtualServer_add_t;


typedef struct rtdrv_rg_dmzHost_set_s
{
    int                                 wan_intf_idx;
    rtk_rg_dmzInfo_t                    dmz_info;
} rtdrv_rg_dmzHost_set_t;

typedef struct rtdrv_rg_dmzHost_get_s
{
    int                                 wan_intf_idx;
    rtk_rg_dmzInfo_t                    dmz_info;
} rtdrv_rg_dmzHost_get_t;


typedef struct rtdrv_rg_virtualServer_del_s
{
    int                         	virtual_server_idx;
} rtdrv_rg_virtualServer_del_t;

typedef struct rtdrv_rg_virtualServer_find_s
{
    rtk_rg_virtualServer_t      	virtual_server;
    int                         	valid_idx;
} rtdrv_rg_virtualServer_find_t;

typedef struct rtdrv_rg_aclFilterAndQos_add_s
{
    rtk_rg_aclFilterAndQos_t    	acl_filter;
    int                         	acl_filter_idx;
} rtdrv_rg_aclFilterAndQos_add_t;

typedef struct rtdrv_rg_aclFilterAndQos_del_s
{
    int                         	acl_filter_idx;
} rtdrv_rg_aclFilterAndQos_del_t;

typedef struct rtdrv_rg_aclFilterAndQos_find_s
{
    rtk_rg_aclFilterAndQos_t    	acl_filter;
    int                         	valid_idx;
} rtdrv_rg_aclFilterAndQos_find_t;

typedef struct rtdrv_rg_macFilter_add_s
{
    rtk_rg_macFilterEntry_t             macFilterEntry;
    int                                 mac_filter_idx;
} rtdrv_rg_macFilter_add_t;

typedef struct rtdrv_rg_macFilter_del_s
{
    int                                 mac_filter_idx;
} rtdrv_rg_macFilter_del_t;

typedef struct rtdrv_rg_macFilter_find_s
{
    rtk_rg_macFilterEntry_t             macFilterEntry;
    int                                 valid_idx;
} rtdrv_rg_macFilter_find_t;

typedef struct rtdrv_rg_urlFilterString_add_s
{
    rtk_rg_urlFilterString_t    	filter;
    int                         	url_idx;
} rtdrv_rg_urlFilterString_add_t;

typedef struct rtdrv_rg_urlFilterString_del_s
{
    int                         	url_idx;
} rtdrv_rg_urlFilterString_del_t;

typedef struct rtdrv_rg_urlFilterString_find_s
{
    rtk_rg_urlFilterString_t    	filter;
    int                         	valid_idx;
} rtdrv_rg_urlFilterString_find_t;

typedef struct rtdrv_rg_upnpConnection_add_s
{
    rtk_rg_upnpConnection_t     	upnp;
    int                         	upnp_idx;
} rtdrv_rg_upnpConnection_add_t;

typedef struct rtdrv_rg_upnpConnection_del_s
{
    int                         	upnp_idx;
} rtdrv_rg_upnpConnection_del_t;

typedef struct rtdrv_rg_upnpConnection_find_s
{
    rtk_rg_upnpConnection_t     	upnp;
    int                         	valid_idx;
} rtdrv_rg_upnpConnection_find_t;

typedef struct rtdrv_rg_naptConnection_add_s
{
    rtk_rg_naptEntry_t          	naptFlow;
    int                         	flow_idx;
} rtdrv_rg_naptConnection_add_t;

typedef struct rtdrv_rg_naptConnection_del_s
{
    int                         	flow_idx;
} rtdrv_rg_naptConnection_del_t;

typedef struct rtdrv_rg_naptConnection_find_s
{
    rtk_rg_naptInfo_t           	naptInfo;
    int                         	valid_idx;
} rtdrv_rg_naptConnection_find_t;

typedef struct rtdrv_rg_multicastFlow_add_s
{
    rtk_rg_multicastFlow_t      	mcFlow;
    int                         	flow_idx;
} rtdrv_rg_multicastFlow_add_t;

typedef struct rtdrv_rg_multicastFlow_del_s
{
    int                         	flow_idx;
} rtdrv_rg_multicastFlow_del_t;

typedef struct rtdrv_rg_multicastFlow_find_s
{
    rtk_rg_multicastFlow_t      	mcFlow;
    int                         	valid_idx;
} rtdrv_rg_multicastFlow_find_t;

typedef struct rtdrv_rg_multicastDataIngressAlllowedPortMask_set_s
{
    rtk_rg_mac_portmask_t       	macPort_mask;
} rtdrv_rg_multicastDataIngressAlllowedPortMask_set_t;

typedef struct rtdrv_rg_multicastDataIngressAlllowedPortMask_get_s
{
    rtk_rg_mac_portmask_t       	macPort_mask;
} rtdrv_rg_multicastDataIngressAlllowedPortMask_get_t;

typedef struct rtdrv_rg_macEntry_add_s
{
    rtk_rg_macEntry_t           	macEntry;
    int                         	entry_idx;
} rtdrv_rg_macEntry_add_t;

typedef struct rtdrv_rg_macEntry_del_s
{
    int                         	entry_idx;
} rtdrv_rg_macEntry_del_t;

typedef struct rtdrv_rg_macEntry_find_s
{
    rtk_rg_macEntry_t           	macEntry;
    int                         	valid_idx;
} rtdrv_rg_macEntry_find_t;

typedef struct rtdrv_rg_arpEntry_add_s
{
    rtk_rg_arpEntry_t           	arpEntry;
    int                         	arp_entry_idx;
} rtdrv_rg_arpEntry_add_t;

typedef struct rtdrv_rg_arpEntry_del_s
{
    int                         	arp_entry_idx;
} rtdrv_rg_arpEntry_del_t;

typedef struct rtdrv_rg_arpEntry_find_s
{
    rtk_rg_arpInfo_t            	arpInfo;
    int                         	arp_valid_idx;
} rtdrv_rg_arpEntry_find_t;

typedef struct rtdrv_rg_neighborEntry_add_s
{
    rtk_rg_neighborEntry_t              neighborEntry;
    int                                 neighbor_idx;
} rtdrv_rg_neighborEntry_add_t;

typedef struct rtdrv_rg_neighborEntry_del_s
{
    int                                 neighbor_idx;
} rtdrv_rg_neighborEntry_del_t;

typedef struct rtdrv_rg_neighborEntry_find_s
{
    rtk_rg_neighborInfo_t               neighborInfo;
    int                                 neighbor_valid_idx;
} rtdrv_rg_neighborEntry_find_t;

typedef struct rtdrv_rg_cvlan_add_s
{
    rtk_rg_cvlan_info_t                 cvlan_info;
} rtdrv_rg_cvlan_add_t;

typedef struct rtdrv_rg_cvlan_del_s
{
    int                                 cvlan_id;
} rtdrv_rg_cvlan_del_t;

typedef struct rtdrv_rg_softwareSourceAddrLearningLimit_set_s
{
    rtk_rg_saLearningLimitInfo_t        sa_learnLimit_info;
    rtk_rg_port_idx_t               port_idx;
} rtdrv_rg_softwareSourceAddrLearningLimit_set_t;

typedef struct rtdrv_rg_softwareSourceAddrLearningLimit_get_s
{
    rtk_rg_saLearningLimitInfo_t        sa_learnLimit_info;
    rtk_rg_port_idx_t               port_idx;
} rtdrv_rg_softwareSourceAddrLearningLimit_get_t;


typedef struct rtdrv_rg_qosStrictPriorityOrWeightFairQueue_set_s
{
    rtk_rg_mac_port_idx_t               port_idx;
    rtk_rg_qos_queue_weights_t          q_weight;
} rtdrv_rg_qosStrictPriorityOrWeightFairQueue_set_t;

typedef struct rtdrv_rg_qosStrictPriorityOrWeightFairQueue_get_s
{
    rtk_rg_mac_port_idx_t               port_idx;
    rtk_rg_qos_queue_weights_t         pQ_weight;
} rtdrv_rg_qosStrictPriorityOrWeightFairQueue_get_t;

typedef struct rtdrv_rg_dosPortMaskEnable_set_s
{
    rtk_rg_mac_portmask_t               dos_port_mask;
} rtdrv_rg_dosPortMaskEnable_set_t;

typedef struct rtdrv_rg_dosPortMaskEnable_get_s
{
    rtk_rg_mac_portmask_t               dos_port_mask;
} rtdrv_rg_dosPortMaskEnable_get_t;

typedef struct rtdrv_rg_dosType_set_s
{
    rtk_rg_dos_type_t                   dos_type;
    int                                 dos_enabled;
    rtk_rg_dos_action_t                 dos_action;
} rtdrv_rg_dosType_set_t;

typedef struct rtdrv_rg_dosType_get_s
{
    rtk_rg_dos_type_t                   dos_type;
    int                                 dos_enabled;
    rtk_rg_dos_action_t                 dos_action;
} rtdrv_rg_dosType_get_t;
typedef struct rtdrv_rg_dosFloodType_set_s
{
    rtk_rg_dos_type_t                   dos_type;
    int                                 dos_enabled;
    rtk_rg_dos_action_t                 dos_action;
    int                                 dos_threshold;
} rtdrv_rg_dosFloodType_set_t;

typedef struct rtdrv_rg_dosFloodType_get_s
{
    rtk_rg_dos_type_t                   dos_type;
    int                                 dos_enabled;
    rtk_rg_dos_action_t                 dos_action;
    int                                 dos_threshold;
} rtdrv_rg_dosFloodType_get_t;


typedef struct rtdrv_rg_portMirror_set_s
{
    rtk_rg_portMirrorInfo_t             portMirrorInfo;
} rtdrv_rg_portMirror_set_t;

typedef struct rtdrv_rg_portMirror_get_s
{
    rtk_rg_portMirrorInfo_t             portMirrorInfo;
} rtdrv_rg_portMirror_get_t;

typedef struct rtdrv_rg_portEgrBandwidthCtrlRate_set_s
{
    rtk_rg_mac_port_idx_t               port;
    uint32                              rate;
} rtdrv_rg_portEgrBandwidthCtrlRate_set_t;

typedef struct rtdrv_rg_portIgrBandwidthCtrlRate_set_s
{
    rtk_rg_mac_port_idx_t               port;
    uint32                              rate;
} rtdrv_rg_portIgrBandwidthCtrlRate_set_t;

typedef struct rtdrv_rg_portEgrBandwidthCtrlRate_get_s
{
    rtk_rg_mac_port_idx_t               port;
    uint32                              rate;
} rtdrv_rg_portEgrBandwidthCtrlRate_get_t;

typedef struct rtdrv_rg_portIgrBandwidthCtrlRate_get_s
{
    rtk_rg_mac_port_idx_t               port;
    uint32                              rate;
} rtdrv_rg_portIgrBandwidthCtrlRate_get_t;

typedef struct rtdrv_rg_phyPortForceAbility_set_s
{
    rtk_rg_mac_port_idx_t               port;
    rtk_rg_phyPortAbilityInfo_t         ability;
} rtdrv_rg_phyPortForceAbility_set_t;

typedef struct rtdrv_rg_phyPortForceAbility_get_s
{
    rtk_rg_mac_port_idx_t               port;
    rtk_rg_phyPortAbilityInfo_t         ability;
} rtdrv_rg_phyPortForceAbility_get_t;

typedef struct rtdrv_rg_portMibInfo_get_s
{
    rtk_rg_mac_port_idx_t               port;
    rtk_rg_port_mib_info_t              mibInfo;
} rtdrv_rg_portMibInfo_get_t;

typedef struct rtdrv_rg_portMibInfo_clear_s
{
    rtk_rg_mac_port_idx_t               port;
} rtdrv_rg_portMibInfo_clear_t;

typedef struct rtdrv_rg_stormControl_add_s
{
    rtk_rg_stormControlInfo_t           stormInfo;
    int                                 stormInfo_idx;
} rtdrv_rg_stormControl_add_t;

typedef struct rtdrv_rg_stormControl_del_s
{
    int                                 stormInfo_idx;
} rtdrv_rg_stormControl_del_t;

typedef struct rtdrv_rg_stormControl_find_s
{
    rtk_rg_stormControlInfo_t           stormInfo;
    int                                 stormInfo_idx;
} rtdrv_rg_stormControl_find_t;

typedef struct rtdrv_rg_shareMeter_set_s
{
    uint32                              index;
    uint32                              rate;
    rtk_rg_enable_t                     ifgInclude;
} rtdrv_rg_shareMeter_set_t;

typedef struct rtdrv_rg_shareMeter_get_s
{
    uint32                              index;
    uint32                              pRate;
    rtk_rg_enable_t                     pIfgInclude;
} rtdrv_rg_shareMeter_get_t;

typedef struct rtdrv_rg_qosInternalPriMapToQueueId_set_s
{
	uint32								intPri;
	uint32								queueId;
} rtdrv_rg_qosInternalPriMapToQueueId_set_t;

typedef struct rtdrv_rg_qosInternalPriMapToQueueId_get_s
{
	uint32								intPri;
	uint32								pQueueId;
} rtdrv_rg_qosInternalPriMapToQueueId_get_t;

typedef struct rtdrv_rg_qosInternalPriDecisionByWeight_set_s
{
    rtk_rg_qos_priSelWeight_t           weightOfPriSel;
} rtdrv_rg_qosInternalPriDecisionByWeight_set_t;

typedef struct rtdrv_rg_qosInternalPriDecisionByWeight_get_s
{
    rtk_rg_qos_priSelWeight_t           pWeightOfPriSel;
} rtdrv_rg_qosInternalPriDecisionByWeight_get_t;

typedef struct rtdrv_rg_qosDscpRemapToInternalPri_set_s
{
    uint32                              dscp;
    uint32                              intPri;
} rtdrv_rg_qosDscpRemapToInternalPri_set_t;

typedef struct rtdrv_rg_qosDscpRemapToInternalPri_get_s
{
    uint32                              dscp;
    uint32                              pIntPri;
} rtdrv_rg_qosDscpRemapToInternalPri_get_t;

typedef struct rtdrv_rg_qosDot1pPriRemapToInternalPri_set_s
{
    uint32                              dot1p;
    uint32                              intPri;
} rtdrv_rg_qosDot1pPriRemapToInternalPri_set_t;

typedef struct rtdrv_rg_qosDot1pPriRemapToInternalPri_get_s
{
    uint32                              dot1p;
    uint32                              pIntPri;
} rtdrv_rg_qosDot1pPriRemapToInternalPri_get_t;

typedef struct rtdrv_rg_qosPortBasedPriority_set_s
{
    rtk_rg_mac_port_idx_t               port;
    uint32                              intPri;
} rtdrv_rg_qosPortBasedPriority_set_t;

typedef struct rtdrv_rg_qosPortBasedPriority_get_s
{
    rtk_rg_mac_port_idx_t               port;
    uint32                              pIntPri;
} rtdrv_rg_qosPortBasedPriority_get_t;

typedef struct rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_set_s
{
    rtk_rg_mac_port_idx_t               port;
	rtk_rg_enable_t						is_enabled;
    rtk_rg_qos_dscpRmkSrc_t             src_sel;
} rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_set_t;

typedef struct rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_get_s
{
	rtk_rg_mac_port_idx_t				 port;
 	rtk_rg_enable_t						pIs_enabled;
    rtk_rg_qos_dscpRmkSrc_t             pSrc_sel;
} rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_get_t;

typedef struct rtdrv_rg_qosDscpRemarkByInternalPri_set_s
{
    uint32                              int_pri;
    uint32                              rmk_dscp;
} rtdrv_rg_qosDscpRemarkByInternalPri_set_t;

typedef struct rtdrv_rg_qosDscpRemarkByInternalPri_get_s
{
    uint32                              int_pri;
    uint32                              pRmk_dscp;
} rtdrv_rg_qosDscpRemarkByInternalPri_get_t;

typedef struct rtdrv_rg_qosDscpRemarkByDscp_set_s
{
    uint32                              dscp;
    uint32                              rmk_dscp;
} rtdrv_rg_qosDscpRemarkByDscp_set_t;

typedef struct rtdrv_rg_qosDscpRemarkByDscp_get_s
{
    uint32                              dscp;
    uint32                              pRmk_dscp;
} rtdrv_rg_qosDscpRemarkByDscp_get_t;

typedef struct rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_set_s
{
    rtk_rg_mac_port_idx_t               port;
	rtk_rg_enable_t						enable;
} rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_set_t;

typedef struct rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_get_s
{
    rtk_rg_mac_port_idx_t               port;
	rtk_rg_enable_t						pEnable;
} rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_get_t;

typedef struct rtdrv_rg_qosDot1pPriRemarkByInternalPri_set_s
{
    uint32                              int_pri;
    uint32                              rmk_dot1p;
} rtdrv_rg_qosDot1pPriRemarkByInternalPri_set_t;

typedef struct rtdrv_rg_qosDot1pPriRemarkByInternalPri_get_s
{
    uint32                              int_pri;
    uint32                              pRmk_dot1p;
} rtdrv_rg_qosDot1pPriRemarkByInternalPri_get_t;

typedef struct rtdrv_rg_portBasedCVlanId_get_s
{
    rtk_rg_mac_port_idx_t               port;
    uint32                              pVlanid;
} rtdrv_rg_portBasedCVlanId_get_t;

#endif


typedef struct rtdrv_oamCfg_s
{
    rtk_port_t                  	port;
    rtk_oam_parser_act_t        	action;
    rtk_oam_multiplexer_act_t   	multAction;
}rtdrv_oamCfg_t;


typedef struct rtdrv_statCfg_s
{
    rtk_port_t                  	port;
    uint32                      	index;
    rtk_mib_rst_value_t         	rstValue;
    rtk_stat_global_type_t      	cntrIdx;
    uint64                      	cntr;
    rtk_stat_global_cntr_t      	globalCntrs;
    rtk_stat_port_type_t        	portCntrIdx;
    rtk_stat_port_cntr_t        	portCntrs;
    rtk_stat_log_ctrl_t         	ctrl;
    rtk_mib_count_mode_t        	cnt_mode;
    uint32                      	timer;
    rtk_mib_sync_mode_t         	sync_mode;
    rtk_mib_tag_cnt_dir_t       	direction;
    rtk_mib_tag_cnt_state_t     	state;
    uint32                      	code;
}rtdrv_statCfg_t;


typedef struct rtdrv_secCfg_s
{
    rtk_port_t                  	port;
    rtk_enable_t                	enable;
    rtk_sec_attackType_t        	attackType;
    rtk_action_t                	action;
    rtk_sec_attackFloodType_t   	type;
    uint32                      	floodThresh;
}rtdrv_secCfg_t;


typedef union rtdrv_union_u
{
    rtdrv_unitCfg_t         unit_cfg;
    rtdrv_logCfg_t          log_cfg;
    rtdrv_regCfg_t          reg_cfg;
    rtdrv_addrCfg_t         addr_cfg;
    rtdrv_phyCfg_t          phy_cfg;
    uint32                              index;
    rtdrv_rateCfg_t                     rate_cfg;
    rtdrv_aclCfg_t                      acl_cfg;
    rtdrv_vlanCfg_t                     vlan_cfg;
    rtdrv_gpioCfg_t                     gpio_cfg;
    rtdrv_i2cCfg_t                      i2c_cfg;
    rtdrv_intrCfg_t                     intr_cfg;
    rtdrv_rldpCfg_t                     rldp_cfg;
    rtdrv_ponmacCfg_t                   ponmac_cfg;
    rtdrv_stpCfg_t                      stp_cfg;
    rtdrv_switchCfg_t                   switch_cfg;
    rtdrv_ledCfg_t                      led_cfg;
    rtdrv_qosCfg_t                      qos_cfg;
	rtdrv_svlanCfg_t					svlan_cfg;
    rtdrv_classifyCfg_t                 classify_cfg;
    rtdrv_l2Cfg_t                       l2_cfg;
    rtdrv_l34Cfg_t				        l34_cfg;
    rtdrv_l34liteCfg_t                  l34lite_cfg;
#if defined(CONFIG_RTK_L34_ENABLE) && CONFIG_RTK_L34_ENABLE > 0
	rtdrv_rg_driverVersion_get_t rtdrv_rg_driverVersion_get_cfg;
	rtdrv_rg_initParam_get_t rtdrv_rg_initParam_get_cfg;
	rtdrv_rg_initParam_set_t rtdrv_rg_initParam_set_cfg;
	rtdrv_rg_lanInterface_add_t rtdrv_rg_lanInterface_add_cfg;
	rtdrv_rg_wanInterface_add_t rtdrv_rg_wanInterface_add_cfg;
	rtdrv_rg_staticInfo_set_t rtdrv_rg_staticInfo_set_cfg;
	rtdrv_rg_dhcpClientInfo_set_t rtdrv_rg_dhcpClientInfo_set_cfg;
	rtdrv_rg_pppoeClientInfoBeforeDial_set_t rtdrv_rg_pppoeClientInfoBeforeDial_set_cfg;
	rtdrv_rg_pppoeClientInfoAfterDial_set_t rtdrv_rg_pppoeClientInfoAfterDial_set_cfg;
	rtdrv_rg_intfInfo_find_t rtdrv_rg_intfInfo_find_cfg;
	rtdrv_rg_vlanBinding_add_t rtdrv_rg_vlanBinding_add_cfg;
	rtdrv_rg_vlanBinding_find_t rtdrv_rg_vlanBinding_find_cfg;
	rtdrv_rg_algServerInLanAppsIpAddr_add_t rtdrv_rg_algServerInLanAppsIpAddr_add_cfg;
	rtdrv_rg_algServerInLanAppsIpAddr_del_t rtdrv_rg_algServerInLanAppsIpAddr_del_cfg;
	rtdrv_rg_virtualServer_add_t rtdrv_rg_virtualServer_add_cfg;
	rtdrv_rg_virtualServer_find_t rtdrv_rg_virtualServer_find_cfg;
	rtdrv_rg_aclFilterAndQos_add_t rtdrv_rg_aclFilterAndQos_add_cfg;
	rtdrv_rg_aclFilterAndQos_find_t rtdrv_rg_aclFilterAndQos_find_cfg;
	rtdrv_rg_macFilter_add_t rtdrv_rg_macFilter_add_cfg;
	rtdrv_rg_macFilter_find_t rtdrv_rg_macFilter_find_cfg;
	rtdrv_rg_urlFilterString_add_t rtdrv_rg_urlFilterString_add_cfg;
	rtdrv_rg_urlFilterString_find_t rtdrv_rg_urlFilterString_find_cfg;
	rtdrv_rg_upnpConnection_add_t rtdrv_rg_upnpConnection_add_cfg;
	rtdrv_rg_upnpConnection_find_t rtdrv_rg_upnpConnection_find_cfg;
	rtdrv_rg_naptConnection_add_t rtdrv_rg_naptConnection_add_cfg;
	rtdrv_rg_naptConnection_find_t rtdrv_rg_naptConnection_find_cfg;
	rtdrv_rg_multicastFlow_add_t rtdrv_rg_multicastFlow_add_cfg;
	rtdrv_rg_multicastFlow_find_t rtdrv_rg_multicastFlow_find_cfg;
	rtdrv_rg_multicastDataIngressAlllowedPortMask_set_t rtdrv_rg_multicastDataIngressAlllowedPortMask_set_cfg;
	rtdrv_rg_multicastDataIngressAlllowedPortMask_get_t rtdrv_rg_multicastDataIngressAlllowedPortMask_get_cfg;
	rtdrv_rg_macEntry_add_t rtdrv_rg_macEntry_add_cfg;
	rtdrv_rg_macEntry_find_t rtdrv_rg_macEntry_find_cfg;
	rtdrv_rg_arpEntry_add_t rtdrv_rg_arpEntry_add_cfg;
	rtdrv_rg_arpEntry_find_t rtdrv_rg_arpEntry_find_cfg;

	rtdrv_rg_interface_del_t rtdrv_rg_interface_del_cfg;
	rtdrv_rg_vlanBinding_del_t rtdrv_rg_vlanBinding_del_cfg;
	rtdrv_rg_virtualServer_del_t rtdrv_rg_virtualServer_del_cfg;
	rtdrv_rg_aclFilterAndQos_del_t rtdrv_rg_aclFilterAndQos_del_cfg;
	rtdrv_rg_macFilter_del_t rtdrv_rg_macFilter_del_cfg;
	rtdrv_rg_urlFilterString_del_t rtdrv_rg_urlFilterString_del_cfg;
	rtdrv_rg_upnpConnection_del_t rtdrv_rg_upnpConnection_del_cfg;
	rtdrv_rg_naptConnection_del_t rtdrv_rg_naptConnection_del_cfg;
	rtdrv_rg_multicastFlow_del_t rtdrv_rg_multicastFlow_del_cfg;
	rtdrv_rg_macEntry_del_t rtdrv_rg_macEntry_del_cfg;
	rtdrv_rg_arpEntry_del_t rtdrv_rg_arpEntry_del_cfg;
	rtdrv_rg_algApps_set_t rtdrv_rg_algApps_set_cfg;
	rtdrv_rg_algApps_get_t rtdrv_rg_algApps_get_cfg;
	rtdrv_rg_dmzHost_set_t rtdrv_rg_dmzHost_set_cfg;
	rtdrv_rg_dmzHost_get_t rtdrv_rg_dmzHost_get_cfg;
	rtdrv_rg_neighborEntry_add_t rtdrv_rg_neighborEntry_add_cfg;
	rtdrv_rg_neighborEntry_del_t rtdrv_rg_neighborEntry_del_cfg;
	rtdrv_rg_neighborEntry_find_t rtdrv_rg_neighborEntry_find_cfg;
	rtdrv_rg_cvlan_add_t rtdrv_rg_cvlan_add_cfg;
	rtdrv_rg_cvlan_del_t rtdrv_rg_cvlan_del_cfg;
	rtdrv_rg_softwareSourceAddrLearningLimit_set_t rtdrv_rg_softwareSourceAddrLearningLimit_set_cfg;
	rtdrv_rg_softwareSourceAddrLearningLimit_get_t rtdrv_rg_softwareSourceAddrLearningLimit_get_cfg;
	rtdrv_rg_qosStrictPriorityOrWeightFairQueue_set_t rtdrv_rg_qosStrictPriorityOrWeightFairQueue_set_cfg;
	rtdrv_rg_qosStrictPriorityOrWeightFairQueue_get_t rtdrv_rg_qosStrictPriorityOrWeightFairQueue_get_cfg;
	rtdrv_rg_dhcpRequest_set_t rtdrv_rg_dhcpRequest_set_cfg;
	rtdrv_rg_dosPortMaskEnable_set_t rtdrv_rg_dosPortMaskEnable_set_cfg;
	rtdrv_rg_dosPortMaskEnable_get_t rtdrv_rg_dosPortMaskEnable_get_cfg;
	rtdrv_rg_dosType_set_t rtdrv_rg_dosType_set_cfg;
	rtdrv_rg_dosType_get_t rtdrv_rg_dosType_get_cfg;
	rtdrv_rg_dosFloodType_set_t rtdrv_rg_dosFloodType_set_cfg;
	rtdrv_rg_dosFloodType_get_t rtdrv_rg_dosFloodType_get_cfg;
	rtdrv_rg_portMirror_set_t rtdrv_rg_portMirror_set_cfg;
	rtdrv_rg_portMirror_get_t rtdrv_rg_portMirror_get_cfg;
	rtdrv_rg_portEgrBandwidthCtrlRate_set_t rtdrv_rg_portEgrBandwidthCtrlRate_set_cfg;
	rtdrv_rg_portIgrBandwidthCtrlRate_set_t rtdrv_rg_portIgrBandwidthCtrlRate_set_cfg;
	rtdrv_rg_portEgrBandwidthCtrlRate_get_t rtdrv_rg_portEgrBandwidthCtrlRate_get_cfg;
	rtdrv_rg_portIgrBandwidthCtrlRate_get_t rtdrv_rg_portIgrBandwidthCtrlRate_get_cfg;
	rtdrv_rg_phyPortForceAbility_set_t rtdrv_rg_phyPortForceAbility_set_cfg;
	rtdrv_rg_phyPortForceAbility_get_t rtdrv_rg_phyPortForceAbility_get_cfg;
	rtdrv_rg_portMibInfo_get_t rtdrv_rg_portMibInfo_get_cfg;
	rtdrv_rg_portMibInfo_clear_t rtdrv_rg_portMibInfo_clear_cfg;
	rtdrv_rg_stormControl_add_t rtdrv_rg_stormControl_add_cfg;
	rtdrv_rg_stormControl_del_t rtdrv_rg_stormControl_del_cfg;
	rtdrv_rg_stormControl_find_t rtdrv_rg_stormControl_find_cfg;
	rtdrv_rg_shareMeter_set_t rtdrv_rg_shareMeter_set_cfg;
	rtdrv_rg_shareMeter_get_t rtdrv_rg_shareMeter_get_cfg;
	rtdrv_rg_qosInternalPriMapToQueueId_set_t rtdrv_rg_qosInternalPriMapToQueueId_set_cfg;
	rtdrv_rg_qosInternalPriMapToQueueId_get_t rtdrv_rg_qosInternalPriMapToQueueId_get_cfg;
	rtdrv_rg_qosInternalPriDecisionByWeight_set_t rtdrv_rg_qosInternalPriDecisionByWeight_set_cfg;
	rtdrv_rg_qosInternalPriDecisionByWeight_get_t rtdrv_rg_qosInternalPriDecisionByWeight_get_cfg;
	rtdrv_rg_qosDscpRemapToInternalPri_set_t rtdrv_rg_qosDscpRemapToInternalPri_set_cfg;
	rtdrv_rg_qosDscpRemapToInternalPri_get_t rtdrv_rg_qosDscpRemapToInternalPri_get_cfg;
	rtdrv_rg_qosDot1pPriRemapToInternalPri_set_t rtdrv_rg_qosDot1pPriRemapToInternalPri_set_cfg;
	rtdrv_rg_qosDot1pPriRemapToInternalPri_get_t rtdrv_rg_qosDot1pPriRemapToInternalPri_get_cfg;
	rtdrv_rg_qosPortBasedPriority_set_t rtdrv_rg_qosPortBasedPriority_set_cfg;
	rtdrv_rg_qosPortBasedPriority_get_t rtdrv_rg_qosPortBasedPriority_get_cfg;
	rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_set_t rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_set_cfg;
	rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_get_t rtdrv_rg_qosDscpRemarkEgressPortEnableAndSrcSelect_get_cfg;
	rtdrv_rg_qosDscpRemarkByInternalPri_set_t rtdrv_rg_qosDscpRemarkByInternalPri_set_cfg;
	rtdrv_rg_qosDscpRemarkByInternalPri_get_t rtdrv_rg_qosDscpRemarkByInternalPri_get_cfg;
	rtdrv_rg_qosDscpRemarkByDscp_set_t rtdrv_rg_qosDscpRemarkByDscp_set_cfg;
	rtdrv_rg_qosDscpRemarkByDscp_get_t rtdrv_rg_qosDscpRemarkByDscp_get_cfg;
	rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_set_t rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_set_cfg;
	rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_get_t rtdrv_rg_qosDot1pPriRemarkByInternalPriEgressPortEnable_get_cfg;
	rtdrv_rg_qosDot1pPriRemarkByInternalPri_set_t rtdrv_rg_qosDot1pPriRemarkByInternalPri_set_cfg;
	rtdrv_rg_qosDot1pPriRemarkByInternalPri_get_t rtdrv_rg_qosDot1pPriRemarkByInternalPri_get_cfg;
	rtdrv_rg_portBasedCVlanId_get_t rtdrv_rg_portBasedCVlanId_get_cfg;

#endif
    rtdrv_portCfg_t                     port_cfg;
    rtdrv_trunkCfg_t                    trunk_cfg;
    rtdrv_mirrorCfg_t                   mirror_cfg;
    rtdrv_dot1xCfg_t                    dot1x_cfg;
    rtdrv_cpuCfg_t                      cpu_cfg;
    rtdrv_trapCfg_t                     trap_cfg;
    rtdrv_eponCfg_t                     epon_cfg;
    rtdrv_ponAlarm_t                    alarm_state;
    rtdrv_ponPara_t                     pon_cfg;
    rtk_gpon_fsm_status_t               pon_state;
    rtdrv_tcont_t                       tcont_cfg;
    rtdrv_dsFlow_t                      ds_flow_cfg;
    rtdrv_usFlow_t                      us_flow_cfg;
    rtdrv_ip_ptn_t                      ip_ptn;
    rtk_gpon_macTable_exclude_mode_t    filter_mode;
    rtdrv_fs_mode_t                     fs_mode;
    rtdrv_mac_entry_t                   mac_entry;
    int32                               state;
    rtk_gpon_laser_status_t             tx_laser;
    rtk_gpon_global_performance_type_t  glb_cnt;
    rtdrv_tcont_cnt_t                   tcont_cnt;
    rtdrv_flow_cnt_t                    flow_cnt;
    rtk_gpon_serialNumber_t 			sn_cfg;
    rtk_gpon_password_t     			pwd_cfg;
    rtk_gpon_initialState_t 			init_state_cfg;
#if (CONFIG_GPON_VERSION > 1)
	rtk_gpon_extMsg_t					gponExt_cfg;
#endif
#if defined(OLD_FPGA_DEFINED)
    rtdrv_pktGen_t                      pkt_gen;
#endif
    rtk_gpon_omci_msg_t                 omci;
    rtdrv_oamCfg_t                      oam_cfg;
    rtdrv_statCfg_t                     stat_cfg;
    rtdrv_secCfg_t                      sec_cfg;
    rtdrv_timeCfg_t                     time_cfg;
} rtdrv_union_t;

#endif /* __RTDRV_NETFILTER_H__ */
