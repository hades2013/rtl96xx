
/*
Copyright (c) 2011,  Shenzhen Hexicom Technologies Co., Ltd.
All rights reserved.

File         : analogPropertyTable.c
Status       : Current
Description  :	

Author       : Einsn Liu
Contact      : liuchuansen@hexicomtech.com

Revision     : 2011-09-18
Description  : Primary beta released
*/



/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 15999 2007-03-25 22:32:02Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>
#include "analogPropertyTable.h"

#include "../hexicom/hexicomTC.h"

#ifndef DBGID
#define DBGID  "hexicom:analogPropertyTable"
#endif 

#ifndef DBGID
#define DBGID "defalut"
#endif 


#if 1
typedef struct {
	char enable;	
	long threshold_lolo;
	long threshold_lo; 	
	long threshold_hi;  
	long threshold_hihi;	
	
	oid  objid[MAX_OID_LEN];		 
	size_t objid_len;	
	long threshold_buttom;   
	long threshold_top;	 
	int  type; 	
	int  id;		
	u_long event_value;	
	long   AlarmDeadband;
}snmp_alarm_t ;
snmp_alarm_t g_info;
#endif

#define HC_DEFAULT_COMMIT_DELAY 1   //???

LOCAL_COMMIT_DECLARE();

#define local_commit(x)  LOCAL_COMMIT(HC_DEFAULT_COMMIT_DELAY, analogPropertyTable_commit, (void *)(x))


/** Initializes the analogPropertyTable module */
void
init_analogPropertyTable(void)
{
    /*
     * here we initialize all the tables we're planning on supporting 
     */
    initialize_table_analogPropertyTable();
}



/** Initialize the analogPropertyTable table by defining its contents and how it's structured */
void
initialize_table_analogPropertyTable(void)
{
    static oid      analogPropertyTable_oid[] =
        { 1, 3, 6, 1, 4, 1, 17409, 1, 1, 1 };
    size_t          analogPropertyTable_oid_len =
        OID_LENGTH(analogPropertyTable_oid);
    netsnmp_handler_registration *reg;
    netsnmp_iterator_info *iinfo;
    netsnmp_table_registration_info *table_info;
	
	#if 1
	g_info.enable = '1';
	g_info.event_value = 1;
	g_info.id =2;
	g_info.objid[MAX_OID_LEN] = 0;
	g_info.objid_len = 4;
	g_info.threshold_buttom = 0;
	g_info.threshold_hi = 4;
	g_info.threshold_hihi =5;
	g_info.threshold_lo =6;
	g_info.threshold_lolo = 1;
	g_info.threshold_top = 7;
	g_info.type = 1;
	g_info.AlarmDeadband = 10;

	#endif
    reg =
        netsnmp_create_handler_registration("analogPropertyTable",
                                            analogPropertyTable_handler,
                                            analogPropertyTable_oid,
                                            analogPropertyTable_oid_len,
                                            HANDLER_CAN_RWRITE);

    table_info = SNMP_MALLOC_TYPEDEF(netsnmp_table_registration_info);
    netsnmp_table_helper_add_indexes(table_info, ASN_OBJECT_ID, /* index: analogAlarmParameterOID */
                                     0);
    table_info->min_column = COLUMN_ANALOGALARMPARAMETEROID;
    table_info->max_column = COLUMN_ANALOGALARMDEADBAND;

    iinfo = SNMP_MALLOC_TYPEDEF(netsnmp_iterator_info);
    iinfo->get_first_data_point = analogPropertyTable_get_first_data_point;
    iinfo->get_next_data_point = analogPropertyTable_get_next_data_point;
    iinfo->table_reginfo = table_info;

    netsnmp_register_table_iterator(reg, iinfo);

    netsnmp_inject_handler( reg,
		    netsnmp_get_cache_handler(HC_CACHE_TIMEOUT,
			   		analogPropertyTable_load, analogPropertyTable_free,
					analogPropertyTable_oid, OID_LENGTH(analogPropertyTable_oid)));
    DEBUGMSGTL((DBGID,
                "initialize analogPropertyTable\n"));     
	
    /*
     * Initialise the contents of the table here 
     */
}

    /*
     * Typical data structure for a row entry 
     */
struct analogPropertyTable_entry {
    /*
     * Index values 
     */
    oid             analogAlarmParameterOID[MAX_OID_LEN];
    size_t          analogAlarmParameterOID_len;

    /*
     * Column values 
     */
//    oid             analogAlarmParameterOID[NNN];
//    size_t          analogAlarmParameterOID_len;
    char            analogAlarmEnable[1];
    size_t          analogAlarmEnable_len;
    long            analogAlarmState;
    long            analogAlarmHIHI;
    long            analogAlarmHI;
    long            analogAlarmLO;
    long            analogAlarmLOLO;
    long            analogAlarmDeadband;

    /*
     * Illustrate using a simple linked list 
     */
	//void * 			original;
    int             valid;
	u_long 			row_updates;
	long 			value_bottom, value_top;
	int 			type, alarms_id;
	u_long 			event_value;
	
    struct analogPropertyTable_entry *next;
};

struct analogPropertyTable_entry *analogPropertyTable_head;
struct analogPropertyTable_entry *analogPropertyTable_commit_head;

	



/*
 * create a new row in the (unsorted) table 
 */
struct analogPropertyTable_entry *
analogPropertyTable_createEntry(
                                struct analogPropertyTable_entry *analogPropertyTable)
{
    struct analogPropertyTable_entry *entry;

    entry = SNMP_MALLOC_TYPEDEF(struct analogPropertyTable_entry);
    if (!entry)
        return NULL;

    memcpy(entry, analogPropertyTable, sizeof(*entry));
    entry->next = analogPropertyTable_head;
    analogPropertyTable_head = entry;
    return entry;
}

/*
 * remove a row from the table 
 */
void
analogPropertyTable_removeEntry(struct analogPropertyTable_entry *entry)
{
    struct analogPropertyTable_entry *ptr, *prev;

    if (!entry)
        return;                 /* Nothing to remove */

    for (ptr = analogPropertyTable_head, prev = NULL;
         ptr != NULL; prev = ptr, ptr = ptr->next) {
        if (ptr == entry)
            break;
    }
    if (!ptr)
        return;                 /* Can't find it */

    if (prev == NULL)
        analogPropertyTable_head = ptr->next;
    else
        prev->next = ptr->next;

    SNMP_FREE(entry);           /* XXX - release any other internal resources */
}


void analogPropertyTable_removeAllEntry(void )
{
    struct analogPropertyTable_entry *ptr, *pnext;

    for (ptr = analogPropertyTable_head; ptr != NULL; ptr = pnext) {
		 pnext = ptr->next;
		 SNMP_FREE(ptr); 
    }
	analogPropertyTable_head = NULL;
}


void analogPropertyTable_setEntry(
				struct analogPropertyTable_entry *entry, 
				snmp_alarm_t *alarm
				)
{

	memset(entry, 0, sizeof(*entry));
	
	entry->analogAlarmDeadband = alarm->AlarmDeadband;
	entry->analogAlarmEnable[0] = alarm->enable;
	entry->analogAlarmEnable_len = sizeof(entry->analogAlarmEnable);
	entry->analogAlarmState = 0;
	entry->analogAlarmLOLO = alarm->threshold_lolo;
	entry->analogAlarmLO =alarm->threshold_lo;
	entry->analogAlarmHI = alarm->threshold_hi;
	entry->analogAlarmHIHI =alarm->threshold_hihi;

	memset(entry->analogAlarmParameterOID, 0, sizeof(entry->analogAlarmParameterOID));
	memcpy(entry->analogAlarmParameterOID, alarm->objid, sizeof(oid) * alarm->objid_len);
	entry->analogAlarmParameterOID_len = alarm->objid_len * sizeof(oid);
	//entry->original = alarm;

	entry->value_bottom = alarm->threshold_buttom; 
	entry->value_top = alarm->threshold_top;
	entry->type = alarm->type;
	entry->alarms_id = alarm->id;
	entry->event_value = alarm->event_value;
	
}



struct analogPropertyTable_entry *
analogPropertyTable_backupCommitEntry(
				struct analogPropertyTable_entry *analogPropertyTable)
{
    struct analogPropertyTable_entry *entry, *next;

    for (entry = analogPropertyTable_commit_head; entry != NULL; entry = entry->next) {
		if ((entry->analogAlarmParameterOID_len == analogPropertyTable->analogAlarmParameterOID_len)
			&& !memcmp(entry->analogAlarmParameterOID, analogPropertyTable->analogAlarmParameterOID, entry->analogAlarmParameterOID_len)){
			break;
		}		
    }	

	if (!entry){
		entry = SNMP_MALLOC_TYPEDEF(struct analogPropertyTable_entry);
		if (!entry)
			return NULL;
		entry->next = analogPropertyTable_commit_head;
		analogPropertyTable_commit_head = entry;
	}

	
	next = entry->next;
	memcpy(entry, analogPropertyTable, sizeof(*entry));
	entry->next = next;
	
    return entry;	
}


void analogPropertyTable_removeAllCommitEntry(void )
{
    struct analogPropertyTable_entry *ptr, *pnext;

    for (ptr = analogPropertyTable_commit_head; ptr != NULL; ptr = pnext) {
		 pnext = ptr->next;
		 SNMP_FREE(ptr); 
    }
	analogPropertyTable_commit_head = NULL;
}



/*
 * Example iterator hook routines - using 'get_next' to do most of the work 
 */
netsnmp_variable_list *
analogPropertyTable_get_first_data_point(void **my_loop_context,
                                         void **my_data_context,
                                         netsnmp_variable_list *
                                         put_index_data,
                                         netsnmp_iterator_info *mydata)
{
    *my_loop_context = analogPropertyTable_head;
    return analogPropertyTable_get_next_data_point(my_loop_context,
                                                   my_data_context,
                                                   put_index_data, mydata);
}

netsnmp_variable_list *
analogPropertyTable_get_next_data_point(void **my_loop_context,
                                        void **my_data_context,
                                        netsnmp_variable_list *
                                        put_index_data,
                                        netsnmp_iterator_info *mydata)
{
    struct analogPropertyTable_entry *entry =
        (struct analogPropertyTable_entry *) *my_loop_context;
    netsnmp_variable_list *idx = put_index_data;

    if (entry) {
        snmp_set_var_value(idx, (u_char *)entry->analogAlarmParameterOID,
                           entry->analogAlarmParameterOID_len);
        idx = idx->next_variable;
        *my_data_context = (void *) entry;
        *my_loop_context = (void *) entry->next;
        return put_index_data;
    } else {
        return NULL;
    }
}


/** handles requests for the analogPropertyTable table */
int
analogPropertyTable_handler(netsnmp_mib_handler *handler,
                            netsnmp_handler_registration *reginfo,
                            netsnmp_agent_request_info *reqinfo,
                            netsnmp_request_info *requests)
{
	int ret, enable;
    netsnmp_request_info *request;
    netsnmp_table_request_info *table_info;
    struct analogPropertyTable_entry *table_entry;	

    if (((reqinfo->mode == MODE_GET) /*|| (reqinfo->mode == MODE_SET_ACTION)*/) 
		&& !netsnmp_cache_is_valid(reqinfo, reginfo->handlerName)) {
       // netsnmp_assert(!"cache == valid"); /* always false */
        analogPropertyTable_load( NULL, NULL );	/* XXX - check for failure */
    }

    DEBUGMSGTL((DBGID, "Handler - mode %s\n",
                    se_find_label_in_slist("agent_mode", reqinfo->mode)));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request = requests; request; request = request->next) {
            table_entry = (struct analogPropertyTable_entry *)
                netsnmp_extract_iterator_context(request);
            table_info = netsnmp_extract_table_info(request);

			HC_DBG_OID(request->requestvb);
	//		HC_TABLE_ENTRY_ASSERT(reqinfo, table_entry, table_info, request);

            switch (table_info->colnum) {
            case COLUMN_ANALOGALARMPARAMETEROID:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
				
                snmp_set_var_typed_value(request->requestvb, ASN_OBJECT_ID,
                                         (u_char *) table_entry->analogAlarmParameterOID,
                                         table_entry->analogAlarmParameterOID_len);
                break;
            case COLUMN_ANALOGALARMENABLE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,
                                         (u_char *) table_entry->analogAlarmEnable,
                                         table_entry->analogAlarmEnable_len);
                break;
            case COLUMN_ANALOGALARMSTATE:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->analogAlarmState);
                break;
            case COLUMN_ANALOGALARMHIHI:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->analogAlarmHIHI);
                break;
            case COLUMN_ANALOGALARMHI:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->analogAlarmHI);
                break;
            case COLUMN_ANALOGALARMLO:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->analogAlarmLO);
                break;
            case COLUMN_ANALOGALARMLOLO:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->analogAlarmLOLO);
                break;
            case COLUMN_ANALOGALARMDEADBAND:
                if (!table_entry) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,
                                           table_entry->analogAlarmDeadband);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        break;

	#if 1
        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
        for (request = requests; request; request = request->next) {
            table_entry = (struct analogPropertyTable_entry *)
                netsnmp_extract_iterator_context(request);
            table_info = netsnmp_extract_table_info(request);

			//HC_TABLE_ENTRY_ASSERT(reqinfo, table_entry, table_info, request);
            switch (table_info->colnum) {
            case COLUMN_ANALOGALARMENABLE:
                /*
                 * or possiblc 'netsnmp_check_vb_type_and_size' 
                 */
                ret =
                    netsnmp_check_vb_type_and_size(request->requestvb,
                                                       ASN_OCTET_STR,
                                                       sizeof(table_entry->analogAlarmEnable));
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
				enable = request->requestvb->val.string[0]; 
				//if ((enable < 0) || (enable > 0x0f)){		
				if ((enable < 0) || (enable > 0x31)){
                    netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
                    return SNMP_ERR_NOERROR;					
				}

				
                break;
            case COLUMN_ANALOGALARMHIHI:
                /*
                 * or possibly 'netsnmp_check_vb_int_range' 
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
			/*	if (table_entry && !valid_snmp_alarm_threshold(vb_int(request->requestvb), table_entry->value_bottom, table_entry->value_top))
				{
                    		netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
                    		return SNMP_ERR_NOERROR;					
				}
			*/
                break;
            case COLUMN_ANALOGALARMHI:
                /*
                 * or possibly 'netsnmp_check_vb_int_range' 
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
			/*	if (table_entry && !valid_snmp_alarm_threshold(vb_int(request->requestvb), table_entry->value_bottom, table_entry->value_top))
				{
                   			netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
                    		return SNMP_ERR_NOERROR;					
				}
			*/	
                break;
            case COLUMN_ANALOGALARMLO:
                /*
                 * or possibly 'netsnmp_check_vb_int_range' 
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
				/*
				if (table_entry && !valid_snmp_alarm_threshold(vb_int(request->requestvb), table_entry->value_bottom, table_entry->value_top))
				{
                    		netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
                    		return SNMP_ERR_NOERROR;					
				}
				*/
                break;
            case COLUMN_ANALOGALARMLOLO:
                /*
                 * or possibly 'netsnmp_check_vb_int_range' 
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, ret);
                    return SNMP_ERR_NOERROR;
                }
			/*	
				if (table_entry && !valid_snmp_alarm_threshold(vb_int(request->requestvb), table_entry->value_bottom, table_entry->value_top))
				{
                    		netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
                    		return SNMP_ERR_NOERROR;					
				}
			*/
                break;
            case COLUMN_ANALOGALARMDEADBAND:
                /*
                 * or possibly 'netsnmp_check_vb_int_range' 
                 */
                ret = netsnmp_check_vb_int(request->requestvb);
                if (ret != SNMP_ERR_NOERROR) {
                    netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_ERR_NOTWRITABLE);
                return SNMP_ERR_NOERROR;
            }
        }
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        for (request = requests; request; request = request->next) {
            table_entry = (struct analogPropertyTable_entry *)
                netsnmp_extract_iterator_context(request);
            table_info = netsnmp_extract_table_info(request);

			//HC_TABLE_ENTRY_ASSERT(reqinfo, table_entry, table_info, request);
            switch (table_info->colnum) {
            case COLUMN_ANALOGALARMENABLE:
                memset(table_entry->analogAlarmEnable, 0,
                       sizeof(table_entry->analogAlarmEnable));
                memcpy(table_entry->analogAlarmEnable,
                       request->requestvb->val.string,
                       request->requestvb->val_len);
                table_entry->analogAlarmEnable_len =
                    request->requestvb->val_len;
				table_entry->row_updates |= (1 << table_info->colnum);
                break;
            case COLUMN_ANALOGALARMHIHI:
			/*	if (!between(vb_int(request->requestvb), table_entry->value_top, table_entry->analogAlarmHI)){
					netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
					continue;
				}
			*/					
                table_entry->analogAlarmHIHI =
                    *request->requestvb->val.integer;
				table_entry->row_updates |= (1 << table_info->colnum);				
                break;
            case COLUMN_ANALOGALARMHI:
			/*	if (!between(vb_int(request->requestvb), table_entry->analogAlarmHIHI, table_entry->analogAlarmLO)){
					netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
					continue;
				}
			*/
                table_entry->analogAlarmHI =
                    *request->requestvb->val.integer;
				table_entry->row_updates |= (1 << table_info->colnum);				
                break;
            case COLUMN_ANALOGALARMLO:
			/*	if (!between(vb_int(request->requestvb), table_entry->analogAlarmHI, table_entry->analogAlarmLOLO)){
					netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
					continue;
				}
			*/	
                table_entry->analogAlarmLO =
                    *request->requestvb->val.integer;
				table_entry->row_updates |= (1 << table_info->colnum);				
                break;
            case COLUMN_ANALOGALARMLOLO:
			/*	if (!between(vb_int(request->requestvb), table_entry->analogAlarmLO, table_entry->value_bottom)){
					netsnmp_set_request_error(reqinfo, request, SNMP_ERR_WRONGVALUE);
					continue;
				}
			*/	
                table_entry->analogAlarmLOLO =
                    *request->requestvb->val.integer;
				table_entry->row_updates |= (1 << table_info->colnum);				
                break;
            case COLUMN_ANALOGALARMDEADBAND:
                table_entry->analogAlarmDeadband =
                    *request->requestvb->val.integer;
				table_entry->row_updates |= (1 << table_info->colnum);				
                break;
            }
			//analogPropertyTable_backupCommitEntry(table_entry);
        }
        break;

    case MODE_SET_UNDO:
		{	
			netsnmp_cache  *cache = netsnmp_cache_reqinfo_extract(reqinfo, reginfo->handlerName);
			if (cache){
				cache->valid = 0;
			}
        }		
		//analogPropertyTable_removeAllCommitEntry();
		//analogPropertyTable_load(NULL, NULL);
        break;

    case MODE_SET_COMMIT:
		for (table_entry = analogPropertyTable_head; table_entry; table_entry = table_entry->next){
			if (table_entry->row_updates) {
				DEBUGMSGTL((DBGID, "analogPropertyTable backup CommitEntry (%d)\n", table_entry->alarms_id));
                analogPropertyTable_backupCommitEntry(table_entry);				
			}	
		}		
		
		local_commit(netsnmp_cache_reqinfo_extract(reqinfo, reginfo->handlerName));		
        break;	
	#endif
    }
	
    return SNMP_ERR_NOERROR;
}


int analogPropertyTable_load(netsnmp_cache *cache, void *vmagic)
{
	struct analogPropertyTable_entry entry;
	int ret=0, i;
	snmp_alarm_t *pinfo = NULL;
	int alarms_num;

	COMMIT_PENDING_ASSERT();

	/* Free All */

	analogPropertyTable_removeAllEntry();

	/* Load All */
	alarms_num = 1;
	/*alarms_num =ipc_snmp_alarm_num(&agent)*/
	if (alarms_num == 0){
		DBG_ASSERT(0, "alarms num is 0");
		return 0;
	}
	
	#define ALARM_THRESHOLD 1
	pinfo = &g_info;
	#if 0
	pinfo->enable = 1;		
	pinfo->threshold_lolo = 1;	
	pinfo->threshold_lo = 2; 	
	pinfo->threshold_hi = 3; 
	pinfo->threshold_hihi = 4;	 
	
	pinfo->objid[MAX_OID_LEN] = 0;
	pinfo->objid_len	=  OID_LENGTH(pinfo->objid);
	pinfo->threshold_buttom  = 5; 
	pinfo->threshold_top	 = 6;
	pinfo->type = 1;	
	pinfo->id	= 7;	
	pinfo->event_value = 17409;	
	#endif
	#if 0
	ret = ipc_snmp_alarm_get(&agent, pinfo, &alarms_num);
	if (HC_IPC_ERROR(ret)) {
		goto safe_exit;
	}
	#endif
	for (i = 0; i < alarms_num; i ++){
		if (pinfo[i].type == ALARM_THRESHOLD){
			analogPropertyTable_setEntry(&entry, &pinfo[i]);	
			analogPropertyTable_createEntry(&entry);	
		}
	}

safe_exit:
	
	HC_IPC_ASSERT(ret);
	
    return ret; 
} 

void analogPropertyTable_free(netsnmp_cache *cache, void *magic)
{
	DEBUGMSGTL((DBGID, "Free analogPropertyTable Group\n"));  
}

static int analogPropertyTable_checkEntry(struct analogPropertyTable_entry *ptr)
{
	if (ptr){
		if (ptr->value_bottom < ptr->value_top){
			if ((ptr->value_bottom <= ptr->analogAlarmLOLO)
				&& (ptr->analogAlarmLOLO <= ptr->analogAlarmLO)
				&& (ptr->analogAlarmLO <= ptr->analogAlarmHI)
				&& (ptr->analogAlarmHI <= ptr->analogAlarmHIHI)
				&& (ptr->analogAlarmHIHI <= ptr->value_top)){
				return 1;
			}
		}else {
			if ((ptr->value_top <= ptr->analogAlarmHIHI)
				&& (ptr->analogAlarmHIHI <= ptr->analogAlarmHI)
				&& (ptr->analogAlarmHI <= ptr->analogAlarmLO)
				&& (ptr->analogAlarmLO <= ptr->analogAlarmLOLO)
				&& (ptr->analogAlarmLOLO <= ptr->value_bottom)){
				return 1;
			}
		}
	}
	return 0;
}

static int analogPropertyTable_commitChange(	void)
{
	int ret = 0, count;
	struct analogPropertyTable_entry *ptr;
	snmp_alarm_t *req_alarms = NULL, *sa;

	count = 0;
	for (ptr = analogPropertyTable_commit_head; ptr != NULL; ptr = ptr->next) {
		count ++;
	}

	if (count == 0){
		return 0;
	}

	req_alarms = (snmp_alarm_t *)malloc(sizeof(snmp_alarm_t) * count);

	if (req_alarms == NULL){
		DBG_ASSERT(0, "malloc(%d)", sizeof(snmp_alarm_t) * count);
		return 0;
	}

	memset(req_alarms, 0, sizeof(snmp_alarm_t) * count);

	//sa = req_alarms;
	sa = &g_info;
	count = 0;
	for ( ptr = analogPropertyTable_commit_head; ptr != NULL; ptr = ptr->next) {

		if (!analogPropertyTable_checkEntry(ptr)){
			DBG_ASSERT(0, "analogPropertyTable values disorder");
		}
		
		sa->enable = ptr->analogAlarmEnable[0];
		sa->threshold_lolo = ptr->analogAlarmLOLO;
		sa->threshold_lo = ptr->analogAlarmLO;
		sa->threshold_hi = ptr->analogAlarmHI;
		sa->threshold_hihi = ptr->analogAlarmHIHI;	
		sa->AlarmDeadband = ptr->analogAlarmDeadband;

		sa->id = ptr->alarms_id;
		sa->type = ptr->type;
		sa->event_value = ptr->event_value;
		sa ++;
		count ++;
	}
	#if 0
	if (count){
		ret = ipc_snmp_alarm_set(&agent, req_alarms, count);
	}
	#endif
	if (req_alarms) free(req_alarms);

	HC_IPC_ASSERT(ret);
	return ret;
}



void analogPropertyTable_commit(unsigned int regNo, void *clientargs)
{
	netsnmp_cache  *cache = clientargs;
	
	analogPropertyTable_commitChange();	
	
	analogPropertyTable_removeAllCommitEntry();
	
	COMMIT_CLEAR_PENDING(); 	

	if (cache){
		cache->valid = 0;
	}
}




