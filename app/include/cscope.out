cscope 15 $HOME/EPN/ZG/hexicom/trunk/app/include -q 0000006890 0000357041
	@drv_wtd_user.h

1 #i‚de‡
_DRV_WTD_USER_H_


2 
	#_DRV_WTD_USER_H_


	)

4 #ifde‡ 
__˝lu•lus


9 
	#DRV_WTD_REBOOT_OK
 0

	)

10 
	#DRV_WTD_REBOOT_ERR
 -1

	)

12 
	#APP_WTD_NAME
 "≠p_w©chdog"

	)

13 
	#WTD_DEV_NAME
 "/dev/mw_wtd_dev"

	)

15 
Drv_W©chdog_ReboŸ
();

18 #ifde‡ 
__˝lu•lus


	@if_notifier.h

1 #i‚de‡
_IF_NOTIFY_H_


2 
	#_IF_NOTIFY_H_


	)

4 #ifde‡ 
__˝lu•lus


8 
	snŸifõr_block
 {

9 (*
nŸifõr_ˇŒ
)(
ifödex_t
 
ifödex
,
nŸifõr_block
 *, , *);

10 
nŸifõr_block
 *
√xt
;

11 
¥i‹ôy
;

12 
ifödex_t
 
ifödex
;

13 
i·y≥mask
;

14 
evítmask
;

18 
	søw_nŸifõr_hód
 {

19 
nŸifõr_block
 *
hód
;

22 
	#NOTIFY_DONE
 0x0000

	)

23 
	#NOTIFY_OK
 0x0001

	)

24 
	#NOTIFY_STOP_MASK
 0x8000

	)

25 
	#NOTIFY_BAD
 (
NOTIFY_STOP_MASK
|0x0002)

	)

28 
	#IF_NOTIFY_OK
 0

	)

29 
	#IF_NOTIFY_ERR
 1

	)

30 
	#IF_NOTIFY_STOP
 2

	)

31 
	#IF_NOTIFY_PAUSE
 3

	)

38 
UINT32
 
	tif_evít_t
;

40 
	eif_nŸifõr_¥i‹ôy
 {

41 
IF_IFATTR_PRIO
 = -1500,

42 
IF_INTF8021Q_PRIO
 = -1400,

43 
IF_MACCLONE_PRIO
 = -1300,

44 
IF_MSTDEV_INIT_PRIO
 = -1000,

45 
IF_MWAN_PHYUP_PRIO
 = -850,

46 
IF_DNS_PRIO
 = -800,

47 
IF_LINKSPY_PRIO
 = -700,

48 
IF_MWAN_REST_PRIO
 = -600,

49 
IF_MSTDIAL_PRIO
 = -500,

50 
IF_MSTUPNP_PRIO
 = -450,

51 
IF_SRCRT_PRIO
 = -450,

52 
IF_MSTDEV_DOWN_PRIO
 = -400,

53 
IF_MSTARP_PRIO
 = -300,

54 
IF_MSTDHCPD_PRIO
 = -200,

55 
IF_MSTACL_PRIO
 = -100,

56 
IF_MSTROUTE_PRIO
 = -90,

57 
IF_NOTIFIER_PRIO_NORMAL
 = 0,

58 
IF_ROUTE_ADDR_PRIO
 = 500,

59 
IF_DIAL_INET_FORWARDING_PRIO
 = 1600,

60 
IF_CFG_PRIO
 = 2000

63 
	eif_evít_shi·
 {

64 
IF_NOTIFY_PHYUP_SHIFT
 = 0,

65 
IF_NOTIFY_PHYDOWN_SHIFT
,

66 
IF_NOTIFY_ADDRADD_SHIFT
,

67 
IF_NOTIFY_ADDRREM_SHIFT
,

68 
IF_NOTIFY_INTFADD_SHIFT
,

69 
IF_NOTIFY_INTFREM_SHIFT
,

70 
IF_NOTIFY_INTFENABLE_SHIFT
,

71 
IF_NOTIFY_INTFDISABLE_SHIFT
,

72 
IF_NOTIFY_BRIDGEATTACH_SHIFT
,

73 
IF_NOTIFY_BRIDGEDETACH_SHIFT
,

74 
IF_NOTIFY_GOING_DIALUP_SHIFT
,

75 
IF_NOTIFY_DIALUP_SHIFT
,

76 
IF_NOTIFY_DIALDOWN_SHIFT
,

77 
IF_NOTIFY_ALREADY_DIALDOWN_SHIFT
,

78 
IF_NOTIFY_INTF_ALREADYREM_SHIFT
,

79 
IF_NOTIFY_INTF_DIALSTART_SHIFT
,

80 
IF_NOTIFY_INTF_DIALEND_SHIFT
,

81 
IF_NOTIFY_ALREADY_INIT_SHIFT
,

83 
IF_NOTIFY_MAXCOUNT_SHIFT


86 
	eif_evít
 {

87 
IF_NOTIFY_PHYUP
 = (1 << 
IF_NOTIFY_PHYUP_SHIFT
),

88 
IF_NOTIFY_PHYDOWN
 = (1 << 
IF_NOTIFY_PHYDOWN_SHIFT
),

89 
IF_NOTIFY_ADDRADD
 = (1 << 
IF_NOTIFY_ADDRADD_SHIFT
),

90 
IF_NOTIFY_ADDRREM
 = (1 << 
IF_NOTIFY_ADDRREM_SHIFT
),

91 
IF_NOTIFY_INTFADD
 = (1 << 
IF_NOTIFY_INTFADD_SHIFT
),

92 
IF_NOTIFY_INTFREM
 = (1 << 
IF_NOTIFY_INTFREM_SHIFT
),

93 
IF_NOTIFY_INTFENABLE
 = (1 << 
IF_NOTIFY_INTFENABLE_SHIFT
),

94 
IF_NOTIFY_INTFDISABLE
 = (1 << 
IF_NOTIFY_INTFDISABLE_SHIFT
),

95 
IF_NOTIFY_BRIDGEATTACH
 = (1 << 
IF_NOTIFY_BRIDGEATTACH_SHIFT
),

96 
IF_NOTIFY_BRIDGEDETACH
 = (1 << 
IF_NOTIFY_BRIDGEDETACH_SHIFT
),

97 
IF_NOTIFY_GOING_DIALUP
 = (1 << 
IF_NOTIFY_GOING_DIALUP_SHIFT
),

98 
IF_NOTIFY_DIALUP
 = (1 << 
IF_NOTIFY_DIALUP_SHIFT
),

99 
IF_NOTIFY_DIALDOWN
 = (1 << 
IF_NOTIFY_DIALDOWN_SHIFT
),

100 
IF_NOTIFY_ALREADY_DIALDOWN
 = (1 << 
IF_NOTIFY_ALREADY_DIALDOWN_SHIFT
),

101 
IF_NOTIFY_INTF_ALREADYREM
 = (1 << 
IF_NOTIFY_INTF_ALREADYREM_SHIFT
),

102 
IF_NOTIFY_INTF_DIALSTART
 = (1 << 
IF_NOTIFY_INTF_DIALSTART_SHIFT
),

103 
IF_NOTIFY_INTF_DIALEND
 = (1 << 
IF_NOTIFY_INTF_DIALEND_SHIFT
),

104 
IF_NOTIFY_ALREADY_INIT
 = (1 << 
IF_NOTIFY_ALREADY_INIT_SHIFT
),

105 
IF_NOTIFY_MAXCOUNT
 = (1 << 
IF_NOTIFY_MAXCOUNT_SHIFT
),

106 
IF_NOTIFY_ALL
 = 0xffffffff

108 
INT32
 
	tIF_CALLBACK_RET_T
;

109 
	#NOTIFY_STOP
 (
NOTIFY_OK
|
NOTIFY_STOP_MASK
)

	)

111 
ifm_nŸifõr_ªgi°î
(
nŸifõr_block
 *
nb
);

112 
ifm_nŸifõr_uƒegi°î
(
nŸifõr_block
 *
nb
);

113 
ifm_ˇŒ_nŸifõrs
(
ifödex_t
 
ifödex
,
vÆ
, *
v
);

115 
	#IF_ALL_TYPEMASK
 (~0x0UL)

	)

117 #ifde‡ 
__˝lu•lus


	@ipc_protocol.h

8 #i‚de‡
IPC_PROTOCOL_H_


9 
	#IPC_PROTOCOL_H_


	)

11 
	~<ba£ty≥.h
>

12 
	~<ˇbÀ.h
>

15 
	~<ufûe_¥o˚ss.h
>

16 
	~<u£r.h
>

17 
	~<lw_ty≥.h
>

18 
	~<lw_if_pub.h
>

19 
	~<lw_drv_pub.h
>

21 
	~<¨∑/öë.h
>

22 
	~<sys/sockë.h
>

23 
	~<time.h
>

24 
	~<sys/time.h
>

25 
	~<debug.h
>

28 #i‚de‡
__∑cked


29 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

32 
	#IPC_SERVER_PATH
 "/tmp/ùc_£rvî"

	)

34 
	#IPC_MAX_DATA_SIZE
 1024

	)

35 
	#MAX_CONFIG_VAL_SIZE
 256

	)

39 
	#SYS_MVLAN
 0x01

	)

40 
	#SYS_HTTPS
 0x02

	)

41 
	#SYS_SSH
 0x04

	)

42 
	#SYS_TELNET
 0x08

	)

44 
	#READ_LOCK
(
fd
, 
off£t
, 
whí˚
, 
Àn
Ë\

	)

45 
	$lock_ªg
(
fd
, 
F_SETLK
, 
F_RDLCK
, 
off£t
, 
whí˚
, 
Àn
)

46 
	#WRITE_LOCK
(
fd
, 
off£t
, 
whí˚
, 
Àn
Ë\

	)

47 
	$lock_ªg
(
fd
, 
F_SETLK
, 
F_WRLCK
, 
off£t
, 
whí˚
, 
Àn
)

48 
	#UNLOCK
(
fd
, 
off£t
, 
whí˚
, 
Àn
)\

	)

49 
	$lock_ªg
(
fd
, 
F_SETLK
, 
F_UNLCK
, 
off£t
, 
whí˚
, 
Àn
)

50 
	`lock_ªg
(
fd
, 
cmd
, 
ty≥
, 
off_t
 
off£t
, 
whí˚
, off_à
Àn
);

51 
cou¡num
;

53 
	#SYS_DEFAULT_IPADDR
 "192.168.0.1"

	)

54 
	#SYS_DEFAULT_NETMASK
 "255.255.255.0"

	)

55 
	#SYS_NETIF_NAME
 "ëh0"

	)

56 
	#SYS_VIF_NAME
 "ëh0.1"

	)

57 
	#SYS_VLANIF_NUM
 "1"

	)

58 
	#SYS_RESOLV_CONF
 "/ëc/ªsﬁv.c⁄f"

	)

59 
	#SYS_RESOLV_CONF_TMP
 "/ëc/ªsﬁv.c⁄f.tmp"

	)

60 
	#SYS_UDHCPC_PID_FILE
 "/tmp/udh˝c.pid"

	)

62 
	#SYS_NTPCLIENT_OK_FILE
 "/tmp/¡p˛õ¡.txt"

	)

64 
	#SYSLOG_FILE_PATH
 "/v¨/log/mesßges"

	)

66 
	#SYS_CONFIG_TMP_FILE
 "/tmp/EPN104.c⁄fig"

	)

68 
	#DEFAULT_CFG_FILE
 "/ëc/c⁄fig/deÁu….txt"

	)

70 
	#INTERFACE_STATE_UP
 "up"

	)

71 
	#INTERFACE_STATE_DOWN
 "down"

	)

73 
	#PROCESS_DISABLE
 0

	)

74 
	#PROCESS_ENABLE
 1

	)

75 
	#LOOP_STARTUP_CMD
 "/u§/sbö/lo›d &"

	)

76 
	#LOOPD_NAME
 "lo›d"

	)

78 
	#MAX_COMMUNITY_SIZE
 64

	)

79 
	#MAX_SNMPINFO_SIZE
 80

	)

80 
	#MAX_VERSION_SIZE
 32

	)

81 
	#MAX_BUILDTIME_SIZE
 64

	)

82 
	#MAX_SYSINFO_SIZE
 32

	)

83 
	#MAX_ADMIN_NAME_SIZE
 16

	)

84 
	#MAX_ADMIN_PWD_SIZE
 16

	)

85 
	#MAX_HOSTNAME_SIZE
 32

	)

86 
	#MAX_DOMAIN_SIZE
 32

	)

87 
	#MAX_URL_SIZE
 128

	)

88 
	#MAX_IP_STR_SIZE
 18

	)

89 
	#MAX_DNS_NUM
 3

	)

90 
	#MAX_ADMIN_NUM
 2

	)

91 
	#MAX_INTERFACE_STATE_SIZE
 16

	)

92 
	#UNI_MAX_NUM
 4

	)

94 
	#MAX_HOSTNAME_SIZE_T
 16

	)

95 
	#MAX_SUPER_SIZE
 16

	)

96 
	#SNMP_V1_VAL
 1

	)

97 
	#SNMP_V2c_VAL
 4

	)

98 
	#SNMP_V3_VAL
 9

	)

100 
	#SNMP_AGENT_FLAG
 0x0001

	)

101 
	#SNMP_ADD_COMM_FLAG
 0x0002

	)

102 
	#SNMP_DEL_COMM_FLAG
 0x0004

	)

103 
	#SNMP_TRAP_FLAG
 0x0008

	)

104 
	#SNMP_ADD_GROUP_FLAG
 0x0010

	)

105 
	#SNMP_DEL_GROUP_FLAG
 0x0020

	)

106 
	#SNMP_ADD_USER_FLAG
 0x0040

	)

107 
	#SNMP_DEL_USER_FLAG
 0x0080

	)

108 
	#SNMP_CATVINFO_FLAG
 0x0100

	)

109 
	#DONT_TRIGER_SIGNAL
 0x0200

	)

110 
	#ENGINE_MAX_SIZE
 128

	)

111 
	#MAX_SNMP_COMM_NAME_SIZE
 33

	)

112 
	#MAX_SNMP_GROUP_NAME_SIZE
 33

	)

113 
	#SNMP_ACESS_MODE_RO
 0

	)

114 
	#SNMP_ACESS_MODE_RW
 1

	)

115 
	#SNMP_ACESS_MODE_NULL
 2

	)

117 
	#MAX_SNMP_USER_NAME_SIZE
 32

	)

118 
	#MAX_SNMP_USER_GROUP_SIZE
 33

	)

119 
	#MAX_SNMP_USER_PASSWORD_SIZE
 64

	)

120 
	#MAX_SNMP_USER_ENPASSWORD_SIZE
 64

	)

121 
	#MAX_SNMP_USER_COUNT
 4

	)

122 
	#SNMP_GROUP_SECU_NOAUTHNOENCRYPT
 0

	)

123 
	#SNMP_GROUP_SECU_AUTHNOENCRYPT
 1

	)

124 
	#SNMP_GROUP_SECU_AUTHENCRYPT
 2

	)

125 
	#SNMP_GROUP_SECU_NULL
 3

	)

127 
	#SNMP_GROUP_MODE_RO
 0

	)

128 
	#SNMP_GROUP_MODE_RW
 1

	)

129 
	#SNMP_USER_SECU_NOAUTHNOENCRYPT
 0

	)

130 
	#SNMP_USER_SECU_AUTHNOENCRYPT
 1

	)

131 
	#SNMP_USER_SECU_AUTHENCRYPT
 2

	)

132 
	#SNMP_USER_SECU_NULL
 3

	)

134 
	#MAX_SNMP_COMM_COUNT
 4

	)

135 
	#MAX_SNMP_GROUP_COUNT
 4

	)

136 
	#NO_DEL_NUM
 -1

	)

137 
	#NO_ADD_NUM
 -1

	)

138 
	#SNMP_DISABLE
 0

	)

139 
	#SNMP_ENABLE
 1

	)

140 
	#SNMP_DEBUG
 0

	)

141 
	#SNMP_ENABLE_LEN
 1

	)

142 
	#COMMONDEVICESID_MAX
 40

	)

143 
	#ANALOGALARM_TABLE
 3

	)

145 #i‡(
SNMP_DEBUG
)

146 
	#SNMP_STARTUP_CMD
 "/usr/sbin/snmpd -Lo -C -c /etc/config/snmpd.conf \

147 -
D¢mpv3
 \

	)

148 -
Dusm
 \

149 -
D√t¢mp_udp
 \

150 -
Dªad_c⁄fig
:
∑r£r
 \

151 -
D˛tC⁄figRemŸeUpgødeTabÀ
 \

152 -
DmiscIdít
 \

153 -
Dd‹DCPowîTabÀ
" 

155 
	#SNMP_STARTUP_CMD
 "/u§/sbö/¢mpd -Lÿ-C -¯/ëc/c⁄fig/¢mpd.c⁄f"

	)

158 
	#SNMPD_NAME
 "¢mpd"

	)

159 
	#SNMPDCONFI_PATH
 "/ëc/c⁄fig/¢mpd.c⁄f"

	)

160 
	#DONT_REREAD_CONF
 0

	)

161 
	#NEED_REREAD_CONF
 1

	)

162 
	#MAX_LINE_STRING_SIZE
 1024

	)

163 
	#CATV_STARTUP_CMD
 "/u§/sbö/ˇtvcom &"

	)

166 
	#DROPBEAR_NAME
 "dr›bór"

	)

167 
	#DROPBEAR_FULL_PATH
 "/u§/loˇl/sbö/dr›bór"

	)

168 
	#SSH_DFAULT_PORT
 22

	)

172 *(*
toSåög
)();

173 
	`uöt32_t
 (*
toI¡
)();

174 *(*
toD©e
)();

176 
	tvîsi⁄_t
;

180 
IP_PROTO_STATIC
 = 0,

181 
IP_PROTO_DYNAMIC


183 
	tù_¥Ÿo_t
;

186 
ö_addr
 
ù
;

187 
ö_addr
 
sub√t
;

188 
ö_addr
 
brﬂdˇ°
;

189 
ö_addr
 
g©eway
;

190 
ö_addr
 
dns
[
MAX_DNS_NUM
];

192 
	t√tif_∑øm_t
;

195 
uöt16_t
 
mvœn
;

196 
uöt8_t
 
hâps_í
;

197 
uöt8_t
 
ssh_í
;

198 
uöt16_t
 
ssh_p‹t
;

199 
uöt8_t
 
ã ë_í
;

200 
uöt16_t
 
ã ë_p‹t
;

202 
	tsys_£curôy_t
;

204 
uöt8_t
 
ï⁄_loid
[24 + 1];

205 
uöt8_t
 
ï⁄_∑sswd
[12 + 1];

207 
	tsys_ï⁄_t
;

210 
¢mp_comm_«me
[
MAX_SNMP_COMM_NAME_SIZE
];

211 
uöt8_t
 
¢mp_ac˚ss_mode
;

212 }
	t¢mp_communôy_t
;

215 
¢mp_group_«me
[
MAX_SNMP_GROUP_NAME_SIZE
];

216 
uöt8_t
 
¢mp_group_£curôy
;

217 
uöt8_t
 
¢mp_group_mode
;

218 }
	t¢mp_group_t
;

220 
¢mp_u£r_«me
[
MAX_SNMP_USER_NAME_SIZE
];

221 
uöt8_t
 
¢mp_u£r_£curôy
;

222 
¢mp_u£r_group
[
MAX_SNMP_USER_GROUP_SIZE
];

223 
¢mp_u£r_∑ssw‹d
[
MAX_SNMP_USER_PASSWORD_SIZE
];

224 
¢mp_u£r_í∑ssw‹d
[
MAX_SNMP_USER_ENPASSWORD_SIZE
];

225 }
	t¢mp_u£r_t
;

227 
uöt16_t
 
¢mp_£t_Êag
;

229 
uöt8_t
 
¢mp_í
;

230 
¢mp_ígöeID
[
ENGINE_MAX_SIZE
];

231 
uöt16_t
 
¢mp_max_∑ckë_Àn
;

232 
¢mp_loˇti⁄
[
MAX_SNMPINFO_SIZE
+1];

233 
¢mp_c⁄è˘
[
MAX_SNMPINFO_SIZE
+1];

234 
uöt8_t
 
¢mp_vîsi⁄
;

235 
¢mp_åu°_ho°
[
MAX_IP_STR_SIZE
];

237 
uöt8_t
 
¢mp_comm_cuºít_cou¡
;

238 
¢mp_communôy_t
 
¢mp_comm
[
MAX_SNMP_COMM_COUNT
];

242 
öt8_t
 
¢mp_add_which_num
;

245 
öt8_t
 
¢mp_dñ_which_num
;

248 
uöt8_t
 
¢mp_å≠_í
;

249 
ö_addr
 
¢mp_å≠_ù
;

250 
uöt16_t
 
¢mp_å≠_com
;

251 
¢mp_å≠_communôy
[
MAX_COMMUNITY_SIZE
];

252 
uöt8_t
 
¢mp_å≠_vîsi⁄
;

253 
uöt8_t
 
¢mp_å≠_ß„
;

254 
uöt8_t
 
¢mp_œ°_ßve_ß„_num
;

257 
uöt8_t
 
¢mp_u£r_cuºít_cou¡
;

258 
¢mp_u£r_t
 
¢mp_u£r
[
MAX_SNMP_USER_COUNT
];

261 
uöt8_t
 
¢mp_group_cuºít_cou¡
;

262 
¢mp_group_t
 
¢mp_group
[
MAX_SNMP_GROUP_COUNT
];

264 
	tsys_¢mp_t
;

269 
ho°«me
[
MAX_HOSTNAME_SIZE
];

270 
i‚ame
[
IFNAMESIZE
];

271 
ëhî√t_addr_t
 
mac
;

272 
uöt8_t
 
ù_¥Ÿo
;

273 
√tif_∑øm_t
 
√tif
;

274 
√tif_∑øm_t
 
√tif_°©ic
;

275 
uöt32_t
 
Àa£_time
;

276 
uöt8_t
 
dns_°©ic
;

277 
domaö
[
MAX_DOMAIN_SIZE
];

278 
uöt32_t
 
mtu
;

279 
öãrÁ˚_°©e
[
MAX_INTERFACE_STATE_SIZE
];

281 
	tsys_√tw‹k_t
;

283 
uöt16_t
 
m_vœn
;

284 
uöt16_t
 
vœn_öãrÁ˚
;

286 
	tsys_mvœn_t
;

288 
uöt8_t
 
lo›back_íabÀ
;

289 
uöt8_t
 
lo›_upd©e
;

290 
uöt8_t
 
lo›back_unis_°©us
[
UNI_MAX_NUM
];

292 
	tsys_lo›_t
;

295 
uöt8_t
 
sy¶og_í
;

296 
sy¶og_ù
[
MAX_IP_STR_SIZE
];

297 
uöt8_t
 
sy¶og_degªe
;

298 
uöt8_t
 
sy¶og_ßve_degªe
;

299 
uöt16_t
 
sy¶og_p‹t
;

300 
uöt8_t
 
sy¶og_c⁄sﬁe_í
;

301 
uöt8_t
 
sy¶og_c⁄sﬁe_ßve_degªe
;

302 }
	tsys_sy¶og_t
;

305 
ht_«me
[
MAX_HOSTNAME_SIZE_T
+1];

306 
ht_su≥r
[
MAX_SUPER_SIZE
+1];

307 }
	tho°_öô_t
;

311 
ACTION_NONE
 = 0,

312 
ACTION_RELEASE
 = 1,

313 
ACTION_RENEW


315 
	tdh˝c_a˘i⁄_t
;

318 
ho°«me
[
MAX_HOSTNAME_SIZE
];

319 
uöt8_t
 
ù_¥Ÿo
;

321 
√tif_∑øm_t
 
√tif
;

322 
uöt8_t
 
a˘i⁄
;

324 
öãrÁ˚_°©e
[
MAX_INTERFACE_STATE_SIZE
];

326 
	tùc_√tw‹k_t
;

330 
uöt32_t
 
u±ime
;

331 
uöt16_t
 
mvœn
;

332 
sw_vîsi⁄
[
MAX_VERSION_SIZE
];

333 
hw_vîsi⁄
[
MAX_VERSION_SIZE
];

334 
buûdtime
[
MAX_VERSION_SIZE
];

335 
sw_öãr_vîsi⁄
[
MAX_VERSION_SIZE
];

336 
boŸlﬂd_vîsi⁄
[
MAX_VERSION_SIZE
];

337 
kî√l_vîsi⁄
[
MAX_BUILDTIME_SIZE
];

338 
kî√l_buûdtime
[
MAX_BUILDTIME_SIZE
];

339 
ëhî√t_addr_t
 
sysmac
;

342 
	tsys_öfo_t
;

346 
time_t
 
time
;

347 
uöt8_t
 
z⁄e
;

348 
uöt8_t
 
¡p_í
;

349 
£rvî
[
MAX_URL_SIZE
];

350 
uöt8_t
 
¡p_ok
;

351 
time_t
 
time_bef‹e_ch™ge
;

353 
	tsys_time_t
;

357 
uöt8_t
 
íabÀ
;

358 
ﬁd_«me
[
MAX_ADMIN_NAME_SIZE
];

359 
«me
[
MAX_ADMIN_NAME_SIZE
];

360 
pwd
[
MAX_ADMIN_PWD_SIZE
];

361 }
	tadmö_t
;

364 
uöt16_t
 
idÀ_time
;

365 
cou¡
;

366 
admö_t
 
u£rs
[
MAX_ADMIN_NUM
];

368 
	tsys_admö_t
;

371 
uöt32_t
 
uiQosTru°mode
;

372 
QueueMode_S
 
Qosqueuemode
;

374 
	tsys_qos_t
;

377 
PORT_CFG_VALUE_S
 
p‹t_cfg_vÆ
[
LOGIC_PORT_NO
];

379 
	tsys_p‹t_t
;

382 
STROM_CTL_S
 
°‹m˛t
[
LOGIC_PORT_NO
];

384 
	tsys_°‹m˘l_t
;

388 
PORT_LINERATE_VALUES
 
p‹t_löî©e_vÆ
[
LOGIC_PORT_NO
];

390 
	tsys_löî©e_t
;

394 
MIRROR_GROUP_S
 
p‹t_múr‹_vÆ
;

396 
	tsys_múr‹_t
;

404 
	#MAX_CATVINFO_SIZE
 10

	)

406 
	eègCATV_ModuÀ_Mask


408 
DEV_STATUS
 = 0x01,

409 
CATV_MM_END


410 } 
	tCATV_MODULE_MASK_E
;

412 
	eègCATV_P¨a_Mask


415 
PM_UPDATE
 = 0x01,

416 
PM_OUTPUT_LEVEL_ATTEN
 = 0x01<<1,

418 } 
	tCATV_PARA_MASK_E
;

420 
	eègCATV_DeÁu…_VÆ


423 
DEF_UPDATE
 = 15,

424 
DEF_OUTPUT_LEVEL_ATTEN
 = 0,

426 } 
	tCATV_DEFAULT_VAL_E
;

429 
UINT16
 
dev_°©us_upd©e
;

430 
so·_vîsi⁄
[
MAX_CATVINFO_SIZE
];

431 
öput_œ£r_powî
[
MAX_CATVINFO_SIZE
];

432 
ãm≥r
[
MAX_CATVINFO_SIZE
];

433 #i‡
	`deföed
(
CONFIG_ZBL_SNMP
)

434 
UINT32
 
öput_œ£r_powî_mw
;

435 
UINT32
 
ouçut_Àvñ
;

436 
UINT32
 
powî_12v
;

438 
ouçut_Àvñ
[
MAX_CATVINFO_SIZE
];

439 
powî_12v
[
MAX_CATVINFO_SIZE
];

441 
UINT32
 
ouçut_Àvñ_©ãn
;

442 
UINT8
 
moduÀ_mask
;

443 
UINT32
 
∑ø_mask
;

444 }
	tˇtvöfo_t
;

450 #ifde‡
CONFIG_WLAN_AP


451 *
íabÀ_°r
[];

452 *
modñ_°r
[];

453 *
b™dwidth_°r
[];

454 *
ch™√l_°r
[];

455 *
tx_øã_°r
[];

456 *
fûãr_modñ_°r
[];

457 *
íc_wï_key_Àn_°r
[];

458 *
íc_wï_key_ty≥_°r
[];

459 *
íc_w∑_íc_¥o_°r
[];

460 *
íc_°r
[];

461 *
authty≥_°r
[];

462 
wœn_fd
;

465 
	#MAX_SSID
 4

	)

466 
	#MAX_FILTER
 20

	)

468 
	#ONLY_ALLOW
 1

	)

469 
	#ONLY_FORBIDEN
 0

	)

471 
	#_64BIT_10HEX_5ASCII
 1

	)

472 
	#_128BIT_26HEX_13ASCII
 2

	)

474 
	#ENC_WEP_KEY_TYPE_HEX
 1

	)

475 
	#ENC_WEP_KEY_TYPE_ASCII
 2

	)

477 
	#ENC_WPA_ENCODE_PRO_TKIP
 1

	)

478 
	#ENC_WPA_ENCODE_PRO_AES
 2

	)

479 
	#ENC_WPA_ENCODE_PRO_TKIP_AES
 3

	)

481 
	#WEP_KEY_MAX_SIZE
 30

	)

482 
	#WPA_KEY_MAX_SIZE
 64

	)

483 
	#MASK_NO_USE
 0

	)

485 
	#WALAN_UP
 1

	)

486 
	#WALAN_DOWN
 0

	)

488 
	#WALAN_BLOCK
 2

	)

489 
	#MAC_SIZE
 18

	)

492 
	#MAX_AP_CLIENT
 64

	)

494 
	#DEF_SSID_NAME
 "SSID-«me"

	)

495 
	#DEF_SSID_ENC_WEP_KEY
 "admö"

	)

496 
	#DEF_SSID_ENC_WPA_KEY
 "admö"

	)

497 
	#DEF_FILTER_MAC
 "00.00.00.00.00.00"

	)

498 
	#DEF_FILTER_MAC_DEC
 "deÁu… mac"

	)

499 
	#BLANK_STR
 ""

	)

500 
	#ZERO_STR
 "0"

	)

501 
	#IWPRIV_WLAN0_SET_MIB
 "iw¥iv wœn0 së_mib"

	)

502 
	#IWPRIV_WLAN0_VAPN_SET_MIB
 "iw¥iv wœn0-v≠%d së_mib"

	)

504 
	#UP_STR
 "up"

	)

505 
	#DOWN_STR
 "down"

	)

507 
	#SSID_MASK
 0x80000000

	)

509 
	#SYS_ERR_CHK_RET
(
›
Ë\

	)

511 
UINT32
 
îr_code
; \

512 if((
îr_code
 = (
›
)Ë!
NO_ERROR
) \

514 
	`DBG_PRINTF
("O≥øti⁄ faûed:%d", 
îr_code
); \

515  
îr_code
; \

517 
	}
} 0)

520 
	#SYS_ERR_CHK_NORET
(
›
Ë\

	)

522 
UINT32
 
îr_code
; \

523 if((
îr_code
 = (
›
)Ë!
NO_ERROR
) \

525 
	`DBG_PRINTF
("O≥øti⁄ faûed:%d", 
îr_code
); \

527 
	}
} 0)

531 
	eègWLAN_ModuÀ_Mask


533 
WLAN_MM_BASIC
 = 0x01,

534 
WLAN_MM_SECURITY
 = 0x02,

535 
WLAN_MM_ACCESS_CTR
 = 0x04,

536 
WLAN_MM_ADVANCE
 = 0x08,

537 
WLAN_MM_CLIENT
 = 0x10,

538 
WLAN_MM_END


539 } 
	tWLAN_MODULE_MASK_E
;

543 
	eègWLAN_Modñ


545 
WLAN_MODEL_B_ONLY
 = 1,

546 
WLAN_MODEL_G_ONLY
,

547 
WLAN_MODEL_B_G
,

548 
WLAN_MODEL_N_ONLY
,

549 
WLAN_MODEL_B_G_N
,

550 
WLAN_MODEL_END


551 } 
	tWLAN_MODEL_E
;

555 
	eègWLAN_B™dwidth


557 
WLAN_BANDWIDTH_20MHZ
 = 1,

558 
WLAN_BANDWIDTH_40MHZ
,

559 
WLAN_BANDWIDTH_END


560 } 
	tWLAN_BANDWIDTH_E
;

563 
	eègWLAN_Ch™√l


565 
WLAN_CHANNEL_0_AUTO
 = 0,

566 
WLAN_CHANNEL_1_2_412GHZ
,

567 
WLAN_CHANNEL_2_2_417GHZ
,

568 
WLAN_CHANNEL_3_2_422GHZ
,

569 
WLAN_CHANNEL_4_2_427GHZ
,

570 
WLAN_CHANNEL_5_2_432GHZ
,

571 
WLAN_CHANNEL_6_2_437GHZ
,

572 
WLAN_CHANNEL_7_2_442GHZ
,

573 
WLAN_CHANNEL_8_2_447GHZ
,

574 
WLAN_CHANNEL_9_2_452GHZ
,

575 
WLAN_CHANNEL_10_2_457GHZ
,

576 
WLAN_CHANNEL_11_2_462GHZ
,

577 
WLAN_CHANNEL_12_2_467GHZ
,

578 
WLAN_CHANNEL_13_2_472GHZ
,

579 
WLAN_CHANNEL_END


580 } 
	tWLAN_CHANNEL_E
;

584 
	eègWLAN_TxR©e


586 
WLAN_TXRAT_0_AUTO
 = 0,

587 
WLAN_TXRAT_1_1MBPS
,

588 
WLAN_TXRAT_2_2MBPS
,

589 
WLAN_TXRAT_3_5_5MBPS
,

590 
WLAN_TXRAT_4_6MBPS
,

591 
WLAN_TXRAT_5_6_5MBPS
,

592 
WLAN_TXRAT_6_9MBPS
,

593 
WLAN_TXRAT_7_11MBPS
,

594 
WLAN_TXRAT_8_12MBPS
,

595 
WLAN_TXRAT_9_13MBPS
,

596 
WLAN_TXRAT_10_13_5MBPS
,

597 
WLAN_TXRAT_11_18MBPS
,

598 
WLAN_TXRAT_12_19_5MBPS
,

599 
WLAN_TXRAT_13_24MBPS
,

600 
WLAN_TXRAT_14_26MBPS
,

601 
WLAN_TXRAT_15_27MBPS
,

602 
WLAN_TXRAT_16_36MBPS
,

603 
WLAN_TXRAT_17_39MBPS
,

604 
WLAN_TXRAT_18_40_5MBPS
,

605 
WLAN_TXRAT_19_48MBPS
,

606 
WLAN_TXRAT_20_52MBPS
,

607 
WLAN_TXRAT_21_54MBPS
,

608 
WLAN_TXRAT_22_58_5MBPS
,

609 
WLAN_TXRAT_23_60MBPS
,

610 
WLAN_TXRAT_24_65MBPS
,

611 
WLAN_TXRAT_25_81MBPS
,

612 
WLAN_TXRAT_26_108MBPS
,

613 
WLAN_TXRAT_27_121_5MBPS
,

614 
WLAN_TXRAT_28_135MBPS
,

615 
WLAN_TXRAT_END


616 } 
	tWLAN_TXRATE_E
;

619 
	eègWLAN_TxPowî


621 
TXPOWER_100_PER
 = 100,

622 
TXPOWER_70_PER
 = 70,

623 
TXPOWER_50_PER
 = 50,

624 
TXPOWER_35_PER
 = 35,

625 
TXPOWER_10_PER
 = 10,

626 } 
	tWLAN_TxPowî_E
;

629 
	s__∑cked
 {

630 
UINT8
 
íabÀ
;

631 
WLAN_MODEL_E
 
modñ
;

632 
WLAN_BANDWIDTH_E
 
b™dwidth
;

633 
WLAN_CHANNEL_E
 
ch™√l
;

634 
WLAN_TXRATE_E
 
tx_øã
;

635 
UINT16
 
up_£r_vœn
;

636 }
	twœn_basic_t
;

640 
	eègEn¸y±_Ty≥


642 
ENC_NONE
 = 0,

643 
ENC_WEP
,

644 
ENC_WPA_PSK
,

645 
ENC_WPA2_PSK
,

646 
ENC_WPA_PSK_WPA2_PSK
,

647 }
	tENCRYPT_TYPE_E
;

649 
	eègAUTH_Ty≥


651 
OPEN_SYSTEM
 = 0,

652 
SHARED_KEY
,

653 
AUTH_AUTO


654 }
	tAUTH_TYPE_E
;

656 
	eègWLAN_DeÁu…_VÆ


659 
DEF_ENABLE
 = 
ENABLE
,

660 
DEF_MODEL
 = 
WLAN_MODEL_B_G_N
,

661 
DEF_BANDWIDTH
 = 
WLAN_BANDWIDTH_40MHZ
,

662 
DEF_CHANNEL
 = 
WLAN_CHANNEL_0_AUTO
,

663 
DEF_TX_RATE
 = 
WLAN_TXRAT_0_AUTO
,

666 
DEF_SSID_EN
 = 
ENABLE
,

667 
DEF_SSID_ISOLATE_EN
 = 
DISABLE
,

668 
DEF_SSID_BCAST_EN
 = 
ENABLE
,

669 
DEF_AUTHTYPE
 = 
AUTH_AUTO
,

670 
DEF_SSID_ENC_TYPE
 = 
ENC_NONE
,

671 
DEF_SSID_ENC_WEP_GROUP
 = 1,

672 
DEF_SSID_ENC_WEP_KEY_LEN
 = 
_64BIT_10HEX_5ASCII
,

673 
DEF_SSID_ENC_WEP_KEY_TYPE
 = 
ENC_WEP_KEY_TYPE_ASCII
,

674 
DEF_SSID_ENC_WPA_ENCODE_PRO
 = 
ENC_WPA_ENCODE_PRO_TKIP
,

675 
DEF_SSID_ENC_WPA_KEY_PERIOD
 = 3600,

678 
DEF_FILTER_EN
 = 
DISABLE
,

679 
DEF_FILTER_MODEL
 = 
ONLY_FORBIDEN
,

680 
DEF_FILTER_CURR_COUNT
 = 0,

683 
DEF_BEACON_INTERVAL
 = 100,

684 
DEF_RST_THRESHOLD
 = 2347,

685 
DEF_FRAG
 = 2346,

686 
DEF_DTIM_INTERVAL
 = 1,

687 
DEF_TXPOWER
 = 15,

688 
DEF_WMM_EN
 = 
ENABLE


690 } 
	tWLAN_DEFAULT_VAL_E
;

694 
	eègWLAN_P¨a_Mask


697 
PM_ENABLE
 = 0x00000001,

698 
PM_MODEL
 = 0x00000002,

699 
PM_BANDWIDTH
 = 0x00000004,

700 
PM_CHANNEL
 = 0x00000008,

701 
PM_TX_RATE
 = 0x00000010,

704 
PM_SSID_INDEX
 = 0x00000020,

705 
PM_SSID_NAME
 = 0x00000040,

706 
PM_SSID_ENABLE
 = 0x00000080,

707 
PM_ISOLATE_EN
 = 0x00000100,

708 
PM_BCAST_EN
 = 0x00000200,

709 
PM_ENC_TYPE
 = 0x00000400,

710 
PM_AUTHTYPE
 = 0x80000000,

711 
PM_ENC_WEP_GROUP
 = 0x00000800,

712 
PM_ENC_WEP_KEY_LEN
 = 0x00001000,

713 
PM_ENC_WEP_KEY_TYPE
 = 0x00002000,

714 
PM_ENC_WEP_KEY
 = 0x00004000,

715 
PM_ENC_WPA_KEY
 = 0x00008000,

716 
PM_ENC_WPA_KEY_TYPE
 = 0x00010000,

717 
PM_ENC_WPA_KEY_PERIOD
 = 0x00020000,

720 
PM_FILTER_EN
 = 0x00040000,

721 
PM_FILTER_MODEL
 = 0x00080000,

722 
PM_FILTER_MAC
 = 0x00100000,

723 
PM_FILTER_MAC_DEC
 = 0x00200000,

724 
PM_DEL
 = 0x00400000,

725 
PM_FILTER_UPLOAD
 = 0x00800000,

726 
PM_FILTER_DOWNLOAD
 = 0x01000000,

729 
PM_BEACON_INTERVAL
 = 0x02000000,

730 
PM_RST_THRESHOLD
 = 0x04000000,

731 
PM_FRAG
 = 0x08000000,

732 
PM_DTIM_INTERVAL
 = 0x10000000,

733 
PM_TX_POWER
 = 0x20000000,

734 
PM_WMM_EN
 = 0x40000000,

736 } 
	tWLAN_PARA_MASK_E
;

740 
	eègWLAN_P¨a_Mask_Ext1


743 
PM_UP_SER_VLAN
 = 0x80000000

745 } 
	tWLAN_PARA_MASK_Ext1_E
;

749 
	s__∑cked
 {

750 
UINT8
 
authty≥
;

751 
UINT8
 
group
;

752 
UINT8
 
key_Àn
;

753 
UINT8
 
key_ty≥
;

754 
key
[
WEP_KEY_MAX_SIZE
];

755 }
	tíc_wï_t
;

757 
	s__∑cked
 {

758 
key
[
WPA_KEY_MAX_SIZE
];

759 
UINT8
 
key_ty≥
;

760 
UINT16
 
≥riod
;

761 }
	tíc_w∑_t
;

765 
	s__∑cked
 {

766 
«me
[
BUF_SIZE_32
];

767 
UINT8
 
íabÀ
;

768 
UINT8
 
isﬁ©e_í
;

769 
UINT8
 
bˇ°_í
;

770 
ENCRYPT_TYPE_E
 
íc_ty≥
;

772 
íc_wï_t
 
wï
;

773 
íc_w∑_t
 
w∑
;

774 }
íc
;

776 }
	twœn_ssid_t
;

779 
	s__∑cked
 {

780 
UINT8
 
cuº_cou¡
;

781 
UINT8
 
cuº_ödex
;

782 
wœn_ssid_t
 
ssid
[
MAX_SSID
];

783 }
	twœn_£curôy_t
;

786 
	s__∑cked
 {

787 
mac
[
MAC_SIZE
];

788 
dec
[
BUF_SIZE_32
];

789 }
	twœn_fûãr_t
;

792 
	s__∑cked
 {

793 
UINT8
 
fûãr_í
;

794 
UINT8
 
fûãr_modñ
;

795 
UINT16
 
cuº_cou¡
;

796 
UINT16
 
cuº_ödex
;

797 
wœn_fûãr_t
 
fûãr
[
MAX_FILTER
];

798 
fûíame
[
BUF_SIZE_32
];

799 }
	twœn_ac˚ss_˘r_t
;

802 
	s__∑cked
 {

803 
UINT8
 
bóc⁄_öãrvÆ
;

804 
UINT16
 
πs_thªshﬁd
;

805 
UINT16
 
‰ag
;

806 
UINT8
 
dtim_öãrvÆ
;

807 
UINT8
 
tx_powî
;

808 
UINT8
 
wmm_í
;

809 }
	twœn_adv™˚_t
;

811 
	s__∑cked
 {

812 
UINT8
 
ssid
;

813 
mac
[
MAC_SIZE
];

814 
tx
[
BUF_SIZE_16
];

815 
rx
[
BUF_SIZE_16
];

816 }
	tblock_t
;

819 
	s__∑cked
 {

821 
block_t
 
block
[
MAX_AP_CLIENT
];

823 }
	twœn_˛õ¡_t
;

826 
	s__∑cked
 {

827 
wœn_basic_t
 
wœn_basic
;

828 
wœn_£curôy_t
 
wœn_£curôy
;

829 
wœn_ac˚ss_˘r_t
 
wœn_ac˚ss_˘r
;

830 
wœn_adv™˚_t
 
wœn_adv™˚
;

831 
wœn_˛õ¡_t
 
wœn_˛õ¡
;

832 
WLAN_MODULE_MASK_E
 
moduÀ_mask
;

833 
UINT32
 
∑ø_mask
[
WALAN_BLOCK
];

834 
UINT32
 
dñ_mask
;

835 }
	twœn_≠_t
;

836 #i‡
	`deföed
(
CONFIG_ZBL_SNMP
)

838 
Æ¨mE«bÀ
[
SNMP_ENABLE_LEN
];

839 
™ÆogAœrmSèã
;

840 
™ÆogAœrmHIHI
;

841 
™ÆogAœrmHI
;

842 
™ÆogAœrmLO
;

843 
™ÆogAœrmLOLO
;

844 
™ÆogAœrmDódb™d
;

845 }
	tA«logAœrmPr›îtyTabÀ_t
;

848 
ödex
;

849 
A«logAœrmPr›îtyTabÀ_t
 
A«logAœrmPr›îtyTabÀ
[
ANALOGALARM_TABLE
];

850 }
	tA«logPr›îty_t
;

853 
comm⁄NELogiˇlID
[
COMMONDEVICESID_MAX
];

854 
comm⁄CheckCode
;

855 
comm⁄TøpCommunôySåög
[
MAX_COMMUNITY_SIZE
];

857 
	tcomm⁄AdmöGroup_t
;

860 
	ssysUpd©e
{

863 
uöt32_t
 
ù
:1;

864 
uöt32_t
 
ho°«me
:1;

865 
uöt32_t
 
¢mp_í
:1;

866 
uöt32_t
 
hâps
:1;

867 
uöt32_t
 
ssh
:1;

868 
uöt32_t
 
ã ë
:1;

869 
uöt32_t
 
mvœn
:1;

870 
uöt32_t
 
time
:1;

871 
uöt32_t
 
öãrÁ˚_°©e
:1;

872 
uöt32_t
 
lo›_íabÀ
:1;

873 
uöt32_t
 
sy¶og
:1;

874 
uöt32_t
 
qos
:1;

875 
uöt32_t
 
p‹t
:1;

876 
uöt32_t
 
°‹m
:1;

877 
uöt32_t
 
löî©e
:1;

878 
uöt32_t
 
múr‹
:1;

879 
uöt32_t
 
mac_£âög
:1;

880 
uöt32_t
 
com∑tibÀ
:1;

881 
uöt32_t
 
™ÆogPr›îtyTabÀ
:1;

882 
uöt32_t
 
comm⁄AdmöGroup
:1;

884 
uöt32_t
 
d©a
;

887 }
	tsys_upd©e_t
;

890 
sys_£curôy_t
 
£curôy
;

891 
sys_¢mp_t
 
¢mp
;

892 
sys_√tw‹k_t
 
√tw‹k
[
IF_L3VLAN_MAX
];

893 
sys_öfo_t
 
öfo
;

894 
sys_time_t
 
πc
;

895 
sys_admö_t
 
admö
;

896 
sys_upd©e_t
 
upd©e
;

897 
sys_mvœn_t
 
mvœn
;

898 
sys_lo›_t
 
lo›
;

899 
sys_sy¶og_t
 
sy¶og
;

900 
mac_£âög_t
 
mac_£âög
;

901 
sys_qos_t
 
qos
;

902 
sys_p‹t_t
 
p‹t
;

903 
sys_°‹m˘l_t
 
°‹m
;

904 
sys_löî©e_t
 
löî©e
;

905 
sys_múr‹_t
 
múr‹
;

906 
sys_ï⁄_t
 
ï⁄_öfo
;

907 #ifde‡
CONFIG_CATVCOM


908 
ˇtvöfo_t
 
ˇtvöfo
;

910 #ifde‡
CONFIG_WLAN_AP


911 
wœn_≠_t
 
wœn_≠
;

913 #i‡
	`deföed
(
CONFIG_ONU_COMPATIBLE
)

914 
com∑tibÀ_£âög_t
 
com∑tibÀ_£âög
;

916 #i‡
	`deföed
(
CONFIG_ZBL_SNMP
)

917 
A«logPr›îty_t
 
A«logPr›îty
;

918 
comm⁄AdmöGroup_t
 
comm⁄AdmöGroup
;

921 
	tsys_c⁄fig_t
;

929 
DHCPC_DECONFIG
 = 0,

930 
DHCPC_BOUND
,

931 
DHCPC_RENEW


933 
	tsys_dh˝c_evít_t
;

936 
uöt8_t
 
evít
;

937 
i‚ame
[
IFNAMESIZE
];

938 
ö_addr
 
ù
;

939 
ö_addr
 
sub√t
;

940 
ö_addr
 
brﬂdˇ°
;

941 
ö_addr
 
g©eway
;

942 
ö_addr
 
dns
[
MAX_DNS_NUM
];

943 
uöt32_t
 
Àa£_time
;

944 
domaö
[
MAX_DOMAIN_SIZE
];

946 
	tsys_dh˝c_t
;

950 
SYS_DO_REBOOT
 = 0,

951 
SYS_DO_RESTORE
,

952 
SYS_DO_RESTORE_AND_REBOOT
,

953 
SYS_DO_NVRAM_COMMIT


955 
	tsys_a˘i⁄_t
;

959 
sys_c⁄fig_t
 
sys_c⁄fig
;

961 
	#sys_£curôy
 
sys_c⁄fig
.
£curôy


	)

962 
	#sys_¢mp
 
sys_c⁄fig
.
¢mp


	)

963 
	#sys_√tw‹k
 
sys_c⁄fig
.
√tw‹k
[0]

	)

964 
	#sys_öfo
 
sys_c⁄fig
.
öfo


	)

965 
	#sys_time
 
sys_c⁄fig
.
πc


	)

966 
	#sys_admö
 
sys_c⁄fig
.
admö


	)

967 
	#sys_mvœn
 
sys_c⁄fig
.
mvœn


	)

968 
	#sys_lo›
 
sys_c⁄fig
.
lo›


	)

969 
	#sys_sy¶og
 
sys_c⁄fig
.
sy¶og


	)

970 
	#sys_mac_£âög
 
sys_c⁄fig
.
mac_£âög


	)

971 
	#sys_qos
 
sys_c⁄fig
.
qos


	)

972 
	#sys_p‹t
 
sys_c⁄fig
.
p‹t


	)

973 
	#sys_°‹m
 
sys_c⁄fig
.
°‹m


	)

974 
	#sys_löî©e
 
sys_c⁄fig
.
löî©e


	)

975 
	#sys_múr‹
 
sys_c⁄fig
.
múr‹


	)

976 
	#sys_ï⁄
 
sys_c⁄fig
.
ï⁄_öfo


	)

977 #ifde‡
CONFIG_CATVCOM


978 
	#sys_ˇtv
 
sys_c⁄fig
.
ˇtvöfo


	)

980 #ifde‡
CONFIG_WLAN_AP


981 
	#sys_wœn_≠
 
sys_c⁄fig
.
wœn_≠


	)

983 #i‡
	`deföed
(
CONFIG_ONU_COMPATIBLE
)

984 
	#sys_com∑tibÀ
 
sys_c⁄fig
.
com∑tibÀ_£âög


	)

986 #i‡
	`deföed
(
CONFIG_ZBL_SNMP
)

987 
	#sys_A«logPr›îty
 
sys_c⁄fig
.
A«logPr›îty


	)

988 
	#sys_comm⁄AdmöGroup
 
sys_c⁄fig
.
comm⁄AdmöGroup


	)

990 
	#£t_upd©e
(
x
Ë(
sys_c⁄fig
.
upd©e
.x = 1)

	)

991 
	#˛r_upd©e
(
x
Ë(
sys_c⁄fig
.
upd©e
.x = 0)

	)

992 
	#£t_upd©e_Æl
(Ë(
sys_c⁄fig
.
upd©e
.
d©a
 = 0xffffffff)

	)

993 
	#˛r_upd©e_Æl
(Ë(
sys_c⁄fig
.
upd©e
.
d©a
 = 0)

	)

994 
	#ã°_upd©e
(
x
Ë(
sys_c⁄fig
.
upd©e
.x > 0)

	)

996 
	#ù_£t
(
x
,
v
Ë((x).
s_addr
 = (v).s_addr)

	)

997 
	#ù_equÆ
(
x
, 
v
Ë((x).
s_addr
 =(v).s_addr)

	)

1000 
	sègCfgVÆue


1002 
vÆue
[
MAX_CONFIG_VAL_SIZE
];

1003 }
	tCFG_VALUE_S
;

1006 
IPC_PING
 = 0,

1007 
IPC_CFG_ACCESS
,

1008 
IPC_CFG_BACKUP
,

1009 
IPC_GET_USER_INFO
,

1010 
IPC_SYSMON_CMD
,

1011 
IPC_NETWORK_INFO
,

1012 
IPC_GET_CNU_INFO
,

1013 
IPC_GET_CNU_MIB
,

1014 
IPC_GET_CNU_LINK_STATS
,

1015 
IPC_GET_MME_STAT
,

1016 
IPC_GET_VLAN_CONFIG
,

1017 
IPC_GET_IF_CONFIG
,

1018 
IPC_SERVICE_TEMPLATE
,

1019 
IPC_SUPPORTED_DEVICE
,

1020 
IPC_CLT_CABLE_PARAM
,

1021 
IPC_CLT_INTERFACE
,

1022 
IPC_CLT_INTERFACE_TRUNK_HYBRID
,

1023 
IPC_CLT_INTERFACE_STATUS
,

1024 
IPC_CLT_INTERFACE_MIB
,

1025 
IPC_CLT_VLAN_INTERFACE
,

1026 
IPC_CLT_VLAN_MODE
,

1027 
IPC_CLT_VLAN
,

1028 
IPC_CNU_USER
,

1029 
IPC_SYS_SECURITY
,

1030 
IPC_SYS_NETWORKING
,

1031 
IPC_SYS_SNMP
,

1032 
IPC_SYS_TIME
,

1033 
IPC_SYS_INFO
,

1034 
IPC_SYS_ADMIN
,

1035 
IPC_SYS_DHCPC_EVENT
,

1036 
IPC_SYSTEM
,

1037 
IPC_MVLAN
,

1038 
IPC_LOOP
,

1039 
IPC_SYSLOG
,

1040 
IPC_SHOW_STARTUPSTART
,

1041 
IPC_SHOW_STARTUPEND
,

1042 
IPC_QOS_TRUSTMODE
,

1043 
IPC_QOS_QUEUESCH
,

1044 
IPC_PORT
,

1045 
IPC_STORM_CTL
,

1046 
IPC_LINERATE
,

1047 
IPC_MIRROR
,

1048 
IPC_SHUTDOWN_INTF
,

1049 
IPC_MAC_SETTING
,

1050 
IPC_EPON
,

1051 #ifde‡
CONFIG_CATVCOM


1052 
IPC_CATV
,

1054 #ifde‡
CONFIG_WLAN_AP


1055 
IPC_WLAN_AP
,

1057 #i‡
	`deföed
(
CONFIG_ONU_COMPATIBLE
)

1058 
IPC_COMPATIBLE_SETTING
,

1060 #i‡
	`deföed
(
CONFIG_ZBL_SNMP
)

1061 
IPC_ANALOGPROPERTYTABLE
,

1062 
IPC_COMMONADMINGROUP
,

1064 
IPC_END


1066 
	tùc_ªque°_ty≥_t
;

1069 
IPC_STATUS_OK
 = 0,

1070 
IPC_STATUS_FAIL
,

1071 
IPC_STATUS_ARGV
,

1072 
IPC_STATUS_BUSY
,

1073 
IPC_STATUS_APP_INVALID
,

1074 
IPC_STATUS_NOCLT
,

1075 
IPC_STATUS_NOCNU
,

1076 
IPC_STATUS_NOIF
,

1077 
IPC_STATUS_NOVLAN
,

1078 
IPC_STATUS_NOTMPL
,

1079 
IPC_STATUS_NOUSER
,

1080 
IPC_STATUS_CNUDOWN
,

1081 
IPC_STATUS_CNUNOSUPP
,

1082 
IPC_STATUS_CNUNOFUNC
,

1083 
IPC_STATUS_CNUNORESP
,

1084 
IPC_STATUS_APPLY_FAIL
,

1085 
IPC_STATUS_COMMIT_FAIL
,

1086 
IPC_STATUS_EXIST
,

1087 
IPC_STATUS_EXCEED
,

1088 
IPC_STATUS_END


1090 
	tùc_°©us_t
;

1093 
NVRAM_ACCESS_GET
 = 0,

1094 
NVRAM_ACCESS_SET
,

1095 
NVRAM_ACCESS_UNSET
,

1096 
NVRAM_ACCESS_COMMIT


1098 
	tùc_nvøm_ac˚ss_t
;

1100 
USER_VTY_INFO_GET
 = 0,

1101 
USER_VTY_INFO_ALL_GET
,

1102 }
	tùc_gë_u£r_öfo_t
;

1105 
IPC_SYS_REBOOT
 = 0x01,

1106 
IPC_SYS_RESTORE
,

1107 
IPC_SYS_RESTORE_AND_REBOOT
,

1108 
IPC_SYS_NVRAM_COMMIT
,

1109 
IPC_SYS_CONFIG_BACKUP
,

1110 
IPC_SYS_UPGRADE_READY
,

1111 
IPC_SYS_UPGRADE_APP
,

1112 
IPC_SYS_CONFIG_READY
,

1113 
IPC_SYS_STATUS
,

1114 
IPC_SYS_NVRAM_STATUS
,

1115 
IPC_SYS_UPGRADE_STATUS
,

1116 
IPC_SYS_LOG_CLEAR


1118 
	tùc_sy°em_ac˚ss_t
;

1121 
IPC_SYS_STATUS_NVRAM_CHANGE
 = 0x01,

1122 
IPC_SYS_STATUS_UPGRADING
 = 0x02,

1124 
	tùc_sy°em_°©us_t
;

1128 
IPC_MIBS_GET
 = 0x01,

1129 
IPC_MIBS_RESET


1131 
	tùc_mibs_ac˚ss_t
;

1135 
IPC_CONFIG_GET
 = 0x01,

1136 
IPC_CONFIG_SET
,

1137 
IPC_CONFIG_DEL
,

1138 
IPC_CONFIG_NEW


1140 
	tùc_c⁄fig_ac˚ss_t
;

1143 
IPC_APPLY_NONE
 = 0,

1144 
IPC_APPLY_NOW
 = 0x01,

1145 
IPC_APPLY_COMMIT
 = 0x02,

1146 
IPC_APPLY_DELAY
 = 0x04,

1148 
	tùc_≠∂y_›ti⁄_t
;

1151 
ùc_ty≥
;

1152 
uöt32_t
 
msg_Àn
;

1154 
	tùc_ªque°_hdr_t
;

1157 
°©us
;

1158 
msg_Àn
;

1160 
	tùc_acknowÀdge_hdr_t
;

1163 
FILTER_TYPE_NONE
 = 0,

1164 
FILTER_TYPE_MAC
,

1165 
FILTER_TYPE_ID
,

1168 
	s__∑cked
 {

1169 
ùc_ªque°_hdr_t
 
hdr
;

1170 
uöt8_t
 
˛t
;

1171 
uöt8_t
 
upd©e
;

1173 
	tùc_√tw‹k_öfo_ªq_t
;

1175 
	s__∑cked
 {

1176 
uöt8_t
 
˛t
;

1177 
uöt8_t
 
ödex
;

1178 
ëhî√t_addr_t
 
mac
;

1179 
uöt8_t
 
ãi
;

1180 
uöt16_t
 
avgtx
;

1181 
uöt16_t
 
avgrx
;

1182 
Æüs
[
ALIAS_NAME_SIZE
];

1183 
uöt8_t
 
lök
;

1184 
uöt8_t
 
auth
;

1185 
devi˚_id
;

1186 
ãm∂©e_id
;

1187 
time_t
 
⁄löe_tm
;

1188 
u£∫ame
[
USER_NAME_SIZE
];

1189 
uöt8_t
 
p‹ts
;

1190 
uöt8_t
 
°©e
;

1191 
vîsi⁄
[
EOC_VERSION_SIZE
];

1193 
	tùc_˙u_öfo_t
;

1195 
	s__∑cked
 {

1196 
ùc_acknowÀdge_hdr_t
 
hdr
;

1197 
uöt8_t
 
˛t
;

1198 
uöt16_t
 
cou¡
;

1199 
ùc_˙u_öfo_t
 
˙us
[];

1201 
	tùc_√tw‹k_öfo_ack_t
;

1204 
	s__∑cked
 {

1205 
uöt8_t
 
lök
;

1206 
uöt8_t
 
•d
;

1207 
uöt8_t
 
du∂ex
;

1208 
uöt32_t
 
tx∑ckë
;

1209 
uöt32_t
 
rx∑ckë
;

1210 
uöt32_t
 
rx¸c
;

1211 
uöt32_t
 
rxdr›
;

1212 
uöt32_t
 
rx‰ag
;

1214 
	tùc_˙u_p‹t_mib_t
;

1216 
	s__∑cked
 {

1217 
ùc_ªque°_hdr_t
 
hdr
;

1218 
uöt8_t
 
fûãπy≥
;

1219 
uöt8_t
 
˛ón
;

1221 
ëhî√t_addr_t
 
mac
;

1222 
	s__∑cked
 {

1223 
uöt8_t
 
˛t
;

1224 
uöt8_t
 
˙u
;

1226 
˙u_id
;

1229 
	tùc_˙u_°©us_ªq_t
;

1233 
	s__∑cked
 {

1234 
ùc_acknowÀdge_hdr_t
 
hdr
;

1235 
ùc_˙u_öfo_t
 
˙u_öfo
;

1237 
	tùc_˙u_öfo_ack_t
;

1239 
	s__∑cked
 {

1240 
ùc_acknowÀdge_hdr_t
 
hdr
;

1241 
uöt8_t
 
p‹ts
;

1242 
ùc_˙u_p‹t_mib_t
 
˙u_mib
[
CNU_MAX_ETH_PORTS
 + 1];

1244 
	tùc_˙u_mib_ack_t
;

1247 
	s__∑cked
 {

1248 
ùc_acknowÀdge_hdr_t
 
hdr
;

1249 
ˇbÀ_lök_°©s_t
 
°©s
;

1251 
	tùc_˙u_lök_°©s_ack_t
;

1255 
	s__∑cked
 {

1256 
ùc_ªque°_hdr_t
 
hdr
;

1257 
uöt8_t
 
˛ón
;

1259 
	tùc_mme_°©_ªq_t
;

1261 
	s__∑cked
 {

1262 
ùc_acknowÀdge_hdr_t
 
hdr
;

1263 
uöt32_t
 
£nd
;

1264 
uöt32_t
 
ªcv
;

1265 
uöt32_t
 
ack
;

1266 
uöt32_t
 
Áû
;

1267 
uöt32_t
 
queues
;

1268 
uöt32_t
 
avgœt
;

1269 
uöt32_t
 
queues_≥ak
;

1271 
	tùc_mme_°©_ack_t
;

1273 
	s__∑cked
 {

1274 
ùc_ªque°_hdr_t
 
hdr
;

1275 
uöt32_t
 
cmd
;

1277 
	tùc_sysm⁄_ªq_t
;

1279 
	s__∑cked
 {

1280 
ùc_acknowÀdge_hdr_t
 
hdr
;

1281 
uöt32_t
 
ªsu…
;

1283 
	tùc_sysm⁄_ack_t
;

1285 
	s__∑cked
 {

1286 
ùc_ªque°_hdr_t
 
hdr
;

1287 
ifödex_t
 
ifödex
;

1288 
uöt8_t
 
ac˚ss
;

1290 
UINT
 
oid
;

1291 
vÆue
[2048];

1293 
	tùc_nvøm_ac˚ss_ªq_t
;

1295 
	s__∑cked
 {

1296 
ùc_acknowÀdge_hdr_t
 
hdr
;

1297 
vÆue
[2048];

1299 
	tùc_nvøm_ac˚ss_ack_t
;

1301 
	s__∑cked
 {

1302 
ùc_ªque°_hdr_t
 
hdr
;

1303 
∑th
[2048];

1305 
	tùc_cfg_backup_ªq_t
;

1307 
	s__∑cked
 {

1308 
ùc_acknowÀdge_hdr_t
 
hdr
;

1310 
	tùc_cfg_backup_ack_t
;

1311 
	s__∑cked
 {

1312 
ùc_ªque°_hdr_t
 
hdr
;

1313 
∑th
[2048];

1315 
	tùc_show_°¨tup_ªq_t
;

1317 
	s__∑cked
 {

1318 
ùc_acknowÀdge_hdr_t
 
hdr
;

1320 
	tùc_show_°¨tup_ack_t
;

1323 
	s__∑cked


1325 
u£∫ame
[
MAX_VTY_USERNAME_LEN
+1];

1326 
authmode
[
MAX_AUTHMODE_TXT_LEN
+1];

1327 
∑sswd
[
MAX_VTY_PASSWD_LEN
+1];

1328 
∑sswd_ty≥
[
MAX_VTY_PASSWD_TYPE_LEN
+1];

1329 
timeout
;

1330 }
	tùc_u£r_öfo_t
;

1332 
	s__∑cked


1334 
ùc_u£r_öfo_t
 
vty_u£r
[
MAX_VTY_COUNT
];

1335 }
	tùc_Æl_vty_u£r_öfo_t
;

1337 
	s__∑cked


1339 
ùc_ªque°_hdr_t
 
hdr
;

1340 
uöt8_t
 
ac˚ss
;

1341 
ùc_Æl_vty_u£r_öfo_t
 
vty_u£r_öfo
;

1342 }
	tùc_gë_u£r_öfo_ªq_t
;

1344 
	s__∑cked
 {

1345 
ùc_acknowÀdge_hdr_t
 
hdr
;

1346 
ùc_Æl_vty_u£r_öfo_t
 
vty_u£r_öfo
;

1347 }
	tùc_gë_u£r_öfo_ack_t
;

1349 
	s__∑cked
 {

1350 
ùc_ªque°_hdr_t
 
hdr
;

1351 
uöt8_t
 
ac˚ss
;

1352 
uöt8_t
 
≠∂y_›ti⁄
;

1353 
uöt16_t
 
cou¡
;

1354 
ùc_£rvi˚_ãm∂©e_t
 
ãm∂©es
[];

1356 
	tùc_£rvi˚_ãm∂©e_ªq_t
;

1358 
	s__∑cked
 {

1359 
ùc_acknowÀdge_hdr_t
 
hdr
;

1360 
uöt16_t
 
cou¡
;

1361 
ùc_£rvi˚_ãm∂©e_t
 
ãm∂©es
[];

1363 
	tùc_£rvi˚_ãm∂©e_ack_t
;

1365 
	s__∑cked
 {

1366 
ùc_ªque°_hdr_t
 
hdr
;

1368 
	tùc_suµ‹ãd_devi˚_ªq_t
;

1369 
	s__∑cked
 {

1370 
i‚ame
[
IFNAMSIZ
];

1371 
uöt8_t
 
phy
;

1372 
uöt8_t
 
íabÀd
;

1373 
uöt8_t
 
aut⁄eg
;

1374 
uöt8_t
 
•ìd
;

1375 
uöt8_t
 
du∂ex
;

1376 
uöt8_t
 
Êow˘æ
;

1377 
uöt8_t
 
¥i‹ôy
;

1378 
uöt32_t
 
ögªss_limô
;

1379 
uöt32_t
 
egªss_limô
;

1380 
uöt8_t
 
ögªss_fûãr
;

1381 
uöt16_t
 
pvid
;

1383 
	tswôch_öãrÁ˚_t
;

1385 
	s__∑cked
 {

1386 
Æüs
[
ALIAS_NAME_SIZE
];

1387 
devi˚_id
;

1388 
p‹ts
;

1389 
swôch_chù_id
;

1390 
uöt8_t
 
p‹t_m≠
[
CNU_MAX_ETH_PORTS
 + 1];

1392 
	tùc_˙u_devöfo_t
;

1394 
	s__∑cked
 {

1395 
ùc_acknowÀdge_hdr_t
 
hdr
;

1396 
uöt16_t
 
cou¡
;

1397 
ùc_˙u_devöfo_t
 
devöfo
[
MAX_SUPPORTED_CNU_MODELS
];

1399 
	tùc_suµ‹ãd_devi˚_ack_t
;

1400 
	s__∑cked
 {

1401 
ùc_ªque°_hdr_t
 
hdr
;

1402 
uöt8_t
 
ac˚ss
;

1403 
uöt8_t
 
≠∂y_›ti⁄
;

1404 
uöt16_t
 
cou¡
;

1405 
swôch_öãrÁ˚_t
 
ifs
[];

1407 
	tùc_˛t_öãrÁ˚_c⁄fig_ªq_t
;

1409 
	s__∑cked
 {

1410 
ùc_acknowÀdge_hdr_t
 
hdr
;

1411 
uöt16_t
 
cou¡
;

1412 
swôch_öãrÁ˚_t
 
ifs
[];

1414 
	tùc_˛t_öãrÁ˚_c⁄fig_ack_t
;

1416 
	s__∑cked
 {

1417 
ùc_ªque°_hdr_t
 
hdr
;

1418 
uöt8_t
 
ac˚ss
;

1419 
uöt8_t
 
≠∂y_›ti⁄
;

1420 
uöt16_t
 
cou¡
;

1421 
swôch_vœn_öãrÁ˚_t
 
vœnifs
[];

1423 
	tùc_˛t_vœn_öãrÁ˚_c⁄fig_ªq_t
;

1425 
	s__∑cked
 {

1426 
ùc_acknowÀdge_hdr_t
 
hdr
;

1427 
uöt16_t
 
cou¡
;

1428 
swôch_vœn_öãrÁ˚_t
 
vœnifs
[];

1430 
	tùc_˛t_vœn_öãrÁ˚_c⁄fig_ack_t
;

1433 
	s__∑cked
 {

1434 
ùc_ªque°_hdr_t
 
hdr
;

1435 
UINT8
 
ac˚ss
;

1436 
UINT8
 
≠∂y_›ti⁄
;

1437 
swôch_vœn_mode_t
 
vœnmode
;

1439 
	tùc_˛t_vœn_mode_ªq_t
;

1441 
	s__∑cked
 {

1442 
ùc_acknowÀdge_hdr_t
 
hdr
;

1443 
swôch_vœn_mode_t
 
vœnmode
;

1445 
	tùc_˛t_vœn_mode_ack_t
;

1447 
	s__∑cked
 {

1448 
ùc_ªque°_hdr_t
 
hdr
;

1449 
UINT8
 
ac˚ss
;

1450 
UINT8
 
≠∂y_›ti⁄
;

1451 
mac_£âög_t
 
mac_£âög
;

1453 
	tùc_mac_£âög_ªq_t
;

1455 
	s__∑cked
 {

1456 
ùc_acknowÀdge_hdr_t
 
hdr
;

1457 
mac_£âög_t
 
mac_£âög
;

1459 
	tùc_mac_£âög_ack_t
;

1463 
	s__∑cked
 {

1464 
ùc_ªque°_hdr_t
 
hdr
;

1465 
UINT8
 
ac˚ss
;

1466 
UINT8
 
≠∂y_›ti⁄
;

1467 
ˇtvöfo_t
 
ˇtvöfo
;

1468 }
	tùc_ˇtvöfo_ªq_t
;

1470 
	s__∑cked
 {

1471 
ùc_acknowÀdge_hdr_t
 
hdr
;

1472 
ˇtvöfo_t
 
ˇtvöfo
;

1473 }
	tùc_ˇtvöfo_ack_t
;

1476 
	s__∑cked
 {

1477 
ùc_ªque°_hdr_t
 
hdr
;

1478 
UINT8
 
ac˚ss
;

1479 
UINT8
 
≠∂y_›ti⁄
;

1480 
wœn_≠_t
 
wœn_≠
;

1481 }
	tùc_wœn_≠_ªq_t
;

1483 
	s__∑cked
 {

1484 
ùc_acknowÀdge_hdr_t
 
hdr
;

1485 
wœn_≠_t
 
wœn_≠
;

1486 }
	tùc_wœn_≠_ack_t
;

1502 
	s__∑cked
 {

1503 
ùc_ªque°_hdr_t
 
hdr
;

1504 
uöt8_t
 
ac˚ss
;

1505 
uöt8_t
 
≠∂y_›ti⁄
;

1506 
uöt16_t
 
cou¡
;

1507 
swôch_vœn_group_t
 
vœn_groups
[];

1509 
	tùc_˛t_vœn_c⁄fig_ªq_t
;

1511 
	s__∑cked
 {

1512 
ùc_acknowÀdge_hdr_t
 
hdr
;

1513 
cou¡
;

1514 
swôch_vœn_group_t
 
vœn_groups
[];

1516 
	tùc_˛t_vœn_c⁄fig_ack_t
;

1518 
	#SHUTDOWN
 0

	)

1519 
	#UNDOSHUTDOWN
 1

	)

1520 
	s__∑cked
 {

1521 
ùc_ªque°_hdr_t
 
hdr
;

1522 
uöt8_t
 
≠∂y_›ti⁄
;

1523 
ifödex_t
 
uiifödex
;

1524 
›
;

1526 
	tùc_shutdown_öãrÁ˚_ªq_t
;

1528 
	s__∑cked
 {

1529 
ùc_acknowÀdge_hdr_t
 
hdr
;

1531 
	tùc_shutdown_öãrÁ˚_ack_t
;

1534 
	s__∑cked
 {

1535 
ùc_ªque°_hdr_t
 
hdr
;

1536 
uöt8_t
 
ac˚ss
;

1537 
uöt8_t
 
fûãr
;

1538 
uöt8_t
 
≠∂y_›ti⁄
;

1539 
uöt16_t
 
cou¡
;

1540 
˙u_u£r_c⁄fig_t
 
u£r
[];

1542 
	tùc_˙u_u£r_c⁄fig_ªq_t
;

1544 
	s__∑cked
 {

1545 
ùc_acknowÀdge_hdr_t
 
hdr
;

1546 
uöt16_t
 
cou¡
;

1547 
˙u_u£r_c⁄fig_t
 
u£r
[];

1549 
	tùc_˙u_u£r_c⁄fig_ack_t
;

1551 
	s__∑cked
 {

1552 
ùc_ªque°_hdr_t
 
hdr
;

1553 
i‚ame
[
IFNAMSIZ
];

1555 
	tùc_˛t_öãrÁ˚_°©us_ªq_t
;

1557 
	s__∑cked
 {

1558 
ùc_acknowÀdge_hdr_t
 
hdr
;

1559 
uöt16_t
 
cou¡
;

1560 
swôch_öãrÁ˚_°©us_t
 
°©us
[];

1562 
	tùc_˛t_öãrÁ˚_°©us_ack_t
;

1565 
	s__∑cked
{

1566 
i‚ame
[
IFNAMSIZ
];

1567 
uöt8_t
 
ª£t
;

1569 
	tùc_ifmibs_t
;

1571 
	s__∑cked
 {

1572 
ùc_ªque°_hdr_t
 
hdr
;

1573 
uöt8_t
 
ac˚ss
;

1574 
uöt16_t
 
cou¡
;

1575 
ùc_ifmibs_t
 
mibs_ªq
[];

1577 
	tùc_˛t_öãrÁ˚_mibs_ªq_t
;

1579 
	s__∑cked
 {

1580 
ùc_acknowÀdge_hdr_t
 
hdr
;

1581 
uöt16_t
 
cou¡
;

1582 
swôch_öãrÁ˚_mib_t
 
ifmibs
[];

1584 
	tùc_˛t_öãrÁ˚_mibs_ack_t
;

1587 
	s__∑cked
{

1588 
ˇbÀ_∑ømëî_t
 
˛ts
[
MAX_CLT_CHANNEL
];

1590 
	tùc_˛t_ˇbÀ_∑øm_t
;

1592 
	s__∑cked
{

1593 
ùc_ªque°_hdr_t
 
hdr
;

1594 
uöt8_t
 
ac˚ss
;

1595 
uöt8_t
 
≠∂y_›ti⁄
;

1596 
ùc_˛t_ˇbÀ_∑øm_t
 
ˇb_∑øm
;

1598 
	tùc_˛t_ˇbÀ_∑øm_ªq_t
;

1600 
	s__∑cked
{

1601 
ùc_acknowÀdge_hdr_t
 
hdr
;

1602 
ùc_˛t_ˇbÀ_∑øm_t
 
ˇb_∑øm
;

1604 
	tùc_˛t_ˇbÀ_∑øm_ack_t
;

1608 
	s__∑cked
{

1609 
ùc_ªque°_hdr_t
 
hdr
;

1610 
uöt8_t
 
ac˚ss
;

1611 
uöt8_t
 
≠∂y_›ti⁄
;

1612 
uöt8_t
 
mask
;

1613 
sys_£curôy_t
 
£curôy
;

1615 
	tùc_sys_£curôy_ªq_t
;

1617 
	s__∑cked
{

1618 
ùc_acknowÀdge_hdr_t
 
hdr
;

1619 
sys_£curôy_t
 
£curôy
;

1621 
	tùc_sys_£curôy_ack_t
;

1624 
	s__∑cked
{

1625 
ùc_ªque°_hdr_t
 
hdr
;

1626 
uöt8_t
 
ac˚ss
;

1627 
uöt8_t
 
≠∂y_›ti⁄
;

1628 
sys_¢mp_t
 
¢mp
;

1630 
	tùc_sys_¢mp_ªq_t
;

1632 
	s__∑cked
{

1633 
ùc_acknowÀdge_hdr_t
 
hdr
;

1634 
sys_¢mp_t
 
¢mp
;

1636 
	tùc_sys_¢mp_ack_t
;

1638 
	s__∑cked
{

1639 
ùc_ªque°_hdr_t
 
hdr
;

1640 
uöt8_t
 
ac˚ss
;

1641 
uöt8_t
 
≠∂y_›ti⁄
;

1642 
sys_sy¶og_t
 
sy¶og
;

1644 
	tùc_sy¶og_ªq_t
;

1646 
	s__∑cked
{

1647 
ùc_acknowÀdge_hdr_t
 
hdr
;

1648 
sys_sy¶og_t
 
sy¶og
;

1650 
	tùc_sy¶og_ack_t
;

1652 
	s__∑cked
{

1653 
ùc_ªque°_hdr_t
 
hdr
;

1654 
uöt8_t
 
ac˚ss
;

1655 
uöt8_t
 
≠∂y_›ti⁄
;

1656 
ùc_√tw‹k_t
 
√tw‹k
;

1658 
	tùc_sys_√tw‹k_ªq_t
;

1660 
	s__∑cked
{

1661 
ùc_acknowÀdge_hdr_t
 
hdr
;

1662 
sys_√tw‹k_t
 
√tw‹k
;

1664 
	tùc_sys_√tw‹k_ack_t
;

1667 
	s__∑cked
{

1668 
ùc_ªque°_hdr_t
 
hdr
;

1670 
	tùc_sys_öfo_ªq_t
;

1672 
	s__∑cked
{

1673 
ùc_acknowÀdge_hdr_t
 
hdr
;

1674 
sys_öfo_t
 
öfo
;

1676 
	tùc_sys_öfo_ack_t
;

1678 
	s__∑cked
{

1679 
ùc_ªque°_hdr_t
 
hdr
;

1680 
uöt8_t
 
ac˚ss
;

1681 
uöt8_t
 
≠∂y_›ti⁄
;

1682 
sys_time_t
 
time
;

1684 
	tùc_sys_time_ªq_t
;

1686 
	s__∑cked
{

1687 
ùc_acknowÀdge_hdr_t
 
hdr
;

1688 
sys_time_t
 
time
;

1690 
	tùc_sys_time_ack_t
;

1692 
	s__∑cked
{

1693 
ùc_ªque°_hdr_t
 
hdr
;

1694 
uöt8_t
 
ac˚ss
;

1695 
uöt8_t
 
≠∂y_›ti⁄
;

1696 
sys_admö_t
 
admö
;

1698 
	tùc_sys_admö_ªq_t
;

1700 
	s__∑cked
{

1701 
ùc_acknowÀdge_hdr_t
 
hdr
;

1702 
sys_admö_t
 
admö
;

1704 
	tùc_sys_admö_ack_t
;

1706 
	s__∑cked
{

1707 
ùc_ªque°_hdr_t
 
hdr
;

1708 
sys_dh˝c_t
 
dh˝c
;

1710 
	tùc_sys_dh˝c_ªq_t
;

1713 
	s__∑cked
 {

1714 
ùc_ªque°_hdr_t
 
hdr
;

1715 
uöt8_t
 
ac˚ss
;

1716 
uöt8_t
 
¥o˚ss
;

1718 
	tùc_sy°em_ªq_t
;

1722 
	s__∑cked
 {

1723 
ùc_acknowÀdge_hdr_t
 
hdr
;

1724 
uöt8_t
 
°©us
;

1725 
uöt8_t
 
¥o˚ss
;

1726 
uöt8_t
 
îr‹
;

1727 
uöt8_t
 
≥r˚¡age
;

1729 
	tùc_sy°em_ack_t
;

1732 
	s__∑cked
{

1733 
ùc_ªque°_hdr_t
 
hdr
;

1734 
uöt8_t
 
ac˚ss
;

1735 
uöt8_t
 
≠∂y_›ti⁄
;

1736 
sys_mvœn_t
 
mvœn
;

1738 
	tùc_sys_mvœn_ªq_t
;

1740 
	s__∑cked
{

1741 
ùc_acknowÀdge_hdr_t
 
hdr
;

1742 
sys_mvœn_t
 
mvœn
;

1744 
	tùc_sys_mvœn_ack_t
;

1747 
	s__∑cked
{

1748 
ùc_ªque°_hdr_t
 
hdr
;

1749 
uöt8_t
 
ac˚ss
;

1750 
uöt8_t
 
≠∂y_›ti⁄
;

1751 
sys_lo›_t
 
lo›
;

1753 
	tùc_sys_lo›_ªq_t
;

1756 
	s__∑cked
{

1757 
ùc_ªque°_hdr_t
 
hdr
;

1758 
uöt8_t
 
ac˚ss
;

1759 
uöt8_t
 
≠∂y_›ti⁄
;

1760 
sys_ï⁄_t
 
ï⁄_öfo
;

1762 
	tùc_sys_ï⁄_ªq_t
;

1764 
	s__∑cked
{

1765 
ùc_acknowÀdge_hdr_t
 
hdr
;

1766 
sys_ï⁄_t
 
ï⁄_öfo
;

1767 }
	tùc_sys_ï⁄_ack_t
;

1768 
	s__∑cked
{

1769 
ùc_acknowÀdge_hdr_t
 
hdr
;

1770 
sys_lo›_t
 
lo›
;

1772 
	tùc_sys_lo›_ack_t
;

1774 
	s__∑cked
{

1775 
ùc_ªque°_hdr_t
 
hdr
;

1776 
uöt8_t
 
ac˚ss
;

1777 
uöt8_t
 
≠∂y_›ti⁄
;

1778 
UINT32
 
uiQosTru°mode
;

1780 
	tùc_sys_qos_ªq_t
;

1782 
	s__∑cked
{

1783 
ùc_acknowÀdge_hdr_t
 
hdr
;

1784 
UINT32
 
uiQosTru°mode
;

1786 
	tùc_sys_qos_ack_t
;

1788 
	s__∑cked
{

1789 
ùc_ªque°_hdr_t
 
hdr
;

1790 
uöt8_t
 
ac˚ss
;

1791 
uöt8_t
 
≠∂y_›ti⁄
;

1792 
QueueMode_S
 
Qosqueuemode
;

1794 
	tùc_sys_qosqueuemod_ªq_t
;

1796 
	s__∑cked
{

1797 
ùc_acknowÀdge_hdr_t
 
hdr
;

1798 
QueueMode_S
 
Qosqueuemode
;

1800 
	tùc_sys_qosqueuemod_ack_t
;

1803 
	s__∑cked
{

1804 
ùc_ªque°_hdr_t
 
hdr
;

1805 
uöt8_t
 
ac˚ss
;

1806 
uöt8_t
 
≠∂y_›ti⁄
;

1807 
PORT_CFG_VALUE_S
 
p‹t_cfg_vÆ
[
LOGIC_PORT_NO
];

1809 
	tùc_p‹t_ªq_t
;

1811 
	s__∑cked
{

1812 
ùc_acknowÀdge_hdr_t
 
hdr
;

1813 
PORT_CFG_VALUE_S
 
p‹t_cfg_vÆ
[
LOGIC_PORT_NO
];

1815 
	tùc_p‹t_ack_t
;

1817 
	s__∑cked
{

1818 
ùc_ªque°_hdr_t
 
hdr
;

1819 
uöt8_t
 
ac˚ss
;

1820 
uöt8_t
 
≠∂y_›ti⁄
;

1821 
STROM_CTL_S
 
°‹m˘l
[
LOGIC_PORT_NO
];

1823 
	tùc_°‹m˘l_ªq_t
;

1826 
	s__∑cked
{

1827 
ùc_acknowÀdge_hdr_t
 
hdr
;

1828 
STROM_CTL_S
 
°‹m˘l
[
LOGIC_PORT_NO
];

1830 
	tùc_°‹m˘l_ack_t
;

1832 
	s__∑cked
{

1833 
ùc_ªque°_hdr_t
 
hdr
;

1834 
uöt8_t
 
ac˚ss
;

1835 
uöt8_t
 
≠∂y_›ti⁄
;

1836 
PORT_LINERATE_VALUES
 
löî©e_vÆ
[
LOGIC_PORT_NO
];

1838 
	tùc_löî©e_ªq_t
;

1840 
	s__∑cked
{

1841 
ùc_acknowÀdge_hdr_t
 
hdr
;

1842 
PORT_CFG_VALUE_S
 
löî©e_vÆ
[
LOGIC_PORT_NO
];

1844 
	tùc_löî©e_ack_t
;

1846 
	s__∑cked
{

1847 
ùc_ªque°_hdr_t
 
hdr
;

1848 
uöt8_t
 
ac˚ss
;

1849 
uöt8_t
 
≠∂y_›ti⁄
;

1850 
MIRROR_GROUP_S
 
p‹tmúr‹
;

1852 
	tùc_múr‹_ªq_t
;

1854 
	s__∑cked
{

1855 
ùc_acknowÀdge_hdr_t
 
hdr
;

1856 
MIRROR_GROUP_S
 
p‹tmúr‹
;

1858 
	tùc_múr‹_ack_t
;

1860 
	s__∑cked
 {

1861 
ùc_ªque°_hdr_t
 
hdr
;

1862 
UINT8
 
ac˚ss
;

1863 
UINT8
 
≠∂y_›ti⁄
;

1864 
com∑tibÀ_£âög_t
 
com∑tibÀ_£âög
;

1866 
	tùc_com∑tibÀ_£âög_ªq_t
;

1868 
	s__∑cked
 {

1869 
ùc_acknowÀdge_hdr_t
 
hdr
;

1870 
com∑tibÀ_£âög_t
 
com∑tibÀ_£âög
;

1872 
	tùc_com∑tibÀ_£âög_ack_t
;

1874 #i‡
	`deföed
(
CONFIG_ZBL_SNMP
)

1875 
	s__∑cked
 {

1876 
ùc_ªque°_hdr_t
 
hdr
;

1877 
UINT8
 
ac˚ss
;

1878 
UINT8
 
≠∂y_›ti⁄
;

1879 
A«logPr›îty_t
 
A«logPr›îty
;

1881 
	tùc_™ÆogPr›îtyTabÀ_ªq_t
;

1883 
	s__∑cked
 {

1884 
ùc_acknowÀdge_hdr_t
 
hdr
;

1885 
A«logPr›îty_t
 
A«logPr›îty
;

1887 
	tùc_™ÆogPr›îtyTabÀ_ack_t
;

1889 
	s__∑cked
 {

1890 
ùc_ªque°_hdr_t
 
hdr
;

1891 
UINT8
 
ac˚ss
;

1892 
UINT8
 
≠∂y_›ti⁄
;

1893 
comm⁄AdmöGroup_t
 
comm⁄AdmöGroup
;

1895 
	tùc_comm⁄AdmöGroup_ªq_t
;

1897 
	s__∑cked
 {

1898 
ùc_acknowÀdge_hdr_t
 
hdr
;

1899 
comm⁄AdmöGroup_t
 
comm⁄AdmöGroup
;

1901 
	tùc_comm⁄AdmöGroup_ack_t
;

1905 
	#REQ_MSGLEN
(
x
Ë((xË- (
ùc_ªque°_hdr_t
))

	)

1906 
	#REQ_MSGLEN_R
(
t
, 
m
, 
mt
, 
c
Ë(
	`off£tof
—, mË+ c * (mtË- (
ùc_ªque°_hdr_t
))

	)

1907 
	#ACK_MSGLEN
(
x
Ë((xË- (
ùc_acknowÀdge_hdr_t
))

	)

1908 
	#ACK_MSGLEN_R
(
t
, 
m
, 
mt
, 
c
Ë(
	`off£tof
—, mË+ c * (mtË- (
ùc_acknowÀdge_hdr_t
))

	)

1909 
	`ùc_show_°¨tup°¨t
();

1910 
	`ùc_show_°¨tu≥nd
();

1911 
	`ùc_gë_vœn_mode
(
ùc_fd
,
swôch_vœn_mode_t
 *
mode
);

1912 
ùc_˛t_vœn_c⁄fig_ack_t
 *
	`ùc_˛t_vœn_c⁄fig
(
ùc_fd
, 
uöt8_t
 
ac˚ss
, uöt8_à
≠∂y_›ti⁄
, 
swôch_vœn_group_t
 *
vœn_group
, 
uöt16_t
 
cou¡
);

1913 
	`ùc_£t_vœn_mode
(
ùc_fd
,
swôch_vœn_mode_t
 *
mode
);

1914 
	`ùc_£t_vœn
(
ùc_fd
,
ac˚ss
, 
swôch_vœn_group_t
 *
vg
);

1915 
	`ùc_shutdown_ötf
(
ùc_fd
,
ifödex_t
 
ifödex
,
›
);

1916 
vîsi⁄_t
 
sys_vîsi⁄
;

1917 
	`sys_c⁄fig_öô
();

1918 
	`sys_c⁄fig_≠∂y
();

1919 
uöt16_t
 
	`sys_m™agemít_vœn
();

1920 
	`sys_m™agemít_vœn_upd©e
(
uöt16_t
 
√wvœn
);

1922 
	`sys_£curôy_upd©e
(
sys_£curôy_t
 *
cfg
, 
mask
);

1923 
	`sys_£curôy_≠∂y
(
≠∂y_›ti⁄s
);

1924 
	`sys_£curôy_commô
(
≠∂y_›ti⁄s
, 
mask
);

1925 
	`sys_time_upd©e
(
sys_time_t
 *
cfg
);

1926 
	`sys_time_≠∂y
(
≠∂y_›ti⁄s
);

1927 
	`sys_time_commô
(
≠∂y_›ti⁄s
);

1928 
	`sys_√tw‹kög_upd©e
(
ùc_√tw‹k_t
 *
cfg
);

1929 
	`sys_√tw‹kög_≠∂y
(
≠∂y_›ti⁄s
);

1930 
	`sys_√tw‹kög_commô
(
≠∂y_›ti⁄s
);

1931 
	`sys_ù_dh˝c_evít_≠∂y
(
sys_dh˝c_t
 *
dh˝c
);

1932 
	`sys_admö_upd©e
(
sys_admö_t
 *
cfg
);

1933 
	`sys_admö_≠∂y
(
≠∂y_›ti⁄s
);

1934 
	`sys_admö_commô
(
≠∂y_›ti⁄s
);

1936 
	`sys_gë_time
(
tm
 *tm);

1937 
	`sys_öfo_mac_ªlﬂd
();

1938 
	`sys_mac_upd©e
(
ëhî√t_addr_t
 *
√wmac
);

1939 
	`sys_mac_≠∂y
(
ëhî√t_addr_t
 *
cuºít_mac
);

1940 
	`sys_ªboŸ
();

1941 
	`sys_ªboŸ_œãr
(
£c
);

1942 
	`sys_dóly_do
(
a˘i⁄
);

1944 
	`¡pd_°¨t
();

1945 
	`gë_¡p_syn_°©e
();

1946 *
	`vîsi⁄_°rög
();

1947 
	`°¨tup_¥o˚ss
(*
cmd
);

1948 
	`sys_sy¶og_lﬂd
(
sys_sy¶og_t
 *
sys
);

1949 
	`sys_sy¶og_upd©e
(
sys_sy¶og_t
 *
cfg
);

1950 
	`sy¶og_°¨t
();

1951 
	`sys_sy¶og_≠∂y
(
≠∂y_›ti⁄s
);

1952 
	`sys_sy¶og_commô
(
≠∂y_›ti⁄s
);

1953 
	`sys_mvœn_lﬂd
(
sys_mvœn_t
 *
sys
);

1954 
	`sys_mvœn_≠∂y
(
≠∂y_›ti⁄s
);

1955 
	`sys_mvœn_upd©e
(
sys_mvœn_t
 *
cfg
);

1956 
	`sys_mvœn_commô
(
≠∂y_›ti⁄s
);

1958 
	`add_íãr
(*
°rög
);

1959 
	`¢mpdc⁄f_ac˚ss
();

1961 
	`sys_lo›_lﬂd
(
sys_lo›_t
 *
sys
);

1962 
	`lo›d_öô
();

1963 
	`sys_lo›_upd©e
(
sys_lo›_t
 *
cfg
);

1964 
	`sys_lo›_≠∂y
(
≠∂y_›ti⁄s
);

1965 
	`sys_lo›_commô
(
≠∂y_›ti⁄s
);

1967 
	`sys_öfo_lﬂd
(
sys_öfo_t
 *
öfo
);

1968 
	`sys_√tw‹kög_lﬂd
(
sys_√tw‹k_t
 *
sys
);

1969 
	`sys_time_lﬂd
(
sys_time_t
 *
sys
);

1970 
	`sys_admö_lﬂd
(
sys_admö_t
 *
sys
);

1972 
INT
 
	`sys_qosmode_upd©e
(
UINT32
 
qosmode
);

1973 
INT
 
	`sys_queuesch_upd©e
(
QueueMode_S
 *
queuesch
);

1974 
INT
 
	`sys_qos_åu°mode_commô
(
≠∂y_›ti⁄s
);

1975 
INT
 
	`sys_qos_queueschedul_commô
(
≠∂y_›ti⁄s
);

1976 
	`sys_¢mp_lﬂd
(
sys_¢mp_t
 *
sys
);

1977 
	`¢mpd_öô
();

1978 
	`sys_¢mp_≠∂y
(
≠∂y_›ti⁄s
, 
ac˚ss_Êag
);

1979 
	`sys_¢mp_upd©e
(
sys_¢mp_t
 *
cfg
, *
ac˚ss_Êag
);

1980 
	`sys_¢mp_commô
(
≠∂y_›ti⁄s
);

1981 
	`sys_mac_£âög_lﬂd
(
mac_£âög_t
 *
sys
);

1982 
	`sys_mac_£âög_upd©e
(
mac_£âög_t
 *
cfg
);

1983 
	`sys_mac_£âög_≠∂y
(
≠∂y_›ti⁄s
);

1984 
	`sys_mac_£âög_commô
(
≠∂y_›ti⁄s
);

1985 #ifde‡
CONFIG_CATVCOM


1986 
	`ˇtv_öô
();

1987 
	`sys_ˇtv_lﬂd
(
ˇtvöfo_t
 *
sys
);

1988 
	`ˇtv_öô_≠∂y
(
ˇtvöfo_t
 *
sys
);

1989 
	`sys_ˇtv_upd©e
(
ˇtvöfo_t
 *
cfg
);

1990 
	`sys_ˇtv_≠∂y
(
≠∂y_›ti⁄s
);

1991 
	`sys_ˇtv_commô
(
≠∂y_›ti⁄s
);

1993 #ifde‡
CONFIG_WLAN_AP


1994 
	`sys_wœn_≠_lﬂd
(
wœn_≠_t
 *
sys
);

1995 
	`wœn_≠_öô_≠∂y
(
wœn_≠_t
 *
sys
);

1996 
	`sys_wœn_≠_upd©e
(
wœn_≠_t
 *
cfg
);

1997 
	`sys_wœn_≠_≠∂y
(
≠∂y_›ti⁄s
);

1998 
	`sys_wœn_≠_commô
(
≠∂y_›ti⁄s
);

1999 
	`gë_wœn_mac_fûãr
(
wœn_≠_t
 *
sys
);

2001 #i‡
	`deföed
(
CONFIG_ONU_COMPATIBLE
)

2002 
	`sys_com∑tibÀ_lﬂd
(
com∑tibÀ_£âög_t
 *
sys
);

2003 
	`sys_com∑tibÀ_upd©e
(
com∑tibÀ_£âög_t
 *
cfg
);

2004 
	`sys_com∑tibÀ_commô
(
≠∂y_›ti⁄s
);

2005 
ùc_com∑tibÀ_£âög_ack_t
 *
	`ùc_com∑tibÀ_£âög_c⁄fig
(
ùc_fd
, 
uöt8_t
 
ac˚ss
, uöt8_à
≠∂y_›ti⁄
, 
com∑tibÀ_£âög_t
 *
cfg
);

2006 
	`ﬂm_ùc_gë_sys_com∑tibÀ
(
ùc_fd
,
com∑tibÀ_£âög_t
 *
öfo
);

	@lw_config_api.h

1 #i‚de‡
__LW_CONFIG_API_H_


2 
	#__LW_CONFIG_API_H_


	)

4 #ifde‡
__˝lu•lus


8 
Cfgöô
(
Êag
);

10 
cfg_gëvÆ
(
ifödex
,
oid
,*
vÆ
,* 
deÁu…_vÆ
,
ªéí
);

12 
	#CFG_OK
 0

	)

13 
	#CFG_ERR
 -1

	)

15 
	#MASTER
 1

	)

16 
	#SLAVER
 0

	)

17 
	#TESTER
 0xff

	)

19 
	#CONFIG_DEFAULTFILE
 "/ëc/c⁄fig/°¨tup"

	)

21 
isMa°î
();

24 #ifde‡
__˝lu•lus


	@lw_config_oid.h

1 #i‚de‡
_LW_CONFIG_OID_H_


2 
	#_LW_CONFIG_OID_H_


	)

4 #ifde‡ 
__˝lu•lus


7 
	eègLW_MID_DEF


9 
CONFIG_MID_BASE
=1,

10 
CONFIG_MID_SYSTEM
,

11 
CONFIG_MID_NTP
,

12 
CONFIG_MID_WEB
,

13 
CONFIG_MID_TELNET
,

14 
CONFIG_MID_USER
,

15 
CONFIG_MID_ETHPORT
,

16 
CONFIG_MID_MIRROR
,

17 
CONFIG_MID_L2QOS
,

18 
CONFIG_MID_VLAN
,

19 
CONFIG_MID_MVLAN
,

20 
CONFIG_MID_LOOP
,

21 
CONFIG_MID_SYSLOG
,

22 
CONFIG_MID_QOS
,

23 
CONFIG_MID_SNMP
,

24 
CONFIG_MID_EPON
,

25 
CONFIG_MID_VOICEVLAN
,

26 
CONFIG_MID_MAC_SEETING
,

27 
CONFIG_MID_SSH
,

28 
CONFIG_MID_CATV
,

29 
CONFIG_MID_WLAN
,

30 
CONFIG_MID_COMPATIBLE
,

31 
CONFIG_MID_ANALOG
,

32 
CONFIG_MID_ADMINGROUP
,

33 
CONFIG_MID_MAX
=255

36 
	eègCFG_DOMAIN_E


38 
CONFIG_NORMAL
,

39 
CONFIG_FACTORY
,

40 
CONFIG_VIRTUAL
,

41 
CONFIG_ATOM
,

42 
CONFIG_MAX_DOMAINS


43 }
	tCFG_DOMAIN_E
;

46 
	#CONFIG_MID_SHIFT
 24

	)

47 
	#CONFIG_SECTION_SHIFT
 19

	)

48 
	#CONFIG_KEY_SHIFT
 14

	)

50 
	#CONFIG_MID
(
cmo
Ë((cmo)&(()0xff<<
CONFIG_MID_SHIFT
))

	)

51 
	#CONFIG_MID_SECTION
(
cmo
Ë((cmo)&(()0xff<<
CONFIG_MID_SHIFT
|()0x1f<<
CONFIG_SECTION_SHIFT
))

	)

52 
	#CONFIG_MID_SECTION_KEY
(
cmo
Ë((cmo)&(()0xff<<
CONFIG_MID_SHIFT
|()0x1f<<
CONFIG_SECTION_SHIFT
|()0x1f<<
CONFIG_KEY_SHIFT
))

	)

53 
	#CONFIG_INDEX
(
cmo
Ë((cmo)&(0x3fff))

	)

55 
	#IS_ROOTCONFIG
(
cmo
Ë(0==cmo)

	)

57 
	#IS_MIDCONFIG
(
cmo
Ë((0!=
	`CONFIG_MID
(cmo))&&(CONFIG_MID(cmo)==(cmo)))

	)

58 
	#IS_SECTIONCONFIG
(
_cmoid
Ë((0!=
	`CONFIG_MID
(_cmoid))&&(CONFIG_MID(_cmoid)!
	`CONFIG_MID_SECTION
(_cmoid))&&(CONFIG_MID_SECTION(_cmoid)==
	`CONFIG_MID_SECTION_KEY
(_cmoid)))

	)

59 
	#IS_KEYCONFIG
(
_cmoid
Ë((0!=
	`CONFIG_MID
(_cmoid))&&(CONFIG_MID(_cmoid)!
	`CONFIG_MID_SECTION
(_cmoid))&&(CONFIG_MID_SECTION(_cmoid)!=
	`CONFIG_MID_SECTION_KEY
(_cmoid)))

	)

60 
	#CONFIG_MAX_INDEX
 (1024*16)

	)

61 
	#CONFIG_MIN_INDEX
 0

	)

62 
	#CONFIG_IDX_HEXBIT
 5

	)

65 
	#CONFIG_CMO_DEF
(
ModuÀID
, 
Se˘i⁄
, 
Key
,
IDX
Ë((()(ModuÀID)<<
CONFIG_MID_SHIFT
)|\

	)

66 ((
Se˘i⁄
)<<
CONFIG_SECTION_SHIFT
)|((
Key
)<<
CONFIG_KEY_SHIFT
)|(
IDX
))

85 
	#CONFIG_BASE
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_BASE
,0,0,0)

	)

86 
	#CONFIG_L3_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_BASE
,1,key,0)

	)

87 
	#CONFIG_L3_BASE
 
	`CONFIG_L3_
(0)

	)

88 
	#CONFIG_IP_ADDR
 
	`CONFIG_L3_
(1)

	)

89 
	#CONFIG_IP_MASK
 
	`CONFIG_L3_
(2)

	)

90 
	#CONFIG_IP_GATEWAY
 
	`CONFIG_L3_
(3)

	)

91 
	#CONFIG_IP_MTU
 
	`CONFIG_L3_
(4)

	)

92 
	#CONFIG_DIAL_TYPE
 
	`CONFIG_L3_
(5)

	)

93 
	#CONFIG_IP_MSTDNS
 
	`CONFIG_L3_
(6)

	)

94 
	#CONFIG_IP_SLVDNS
 
	`CONFIG_L3_
(7)

	)

98 
	#CONFIG_IF_
(
KEY
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_BASE
,2,KEY,0)

	)

99 
	#CONFIG_IF_BASE
 
	`CONFIG_IF_
(0)

	)

100 
	#CONFIG_IF_DESC
 
	`CONFIG_IF_
(1)

	)

101 
	#CONFIG_IF_TYPE
 
	`CONFIG_IF_
(2)

	)

102 
	#CONFIG_IF_NAME
 
	`CONFIG_IF_
(3)

	)

103 
	#CONFIG_IF_ENABLE
 
	`CONFIG_IF_
(4)

	)

105 
	#CONFIG_L2_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_BASE
,3,key,0)

	)

106 
	#CONFIG_L2_BASE
 
	`CONFIG_L2_
(0)

	)

107 
	#CONFIG_PORT_SPEED
 
	`CONFIG_L2_
(1)

	)

108 
	#CONFIG_PORT_DUPLEX
 
	`CONFIG_L2_
(2)

	)

112 
	#CONFIG_SYSTEM
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_SYSTEM
,0,0,0)

	)

113 
	#CONFIG_SYS_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_SYSTEM
,1,key,0)

	)

114 
	#CONFIG_SYSTEM_SECTION
 
	`CONFIG_SYS_
(0)

	)

115 
	#CONFIG_SYSTEM_NAME
 
	`CONFIG_SYS_
(1)

	)

117 
	#CONFIG_SUPER_PASSWORD
 
	`CONFIG_SYS_
(3)

	)

118 
	#CONFIG_LAN_MAC_ADDR
 
	`CONFIG_SYS_
(4)

	)

121 
	#CONFIG_NTP
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_NTP
,0,0,0)

	)

122 
	#CONFIG_NTP_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_NTP
,1,key,0)

	)

123 
	#CONFIG_NTP_SECTION
 
	`CONFIG_NTP_
(0)

	)

124 
	#CONFIG_NTP_ZONE
 
	`CONFIG_NTP_
(1)

	)

125 
	#CONFIG_NTP_SERVER
 
	`CONFIG_NTP_
(2)

	)

126 
	#CONFIG_NTP_DAYLIGHT
 
	`CONFIG_NTP_
(3)

	)

127 
	#CONFIG_NTP_START_M
 
	`CONFIG_NTP_
(4)

	)

128 
	#CONFIG_NTP_START_D
 
	`CONFIG_NTP_
(5)

	)

129 
	#CONFIG_NTP_TYPE
 
	`CONFIG_NTP_
(6)

	)

130 
	#CONFIG_NTP_SYSTIME
 
	`CONFIG_NTP_
(7)

	)

132 
	#CONFIG_WEB
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_WEB
,0,0,0)

	)

133 
	#CONFIG_WEB_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_WEB
,1,key,0)

	)

134 
	#CONFIG_WEB_SECTION
 
	`CONFIG_WEB_
(0)

	)

135 
	#CONFIG_WEB_AUX_ENABLE
 
	`CONFIG_WEB_
(1)

	)

136 
	#CONFIG_WEB_USERNAME
 
	`CONFIG_WEB_
(2)

	)

137 
	#CONFIG_WEB_PASSWORD
 
	`CONFIG_WEB_
(3)

	)

138 
	#CONFIG_WEB_IDLETIME
 
	`CONFIG_WEB_
(4)

	)

139 
	#CONFIG_WEB_SSL_ENABLE
 
	`CONFIG_WEB_
(5)

	)

141 
	#CONFIG_TELNET
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_TELNET
,0,0,0)

	)

142 
	#CONFIG_TELNET_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_TELNET
,1,key,0)

	)

143 
	#CONFIG_TELNET_SECTION
 
	`CONFIG_TELNET_
(0)

	)

144 
	#CONFIG_TELNET_SERVICE_ENABLE
 
	`CONFIG_TELNET_
(1)

	)

146 
	#CONFIG_TELNET_PORT
 
	`CONFIG_TELNET_
(2)

	)

148 
	#CONFIG_SSH
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_SSH
,0,0,0)

	)

149 
	#CONFIG_SSH_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_SSH
,1,key,0)

	)

150 
	#CONFIG_SSH_SECTION
 
	`CONFIG_SSH_
(0)

	)

151 
	#CONFIG_SSH_SERVICE_ENABLE
 
	`CONFIG_SSH_
(1)

	)

152 
	#CONFIG_SSH_PORT
 
	`CONFIG_SSH_
(2)

	)

155 
	#CONFIG_USER
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_USER
,0,0,0)

	)

156 
	#CONFIG_USER_VTY_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_USER
,1,key,0)

	)

157 
	#CONFIG_USER_VTY_SECTION
 
	`CONFIG_USER_VTY_
(0)

	)

158 
	#CONFIG_USER_VTY_NAME
 
	`CONFIG_USER_VTY_
(1)

	)

159 
	#CONFIG_USER_VTY_PASSWORD
 
	`CONFIG_USER_VTY_
(2)

	)

160 
	#CONFIG_USER_VTY_PASSWORD_TYPE
 
	`CONFIG_USER_VTY_
(3)

	)

161 
	#CONFIG_USER_VTY_AUTHMODE
 
	`CONFIG_USER_VTY_
(4)

	)

162 
	#CONFIG_USER_VTY_TIMEOUT
 
	`CONFIG_USER_VTY_
(5)

	)

164 
	#CONFIG_USER_WEB_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_USER
,2,key,0)

	)

165 
	#CONFIG_USER_WEB_SECTION
 
	`CONFIG_USER_WEB_
(0)

	)

166 
	#CONFIG_USER_WEB_NAME
 
	`CONFIG_USER_WEB_
(1)

	)

167 
	#CONFIG_USER_WEB_PASSWORD
 
	`CONFIG_USER_WEB_
(2)

	)

168 
	#CONFIG_USER_WEB_LEVEL
 
	`CONFIG_USER_WEB_
(3)

	)

170 
	#CONFIG_ETHPORT
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_ETHPORT
,0,0,0)

	)

171 
	#CONFIG_ETHPORT_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_ETHPORT
,1,key,0)

	)

172 
	#CONFIG_ETHPORT_SECTION
 
	`CONFIG_ETHPORT_
(0)

	)

173 
	#CONFIG_ETHPORT_ENABLED
 
	`CONFIG_ETHPORT_
(1)

	)

174 
	#CONFIG_ETHPORT_AUTONEG
 
	`CONFIG_ETHPORT_
(2)

	)

175 
	#CONFIG_ETHPORT_SPD
 
	`CONFIG_ETHPORT_
(3)

	)

176 
	#CONFIG_ETHPORT_DUP
 
	`CONFIG_ETHPORT_
(4)

	)

177 
	#CONFIG_ETHPORT_PRI
 
	`CONFIG_ETHPORT_
(5)

	)

178 
	#CONFIG_ETHPORT_FLC
 
	`CONFIG_ETHPORT_
(6)

	)

179 
	#CONFIG_ETHPORT_INGRESS_LIMIT
 
	`CONFIG_ETHPORT_
(7)

	)

180 
	#CONFIG_ETHPORT_ENGRESS_LIMIT
 
	`CONFIG_ETHPORT_
(8)

	)

181 
	#CONFIG_ETHPORT_VLANMODE
 
	`CONFIG_ETHPORT_
(9)

	)

182 
	#CONFIG_ETHPORT_PVID
 
	`CONFIG_ETHPORT_
(10)

	)

183 
	#CONFIG_ETHPORT_LINKTYPE
 
	`CONFIG_ETHPORT_
(11)

	)

184 
	#CONFIG_ETHPORT_LINK_TRUNK_PERMIT
 
	`CONFIG_ETHPORT_
(12)

	)

185 
	#CONFIG_ETHPORT_LINK_HYBRID_TAG
 
	`CONFIG_ETHPORT_
(13)

	)

186 
	#CONFIG_ETHPORT_LINK_HYBRID_UNTAG
 
	`CONFIG_ETHPORT_
(14)

	)

189 
	#CONFIG_VLAN_
(
Se˘i⁄
, 
Key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_VLAN
, Se˘i⁄, Key, 0)

	)

190 
	#CONFIG_VLAN
 
	`CONFIG_VLAN_
(0, 0)

	)

192 
	#CONFIG_VLAN_INFO_SECTION
 
	`CONFIG_VLAN_
(1, 0)

	)

193 
	#CONFIG_VLAN_MODE
 
	`CONFIG_VLAN_
(1, 1)

	)

194 
	#CONFIG_PORTVLAN_TABLE
 
	`CONFIG_VLAN_
(2, 0)

	)

195 
	#CONFIG_PORT_PVID_ETH
 
	`CONFIG_VLAN_
(2, 1)

	)

196 
	#CONFIG_PORT_PVID_CAB
 
	`CONFIG_VLAN_
(2, 2)

	)

197 
	#CONFIG_PORT_LINKTYPE_ETH
 
	`CONFIG_VLAN_
(2, 3)

	)

198 
	#CONFIG_PORT_LINKTYPE_CAB
 
	`CONFIG_VLAN_
(2, 4)

	)

199 
	#CONFIG_PORT_TRUNK_PERMIT_ETH
 
	`CONFIG_VLAN_
(2, 5)

	)

200 
	#CONFIG_PORT_TRUNK_PERMIT_CAB
 
	`CONFIG_VLAN_
(2, 6)

	)

201 
	#CONFIG_PORT_LINK_HYBRID_TAG_ETH
 
	`CONFIG_VLAN_
(2, 7)

	)

202 
	#CONFIG_PORT_LINK_HYBRID_TAG_CAB
 
	`CONFIG_VLAN_
(2, 8)

	)

203 
	#CONFIG_PORT_LINK_HYBRID_UNTAG_ETH
 
	`CONFIG_VLAN_
(2, 9)

	)

204 
	#CONFIG_PORT_LINK_HYBRID_UNTAG_CAB
 
	`CONFIG_VLAN_
(2, 10)

	)

206 
	#CONFIG_PVLAN_TABLE
 
	`CONFIG_VLAN_
(3, 0)

	)

207 
	#CONFIG_PVLAN_TABLE_ID
 
	`CONFIG_VLAN_
(3, 1)

	)

208 
	#CONFIG_PVLAN_TABLE_PORT
 
	`CONFIG_VLAN_
(3, 2)

	)

210 
	#CONFIG_VLANGROUP_TABLE
 
	`CONFIG_VLAN_
(4, 0)

	)

211 
	#CONFIG_VLANGROUP
 
	`CONFIG_VLAN_
(4, 1)

	)

215 
	#CONFIG_MVLAN
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_MVLAN
,0,0,0)

	)

216 
	#CONFIG_MVLAN_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_MVLAN
,1,key,0)

	)

217 
	#CONFIG_MVLAN_SECTION
 
	`CONFIG_MVLAN_
(0)

	)

218 
	#CONFIG_MVLAN_VID
 
	`CONFIG_MVLAN_
(1)

	)

219 
	#CONFIG_MVLAN_INTERFACE
 
	`CONFIG_MVLAN_
(2)

	)

220 
	#CONFIG_LOOP
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_LOOP
,0,0,0)

	)

221 
	#CONFIG_LOOP_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_LOOP
,1,key,0)

	)

222 
	#CONFIG_LOOP_SECTION
 
	`CONFIG_LOOP_
(0)

	)

223 
	#CONFIG_LOOP_ENABLED
 
	`CONFIG_LOOP_
(1)

	)

224 
	#CONFIG_LOOP_UPDATE
 
	`CONFIG_LOOP_
(2)

	)

226 
	#CONFIG_VOICEVLAN
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_VOICEVLAN
,0,0,0)

	)

227 
	#CONFIG_VOICEVLAN_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_VOICEVLAN
,1,key,0)

	)

228 
	#CONFIG_VOICEVLAN_SECTION
 
	`CONFIG_VOICEVLAN_
(0)

	)

229 
	#CONFIG_VOICEVLAN_VID
 
	`CONFIG_VOICEVLAN_
(1)

	)

230 
	#CONFIG_VOICEVLAN_ENABLE
 
	`CONFIG_VOICEVLAN_
(2)

	)

231 
	#CONFIG_VOICEVLAN_MODE
 
	`CONFIG_VOICEVLAN_
(3)

	)

233 
	#CONFIG_PORT_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_VOICEVLAN
,2,key,0)

	)

234 
	#CONFIG_PORT_SECTION
 
	`CONFIG_PORT_
(0)

	)

235 
	#CONFIG_PORT_ENABLE
 
	`CONFIG_PORT_
(1)

	)

237 
	#CONFIG_OUI_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_VOICEVLAN
,3,key,0)

	)

238 
	#CONFIG_OUI_SECTION
 
	`CONFIG_OUI_
(0)

	)

239 
	#CONFIG_OUI_ADDR
 
	`CONFIG_OUI_
(1)

	)

240 
	#CONFIG_OUI_NAME
 
	`CONFIG_OUI_
(2)

	)

241 
	#CONFIG_OUI_MASK
 
	`CONFIG_OUI_
(3)

	)

245 
	#CONFIG_SYSLOG
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_SYSLOG
,0,0,0)

	)

246 
	#CONFIG_SYSLOG_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_SYSLOG
,1,key,0)

	)

247 
	#CONFIG_SYSLOG_SECTION
 
	`CONFIG_SYSLOG_
(0)

	)

248 
	#CONFIG_SYSLOG_ENABLED
 
	`CONFIG_SYSLOG_
(1)

	)

249 
	#CONFIG_SYSLOG_IP
 
	`CONFIG_SYSLOG_
(2)

	)

250 
	#CONFIG_SYSLOG_DEGREE
 
	`CONFIG_SYSLOG_
(3)

	)

251 
	#CONFIG_SYSLOG_SAVE_DEGREE
 
	`CONFIG_SYSLOG_
(4)

	)

252 
	#CONFIG_SYSLOG_PORT
 
	`CONFIG_SYSLOG_
(5)

	)

255 
	#CONFIG_QOS_
(
Se˘i⁄
, 
Key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_QOS
, Se˘i⁄, Key, 0)

	)

256 
	#CONFIG_QOS
 
	`CONFIG_QOS_
(0, 0)

	)

257 
	#CONFIG_QOS_QOSMODE_SECTION
 
	`CONFIG_QOS_
(1, 0)

	)

258 
	#CONFIG_QOS_MODE
 
	`CONFIG_QOS_
(1, 1)

	)

259 
	#CONFIG_QOS_QUEUEMODE_SECTION
 
	`CONFIG_QOS_
(2, 0)

	)

260 
	#CONFIG_QOS_QUEUEMODE
 
	`CONFIG_QOS_
(2, 1)

	)

261 
	#CONFIG_QOS_WEIGHT_TABLE
 
	`CONFIG_QOS_
(3, 0)

	)

262 
	#CONFIG_QOS_WEIGHT
 
	`CONFIG_QOS_
(3, 1)

	)

265 
	#CONFIG_ETHPORT
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_ETHPORT
,0,0,0)

	)

266 
	#CONFIG_ETHPORT_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_ETHPORT
,1,key,0)

	)

267 
	#CONFIG_ETHPORT_SECTION
 
	`CONFIG_ETHPORT_
(0)

	)

268 
	#CONFIG_ETHPORT_DESCRIPTION
 
	`CONFIG_ETHPORT_
(1)

	)

269 
	#CONFIG_ETHPORT_ENABLED
 
	`CONFIG_ETHPORT_
(2)

	)

270 
	#CONFIG_ETHPORT_SPD
 
	`CONFIG_ETHPORT_
(3)

	)

271 
	#CONFIG_ETHPORT_DUP
 
	`CONFIG_ETHPORT_
(4)

	)

272 
	#CONFIG_ETHPORT_PRI
 
	`CONFIG_ETHPORT_
(5)

	)

273 
	#CONFIG_ETHPORT_FC
 
	`CONFIG_ETHPORT_
(6)

	)

274 
	#CONFIG_ETHPORT_MDIX
 
	`CONFIG_ETHPORT_
(7)

	)

275 
	#CONFIG_ETHPORT_ISOLATE
 
	`CONFIG_ETHPORT_
(8)

	)

276 
	#CONFIG_ETHPORT_INRATE
 
	`CONFIG_ETHPORT_
(9)

	)

277 
	#CONFIG_ETHPORT_OUTRATE
 
	`CONFIG_ETHPORT_
(10)

	)

278 
	#CONFIG_ETHPORT_MIRRORMOD
 
	`CONFIG_ETHPORT_
(11)

	)

279 
	#CONFIG_ETHPORT_UCAST_STORMCTL_EN
 
	`CONFIG_ETHPORT_
(12)

	)

280 
	#CONFIG_ETHPORT_MCAST_STORMCTL_EN
 
	`CONFIG_ETHPORT_
(13)

	)

281 
	#CONFIG_ETHPORT_BCAST_STORMCTL_EN
 
	`CONFIG_ETHPORT_
(14)

	)

282 
	#CONFIG_ETHPORT_STORMCTL_PERCENT
 
	`CONFIG_ETHPORT_
(15)

	)

287 
	#CONFIG_SNMP
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_SNMP
,0,0,0)

	)

288 
	#CONFIG_SNMP_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_SNMP
,1,key,0)

	)

289 
	#CONFIG_SNMP_SECTION
 
	`CONFIG_SNMP_
(0)

	)

290 
	#CONFIG_SNMP_ENABLED
 
	`CONFIG_SNMP_
(1)

	)

291 
	#CONFIG_SNMP_ENGINEID
 
	`CONFIG_SNMP_
(2)

	)

292 
	#CONFIG_SNMP_MAX_PACKET_LEN
 
	`CONFIG_SNMP_
(3)

	)

293 
	#CONFIG_SNMP_LOCATION
 
	`CONFIG_SNMP_
(4)

	)

294 
	#CONFIG_SNMP_CONTACT
 
	`CONFIG_SNMP_
(5)

	)

295 
	#CONFIG_SNMP_VERSION
 
	`CONFIG_SNMP_
(6)

	)

296 
	#CONFIG_SNMP_TRUST_HOST
 
	`CONFIG_SNMP_
(7)

	)

297 
	#CONFIG_SNMP_COMM_CURRENT_COUNT
 
	`CONFIG_SNMP_
(8)

	)

298 
	#CONFIG_SNMP_GROUP_CURRENT_COUNT
 
	`CONFIG_SNMP_
(9)

	)

299 
	#CONFIG_SNMP_TRAP_EN
 
	`CONFIG_SNMP_
(10)

	)

300 
	#CONFIG_SNMP_TRAP_IP
 
	`CONFIG_SNMP_
(11)

	)

301 
	#CONFIG_SNMP_TRAP_COM
 
	`CONFIG_SNMP_
(12)

	)

302 
	#CONFIG_SNMP_TRAP_COMMUNITY
 
	`CONFIG_SNMP_
(13)

	)

303 
	#CONFIG_SNMP_TRAP_VERSION
 
	`CONFIG_SNMP_
(14)

	)

304 
	#CONFIG_SNMP_TRAP_SAFE
 
	`CONFIG_SNMP_
(15)

	)

305 
	#CONFIG_SNMP_LAST_SAVE_SAFE_NUM
 
	`CONFIG_SNMP_
(16)

	)

306 
	#CONFIG_SNMP_USER_CURRENT_COUNT
 
	`CONFIG_SNMP_
(17)

	)

309 
	#CONFIG_SNMP_COMMUNITIES_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_SNMP
,2,key,0)

	)

310 
	#CONFIG_SNMP_COMMUNITIES_SECTION
 
	`CONFIG_SNMP_COMMUNITIES_
(0)

	)

311 
	#CONFIG_SNMP_COMM_NAME
 
	`CONFIG_SNMP_COMMUNITIES_
(1)

	)

312 
	#CONFIG_SNMP_ACCESS_MODE
 
	`CONFIG_SNMP_COMMUNITIES_
(2)

	)

314 
	#CONFIG_SNMP_GROUP_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_SNMP
,3,key,0)

	)

315 
	#CONFIG_SNMP_GROUP_SECTION
 
	`CONFIG_SNMP_GROUP_
(0)

	)

316 
	#CONFIG_SNMP_GROUP_NAME
 
	`CONFIG_SNMP_GROUP_
(1)

	)

317 
	#CONFIG_SNMP_GROUP_SECURITY
 
	`CONFIG_SNMP_GROUP_
(2)

	)

318 
	#CONFIG_SNMP_GROUP_MODE
 
	`CONFIG_SNMP_GROUP_
(3)

	)

320 
	#CONFIG_SNMP_USER_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_SNMP
,4,key,0)

	)

321 
	#CONFIG_SNMP_USER_SECTION
 
	`CONFIG_SNMP_USER_
(0)

	)

322 
	#CONFIG_SNMP_USER_NMAE
 
	`CONFIG_SNMP_USER_
(1)

	)

323 
	#CONFIG_SNMP_USER_GROUP
 
	`CONFIG_SNMP_USER_
(2)

	)

324 
	#CONFIG_SNMP_SECURITY
 
	`CONFIG_SNMP_USER_
(3)

	)

325 
	#CONFIG_SNMP_PASSWORD
 
	`CONFIG_SNMP_USER_
(4)

	)

326 
	#CONFIG_SNMP_ENPASSWORD
 
	`CONFIG_SNMP_USER_
(5)

	)

328 
	#CONFIG_EPON
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_EPON
,0,0,0)

	)

329 
	#CONFIG_EPON_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_EPON
,1,key,0)

	)

330 
	#CONFIG_EPON_SECTION
 
	`CONFIG_EPON_
(0)

	)

331 
	#CONFIG_EPON_LOID
 
	`CONFIG_EPON_
(1)

	)

332 
	#CONFIG_EPON_PASSWD
 
	`CONFIG_EPON_
(2)

	)

334 
	#CONFIG_MAC_SEETING
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_MAC_SEETING
, 0, 0, 0)

	)

335 
	#CONFIG_MAC_SEETING_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_MAC_SEETING
, 1, key, 0)

	)

336 
	#CONFIG_MAC_SEETING_SECTION
 
	`CONFIG_MAC_SEETING_
(0)

	)

337 
	#CONFIG_MAC_SEETING_AGING_TIME
 
	`CONFIG_MAC_SEETING_
(1)

	)

340 
	#CONFIG_CATV
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_CATV
,0,0,0)

	)

341 
	#CONFIG_CATV_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_CATV
,1,key,0)

	)

342 
	#CONFIG_CATV_SECTION
 
	`CONFIG_CATV_
(0)

	)

343 
	#CONFIG_CATV_UPDATE
 
	`CONFIG_CATV_
(1)

	)

344 
	#CONFIG_CATV_OUTPUT_LEVEL_ATTEN
 
	`CONFIG_CATV_
(2)

	)

346 
	#CONFIG_WLAN
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_WLAN
,0,0,0)

	)

347 
	#CONFIG_WLAN_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_WLAN
,1,key,0)

	)

348 
	#CONFIG_WLAN_SECTION
 
	`CONFIG_WLAN_
(0)

	)

349 
	#CONFIG_WLAN_ENABLED
 
	`CONFIG_WLAN_
(1)

	)

350 
	#CONFIG_WLAN_MODEL
 
	`CONFIG_WLAN_
(2)

	)

351 
	#CONFIG_WLAN_BANDWIDTH
 
	`CONFIG_WLAN_
(3)

	)

352 
	#CONFIG_WLAN_CHANNEL
 
	`CONFIG_WLAN_
(4)

	)

353 
	#CONFIG_WLAN_TX_RATE
 
	`CONFIG_WLAN_
(5)

	)

354 
	#CONFIG_WLAN_MAC_FILTER_EN
 
	`CONFIG_WLAN_
(6)

	)

355 
	#CONFIG_WLAN_MAC_FILTER_MODEL
 
	`CONFIG_WLAN_
(7)

	)

356 
	#CONFIG_WLAN_BEACON_INTERVAL
 
	`CONFIG_WLAN_
(8)

	)

357 
	#CONFIG_WLAN_RST_THRESHOLD
 
	`CONFIG_WLAN_
(9)

	)

358 
	#CONFIG_WLAN_FRAG
 
	`CONFIG_WLAN_
(10)

	)

359 
	#CONFIG_WLAN_DTIM_INTERVAL
 
	`CONFIG_WLAN_
(11)

	)

360 
	#CONFIG_WLAN_TXPOWER
 
	`CONFIG_WLAN_
(12)

	)

361 
	#CONFIG_WLAN_WMM_EN
 
	`CONFIG_WLAN_
(13)

	)

362 
	#CONFIG_WLAN_UP_SER_VLAN
 
	`CONFIG_WLAN_
(14)

	)

363 
	#CONFIG_WLAN_SSID_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_WLAN
,2,key,0)

	)

364 
	#CONFIG_WLAN_SSID_SECTION
 
	`CONFIG_WLAN_SSID_
(0)

	)

365 
	#CONFIG_WLAN_SSID_NAME
 
	`CONFIG_WLAN_SSID_
(1)

	)

366 
	#CONFIG_WLAN_SSID_EN
 
	`CONFIG_WLAN_SSID_
(2)

	)

367 
	#CONFIG_WLAN_SSID_ISOLATE_EN
 
	`CONFIG_WLAN_SSID_
(3)

	)

368 
	#CONFIG_WLAN_SSID_BCAST_EN
 
	`CONFIG_WLAN_SSID_
(4)

	)

369 
	#CONFIG_WLAN_AUTHTYPE
 
	`CONFIG_WLAN_SSID_
(5)

	)

370 
	#CONFIG_WLAN_SSID_ENC_TYPE
 
	`CONFIG_WLAN_SSID_
(6)

	)

371 
	#CONFIG_WLAN_SSID_ENC_WEP_GROUP
 
	`CONFIG_WLAN_SSID_
(7)

	)

372 
	#CONFIG_WLAN_SSID_ENC_WEP_KEY_LEN
 
	`CONFIG_WLAN_SSID_
(8)

	)

373 
	#CONFIG_WLAN_SSID_ENC_WEP_KEY_TYPE
 
	`CONFIG_WLAN_SSID_
(9)

	)

374 
	#CONFIG_WLAN_SSID_ENC_WEP_KEY
 
	`CONFIG_WLAN_SSID_
(10)

	)

375 
	#CONFIG_WLAN_SSID_ENC_WPA_KEY
 
	`CONFIG_WLAN_SSID_
(11)

	)

376 
	#CONFIG_WLAN_SSID_ENC_WPA_KEY_TYPE
 
	`CONFIG_WLAN_SSID_
(12)

	)

377 
	#CONFIG_WLAN_SSID_ENC_WPA_KEY_PERIOD
 
	`CONFIG_WLAN_SSID_
(13)

	)

378 
	#CONFIG_WLAN_FILTER_MAC_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_WLAN
,3,key,0)

	)

379 
	#CONFIG_WLAN_FILTER_MAC_SECTION
 
	`CONFIG_WLAN_FILTER_MAC_
(0)

	)

380 
	#CONFIG_WLAN_FILTER_MAC_MAC
 
	`CONFIG_WLAN_FILTER_MAC_
(1)

	)

381 
	#CONFIG_WLAN_FILTER_MAC_MAC_DEC
 
	`CONFIG_WLAN_FILTER_MAC_
(2)

	)

383 
	#CONFIG_COMPATIBLE
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_COMPATIBLE
,0,0,0)

	)

384 
	#CONFIG_COMPATIBLE_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_COMPATIBLE
,1,key,0)

	)

385 
	#CONFIG_COMPATIBLE_SECTION
 
	`CONFIG_COMPATIBLE_
(0)

	)

386 
	#CONFIG_COMPATIBLE_MODE
 
	`CONFIG_COMPATIBLE_
(1)

	)

388 
	#CONFIG_ANALOG_PROPERTY
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_ANALOG
,0,0,0)

	)

389 
	#CONFIG_ANALOG_PROPERTY_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_ANALOG
,1,key,0)

	)

390 
	#CONFIG_ANALOG_PROPERTY_SECTION
 
	`CONFIG_ANALOG_PROPERTY_
(0)

	)

391 
	#CONFIG_ANALOG_PROPERTY_ENABLED
 
	`CONFIG_ANALOG_PROPERTY_
(1)

	)

392 
	#CONFIG_ANALOG_PROPERTY_HIHI
 
	`CONFIG_ANALOG_PROPERTY_
(2)

	)

393 
	#CONFIG_ANALOG_PROPERTY_HI
 
	`CONFIG_ANALOG_PROPERTY_
(3)

	)

394 
	#CONFIG_ANALOG_PROPERTY_LO
 
	`CONFIG_ANALOG_PROPERTY_
(4)

	)

395 
	#CONFIG_ANALOG_PROPERTY_LOLO
 
	`CONFIG_ANALOG_PROPERTY_
(5)

	)

396 
	#CONFIG_ANALOG_PROPERTY_DEADBAND
 
	`CONFIG_ANALOG_PROPERTY_
(6)

	)

398 
	#CONFIG_AdmöGroup
 
	`CONFIG_CMO_DEF
(
CONFIG_MID_ADMINGROUP
,0,0,0)

	)

399 
	#CONFIG_AdmöGroup_
(
key
Ë
	`CONFIG_CMO_DEF
(
CONFIG_MID_ADMINGROUP
,1,key,0)

	)

400 
	#CONFIG_AdmöGroup_SECTION
 
	`CONFIG_AdmöGroup_
(0)

	)

401 
	#CONFIG_AdmöGroup_NELogiˇlID
 
	`CONFIG_AdmöGroup_
(1)

	)

402 
	#CONFIG_AdmöGroup_CheckCode
 
	`CONFIG_AdmöGroup_
(2)

	)

403 
	#CONFIG_AdmöGroup_TøpCommunôy
 
	`CONFIG_AdmöGroup_
(3)

	)

438 
	#CONFIG_PLAT_OIDTABLE
 \

	)

439 {
CONFIG_SYSTEM
, "sy°em", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

440 {
CONFIG_SYSTEM_SECTION
, "sy°em_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

441 {
CONFIG_SYSTEM_NAME
, "sys_sy°em«me", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

442 {
CONFIG_SUPER_PASSWORD
, "su≥r_∑ssw‹d", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

443 {
CONFIG_LAN_MAC_ADDR
, "sys_mac", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

444 {
CONFIG_NTP
, "¡p", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

445 {
CONFIG_NTP_SECTION
, "¡p_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

446 {
CONFIG_NTP_ZONE
, "¡p_time_z⁄e", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

447 {
CONFIG_NTP_SERVER
, "¡p_time_£rvî", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

448 {
CONFIG_NTP_DAYLIGHT
, "¡p_daylight", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

449 {
CONFIG_NTP_START_M
, "¡p_dl_°¨t_m", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

450 {
CONFIG_NTP_START_D
, "¡p_dl_°¨t_d", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

451 {
CONFIG_NTP_TYPE
, "¡p_ty≥", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

452 {
CONFIG_NTP_SYSTIME
, "¡p_sy°ime", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

453 {
CONFIG_WEB
, "web", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

454 {
CONFIG_WEB_SECTION
, "web_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

455 {
CONFIG_WEB_AUX_ENABLE
, "web_aux_íabÀd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

456 {
CONFIG_WEB_USERNAME
, "web_u£∫ame_aux", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

457 {
CONFIG_WEB_PASSWORD
, "web_∑ssw‹d_aux", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

458 {
CONFIG_WEB_IDLETIME
, "web_idÀ_time", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

459 {
CONFIG_WEB_SSL_ENABLE
, "web_s¶_íabÀd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

460 {
CONFIG_TELNET
, "ã ë", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

461 {
CONFIG_TELNET_SECTION
, "ã ë_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

462 {
CONFIG_TELNET_SERVICE_ENABLE
, "ã ë_£rvi˚_íabÀd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

463 {
CONFIG_TELNET_PORT
, "sys_ã ë_p‹t", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

464 {
CONFIG_USER
, "u£r", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

465 {
CONFIG_USER_VTY_SECTION
, "vty_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

466 {
CONFIG_USER_VTY_NAME
, "u£r_vty_«me", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

467 {
CONFIG_USER_VTY_PASSWORD
, "u£r_vty_∑ssw‹d", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

468 {
CONFIG_USER_VTY_PASSWORD_TYPE
, "u£r_vty_∑ssw‹d_ty≥", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

469 {
CONFIG_USER_VTY_AUTHMODE
, "u£r_vty_authmode", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

470 {
CONFIG_USER_VTY_TIMEOUT
, "u£r_vty_timeout", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

471 {
CONFIG_USER_WEB_SECTION
, "web_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

472 {
CONFIG_USER_WEB_NAME
, "u£r_web_«me", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

473 {
CONFIG_USER_WEB_PASSWORD
, "u£r_web_∑ssw‹d", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

474 {
CONFIG_USER_WEB_LEVEL
, "u£r_web_Àvñ", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

475 {
CONFIG_BASE
,"ba£",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
}, \

476 {
CONFIG_L3_BASE
,"l3ba£",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
}, \

477 {
CONFIG_IP_ADDR
,"ùaddªss",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
}, \

478 {
CONFIG_IP_MTU
,"mtu",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

479 {
CONFIG_IP_GATEWAY
,"g©eway",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

480 {
CONFIG_IP_MASK
,"ùmask",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
}, \

481 {
CONFIG_DIAL_TYPE
,"dü…y≥",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

482 {
CONFIG_IP_SLVDNS
,"¶avedns",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

483 {
CONFIG_IF_BASE
,"ifba£",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

484 {
CONFIG_IF_DESC
,"ifdes¸ùti⁄",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

485 {
CONFIG_IF_TYPE
,"i·y≥",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

486 {
CONFIG_IF_NAME
,"i‚ame",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

487 {
CONFIG_IF_ENABLE
,"i„«bÀ",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

488 {
CONFIG_L2_BASE
,"l2ba£",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

489 {
CONFIG_PORT_SPEED
,"p‹t•ìd",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

490 {
CONFIG_PORT_DUPLEX
,"p‹tdu∂ex",0,0,0,
CFG_OID_TYPE_SINGLE
,
NULL
,
CFG_TYPE_STR
},\

491 {
CONFIG_LOOP
, "lo›", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

492 {
CONFIG_LOOP_SECTION
, "lo›_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

493 {
CONFIG_LOOP_ENABLED
, "lo›_íabÀd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

494 {
CONFIG_LOOP_UPDATE
, "lo›_upd©e", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

495 {
CONFIG_VLAN
,"vœn",0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

496 {
CONFIG_VLAN_INFO_SECTION
,"vœnmode£˘i⁄",0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

497 {
CONFIG_VLAN_MODE
,"vœnmode",0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

498 {
CONFIG_PORTVLAN_TABLE
,"vœ≈‹âabÀ",0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

499 {
CONFIG_PORT_PVID_ETH
,"vœ≈‹çvid",0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

500 {
CONFIG_PORT_LINKTYPE_ETH
,"vœ≈‹ây≥",0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

501 {
CONFIG_PORT_TRUNK_PERMIT_ETH
,"vœ≈‹ârunk",0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

502 {
CONFIG_PORT_LINK_HYBRID_TAG_ETH
,"vœ≈‹thybridèg",0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

503 {
CONFIG_PORT_LINK_HYBRID_UNTAG_ETH
,"vœ≈‹thybridu¡ag",0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

504 {
CONFIG_VLANGROUP_TABLE
, "vœngrou±abÀ", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

505 {
CONFIG_VLANGROUP
, "vœngroup", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

506 {
CONFIG_MVLAN
, "mvœn", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

507 {
CONFIG_MVLAN_SECTION
, "mvœn_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

508 {
CONFIG_MVLAN_VID
, "vœn_m™age_vid", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

509 {
CONFIG_MVLAN_INTERFACE
, "vœn_öãrÁ˚", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

510 {
CONFIG_SYSLOG
, "sy¶og", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

511 {
CONFIG_SYSLOG_SECTION
, "sy¶og_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

512 {
CONFIG_SYSLOG_ENABLED
, "sy¶og_í", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

513 {
CONFIG_SYSLOG_IP
, "sy¶og_ù", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

514 {
CONFIG_SYSLOG_DEGREE
, "sy¶og_degªe", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

515 {
CONFIG_SYSLOG_SAVE_DEGREE
, "sy¶og_ßve_degªe", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

516 {
CONFIG_SYSLOG_PORT
, "sy¶og_p‹t", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

517 {
CONFIG_EPON
, "ï⁄", 0,0,1, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

518 {
CONFIG_EPON_SECTION
, "ï⁄_öfo", 0,0,1, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

519 {
CONFIG_EPON_LOID
, "ï⁄_loid", 0,0,1, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

520 {
CONFIG_EPON_PASSWD
, "ï⁄_∑sswd", 0,0,1, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

521 {
CONFIG_QOS
, "qos", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

522 {
CONFIG_QOS_QOSMODE_SECTION
, "qos_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

523 {
CONFIG_QOS_MODE
, "qos_qosmode", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

524 {
CONFIG_QOS_QUEUEMODE_SECTION
, "qos_queue_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

525 {
CONFIG_QOS_QUEUEMODE
, "qos_queuemode", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

526 {
CONFIG_QOS_WEIGHT_TABLE
,"qos_weight_èbÀ",0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

527 {
CONFIG_QOS_WEIGHT
, "qos_weight", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

528 {
CONFIG_ETHPORT
, "ëhp‹t", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

529 {
CONFIG_ETHPORT_SECTION
,"ëhp‹t_èbÀ",0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

530 {
CONFIG_ETHPORT_DESCRIPTION
, "ëhp‹t_des¸ùti⁄", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

531 {
CONFIG_ETHPORT_ENABLED
, "ëhp‹t_íabÀ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

532 {
CONFIG_ETHPORT_SPD
, "ëhp‹t_•ìd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

533 {
CONFIG_ETHPORT_DUP
, "ëhp‹t_du∂ex", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

534 {
CONFIG_ETHPORT_PRI
, "ëhp‹t_¥i‹ôy", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

535 {
CONFIG_ETHPORT_FC
, "ëhp‹t_Êowc⁄ål", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

536 {
CONFIG_ETHPORT_MDIX
, "ëhp‹t_mdix", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

537 {
CONFIG_ETHPORT_ISOLATE
, "ëhp‹t_isﬁ©e", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

538 {
CONFIG_ETHPORT_INRATE
, "ëhp‹t_ölimô", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

539 {
CONFIG_ETHPORT_OUTRATE
, "ëhp‹t_ouéimô", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

540 {
CONFIG_ETHPORT_MIRRORMOD
, "ëhp‹t_múr‹", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

541 {
CONFIG_ETHPORT_UCAST_STORMCTL_EN
, "ëhp‹t_°‹m˘l_uˇ°_í", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

542 {
CONFIG_ETHPORT_MCAST_STORMCTL_EN
, "ëhp‹t_°‹m˘l_mˇ°_í", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

543 {
CONFIG_ETHPORT_BCAST_STORMCTL_EN
, "ëhp‹t_°‹m˘l_bˇ°_í", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

544 {
CONFIG_ETHPORT_STORMCTL_PERCENT
, "ëhp‹t_°‹m˘l_≥r˚¡", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

545 {
CONFIG_SNMP
, "¢mp", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

546 {
CONFIG_SNMP_SECTION
, "¢mp_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

547 {
CONFIG_SNMP_ENABLED
, "¢mp_íabÀd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

548 {
CONFIG_SNMP_ENGINEID
, "¢mp_ígöeID", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

549 {
CONFIG_SNMP_MAX_PACKET_LEN
, "¢mp_max_∑ckë_Àn", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

550 {
CONFIG_SNMP_LOCATION
, "¢mp_loˇti⁄", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

551 {
CONFIG_SNMP_CONTACT
, "¢mp_c⁄è˘", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

552 {
CONFIG_SNMP_VERSION
, "¢mp_vîsi⁄", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

553 {
CONFIG_SNMP_TRUST_HOST
, "¢mp_åu°_ho°", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

554 {
CONFIG_SNMP_COMM_CURRENT_COUNT
, "¢mp_comm_cuºít_cou¡", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

555 {
CONFIG_SNMP_GROUP_CURRENT_COUNT
, "¢mp_group_cuºít_cou¡", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

556 {
CONFIG_SNMP_TRAP_EN
, "¢mp_å≠_í", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

557 {
CONFIG_SNMP_TRAP_IP
, "¢mp_å≠_ù", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

558 {
CONFIG_SNMP_TRAP_COM
, "¢mp_å≠_com", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

559 {
CONFIG_SNMP_TRAP_COMMUNITY
, "¢mp_å≠_communôy", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

560 {
CONFIG_SNMP_TRAP_VERSION
, "¢mp_å≠_vîsi⁄", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

561 {
CONFIG_SNMP_TRAP_SAFE
, "¢mp_å≠_ß„", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

562 {
CONFIG_SNMP_LAST_SAVE_SAFE_NUM
, "¢mp_œ°_ßve_ß„_num", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

563 {
CONFIG_SNMP_USER_CURRENT_COUNT
, "¢mp_u£r_cuºít_cou¡", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

564 {
CONFIG_SNMP_COMMUNITIES_SECTION
, "communôõs_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

565 {
CONFIG_SNMP_COMM_NAME
, "¢mp_comm_«me", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

566 {
CONFIG_SNMP_ACCESS_MODE
, "¢mp_ac˚ss_mode", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

567 {
CONFIG_SNMP_GROUP_SECTION
, "group_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

568 {
CONFIG_SNMP_GROUP_NAME
, "¢mp_group_«me", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

569 {
CONFIG_SNMP_GROUP_SECURITY
, "¢mp_group_£curôy", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

570 {
CONFIG_SNMP_GROUP_MODE
, "¢mp_group_mode", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

571 {
CONFIG_SNMP_USER_SECTION
, "u£r_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

572 {
CONFIG_SNMP_USER_NMAE
, "¢mp_u£r_«me", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

573 {
CONFIG_SNMP_USER_GROUP
, "¢mp_u£r_group", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

574 {
CONFIG_SNMP_SECURITY
, "¢mp_u£r_£curôy", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

575 {
CONFIG_SNMP_PASSWORD
, "¢mp_u£r_∑ssw‹d", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

576 {
CONFIG_SNMP_ENPASSWORD
, "¢mp_u£r_í∑ssw‹d", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

577 {
CONFIG_VOICEVLAN
, "voi˚_vœn", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

578 {
CONFIG_VOICEVLAN_SECTION
, "voi˚_vœn_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

579 {
CONFIG_VOICEVLAN_VID
, "voi˚_vœn_id", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

580 {
CONFIG_VOICEVLAN_ENABLE
, "voi˚_vœn_íabÀ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

581 {
CONFIG_VOICEVLAN_MODE
, "voi˚_vœn_mode", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

582 {
CONFIG_PORT_SECTION
, "p‹t_voi˚_vœn_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

583 {
CONFIG_PORT_ENABLE
, "p‹t_voi˚_vœn_íabÀ", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

584 {
CONFIG_OUI_SECTION
, "voi˚_vœn_oui_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

585 {
CONFIG_OUI_ADDR
, "voi˚_vœn_oui_addr", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

586 {
CONFIG_OUI_NAME
, "voi˚_vœn_oui_«me", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

587 {
CONFIG_OUI_MASK
, "voi˚_vœn_oui_mask", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

588 {
CONFIG_SNMP_ENPASSWORD
, "¢mp_u£r_í∑ssw‹d", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

589 {
CONFIG_MAC_SEETING
, "mac_£âög", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

590 {
CONFIG_MAC_SEETING_SECTION
, "mac_£âög_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

591 {
CONFIG_MAC_SEETING_AGING_TIME
, "mac_£âög_agög_time", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

592 {
CONFIG_SSH
, "ssh", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

593 {
CONFIG_SSH_SECTION
, "ssh_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

594 {
CONFIG_SSH_SERVICE_ENABLE
, "ssh_£rvi˚_íabÀd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

595 {
CONFIG_SSH_PORT
, "ssh_p‹t", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

596 {
CONFIG_WLAN
, "wœn", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

597 {
CONFIG_WLAN_SECTION
, "wœn_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

598 {
CONFIG_WLAN_ENABLED
, "wœn_íabÀd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

599 {
CONFIG_WLAN_MODEL
, "wœn_modñ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

600 {
CONFIG_WLAN_BANDWIDTH
, "wœn_b™dwidth", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

601 {
CONFIG_WLAN_CHANNEL
, "wœn_ch™√l", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

602 {
CONFIG_WLAN_TX_RATE
, "wœn_tx_øã", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

603 {
CONFIG_WLAN_MAC_FILTER_EN
, "wœn_mac_fûãr_í", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

604 {
CONFIG_WLAN_MAC_FILTER_MODEL
, "wœn_mac_fûãr_modñ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

605 {
CONFIG_WLAN_BEACON_INTERVAL
, "wœn_bóc⁄_öãrvÆ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

606 {
CONFIG_WLAN_RST_THRESHOLD
, "wœn_r°_thªshﬁd", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

607 {
CONFIG_WLAN_FRAG
, "wœn_‰ag", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

608 {
CONFIG_WLAN_DTIM_INTERVAL
, "wœn_dtim_öãrvÆ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

609 {
CONFIG_WLAN_TXPOWER
, "wœn_txpowî", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

610 {
CONFIG_WLAN_WMM_EN
, "wœn_wmm_í", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

611 {
CONFIG_WLAN_UP_SER_VLAN
, "wœn_up_£r_vœn", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

612 {
CONFIG_WLAN_SSID_SECTION
, "wœn_ssid_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

613 {
CONFIG_WLAN_SSID_NAME
, "wœn_ssid_«me", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

614 {
CONFIG_WLAN_SSID_EN
, "wœn_ssid_í", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

615 {
CONFIG_WLAN_SSID_ISOLATE_EN
, "wœn_ssid_isﬁ©e_í", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

616 {
CONFIG_WLAN_SSID_BCAST_EN
, "wœn_ssid_bˇ°_í", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

617 {
CONFIG_WLAN_AUTHTYPE
, "wœn_authty≥", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

618 {
CONFIG_WLAN_SSID_ENC_TYPE
, "wœn_ssid_íc_ty≥", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

619 {
CONFIG_WLAN_SSID_ENC_WEP_GROUP
, "wœn_ssid_íc_wï_group", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

620 {
CONFIG_WLAN_SSID_ENC_WEP_KEY_LEN
, "wœn_ssid_íc_wï_key_Àn", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

621 {
CONFIG_WLAN_SSID_ENC_WEP_KEY_TYPE
, "wœn_ssid_íc_wï_key_ty≥", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

622 {
CONFIG_WLAN_SSID_ENC_WEP_KEY
, "wœn_ssid_íc_wï_key", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

623 {
CONFIG_WLAN_SSID_ENC_WPA_KEY
, "wœn_ssid_íc_w∑_key", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

624 {
CONFIG_WLAN_SSID_ENC_WPA_KEY_TYPE
, "wœn_ssid_íc_w∑_key_ty≥", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

625 {
CONFIG_WLAN_SSID_ENC_WPA_KEY_PERIOD
, "wœn_ssid_íc_w∑_key_≥riod", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

626 {
CONFIG_WLAN_FILTER_MAC_SECTION
, "wœn_mac_fûãr_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

627 {
CONFIG_WLAN_FILTER_MAC_MAC
, "wœn_mac_fûãr_mac", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

628 {
CONFIG_WLAN_FILTER_MAC_MAC_DEC
, "wœn_mac_fûãr_dec", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

629 {
CONFIG_CATV
, "ˇtv", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

630 {
CONFIG_CATV_SECTION
, "ˇtv_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

631 {
CONFIG_CATV_UPDATE
, "upd©e", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

632 {
CONFIG_COMPATIBLE
, "com∑tibÀ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

633 {
CONFIG_COMPATIBLE_SECTION
, "com∑tibÀ_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

634 {
CONFIG_COMPATIBLE_MODE
, "com∑tibÀ_mode", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

635 {
CONFIG_CATV_OUTPUT_LEVEL_ATTEN
, "ouçut_Àvñ_©ãn", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

636 {
CONFIG_ANALOG_PROPERTY
, "™Æog_¥›îty_èbÀ", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

637 {
CONFIG_ANALOG_PROPERTY_SECTION
, "™Æog_¥›îty_", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

638 {
CONFIG_ANALOG_PROPERTY_ENABLED
, "™Æog_Æ¨m_íabÀ", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_STR
},\

639 {
CONFIG_ANALOG_PROPERTY_HIHI
, "™Æog_Æ¨m_hihi", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

640 {
CONFIG_ANALOG_PROPERTY_HI
, "™Æog_Æ¨m_hi", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

641 {
CONFIG_ANALOG_PROPERTY_LO
, "™Æog_Æ¨m_lo", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

642 {
CONFIG_ANALOG_PROPERTY_LOLO
, "™Æog_Æ¨m_lﬁo", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

643 {
CONFIG_ANALOG_PROPERTY_DEADBAND
, "™Æog_Æ¨m_dódb™d", 0,0,0, 
CFG_OID_TYPE_TABLE
, 
NULL
, 
CFG_TYPE_INT
},\

644 {
CONFIG_AdmöGroup
, "comm⁄AdmöGroup", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

645 {
CONFIG_AdmöGroup_SECTION
, "comm⁄AdmöGroup_öfo", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

646 {
CONFIG_AdmöGroup_NELogiˇlID
, "comm⁄NELogiˇlID", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
},\

647 {
CONFIG_AdmöGroup_CheckCode
, "comm⁄CheckCode", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_INT
},\

648 {
CONFIG_AdmöGroup_TøpCommunôy
, "comm⁄TøpCommunôySåög", 0,0,0, 
CFG_OID_TYPE_SINGLE
, 
NULL
, 
CFG_TYPE_STR
}

658 
	#DEFAULT_TELNET_SERVICE_STR
 "íabÀ"

	)

659 
	#DEFAULT_MANAGEMENT_VLAN_STR
 "1"

	)

660 
	#DEFAULT_LOOPBACK_ENABLE_STR
 "dißbÀ"

	)

662 
	#DEFAULT_SYSLOG_ENABLE_STR
 "0"

	)

663 
	#DEFAULT_SYSLOG_DEGREE_STR
 "5"

	)

664 
	#DEFAULT_SYSLOG_SAVEDEGREE_STR
 "7"

	)

665 
	#DEFAULT_SYSLOG_IP_STR
 "0.0.0.0"

	)

671 #ifde‡ 
__˝lu•lus


	@lw_drv_pub.h

5 #i‚de‡
_LW_DRV_PUB_H_


6 
	#_LW_DRV_PUB_H_


	)

8 #ifde‡ 
__˝lu•lus


12 
	~"lw_c⁄fig.h
"

14 
	~"pdt_c⁄fig.h
"

18 
	#IP_ADDR_LEN
 4

	)

19 
	#IP_ADDR_STR_LEN
 15

	)

20 
	#MAC_ADDR_LEN
 6

	)

21 
	#MAX_MANUCODE_LEN
 30

	)

23 
	#LASEON_TEST_ENABLE
 1

	)

24 
	#LASEON_TEST_DISABLE
 0

	)

29 
	#REBOOT_LOCK
 "/tmp/ªboŸ.lock"

	)

31 
	t˛i_sy°em_«me_t
[
MAX_SYSTEM_NAME_LEN
 + 1];

32 
	t˛i_∑ssw‹d_t
[
MAX_PASSWORD_LEN
 + 1];

33 
	tvœn_desc_t
[
MAX_VLAN_DESC_LEN
 + 1];

34 
	tvœnif_desc_t
[
MAX_VLANIF_DESC_LEN
 + 1];

35 
	tp‹t_desc_t
[
MAX_PORT_DESC_LEN
 + 1];

36 
	tù_addªss_°r_t
[
IP_ADDR_STR_LEN
 + 1];

37 
	tù_addªss_t
[
IP_ADDR_LEN
];

38 
	tmac_addªss_t
[
MAC_ADDR_LEN
];

46 
	#LOGIC_PORT_NO
 
MAX_PORT_NUM


	)

47 #i‡
deföed
(
CONFIG_PRODUCT_EPN104
)

48 
	#LOGIC_CPU_PORT
 (
LOGIC_PORT_NO
 + 1)

	)

49 #ñi‡
deföed
(
CONFIG_PRODUCT_EPN104N
Ë|| deföed(
CONFIG_PRODUCT_EPN104W
Ë|| deföed(
CONFIG_PRODUCT_EPN104ZG
Ë|| deföed(
CONFIG_PRODUCT_EPN104ZG_A
Ë|| deföed(
CONFIG_PRODUCT_EPN105
Ë|| deföed(
CONFIG_PRODUCT_GPN104N
)

50 
	#LOGIC_CPU_PORT
 (
LOGIC_PORT_NO
 + 3)

	)

51 #ñi‡
deföed
(
CONFIG_PRODUCT_EPN101R
Ë|| deföed(
CONFIG_PRODUCT_EPN101ZG
)

52 
	#LOGIC_CPU_PORT
 (
LOGIC_PORT_NO
 + 6)

	)

53 #ñi‡
deföed
(
CONFIG_PRODUCT_5500
)

54 
	#LOGIC_CPU_PORT
 (
LOGIC_PORT_NO
 + 4)

	)

56 
	#INVALID_PORT
 0xFFFFFFFF

	)

57 
	#STACK_PORT
 0xFFFF0000

	)

58 
	#CHIP_NO
 
MAX_CHIP_NUM


	)

59 
	#DEVICE_NO
 
MAX_DEVICE_NUM


	)

60 
	#MAX_SLOT_NO
 
MAX_SLOT_NUM


	)

61 
	#DEVICE1_SLOT0_PORT_NO
 
FE_PORT_NO


	)

62 
	#DEVICE1_SLOT1_PORT_NO
 
DRV1_PER_COMBO_HAVE_PORT_NO


	)

63 
	#DEVICE1_SLOT2_PORT_NO
 
DRV1_PER_COMBO_HAVE_PORT_NO


	)

64 
	#MIN_FIBER_PORT_NUM
 
MIN_COMBO_PORT_NUM


	)

73 
UINT32
 
	tphyid_t
;

75 
	#TOPHYID
(
_chùid
, 
_p‹tid
Ë(((((
phyid_t
)(_chùid))&0xff)<<24Ë| ((’hyid_t)(_p‹tid))&0xffffff))

	)

76 
	#CHIPID
(
_phyid
Ë((((
phyid_t
)(_phyid))>>24)&0xff)

	)

77 
	#PORTID
(
_phyid
Ë(((
phyid_t
)(_phyid))&0xffffff)

	)

79 
UINT32
 
	tsysW‹d_t
;

81 
	#PORT_MASK_STR_LENGTH
 (3 * 
LOGIC_PORT_NO
)

	)

83 
	#PORT_MASK_WORD_WIDTH
 (8 * (
sysW‹d_t
))

	)

86 
	#PORT_MASK_WORD_MAX
 ((
LOGIC_PORT_NO
+
PORT_MASK_WORD_WIDTH
-1)/PORT_MASK_WORD_WIDTH)

	)

89 
	sègDrv_pmask
 {

90 
sysW‹d_t
 
pbôs
[
PORT_MASK_WORD_MAX
];

91 } 
	tDRV_PMASK_T
;

95 
	#logic_pmask_t
 
DRV_PMASK_T


	)

98 
	#LOGIC_MASK_WIDTH
 (8 * (
logic_pmask_t
))

	)

101 
UINT32
 
g_szChùMaxP‹t
[];

103 
	#IfLgcMaskSë
(
lgcPMask_±r
, 
Õ‹t
)\

	)

104 (
	gÕ‹t
)=1; (Õ‹t)<=
LOGIC_PORT_NO
; (lport)++)\

105 if(
T°LgcMaskBô
((
Õ‹t
), (
lgcPMask_±r
)))

107 
	#IfLgcMaskSëNoCheck
(
lgcPMask_±r
, 
Õ‹t
)\

	)

108 (
	gÕ‹t
)=1; (Õ‹t)<=(
LOGIC_PORT_NO
+1); (lport)++)\

109 if(
T°LgcMaskBôNoCheck
((
Õ‹t
), (
lgcPMask_±r
)))

111 
	#IfPhyMaskSë
(
phyPMask_±r
, 
_chù
, 
_µ‹t
)\

	)

112 (
	g_chù
)=0; (_chù)<
	gCHIP_NO
; (_chip)++)\

113 (
	g_µ‹t
)=0; (_µ‹t)<(
	gg_szChùMaxP‹t
[(
_chù
)]); (_pport)++)\

114 if(
T°PhyMaskBô
(
TOPHYID
(
_chù
, 
_µ‹t
), (
phyPMask_±r
)))

116 
	#LgcP‹tF‹
(
Õ‹t
)\

	)

117 (
	gÕ‹t
)=1; (Õ‹t)<=
LOGIC_PORT_NO
; (lport)++)

119 
	#LgcP‹tF‹NoCheck
(
Õ‹t
, 
lgcPMask_±r
Ë\

	)

120  
	gÕ‹t
 = 1 ;Üp‹à<
LOGIC_CPU_PORT
 ;Üport++ ) \

121 if(
T°LgcMaskBôNoCheck
(
Õ‹t
, 
lgcPMask_±r
))

123 
	#PhyP‹tF‹
(
_chù
,
_µ‹t
)\

	)

124 (
	g_chù
)=0; (_chù)<
	gCHIP_NO
; (_chip)++)\

125 (
	g_µ‹t
)=0; (_µ‹t)<(
	gg_szChùMaxP‹t
[(
_chù
)]); (_pport)++)

129 
	#UnôF‹
(
unô
)\

	)

130 
	gunô
=0; unô<
	gCHIP_NO
; unit++)

133 
	#F‹EachEthP‹t
(
_Õ‹t
Ë\

	)

134 (
	g_Õ‹t
)=1; (_Õ‹t)<=
LOGIC_PORT_NO
; (_lport)++) \

135 if(
IS_ETH_PORT
((
_Õ‹t
)Ë| 
IS_CABLE_PORT
((_lport)))

137 
	#F‹EachEthP‹t
(
_Õ‹t
Ë\

	)

138 (
	g_Õ‹t
)=1; (_Õ‹t)<=
LOGIC_PORT_NO
; (_lport)++) \

139 if(
IS_ETH_PORT
((
_Õ‹t
)))

145 
	#SEC_MASK
 0xff

	)

146 
	#PORT_TYPE_DEF
(
_ªs
,
_ç
,
_ud
,
_•
Ë((((_ªs)&
SEC_MASK
)<<24Ë| (((_ç)&SEC_MASK)<<16Ë|(((_ud)&SEC_MASK)<<8Ë| ((_•)&SEC_MASK))

	)

147 
	#PT_TP
(
_ty≥
Ë(((_ty≥)>>16)&
SEC_MASK
)

	)

148 
	#PT_UD
(
_ty≥
Ë(((_ty≥)>>8)&
SEC_MASK
)

	)

149 
	#PT_SP
(
_ty≥
Ë((_ty≥)&
SEC_MASK
)

	)

153 
	#SP_NULL
 0

	)

154 
	#SP_100
 1

	)

155 
	#SP_1000
 2

	)

156 
	#SP_10G
 3

	)

157 
	#SP_4G
 4

	)

159 
	#TP_COPPER
 0

	)

160 
	#TP_FIBER
 1

	)

161 
	#TP_COMBO
 2

	)

162 
	#TP_CPU
 3

	)

163 
	#TP_CABLE
 5

	)

166 
	#UD_DOWNLINK
 0

	)

167 
	#UD_UPLINK
 1

	)

169 
	#TO_USERPORT
(
_dev
, 
_¶Ÿ
, 
_p‹t
Ë((((
UINT32
)((_dev)&0xff))<<24Ë| (((UINT32)((_¶Ÿ)&0xff))<<16Ë| (((UINT32)((_p‹t)&0xff))))

	)

170 
	#DEV_NO
(
_up‹t
Ë((((
UINT32
)(_up‹t))>>24)&0xff)

	)

171 
	#SLOT_NO
(
_up‹t
Ë((((
UINT32
)(_up‹t))>>16)&0xff)

	)

172 
	#PORT_NO
(
_up‹t
Ë(((
UINT32
)(_up‹t))&0xff)

	)

174 
	sègP‹tTy≥
{

175 
u£r_p‹t_num_t
 
	gu£rP‹tNum
;

176 
UINT32
 
	gphyid
;

177 
UINT32
 
	gty≥
;

178 }
	tPORT_TYPE_S
;

181 
PORT_TYPE_S
 
g_szP‹tTy≥
[];

182 
PORT_TYPE_S
 
g_szComboP‹tSecTy≥
[];

183 
phyid_t
 
g_szPhyToLogicM≠
[];

184 
UINT32
 
g_szU£rMaxP‹tNum
[
DEVICE_NO
+1][
MAX_SLOT_NO
];

187 
	#PORT_TYPE
(
_Õ‹t
Ë
g_szP‹tTy≥
[(_Õ‹t)].
ty≥


	)

188 
	#PORT_PHYID
(
_Õ‹t
Ë
g_szP‹tTy≥
[(_Õ‹t)].
phyid


	)

189 
	#PORT_USERPORT
(
_Õ‹t
Ë
g_szP‹tTy≥
[(_Õ‹t)].
u£rP‹tNum


	)

190 
	#PORT_COMBO_SEC_USERPORT
(
_Õ‹t
Ë
g_szComboP‹tSecTy≥
[(_Õ‹t)].
u£rP‹tNum


	)

191 
	#TOLGCPORT
(
_µ‹t
Ë
g_szPhyToLogicM≠
[(_µ‹t)]

	)

192 
	#USER_PORT_MAX_NUM
(
_dev
, 
_¶Ÿ
Ë
g_szU£rMaxP‹tNum
[(_dev)-1][(_¶Ÿ)]

	)

196 
	#PORT_TYPE_100M_STRING
 "ëhî√t%d/%d/%d"

	)

197 
	#PORT_TYPE_1000M_STRING
 "gigabôëhî√t%d/%d/%d"

	)

199 
	#PORT_TYPE_100M_CAP_STRING
 "Ethî√t%d/%d/%d"

	)

200 
	#PORT_TYPE_1000M_CAP_STRING
 "GigabôEthî√t%d/%d/%d"

	)

202 
	#RX
 0x01

	)

203 
	#TX
 0x02

	)

206 
	#IS_100M_PORT
(
_Õ‹t
Ë(
	`PT_SP
(
	`PORT_TYPE
(_Õ‹t))==
SP_100
)

	)

209 
	#IS_1000M_PORT
(
_Õ‹t
Ë(
	`PT_SP
(
	`PORT_TYPE
(_Õ‹t))==
SP_1000
)

	)

212 
	#IS_10G_PORT
(
_Õ‹t
Ë(
	`PT_SP
(
	`PORT_TYPE
(_Õ‹t))==
SP_10G
)

	)

214 
	#IS_COPPER_PORT
(
_Õ‹t
Ë(
	`PT_TP
(
	`PORT_TYPE
(_Õ‹t))==
TP_COPPER
)

	)

217 
	#IS_COMBO_PORT
(
_Õ‹t
Ë(
	`PT_TP
(
	`PORT_TYPE
(_Õ‹t))==
TP_COMBO
)

	)

220 
	#IS_FIBER_PORT
(
_Õ‹t
Ë(
	`PT_TP
(
	`PORT_TYPE
(_Õ‹t))==
TP_FIBER
)

	)

223 
	#IS_DOWNLINK_PORT
(
_Õ‹t
Ë(
	`PT_UD
(
	`PORT_TYPE
(_Õ‹t)Ë=
UD_DOWNLINK
)

	)

226 
	#IS_UPLINK_PORT
(
_Õ‹t
Ë(
	`PT_UD
(
	`PORT_TYPE
(_Õ‹t)Ë=
UD_UPLINK
)

	)

229 
	#IS_ETH_PORT
(
_Õ‹t
Ë((
	`PT_TP
(
	`PORT_TYPE
(_Õ‹t)Ë=
TP_COPPER
Ë|| \

	)

230 (
PT_TP
(
PORT_TYPE
(
_Õ‹t
)Ë=
TP_FIBER
Ë|| (PT_TP(PORT_TYPE(_Õ‹t)Ë=
TP_COMBO
))

237 
PORT_10HALF
 = 0,

238 
	gPORT_10FULL
 = 1,

239 
	gPORT_10AUTO
 = 2,

241 
	gPORT_100HALF
 = 3,

242 
	gPORT_100FULL
 = 4,

243 
	gPORT_100AUTO
 = 5,

245 
	gPORT_1000HALF
 = 6,

246 
	gPORT_1000FULL
 = 7,

247 
	gPORT_1000AUTO
 = 8,

249 
	gPORT_AUTOHALF
 = 9,

250 
	gPORT_AUTOFULL
 = 10,

251 
	gPORT_AUTOAUTO
 = 11,

252 
	gPORT_MODE_MAX


253 }
	tP‹tMode_E
;

256 
	gPORT_SPEED_10
 = 0,

257 
	gPORT_SPEED_100
 = 1,

258 
	gPORT_SPEED_1000
 = 2,

259 
	gPORT_SPEED_AUTO
 = 3,

260 
	gPORT_SPEED_MAX


261 }
	tP‹tS≥edVÆue_E
;

262 
	#PORT_SPEED_10_STR
 "10"

	)

263 
	#PORT_SPEED_100_STR
 "100"

	)

264 
	#PORT_SPEED_1000_STR
 "1000"

	)

265 
	#PORT_SPEED_AUTO_STR
 "auto"

	)

267 
	#INF_PORT_SPEED_AUTO
 0

	)

268 
	#INF_PORT_SPEED_10M
 10

	)

269 
	#INF_PORT_SPEED_100M
 100

	)

270 
	#INF_PORT_SPEED_1000M
 1000

	)

271 
	#INF_PORT_SPEED_10G
 10000

	)

272 
	#INF_PORT_SPEED_12G
 12000

	)

273 
	#INF_PORT_SPEED_24G
 24000

	)

276 
	gPORT_DUPLEX_HALF
 = 0,

277 
	gPORT_DUPLEX_FULL
 = 1,

278 
	gPORT_DUPLEX_AUTO
 = 2,

279 
	gPORT_DUPLEX_MAX


280 }
	tP‹tDu∂exVÆue_E
;

281 
	#PORT_DUPLEX_HALF_STR
 "hÆf"

	)

282 
	#PORT_DUPLEX_FULL_STR
 "fuŒ"

	)

283 
	#PORT_DUPLEX_AUTO_STR
 "auto"

	)

287 
	gPORT_TYPE_NOT_FIBER
 = 0,

288 
	gPORT_TYPE_FIBER_100
 = 1,

289 
	gPORT_TYPE_FIBER_1000
 = 2,

290 
	gPORT_TYPE_FIBER_UNKNOWN
 = 3,

291 }
	tP‹tTy≥_E
;

293 
	#PORT_TYPE_IS_COPPER
 0

	)

294 
	#PORT_TYPE_IS_FIBER
 1

	)

295 
	#PORT_TYPE_ALL
 2

	)

300 
	gPORT_ENABLE
,

301 
	gPORT_DISABLE
,

302 
	gPORT_SPEED
,

303 
	gPORT_DUPLEX
,

304 
	gPORT_DUPLEX_FIBER
,

305 
	gPORT_JUMBO_FRAME
,

306 
	gPORT_FLOWCON
,

307 
	gPORT_MDI
,

308 
	gPORT_LINKTYPE
,

309 
	gPORT_TRUNKALL
,

310 
	gPORT_STORMRATE
,

311 
	gPORT_STORMTYPE
,

312 
	gPORT_RATEIN
,

313 
	gPORT_RATEOUT
,

314 
	gPORT_PVID
,

315 
	gPORT_QOS
,

316 
	gPORT_MAC_LIMIT
,

317 
	gPORT_MAC_LIMIT_DISABLE_FORWARD
,

318 
	gPORT_CPU_ATTACK_DETECT
,

319 
	gPORT_PORPERTY_END


320 }
	tP‹tPr›îty_E
;

322 
	sègComboP‹tC⁄fig
{

323 
UINT32
 
	gíabÀ
;

324 
UINT32
 
	gaut⁄eg_íabÀ
;

325 
UINT32
 
	gaut⁄eg_advît
;

326 
P‹tS≥edVÆue_E
 
	gf‹˚_•ìd
;

327 
P‹tDu∂exVÆue_E
 
	gf‹˚_du∂ex
;

328 
UINT32
 
	gmdix
;

329 
UINT32
 
	gp‹t_ty≥
;

330 } 
	tCOMBO_PORT_CONFIG_S
;

334 
	sègPORT_CFG_VALUE


336 
UINT32
 
	gulIfE«bÀ
;

337 
UINT32
 
	gulPri‹ôy
;

338 
UINT32
 
	gulMdix
;

339 
UINT32
 
	gulFlowCé
;

340 
UINT32
 
	gulJumboEn
;

341 
UINT32
 
	gulIsﬁ©eEn
;

342 
UINT32
 
	gulPowîDownEn
;

343 
UINT32
 
	gulEEEEn
;

344 
P‹tS≥edVÆue_E
 
	g°S≥ed
;

345 
P‹tDu∂exVÆue_E
 
	g°Du∂ex
;

346 
p‹t_desc_t
 
	g°IfDesc
;

347 
UINT32
 
	gulR©eIn
;

348 
UINT32
 
	gulR©eOut
;

349 }
	tPORT_CFG_VALUE_S
;

352 
	sègPORT_LINERATE_VALUE


354 
UINT32
 
	gulR©eIn
;

355 
UINT32
 
	gulR©eOut
;

356 } 
	tPORT_LINERATE_VALUES
;

359 
	#PORT_SET_NO_CHANGE
 255

	)

361 
	#PORT_LINK_DOWN
 0

	)

362 
	#PORT_LINK_UP
 1

	)

365 
	#PORT_ADMIN_DISABLE
 0

	)

366 
	#PORT_ADMIN_ENABLE
 1

	)

369 
	#PORT_FLOWCTRL_DISABLE
 0

	)

370 
	#PORT_FLOWCTRL_ENABLE
 1

	)

372 
	#PORT_LOOPBACK_DISABLE
 0

	)

373 
	#PORT_LOOPBACK_ENABLE
 1

	)

376 
	#PORT_MDI_ACROSS
 0

	)

377 
	#PORT_MDI_AUTO
 1

	)

378 
	#PORT_MDI_NORMAL
 2

	)

379 
	#PORT_MDI_ACROSS_STR
 "a¸oss"

	)

380 
	#PORT_MDI_AUTO_STR
 "auto"

	)

381 
	#PORT_MDI_NORMAL_STR
 "n‹mÆ"

	)

384 
	#PORT_JUMBO_DISABLE
 0

	)

385 
	#PORT_JUMBO_ENABLE
 1

	)

388 
	#PORT_ISOLATE_DISABLE
 0

	)

389 
	#PORT_ISOLATE_ENABLE
 1

	)

392 
	#PORT_POWERDOWN_DISABLE
 0

	)

393 
	#PORT_POWERDOWN_ENABLE
 1

	)

396 
	#PORT_EEE_DISABLE
 0

	)

397 
	#PORT_EEE_ENABLE
 1

	)

401 
	#ISVALID_SPEED
(
_•_
Ë(((_•_Ë>
PORT_SPEED_10
Ë&& ((_•_Ë<
PORT_SPEED_AUTO
))

	)

402 
	#ISVALID_DUPLEX
(
_du_
Ë(((_du_Ë>
PORT_DUPLEX_HALF
Ë&& ((_du_Ë<
PORT_DUPLEX_AUTO
))

	)

403 
	#ISVALID_SPDUP
(
_du_
Ë(((_du_Ë>
PORT_10HALF
Ë&& ((_du_Ë<
PORT_AUTOAUTO
))

	)

404 
	#ISVALID_MDIX
(
_mdix
Ë(((_mdixË=
PORT_MDI_ACROSS
Ë|| ((_mdixË=
PORT_MDI_AUTO
Ë|| ((_mdixË=
PORT_MDI_NORMAL
))

	)

405 
	#ISVALID_FC_VALUE
(
_fc
Ë(((_fcË=
PORT_FLOWCTRL_DISABLE
Ë|| ((_fcË=
PORT_FLOWCTRL_ENABLE
))

	)

406 
	#ISVALID_JUMBO_VALUE
(
_jb
Ë(((_jbË=
PORT_JUMBO_DISABLE
Ë|| ((_jbË=
PORT_JUMBO_ENABLE
))

	)

407 
	#ISVALID_PORT_PRIORITY
(
_¥io
Ë(((
UINT32
)(_¥io)Ë<7)

	)

408 
	#ISVALID_ADMIN_VALUE
(
_adm
Ë(((_admË=
PORT_ADMIN_DISABLE
Ë|| ((_admË=
PORT_ADMIN_ENABLE
))

	)

409 
	#ISVALID_LOOPBACK_VALUE
(
_adm
Ë(((_admË=
PORT_LOOPBACK_DISABLE
Ë|| ((_admË=
PORT_LOOPBACK_ENABLE
))

	)

413 
	#LINK_MODE_SPEED_10
 0x00

	)

414 
	#LINK_MODE_SPEED_100
 0x01

	)

415 
	#LINK_MODE_SPEED_1000
 0x02

	)

416 
	#LINK_MODE_SPEED_MASK
 0x03

	)

417 
	#LINK_MODE_FDX_HALF
 0x00

	)

418 
	#LINK_MODE_FDX_FULL
 0x10

	)

419 
	#LINK_MODE_FDX_MASK
 0x10

	)

420 
	#LINK_MODE_PAUSE_MASK
 0x20

	)

421 
	#LINK_MODE_INT_LOOPBACK
 0x80

	)

422 
	#LINK_MODE_DOWN
 0xFF

	)

423 
	#LINK_MODE_FDX_10
 (
LINK_MODE_SPEED_10
 | 
LINK_MODE_FDX_MASK
)

	)

424 
	#LINK_MODE_HDX_10
 (
LINK_MODE_SPEED_10
)

	)

425 
	#LINK_MODE_FDX_100
 (
LINK_MODE_SPEED_100
 | 
LINK_MODE_FDX_MASK
)

	)

426 
	#LINK_MODE_HDX_100
 (
LINK_MODE_SPEED_100
)

	)

427 
	#LINK_MODE_FDX_1000
 (
LINK_MODE_SPEED_1000
 | 
LINK_MODE_FDX_MASK
)

	)

428 
	#LINK_MODE_FDX_AND_PAUSE_MASK
 (
LINK_MODE_FDX_MASK
 | 
LINK_MODE_PAUSE_MASK
)

	)

429 
	#LINK_MODE_SPEED_AND_FDX_MASK
 (
LINK_MODE_SPEED_MASK
 | 
LINK_MODE_FDX_MASK
)

	)

432 
	#PORT_ABIL_10MB_HD
 (1 << 0)

	)

433 
	#PORT_ABIL_10MB_FD
 (1 << 1)

	)

434 
	#PORT_ABIL_100MB_HD
 (1 << 2)

	)

435 
	#PORT_ABIL_100MB_FD
 (1 << 3)

	)

436 
	#PORT_ABIL_1000MB_HD
 (1 << 4)

	)

437 
	#PORT_ABIL_1000MB_FD
 (1 << 5)

	)

438 
	#PORT_ABIL_2500MB_HD
 (1 << 6)

	)

439 
	#PORT_ABIL_2500MB_FD
 (1 << 7)

	)

440 
	#PORT_ABIL_10GB_HD
 (1 << 8)

	)

441 
	#PORT_ABIL_10GB_FD
 (1 << 9)

	)

442 
	#PORT_ABIL_PAUSE_TX
 (1 << 10Ë

	)

443 
	#PORT_ABIL_PAUSE_RX
 (1 << 11Ë

	)

444 
	#PORT_ABIL_PAUSE_ASYMM
 (1 << 12Ë

	)

445 
	#PORT_ABIL_TBI
 (1 << 13Ë

	)

446 
	#PORT_ABIL_MII
 (1 << 14Ë

	)

447 
	#PORT_ABIL_GMII
 (1 << 15Ë

	)

448 
	#PORT_ABIL_SGMII
 (1 << 16Ë

	)

449 
	#PORT_ABIL_XGMII
 (1 << 17Ë

	)

450 
	#PORT_ABIL_LB_MAC
 (1 << 18Ë

	)

451 
	#PORT_ABIL_LB_MAC_RMT
 (1 << 19Ë

	)

452 
	#PORT_ABIL_LB_PHY
 (1 << 20Ë

	)

453 
	#PORT_ABIL_AN
 (1 << 21Ë

	)

454 
	#PORT_ABIL_3000MB_HD
 (1 << 29)

	)

455 
	#PORT_ABIL_3000MB_FD
 (1 << 30)

	)

456 
	#PORT_ABIL_12GB_HD
 (1 << 22)

	)

457 
	#PORT_ABIL_12GB_FD
 (1 << 23)

	)

458 
	#PORT_ABIL_13GB_HD
 (1 << 24)

	)

459 
	#PORT_ABIL_13GB_FD
 (1 << 25)

	)

460 
	#PORT_ABIL_PAUSE
 (
PORT_ABIL_PAUSE_TX
 | 
PORT_ABIL_PAUSE_RX
)

	)

462 
	eègPORTMSG_TYPE


464 
	gCMD_DRV_MULTISETPORT
,

465 
	gCMD_DRV_SETPORTADMIN
,

466 
	gCMD_DRV_SETPORTSPEED
,

467 
	gCMD_DRV_SETPORTDUPLEX
,

468 
	gCMD_DRV_SETPORTSPEEDDUPLEX
,

469 
	gCMD_DRV_SETPORTMDI
,

470 
	gCMD_DRV_SETPORTPRIORITY
,

471 
	gCMD_DRV_SETPORTFLOWCTRL
,

472 
	gCMD_DRV_SETPORTSRXTX
,

473 
	gCMD_DRV_SETPORTJUMBO
,

474 
	gCMD_DRV_MULTISETPORTJUMBO
,

475 
	gCMD_DRV_PORTISOLATE_ADD
,

476 
	gCMD_DRV_PORTISOLATE_DEL
,

477 
	gCMD_DRV_CREATE_MIRRORGROUP
,

478 
	gCMD_DRV_DELMIRRORGROUP
,

479 
	gCMD_DRV_SETMIRRORGROUP_MONITOR
,

480 
	gCMD_DRV_SETMIRRORGROUP_MIRROR
,

481 
	gCMD_DRV_SETPORTLINERATE
,

482 
	gCMD_DRV_PORTPOWERDOWN_SET
,

483 
	gCMD_DRV_EEE_SET
,

484 
	gCMD_DRV_SETPORTSTORMCONTROL
,

485 
	gCMD_DRV_SETQOSTRUSTMODE
,

486 
	gCMD_DRV_SETQOSQUEUE
,

487 }
	tPORT_CMD_E
;

493 #i‚de‡
MAX_MIRROR_GROUP_ID


494 
	#MAX_MIRROR_GROUP_ID
 1

	)

496 
	#NOMONITOR
 0

	)

497 #i‚de‡
ID_NULL


498 
	#ID_NULL
 0

	)

500 
	sègMIRROR_GROUP_STR


502 
UINT32
 
	gulGroupId
;

503 
p‹t_num_t
 
	gulP‹tM⁄ô‹
;

504 
logic_pmask_t
 
	g°MúrP‹tInLi°
;

505 
logic_pmask_t
 
	g°MúrP‹tOutLi°
;

506 }
	tMIRROR_GROUP_S
;

509 
	gSTORM_DLF_CTRL
,

510 
	gSTORM_MCAST_CTRL
,

511 
	gSTORM_BCAST_CTRL
,

512 
	gSTORM_ALL_CTRL


513 }
	tSTORM_CTLTYPE_E
;

516 
	gSTORM_RATE_KBPS
,

517 
	gSTORM_RATE_PPS
,

518 
	gSTORM_RATE_PERCENT
,

519 
	gSTORM_RATE_MAX


520 }
	tSTORM_RATETYPE_E
;

521 
	#STORM_RATE_KBPS_STR
 "kbps"

	)

522 
	#STORM_RATE_PPS_STR
 "µs"

	)

523 
	#STORM_RATE_PERCENT_STR
 "øtio"

	)

524 
	#STORM_NOCONTROL
 100

	)

527 
STORM_RATETYPE_E
 
	gøãTy≥
;

528 
UINT32
 
	gvÆue
;

529 }
	tSTORM_CTLRATE_S
;

533 
	sègQueueMode


535 
UINT32
 
	gQueueMode
;

536 #i‡(
QUEUE_NUM
 <= 8)

537 
UINT8
 
	gWeight
[8];

539 
UINT8
 
	gWeight
[
QUEUE_NUM
];

541 } 
	tQueueMode_S
;

543 
	sègP‹tInP¨a


545 
PORT_CMD_E
 
	gcmd
;

546 
logic_pmask_t
 
	g°P‹tLi°
;

547 
p‹t_num_t
 
	gÕ‹t
;

548 
UINT32
 
	gadmö_vÆue
;

549 
UINT32
 
	guiS≥ed
;

550 
UINT32
 
	guiDu∂ex
;

551 
UINT32
 
	guiPri‹ôy
;

552 
UINT32
 
	guiFlow˘æ
;

553 
UINT32
 
	guiMdi
;

554 
UINT32
 
	guiRxTxSèã
;

555 
UINT32
 
	guiJumbo
;

556 
UINT32
 
	guiP‹tTy≥
;

557 
MIRROR_GROUP_S
 
	g°MúrGroup
;

558 
UINT32
 
	guiCIR
;

559 
UINT32
 
	gulDúe˘i⁄
;

560 
UINT32
 
	gulE«bÀ
;

561 
STORM_CTLTYPE_E
 
	g°‹mty≥
;

562 
STORM_CTLRATE_S
 
	g°Såom
;

563 
UINT32
 
	gulTru°Mode
;

564 
QueueMode_S
 
	g°Queue
;

565 }
	tPORT_INPUT_PARA_S
;

567 
	eègAGGR_CFG_CHANGE_MSG_TYPE


569 
	gAGGR_CFG_CHANGE_TYPE_CREATE
,

570 
	gAGGR_CFG_CHANGE_TYPE_DELETE
,

571 
	gAGGR_CFG_CHANGE_TYPE_AGGRTYPE_CHANGE
,

572 
	gAGGR_CFG_CHANGE_TYPE_ADD_PORT
,

573 
	gAGGR_CFG_CHANGE_TYPE_DELETE_PORT
,

574 
	gAGGR_CFG_CHANGE_TYPE_END


575 }
	tAGGR_CFG_CHANGE_MSG_TYPE_E
;

577 
	eègAGGR_INTERNAL_DATA_MSG_TYPE


579 
	gAGGR_INTERNAL_DATA_GET_AGGRINFO
,

580 
	gAGGR_INTERNAL_DATA_GET_AGGRPORTINFO
,

581 
	gAGGR_INTERNAL_DATA_GET_AGGRFSMPORTINFO
,

582 
	gAGGR_INTERNAL_DATA_GET_AGGRLACPSYSMAC
,

583 
	gAGGR_INTERNAL_DATA_GET_AGGRLACPPRI
,

584 
	gAGGR_INTERNAL_DATA_GET_AGGRPORTMASK
,

585 
	gAGGR_INTERNAL_DATA_GET_AGGRINFO_ALL
,

586 
	gAGGR_INTERNAL_DATA_GET_AGGRPORTINFO_ALL
,

588 
	gAGGR_INTERNAL_DATA_END


589 }
	tAGGR_INTERNAL_DATA_MSG_TYPE_E
;

592 
	sègAggrCfgCh™geMsg


594 
AGGR_CFG_CHANGE_MSG_TYPE_E
 
	gcmd
;

595 
UINT32
 
	gulAggrNo
;

596 
UINT32
 
	gulTy≥
;

597 
logic_pmask_t
 
	g°P‹tMask
;

598 }
	tAGGR_CFG_CHANGE_MSG_S
;

600 
	sègAggrI¡î«lD©aMsg


602 
AGGR_INTERNAL_DATA_MSG_TYPE_E
 
	gcmd
;

603 
UINT32
 
	gulAggrNo
;

604 
UINT32
 
	gulTy≥
;

605 
UINT32
 
	gulP‹tNum
;

606 }
	tAGGR_GET_INTERNAL_DATA_PARA_S
;

608 
	#LACP_AGG_DYNAMICAL_STR
 "dy«mic"

	)

609 
	#LACP_AGG_STATIC_STR
 "°©ic"

	)

610 
	#LACP_AGG_MANUAL_STR
 "m™uÆ"

	)

612 
	#LACP_BLOCK
 1

	)

613 
	#LACP_UNBLOCK
 2

	)

616 
	#SMAC_TRUNK_STR
 "sour˚-mac"

	)

617 
	#DMAC_TRUNK_STR
 "de°ö©i⁄-mac"

	)

618 
	#SADA_TRUNK_STR
 "sour˚-ma¯de°ö©i⁄-mac"

	)

619 
	#SIPDIP_TRUNK_STR
 "sour˚-ù de°ö©i⁄-ù"

	)

620 
	#SADAIP_TRUNK_STR
 "sour˚-ma¯de°ö©i⁄-ma¯sour˚-ù de°ö©i⁄-ù"

	)

621 
	eègAggr_RëînVÆue


623 
	gAGGR_CFG_MSG_OK
 = 0,

624 
	gAGGR_CFG_MSG_ERR
,

625 
	gAGGR_INTERNAL_DATA_OK
,

626 
	gAGGR_INTERNAL_DATA_ERR


627 }
	tAGGR_RET_E
;

630 
	sègSåom˘lMsg


632 
UINT8
 
	guuˇ°í
;

633 
UINT8
 
	gumˇ°í
;

634 
UINT8
 
	gbˇ°í
;

635 
UINT32
 
	gøã≥r˚¡
;

637 }
	tSTROM_CTL_S
;

641 
	#TRUNKID2AGGRPNO
(
x
Ë((xË+ 1)

	)

642 
	#AGGRPNO2TRUNKID
(
x
Ë((xË- 1)

	)

644 
Drv_AggrInô
();

645 
BOOL_T
 
Drv_SyncAggMaskBôExi°AndCÀ¨
(
UINT32
 
ulAggID
);

646 
BOOL_T
 
Drv_SyncMaskAggCfgCheckAndCÀ¨
(
VOID
);

650 
	eègDrvSç_°©e_e


652 
	gDRV_STP_STATE_DISABLED
 = 0,

653 
	gDRV_STP_STATE_BLOCKING
,

654 
	gDRV_STP_STATE_LEARNING
,

655 
	gDRV_STP_STATE_FORWARDING
,

656 
	gDRV_STP_STATE_END


657 } 
	tDRV_STP_STATE_E
;

659 
	#STP_DEFAULT_INSTANCE
 0

	)

662 
	#DRV_ERR_RET_NEGATIVE
 0

	)

664 
	eègDrv_Rëu∫VÆue


666 
	gDRV_OK
 = 0,

667 
	gDRV_ERR_PARA
,

668 
	gDRV_ERR_UNKNOW
,

669 
	gDRV_NULL_POINTER
,

670 
	gDRV_CFG_READ_ERROR
,

671 
	gDRV_I2C_READ_ERROR
,

672 
	gDRV_CFG_WRITE_ERROR
,

673 
	gDRV_ERR_INIT_SWITCH
 ,

674 
	gDRV_INVALID_LPORT
,

675 
	gDRV_INVALID_LPORTLIST
,

676 
	gDRV_INVALID_VALUE
,

677 
	gDRV_INVALID_SPEED_VALUE
,

678 
	gDRV_INVALID_DUPLEX_VALUE
,

679 
	gDRV_INVALID_SPDUP_VALUE
,

680 
	gDRV_INVALID_FLOWCTRL_VALUE
,

681 
	gDRV_INVALID_PRIORITY_VALUE
,

682 
	gDRV_INVALID_MDI_VALUE
,

683 
	gDRV_INVALID_ADMIN_VALUE
,

684 
	gDRV_INVALID_JUMBO_VALUE
,

685 
	gDRV_ERR_PORT_SPDUP_IS_AGGRE
,

686 
	gDRV_ERR_PORT_CABLE_NOT_SUPPORT
,

687 
	gDRV_ERR_PORT_FIBER_NOT_SUPPORT
,

688 
	gDRV_ERR_PORT_NOT_SUPPORT_1000
,

689 
	gDRV_ERR_PORT_NOT_SUPPORT_MDI_AUTO
,

690 
	gDRV_ERR_PORT_NOT_SUPPORT_GE_MDI
,

691 
	gDRV_ERR_PORT_NOT_SUPPORT_FIBER_MDI
,

692 
	gDRV_ERR_PORT_PRIORITY_IS_AGGRE
,

693 
	gDRV_ERR_PORT_NOT_SUPPORT_FLOWCTRL
,

694 
	gDRV_ERR_PORT_FIBER_100_NOT_SUPPORT
,

695 
	gDRV_ERR_PORT_FIBER_1000_NOT_SUPPORT
,

696 
	gDRV_ERR_PORT_JUMBO_NOT_SUPPORT
,

697 
	gDRV_ERR_PORT_SEQUENCE
,

698 
	gDRV_ERR_AGGR_PORT_SINGLE
,

699 
	gDRV_ERR_AGGR_NOT_SUPPORT_TYPE
,

700 
	gDRV_ERR_AGGR_MAX_GROUP
,

701 
	gDRV_ERR_AGGR_FE_GE_TOGETHER
,

702 
	gDRV_ERR_AGGR_MAX_MEMBER
,

703 
	gDRV_ERR_AGGR_WRONG_PORT_SPDUP
,

704 
	gDRV_ERR_AGGR_PORT_IS_AGGRE
,

705 
	gDRV_ERR_AGGR_PORT_IS_MONITOR
,

706 
	gDRV_ERR_AGGR_PORT_IS_BIDING
,

707 
	gDRV_ERR_AGGR_IS_NO_EXIST
,

708 
	gDRV_ERR_PORT_NOT_CONTINUE
,

709 
	gDRV_ERR_AGGR_NOT_MASTER
,

710 
	gDRV_ERR_AGGR_SPEED_IS_AUTO
,

711 
	gDRV_ERR_AGGR_DUPLEX_NOT_FULL
,

712 
	gDRV_ERR_AGGR_PORT_IS_ISOLATE
,

713 
	gDRV_ERR_AGGR_PORT_IS_ON_AUTH
,

714 
	gDRV_ERR_AGGR_PORT_IS_ON_STP
,

715 
	gDRV_ERR_AGGR_GROUP_IS_EXIST
 ,

716 
	gDRV_ERR_RATE_PARA
,

717 
	gDRV_ERR_RATE_VALUE
,

718 
	gDRV_ERR_PORT_INVALID_LPORT
,

719 
	gDRV_ERR_STORM_VALUE
,

720 
	gDRV_ERR_STORM_TYPE
,

721 
	gDRV_ERR_MIR_GROUP_EXIST
,

722 
	gDRV_ERR_MIR_GROUP_DOSE_NOT_EXIST
,

723 
	gDRV_ERR_MIR_MONITOR_EXIST
,

724 
	gDRV_ERR_MIR_MONITOR_IS_MIRROR
,

725 
	gDRV_ERR_MIR_MONITOR_IS_AGGRE
,

726 
	gDRV_ERR_MIR_MIRROR_IS_MONITOR
,

727 
	gDRV_ERR_MIR_NO_MONITOR
,

728 
	gDRV_ERR_MIR_NOT_SUPPORT_EGRESS
,

729 
	gDRV_ERR_MIR_DUPLICATION_SET
,

730 
	gDRV_ERR_MIR_DUPLICATION_DEL
,

731 
	gDRV_ERR_MIR_MIR_EXIST
,

732 
	gDRV_ERR_MIR_FULL
,

733 
	gDRV_ERR_VLAN_INVALID_VLANID
,

734 
	gDRV_ERR_VLAN_NOT_EXIST
,

735 
	gDRV_ERR_VLAN_NOT_ALL_EXIST
,

736 
	gDRV_ERR_VLAN_DEFAULT_VLAN
,

737 
	gDRV_ERR_VLAN_MANAGE_VLAN
,

738 
	gDRV_ERR_VLAN_MAXNUM
,

739 
	gDRV_ERR_VLAN_IF_EXIST
,

740 
	gDRV_ERR_VLAN_IF_NOT_EXIST
,

741 
	gDRV_ERR_VLAN_ADD_MEMBER
,

742 
	gDRV_ERR_VLAN_REMOVE_MEMBER
,

743 
	gDRV_ERR_MAC_ADDR_MULTPORT_EXIST
,

744 
	gDRV_ERR_MAC_ADDR_ALREADY_EXIST
,

745 
	gDRV_ERR_MAC_ADDR_NO_FREE_ENTRY
,

746 
	gDRV_ERR_MAC_ENTRY_NOT_EXIST
,

747 
	gDRV_ERR_MAC_BLACKHOLE
,

748 
	gDRV_ERR_MAC_STAGGR
,

749 
	gDRV_ERR_MAC_MULTICAST
,

750 
	gDRV_ERR_MAC_TAB_FULL
,

751 
	gDRV_ERR_MAC_TAB_NOT_EXIST
,

752 
	gDRV_ERR_MAC_TAB_ALREADY_EXIST
,

753 
	gDRV_ERR_ARL_NO_FREE_ENTRY
,

754 
	gDRV_ERR_MAC_ADDSELF
,

755 
	gDRV_ERR_MAC_NOTINVLAN
,

756 
	gDRV_ERR_MAC_LIMIT_ENABLED
,

757 
	gDRV_ERR_ADDR_MANUAL_ADD
,

758 
	gDRV_ERR_MAC_ADDR_NOT_FOUND
,

759 
	gDRV_ERR_MAC_ADDR_OP_FAIL
,

760 
	gDRV_ERR_AGGR_NOT_SUPPORT_MAC_LIMIT
,

761 
	gDRV_ERR_PORT_BIND_NOT_SUPPORT_MAC_LIMIT
,

762 
	gDRV_ERR_DOT1X_NOT_SUPPORT_MAC_LIMIT
,

763 
	gDRV_ERR_PORT_NOT_SUPPORT
,

764 
	gDRV_ERR_QOS_TRUST_MODE_ERR
,

765 
	gDRV_ERR_QOS_WRONG_VLAUE
,

766 
	gDRV_ERR_QOS_NOT_SUPPORT_MODE
,

767 
	gDRV_ERR_QOS_WRONG_MAP
,

768 
	gDRV_ERR_ACL_NOT_ENOUGH_RESOURCE
,

769 
	gDRV_ERR_ALC_VLAN_INTF_FULL
,

770 
	gDRV_ERR_ACL_VLAN_INTF_EXIST
,

771 
	gDRV_ERR_ACL_VLAN_INTF_NOT_EXIST
,

772 
	gDRV_ERR_ACL_PRIO_INVALID
,

773 
	gDRV_ERR_ACL_ALLREADY_EXIST
,

774 
	gDRV_ERR_ACL_NAME_EMPTY
,

775 
	gDRV_ERR_ACL_NAME_INVALID
,

776 
	gDRV_ERR_ACL_NAME_EXIST
,

777 
	gDRV_ERR_ACL_DESCRIPTION_INVALID
,

778 
	gDRV_ERR_ACL_NOT_EXIST
,

779 
	gDRV_ERR_ACL_RULE_ALLREADY_EXIST
,

780 
	gDRV_ERR_ACL_RULE_INVALID_PRIO
,

781 
	gDRV_ERR_ACL_MEM_ALLOC_FAILED
,

782 
	gDRV_ERR_ACL_RULE_FULL
,

783 
	gDRV_ERR_ACL_RULE_INVALID_ACTION
,

784 
	gDRV_ERR_ACL_IP_RULE_INVALID_SRCIPMASK
,

785 
	gDRV_ERR_ACL_IP_RULE_INVALID_DSTIPMASK
,

786 
	gDRV_ERR_ACL_IP_RULE_INVALID_L4PORTMASK
,

787 
	gDRV_ERR_ACL_INVALID_RULE_TYPE
,

788 
	gDRV_ERR_ACL_MAC_RULE_INVALID_SRCMACMASK
,

789 
	gDRV_ERR_ACL_MAC_RULE_INVALID_DSTMACMASK
,

790 
	gDRV_ERR_ACL_MAC_RULE_INVALID_VLANID
,

791 
	gDRV_ERR_ACL_RULE_NOT_FOUND
,

792 
	gDRV_ERR_ACL_ALREADY_BOUND
,

793 
	gDRV_ERR_ACL_NOT_BOUND
,

794 
	gDRV_ERR_ACL_NOT_EMPTY
,

795 
	gDRV_ERR_ACL_EMPTY
,

796 
	gDRV_ERR_ACL_RULE_MIRROR_FULL
,

797 
	gERR_DHCPSP_INVALID
,

798 
	gERR_DHCPSP_AGGPORT_NOT_IPFILTER
,

799 
	gDRV_ERR_L3_ENTRY_FULL
,

800 
	gDRV_ERR_L3_ENTRY_EXIST
,

801 
	gDRV_ERR_L3_ENTRY_NOT_EXIST
,

802 
	gDRV_ERR_PVLAN_NOT_SUPPORT_PORT_ISOLATE
,

803 
	gDRV_ERR_FIBER_NOT_SUPPORT_HALF_DUPLEX
,

804 
	gDRV_ERR_FIBER_NOT_SUPPORT_SPEED
,

805 
	gDRV_ERR_OPEN_DEV
,

806 
	gDRV_ERR_NO_MEM
,

807 
	gDRV_ERR_MSG
,

808 
	gDRV_IOCTL_ERROR
,

809 
	gDRV_PARA_NUM_ERROR
,

810 
	gDRV_INVALID_STATE
,

811 
	gDRV_SDK_GEN_ERROR
,

812 
	gDRV_SDK_INVALID_PARA
,

813 
	gDRV_SDK_INVALID_UNIT
,

814 
	gDRV_SDK_INVALID_PORTID
,

815 
	gDRV_SDK_INVALID_MASK
,

816 
	gDRV_SDK_PORT_LINKDOWN
,

817 
	gDRV_SDK_INVALID_ENTRY_INDEX
,

818 
	gDRV_SDK_NULL_POINTER
,

819 
	gDRV_SDK_INVALID_QUEUE_ID
,

820 
	gDRV_SDK_INVALID_QUEUE_NUM
,

821 
	gDRV_SDK_BUSYWAIT_TIMEOUT
,

822 
	gDRV_SDK_INVALID_MAC
,

823 
	gDRV_SDK_OUT_OF_RANGE
,

824 
	gDRV_SDK_CHIP_NOT_SUPPORTED
,

825 
	gDRV_SDK_INVALID_SMI
,

826 
	gDRV_SDK_NOT_INIT
,

827 
	gDRV_SDK_CHIP_NOT_FOUND
,

828 
	gDRV_SDK_NOT_ALLOWED
,

829 
	gDRV_SDK_DRIVER_NOT_FOUND
,

830 
	gDRV_SDK_SEM_LOCK_FAILED
,

831 
	gDRV_SDK_SEM_UNLOCK_FAILED
,

832 
	gDRV_SDK_THREAD_EXIST
,

833 
	gDRV_SDK_THREAD_CREATE_FAILED
,

834 
	gDRV_SDK_INVALID_FWD_ACTION
,

835 
	gDRV_SDK_INVALID_IPV4_ADDRESS
,

836 
	gDRV_SDK_INVALID_IPV6_ADDRESS
,

837 
	gDRV_SDK_INVALID_PRIORITY
,

838 
	gDRV_SDK_INVALID_FID
,

839 
	gDRV_SDK_ENTRY_NOTFOUND
,

840 
	gDRV_SDK_DROP_PRECEDENCE
,

841 
	gDRV_SDK_NOT_FINISH
,

842 
	gDRV_SDK_TIMEOUT
,

843 
	gDRV_SDK_INVALID_REG_ARRAY_INDEX_1
,

844 
	gDRV_SDK_INVALID_REG_ARRAY_INDEX_2
,

845 
	gDRV_SDK_INVALID_ETHER_TYPE
,

846 
	gDRV_SDK_ERR_PHY_FIBER_LINKUP
,

847 
	gDRV_SDK_ERR_EEPROM_I2C_NOT_INIT
,

848 
	gDRV_SDK_ERR_EEPROM_I2C_READ
,

849 
	gDRV_SDK_ERR_READ_SFP_FORM_DRAM
,

850 
	gDRV_SDK_ERR_READ_SFP_FORM_I2C
,

851 
	gDRV_STP_ERR_PORT_STATE
,

852 
	gDRV_L2_SEND_ERR
,

853 
	gDRV_INVALID_LOOPBACK_VALUE


854 }
	tDRV_RET_E
;

855 
	#LW_DRV_RET
 
DRV_RET_E


	)

856 #ifde‡
DRV_PORT_DEBUG


857 
	#MW_DRV_DBG
 
MW_DBG_ERR


	)

859 
	#MW_DRV_DBG
(
fmt
,
¨g
...)

	)

862 #i‡
deföed
(
__KERNEL__
)

863 
DRV_RET_E
 
K_Drv_P‹tInô
(
p‹t_num_t
 
lgcP‹t
);

864 
DRV_RET_E
 
K_Drv_P‹tSëSèã
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiSèã
);

865 
DRV_RET_E
 
K_Drv_P‹tGëSèã
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiSèã
);

866 
DRV_RET_E
 
K_Drv_P‹tSëS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiS≥ed
);

867 
DRV_RET_E
 
K_Drv_P‹tGëS≥ed
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiS≥ed
);

868 
DRV_RET_E
 
K_Drv_P‹tSëDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiDu∂ex
);

869 
DRV_RET_E
 
K_Drv_P‹tGëDu∂ex
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiDu∂ex
);

870 
DRV_RET_E
 
K_Drv_P‹tSëMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 
uiMdix
);

871 
DRV_RET_E
 
K_Drv_P‹tGëMdix
(
p‹t_num_t
 
lgcP‹t
, 
UINT32
 *
puiMdix
);

873 
DRV_RET_E
 
Drv_GëDownLökP‹tMask
(
logic_pmask_t
 *
lmask_±r
);

874 
DRV_RET_E
 
Drv_GëFibîP‹tMask
(
logic_pmask_t
 *
lmask_±r
);

875 
DRV_RET_E
 
Drv_GëGeP‹tMask
(
logic_pmask_t
 *
lmask_±r
);

876 
DRV_RET_E
 
Drv_GëP‹tSèã
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 *
uiSèã
);

877 
DRV_RET_E
 
Drv_GëUpLökP‹tMask
(
logic_pmask_t
 *
lmask_±r
);

878 
BOOL
 
Drv_IsFeP‹t
(
p‹t_num_t
 
Õ‹t
);

879 
P‹tTy≥_E
 
Drv_IsFibîP‹t
(
p‹t_num_t
 
Õ‹t
);

880 
BOOL
 
Drv_IsGeP‹t
(
p‹t_num_t
 
Õ‹t
);

881 
BOOL
 
Drv_IsLökUpP‹t
(
p‹t_num_t
 
Õ‹t
);

882 
DRV_RET_E
 
Drv_Mu…iGëP‹tLökSèã
(
logic_pmask_t
 *
p°P‹tMask
);

883 
DRV_RET_E
 
Drv_Mu…iGëP‹tMedüFibî
(
logic_pmask_t
 *
p°P‹tMask
);

884 
DRV_RET_E
 
Drv_Mu…iSëP‹t
(
logic_pmask_t
 *
Õ‹tLi°
, 
UINT32
 
ulP‹tTy≥
, UINT32 
admö_vÆue
, UINT32 
uiS≥ed
, UINT32 
uiDu∂ex
, UINT32 
uiPri‹ôy
, UINT32 
uiFlow˘æ
);

885 
DRV_RET_E
 
Drv_Mu…iSëP‹tJumbo
(
logic_pmask_t
 *
Õ‹tLi°
, 
UINT32
 
uiJumbo
);

886 
DRV_RET_E
 
Drv_P‹tInô
(
p‹t_num_t
 
Õ‹t
);

887 
DRV_RET_E
 
Drv_SëP‹tAdmö
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulP‹tTy≥
, UINT32 
uiAdmö
);

888 
DRV_RET_E
 
Drv_SëP‹tDu∂ex
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulP‹tTy≥
, UINT32 
uiDu∂ex
);

889 
DRV_RET_E
 
Drv_SëP‹tFlow˘æ
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
uiFlow˘æ
);

890 
DRV_RET_E
 
Drv_SëP‹tJumbo
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
uiJumbo
);

891 
DRV_RET_E
 
Drv_SëP‹tMdi
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
mdi_vÆue
, UINT32 
ulP‹tTy≥
);

892 
DRV_RET_E
 
Drv_SëP‹tPri‹ôy
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
uiPri‹ôy
);

893 
DRV_RET_E
 
Drv_SëP‹tSpdup
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulP‹tTy≥
, UINT32 
uiS≥ed
, UINT32 
uiDu∂ex
);

894 
DRV_RET_E
 
Drv_SëP‹tS≥ed
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulP‹tTy≥
, UINT32 
uiS≥ed
);

895 
DRV_RET_E
 
Drv_SëP‹tsTxRx
(
logic_pmask_t
 *
lmask_±r
, 
UINT32
 
°©e
);

896 
DRV_RET_E
 
Drv_GëP‹tJumbo
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 *
puiJumbo
);

897 
DRV_RET_E
 
Drv_GëP‹tFlow˘æ
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 *
puiFc
);

898 
DRV_RET_E
 
Drv_GëP‹tPri‹ôy
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 *
puiPrio
);

899 
DRV_RET_E
 
Drv_GëP‹tMdix
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 *
puiSèã
);

900 
DRV_RET_E
 
Drv_GëP‹tSuµ‹tFømeLí
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 *
puiLígth
);

901 
DRV_RET_E
 
Drv_SëP‹tSuµ‹tFømeLí
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
uiLígth
);

902 
DRV_RET_E
 
Drv_P‹tSuµ‹tFømeLíInô
(
VOID
);

906 
BOOL
 
IsVÆidLgcP‹t
(
p‹t_num_t
 
ucLogicP‹t
);

907 
CÃLgcMaskAŒ
(
logic_pmask_t
 *
lgcPMask_±r
);

908 
CÃLgcMaskBô
(
p‹t_num_t
 
ucLogicP‹t
, 
logic_pmask_t
 *
lgcPMask_±r
);

909 
CÃLgcMaskNŸU£d
(
logic_pmask_t
 *
lgcPMask_±r
);

910 
p‹t_num_t
 
GëLgcMöP‹t
(
logic_pmask_t
 *
lgcPMask_±r
);

911 
INT32
 
GëLgcMskP‹tNum
(
logic_pmask_t
 *
lgcPMask_±r
);

912 
LgcMaskAnd
(
logic_pmask_t
 *
mska
,logic_pmask_à*
mskb
);

913 
LgcMaskC›y
(
logic_pmask_t
 *
d°Msk
,logic_pmask_à*
§cMsk
);

914 
BOOL
 
LgcMaskIsFuŒ
(
logic_pmask_t
 *
lgcPMask_±r
);

915 
LgcMaskNeg©e
(
logic_pmask_t
 *
mska
,logic_pmask_à*
mskb
);

916 
BOOL
 
LgcMaskNŸNuŒ
(
logic_pmask_t
 *
lgcPMask_±r
);

917 
LgcMaskOr
(
logic_pmask_t
 *
mska
,logic_pmask_à*
mskb
);

918 
LgcMaskRemove
(
logic_pmask_t
 *
mska
,logic_pmask_à*
mskb
);

919 
LgcMaskX‹
(
logic_pmask_t
 *
mska
,logic_pmask_à*
mskb
);

920 
SëLgcMaskAŒ
(
logic_pmask_t
 *
lgcPMask_±r
);

921 
SëLgcMaskBô
(
p‹t_num_t
 
ucLogicP‹t
, 
logic_pmask_t
 *
lgcPMask_±r
);

922 
SëLgcMaskBôNoCheck
(
p‹t_num_t
 
ucLogicP‹t
, 
logic_pmask_t
 *
lgcPMask_±r
);

923 
BOOL
 
T°LgcMaskAndIsNuŒ
–
logic_pmask_t
 
mska
,Üogic_pmask_à
mskb
);

924 
BOOL
 
T°LgcMaskBô
(
p‹t_num_t
 
ucLogicP‹t
, 
logic_pmask_t
 *
lgcPMask_±r
);

925 
BOOL
 
T°LgcMaskBôNoCheck
(
p‹t_num_t
 
ucLogicP‹t
, 
logic_pmask_t
 *
lgcPMask_±r
);

926 
BOOL
 
TønsUnô32MaskToLgcMask
(* 
pUöt32P‹tMask
, 
logic_pmask_t
 *
lgcPMask_±r
);

927 
BOOL
 
T°LgcMaskRemoveIsNuŒ
–
logic_pmask_t
 
mska
,Üogic_pmask_à
mskb
);

928 
p‹t_num_t
 
P‹tU£r2Logic
(
u£r_p‹t_num_t
 
°U§P‹t
);

929 
BOOL
 
IsComboFibîU£rP‹t
(
u£r_p‹t_num_t
 
°U§P‹t
);

930 
u£r_p‹t_num_t
 
P‹tLogic2U£r
(
p‹t_num_t
 
Õ‹t
);

931 
u£r_p‹t_num_t
 
P‹tLogic2ComboSecU£r
(
p‹t_num_t
 
Õ‹t
);

932 
BOOL
 
IsVÆidU£rP‹t
(
u£r_p‹t_num_t
 
°U§P‹t
);

933 
VOID
 
Drv_P‹ts_Inô
(VOID);

939 
	#AggªGΩF‹
(
_gΩ
)\

	)

940 (
	g_gΩ
)=1; (_gΩ)<=
AGGRE_GRP_NUM
; (_grp)++)

946 
	gAGGR_TYPE_DYNAMICAL
 = 0,

947 
	gAGGR_TYPE_STATIC
,

948 
	gAGGR_TYPE_MANUAL
,

949 
	gAGGR_TYPE_MAX_CNT
,

950 }
	tAGGR_TYPE_E
;

955 
	gSA_TRUNK
=0,

956 
	gDA_TRUNK
,

957 
	gSADA_TRUNK
,

958 
	gSAIPDAIP_TRUNK
,

959 
	gSADAIP_TRUNK
,

960 
	gTRUNK_TYPE_END


961 }
	tAGGR_PSA_E
 ;

964 
	#IsVÆidAggrGΩId
(
_gΩ
Ë–(((_gΩË>1Ë&& ((_gΩË<
AGGRE_GRP_NUM
 )Ë? 
TRUE
 : 
FALSE
 )

	)

965 
	#IsVÆidAggrTy≥
(
_ty≥
Ë((((_ty≥Ë>
AGGR_TYPE_DYNAMICAL
Ë&& ((_ty≥Ë< 
AGGR_TYPE_MAX_CNT
)Ë? 
TRUE
 : 
FALSE
 )

	)

966 
	#IsVÆidAggrPSAMode
(
_mode
Ë((((_modeË>
SA_TRUNK
Ë&& ((_modeË< 
TRUNK_TYPE_END
)Ë? 
TRUE
 : 
FALSE
 )

	)

971 
	#CONFIG_SCHEDULE_ERROR
 1

	)

972 
	#CONFIG_SCHEDULE_FINISH
 2

	)

973 
	#CONFIG_SCHEDULE_PVLAN
 3

	)

975 
	#CONFIG_SCHEDULE_RETURN_SUM_PAGE
 1

	)

976 
	#DISP_VLANNUM_PERPAGE
 15

	)

979 
	#MIN_VLAN_ID
 1

	)

980 
	#MAX_VLAN_ID
 4094

	)

981 
	#MIN_VLAN_INDEX
 
MIN_VLAN_ID


	)

982 
	#MAX_VLAN_INDEX
 
MAX_VLAN_ID


	)

984 
	#MAX_VLAN
 512

	)

987 
	#MAC_AGINGTIME_DISABLE
 0

	)

988 
	#MAC_AGINGTIME_MIN
 45

	)

989 
	#MAC_AGINGTIME_DEFAULT
 300

	)

990 
	#MAC_AGINGTIME_MAX
 458

	)

993 
	#NO_OF_PORTS
 
MAX_PORT_NUM


	)

995 
	#MIN_GROUP_ID
 1

	)

996 
	#MAX_GROUP_ID
 
NO_OF_PORTS


	)

997 
	#MIN_GROUP_INDEX
 
MIN_GROUP_ID


	)

998 
	#MAX_GROUP_INDEX
 
MAX_GROUP_ID


	)

1000 
	#ISOLATE_VLAN_MAX_NUM
 2

	)

1002 
	#ENABLE
 1

	)

1003 
	#DISABLE
 0

	)

1006 
	#VALID_PORT
–
x
 ) ( ( ( x >1Ë&& ( x <
LOGIC_PORT_NO
ËË?1 : 0 )

	)

1007 
	#VALID_PORT_PORPERTY
–
x
 ) ( ( ( x >0Ë&& ( x < 
PORT_PORPERTY_END
ËË?1 : 0 )

	)

1008 
	#VALID_PORT_PRIO
–
x
 ) ( ( ( (xË>0 ) && ( (xË<7 ) ) ? 1 : 0 )

	)

1009 
	#VALID_VLAN_ID
–
x
 ) ( ( ( (xË>
MIN_VLAN_ID
 ) && ( (xË<
MAX_VLAN_ID
 ) ) ? 1 : 0 )

	)

1010 
	#VALID_VLAN_INDEX
–
x
 ) ( ( ( (xË>
MIN_VLAN_INDEX
 ) && ( (xË<
MAX_VLAN_INDEX
 ) ) ? 1 : 0 )

	)

1011 
	#VALID_GROUP_ID
–
x
 ) ( ( ( (xË>
MIN_GROUP_ID
 ) && ( (xË<
MAX_GROUP_ID
 ) ) ? 1 : 0 )

	)

1012 
	#VALID_GROUP_INDEX
–
x
 ) ( ( ( (xË>
MIN_GROUP_INDEX
 ) && ( (xË<
MAX_GROUP_INDEX
 ) ) ? 1 : 0 )

	)

1013 
	#VALID_ISOLATE_INDEX
–
x
 ) ( ( ( (xË>1 ) && ( (xË<
ISOLATE_VLAN_MAX_NUM
ËË? 1 : 0 )

	)

1014 
	#VALID_ENABLE_VALUE
–
x
 ) ( ( ( x =
ENABLE
 ) || ( x =
DISABLE
 ) ) ?1 : 0 )

	)

1015 
	#IS_MULTICAST
(
x
Ë(x[0]&0x1)

	)

1016 
	#INVALID_VLAN_IDX
 0xffff

	)

1018 
DRV_RET_E
 
Drv_InôP‹tAggª
();

1019 
DRV_RET_E
 
Drv_SëP‹tAggª
(
logic_pmask_t
* 
Lmask_±r
);

1020 
DRV_RET_E
 
Drv_DñP‹tAggª
(
p‹t_num_t
 
maö_Õ‹t
);

1021 
DRV_RET_E
 
Drv_DñAŒAgg
 ();

1022 
DRV_RET_E
 
Drv_CheckP‹tC™Aggª
(
logic_pmask_t
* 
Lmask_±r
);

1023 
DRV_RET_E
 
Drv_SëAggªMode
(
AGGR_PSA_E
 
mode
);

1024 
DRV_RET_E
 
Drv_CheckAggªTy≥
(
UCHAR
 
ucAggTy≥
, 
agg_gΩ_num_t
 
ulAggID
);

1025 
DRV_RET_E
 
Drv_GëAggªMa°î
–
agg_gΩ_num_t
 
ucGΩNo
 ,
p‹t_num_t
 *
mP‹t_±r
);

1026 
DRV_RET_E
 
Drv_GëGroupNum
(
p‹t_num_t
 
lP‹t
, 
agg_gΩ_num_t
 *
ucGΩNo
 );

1027 
DRV_RET_E
 
Drv_GëAggªMa°îByP‹t
–
p‹t_num_t
 
Õ‹t
 ,p‹t_num_à*
mP‹t_±r
);

1028 
DRV_RET_E
 
Drv_GëAggªGΩMask
(
p‹t_num_t
 
Õ‹t
, 
logic_pmask_t
 *
lmask_±r
);

1029 
BOOL
 
Drv_IsAggªP‹t
(
p‹t_num_t
 
Õ‹t
);

1030 
DRV_RET_E
 
Drv_GëAggªMaskAŒ
(
logic_pmask_t
 * 
lmask_±r
);

1031 
VOID
 
Drv_NŸifyAggCfgCh™ge
(
ULONG
 
ulAggIndex
);

1032 
DRV_RET_E
 
Drv_GëAggªMa°îP‹tAŒ
(
logic_pmask_t
 * 
lmask_±r
);

1033 
UINT8
 
Drv_GëMa°îF‹So·
(
p‹t_num_t
 
lP‹t
);

1034 
VOID
 
Drv_SyncAggMaskBôSë
(
UINT32
 
ulAggID
);

1035 
VOID
 
Drv_SyncMaskAggCfg
(VOID);

1036 
DRV_RET_E
 
Drv_La˝_Tønsmô
(
UINT32
 
ulP‹t_Index
, *
pPackë
, UINT32 
ulLígth
);

1038 
	eègGPIO_PIN


1040 
	gGPIO_PIN_SFP_SCL
=0,

1041 
	gGPIO_PIN_SFP0_SDA
,

1042 
	gGPIO_PIN_SFP1_SDA
,

1043 
	gGPIO_PIN_WATCHDOG
,

1044 
	gGPIO_PIN_END


1045 }
	tGPIO_PIN_E
 ;

1048 
	eègGPIO_CONTROL


1050 
	gGPIO_PIN_CTRLFUNC_NORMAL
 = 0,

1051 
	gGPIO_PIN_CTRLFUNC_DEDICATE_PERIPHERAL
,

1052 
	gGPIO_PIN_CTRLFUNC_END


1053 } 
	tGPIO_CONTROL_E
;

1056 
	eègGPIO_DIRECTION


1058 
	gGPIO_PIN_DIR_IN
 = 0,

1059 
	gGPIO_PIN_DIR_OUT
,

1060 
	gGPIO_PIN_DIR_END


1061 } 
	tGPIO_DIRECTION_E
;

1064 
	eègGPIO_DATA


1066 
	gGPIO_PIN_DATA_LOW
 = 0,

1067 
	gGPIO_PIN_DATA_HIGH
,

1068 
	gGPIO_PIN_DATA_END


1069 } 
	tGPIO_DATA_E
;

1075 
logic_pmask_t
 
	gp‹tmask
;

1076 }
	tvœn_èb_t
;

1080 
	gUNTAGGED
,

1081 
	gTAGGED


1082 }
	tP‹tTag_E
;

1085 
	gQVLAN_EG_UNTAGGED
 = 0,

1086 
	gQVLAN_EG_TAGGED
,

1087 
	gQVLAN_EG_TRANSPARENT
 ,

1088 
	gQVLAN_EG_END


1089 } 
	tP‹tEGMode_t
;

1091 
	#LINK_TYPE_ACCESS
 0

	)

1092 
	#LINK_TYPE_TRUNK
 1

	)

1093 
	#LINK_TYPE_HYBRID
 2

	)

1094 
	#LINK_TYPE_END
 4

	)

1096 
	#DEFAULT_VID
 1

	)

1097 
	#VALID_VID
(
x
Ë((x > 0Ë&& (x < 4094))

	)

1101 
	gVLAN_MODE_8021Q
 = 0,

1102 
	gVLAN_MODE_TRANSPARENT


1104 
	tvœn_mode_t
;

1107 
	#DEFAULT_SWITCH_PORT_MODE
 
LINK_TYPE_ACCESS


	)

1108 
	#DEFAULT_SWITCH_VLAN_MODE
 
VLAN_MODE_8021Q


	)

1112 
	gVLAN_FLAG_NONE
 = 0,

1113 
	gVLAN_FLAG_SET
 = 0x01,

1114 
	gVLAN_FLAG_DEL
 = 0x02,

1115 
	gVLAN_FLAG_NEW
 = 0x03,

1116 
	gVLAN_FLAG_TAG
 = 0x80

1119 
	tvœn_Êag_t
;

1120 
	#vœn_Êag
(
x
Ë((xË& 0x0f)

	)

1121 
	#vœn_ègged
(
x
Ë((xË& 
VLAN_FLAG_TAG
)

	)

1122 
	#deÁu…_vœn
(
v
Ë((vË=
DEFAULT_VID
)

	)

1123 #i‚de‡
__∑cked


1124 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

1127 
	s__∑cked
{

1128 
UINT16
 
	g°¨t
;

1129 
UINT16
 
	gíd
;

1131 
	tvœn_id_ønge_t
;

1134 
	s__∑cked
{

1135 
UINT16
 
	gvÆue
;

1136 
UINT16
 
	gÊag
;

1138 
	tvœn_id_back_t
;

1140 
	s__∑cked
{

1141 
logic_pmask_t
 
	gmembî
;

1143 
vœn_id_back_t
 
	gid
;

1144 
vœn_id_ønge_t
 
	gid_ønge
;

1147 
	tswôch_vœn_t
;

1149 
	s__∑cked
{

1150 
logic_pmask_t
 
	gmembî
;

1151 
UINT8
 
	gÊag
;

1152 
UINT16
 
	gcou¡
;

1153 
swôch_vœn_t
 
	gvœns
[];

1155 
	tswôch_vœn_group_t
;

1157 
	#MAX_VLAN_GROUPS
 ((
MAX_PORT_NUM
Ë* (MAX_PORT_NUM))

	)

1158 
	#IFNAMSIZE
 16

	)

1159 
	s__∑cked
{

1160 
	gi‚ame
[
IFNAMSIZE
];

1161 
UINT8
 
	gphy
;

1162 
UINT16
 
	gpvid
;

1163 
UINT8
 
	gmode
;

1164 
UINT8
 
	gcou¡
;

1165 
swôch_vœn_group_t
 
	gåunk_hybrid
[];

1167 
	tswôch_vœn_öãrÁ˚_t
;

1171 
	s__∑cked
 {

1172 
UINT8
 
	gmode
;

1173 
UINT16
 
	gmvœn
;

1175 
	gi‚ame
[
IFNAMSIZE
];

1176 
UINT8
 
	gty≥
;

1177 }
	gp‹ts
[
MAX_PORT_NUM
+1];

1179 
	tswôch_vœn_mode_t
;

1182 
	s__∑cked
 {

1183 
UINT32
 
	gagög_time
;

1184 }
	tmac_£âög_t
;

1188 
	s__∑cked
 {

1189 
UINT8
 
	gíabÀ
;

1190 }
	tcom∑tibÀ_£âög_t
;

1194 
	#QVLAN
 1

	)

1195 
	#PVLAN
 2

	)

1196 
	#TRSPVLAN
 3

	)

1198 
	#VLAN_BUF_LEN
 512

	)

1199 
	#VID_VOID
 0xFFFF

	)

1201 
	#UP
 1

	)

1202 
	#DOWN
 0

	)

1204 
UINT8
 
	tvid_li°_t
[
VLAN_BUF_LEN
];

1205 
UINT8
 
	tpvid_li°_t
[
MAX_GROUP_ID
];

1208 
	#BYTE_SET_BIT
(
_bô
, 
_byã
Ëdo{ \

	)

1209 (
	g_byã
Ë|(
UINT8
)((UINT8)1 << (UINT8)(
_bô
)); \

1212 
	#BYTE_CLR_BIT
(
_bô
, 
_byã
Ëdo{ \

	)

1213 (
	g_byã
Ë&(
UINT8
)(~((UINT8)((UINT8)1 << (UINT8)(
_bô
)))); \

1216 
	#TEST_BIT_8
(
_bô
, 
_byã
Ë(((
UINT8
)(_byãË& ((UINT8)1 << (UINT8)(_bô))Ë!0)

	)

1218 
	#VID_LIST_SETBIT
(
_vid
, 
_pucBuf
Ëdo{ \

	)

1219 
BYTE_SET_BIT
((
UINT32
)(
_vid
Ë% 8, ((
UINT8
 *)(
_pucBuf
))[(_vid) / 8]); \

1222 
	#VID_LIST_CLRBIT
(
_vid
, 
_pucBuf
Ëdo{ \

	)

1223 
BYTE_CLR_BIT
((
UINT32
)(
_vid
Ë% 8, ((
UINT8
 *)(
_pucBuf
))[(_vid) / 8]); \

1226 
	#TEST_VID_LIST
(
_vid
, 
_pucBuf
Ë(
	`TEST_BIT_8
((_vidË% 8, ((
UINT8
 *)(_pucBuf))[(_vidË/ 8]))

	)

1228 
	#F‹EachLi°Vœn
(
_vid
, 
_vidLi°Buf
Ë\

	)

1229 (
	g_vid
=1); (_vid)<=4094; (_vid)++) \

1230 if(
TEST_VID_LIST
((
_vid
), (
_vidLi°Buf
)))

1232 
	#F‹EachLi°P‹tVœn
(
_pvid
, 
_pvidLi°Buf
Ë\

	)

1233 (
	g_pvid
=1); (_pvid)<=
MAX_GROUP_ID
; (_pvid)++) \

1234 if(
TEST_VID_LIST
((
_pvid
), (
_pvidLi°Buf
)))

1236 
Drv_BuûdExi°VœnMask
(
UINT8
 *
vid_li°_buf
);

1237 
Drv_MakeVidLi°Membî
 (
p‹t_num_t
 
ulP‹tNum
, 
UINT8
 * 
vid_li°_buf
);

1238 
Drv_MakeTaggedVidLi°Membî
(
p‹t_num_t
 
ulP‹tNum
, 
UINT8
 * 
vid_li°_buf
);

1239 
Drv_MakeUnTaggedVidLi°Membî
(
p‹t_num_t
 
ulP‹tNum
, 
UINT8
 * 
vid_li°_buf
);

1240 
UINT8
 
Drv_Te°VœnExi°
(
vœn_id_t
 
tdVid
, UINT8 * 
vid_li°_buf
);

1241 
UINT32
 
Drv_GëExi°VœnNum
();

1242 
vœn_id_t
 
Drv_GëEndVid
 (vœn_id_à
vid
, 
UINT8
 * 
vid_li°_buf
);

1243 
UINT8
 
Drv_Te°PvœnExi°
(UINT8 
tdVid
, UINT8 * 
vid_li°_buf
);

1244 
UINT8
 
Drv_GëEndPVid
(UINT8 
vid
, UINT8 * 
vid_li°_buf
);

1245 
DRV_RET_E
 
Drv_Vœn_E«bÀ
(
UINT32
 
ulVœnTy≥
);

1246 
DRV_RET_E
 
Drv_Vœn_Cª©e
(
vœn_id_t
 
tdVid
);

1247 
DRV_RET_E
 
Drv_Vœn_Dñëe
(
vœn_id_t
 
tdVid
);

1248 
DRV_RET_E
 
Drv_Vœn_DñëeByR™ge
(
vœn_id_t
 
tdBegöVID
, vœn_id_à
tdEndVID
);

1249 
DRV_RET_E
 
Drv_Vœn_DñMembî
(
logic_pmask_t
 *
p°P‹tMask
, 
vœn_id_t
 
tdVid
);

1250 
DRV_RET_E
 
Drv_Vœn_AddMembî
(
logic_pmask_t
 *
p°P‹tMask
, 
vœn_id_t
 
tdVid
);

1251 
DRV_RET_E
 
Drv_GëVœnMembî
–
vœn_id_t
 
tdVid
, 
logic_pmask_t
 * 
p°P‹tMask
);

1252 
BOOL
 
Drv_P‹tInVœn
(
p‹t_num_t
 
ulP‹t
, 
vœn_id_t
 
tdVid
);

1253 
DRV_RET_E
 
Drv_P‹t_SëVid
 (
logic_pmask_t
 * 
p°P‹tMask
, 
vœn_id_t
 
tdVid
);

1254 
DRV_RET_E
 
API_SëP‹tPVID
(
p‹t_num_t
 
ulP‹t
, 
vœn_id_t
 
tdPVID
);

1255 
DRV_RET_E
 
Drv_P‹t_SëAc˚ssVœn
–
p‹t_num_t
 
ulP‹tNum
, 
vœn_id_t
 
tdVid
);

1256 
Drv_P‹t_SëAc˚ssVœnF‹Agg
(
logic_pmask_t
 *
p°P‹tMask
);

1257 
DRV_RET_E
 
Drv_P‹t_SëTrunkVœn
–
p‹t_num_t
 
ulP‹tNum
 );

1258 
DRV_RET_E
 
Drv_P‹t_DñTrunkVœn
(
p‹t_num_t
 
ulP‹tNum
);

1259 
DRV_RET_E
 
Drv_P‹t_SëHybridVœn
–
p‹t_num_t
 
ulP‹tNum
);

1260 
DRV_RET_E
 
Drv_P‹t_DñHybridVœn
(
p‹t_num_t
 
ulP‹tNum
);

1261 
DRV_RET_E
 
Drv_Check_Voi˚Vœn_mode
(
p‹t_num_t
 
ulP‹tNum
, 
UINT8
 * 
web_ègvid_li°
);

1262 
DRV_RET_E
 
API_Ac˚ssVœn_Së
(
vœn_id_t
 
tdVid
, 
logic_pmask_t
 * 
p°P‹tMask
);

1263 
DRV_RET_E
 
API_HybridVœn_Së
(
p‹t_num_t
 
ulP‹tNum
, 
vœn_id_t
 
tdPVID
, 
UINT8
 * 
web_ègvid_li°
, UINT8 * 
web_u¡agvid_li°
);

1264 
DRV_RET_E
 
API_HybridVœn_Së_Voi˚Vœn
(
p‹t_num_t
 
ulP‹tNum
, 
vœn_id_t
 
tdPVID
, 
UINT8
 * 
web_ègvid_li°
, UINT8 * 
web_u¡agvid_li°
);

1265 
DRV_RET_E
 
API_TrunkVœn_Së
(
p‹t_num_t
 
ulP‹tNum
, 
vœn_id_t
 
tdPVID
, 
UINT8
 
ucTrunkAŒ
, UINT8 * 
web_ègvid_li°
);

1266 
DRV_RET_E
 
API_TrunkVœn_Së_Voi˚Vœn
(
p‹t_num_t
 
ulP‹tNum
, 
vœn_id_t
 
tdPVID
, 
UINT8
 
ucTrunkAŒ
, UINT8 * 
web_ègvid_li°
);

1267 
DRV_RET_E
 
API_Dñëe_Hybrid
(
p‹t_num_t
 
ulP‹tNum
);

1268 
DRV_RET_E
 
API_Dñëe_Trunk
(
p‹t_num_t
 
ulP‹tNum
);

1269 
DRV_RET_E
 
API_DñP‹tFromVœn
(
p‹t_num_t
 
ulP‹tNum
, 
UINT8
 * 
vid_li°_buf
);

1270 
DRV_RET_E
 
API_DñP‹tFromVœn_Voi˚Vœn
(
p‹t_num_t
 
ulP‹tNum
, 
UINT8
 * 
vid_li°_buf
);

1271 
Drv_Vœn_Inô
();

1272 
DRV_RET_E
 
Drv_P‹t_SëMRCTag
–
p‹t_num_t
 
°MrcP‹t
, 
USHORT
 
usCl°Vid
);

1273 
DRV_RET_E
 
Drv_P‹t_SëMRCUnTag
–
p‹t_num_t
 
°MrcP‹t
, 
USHORT
 
usCl°Vid
);

1274 
DRV_RET_E
 
Drv_P‹t_SëTaggedByP‹t
–
UINT8
 
ucVÆue
, 
p‹t_num_t
 
Õ‹t
, 
vœn_id_t
 
tdVid
);

1275 
DRV_RET_E
 
Drv_Vœn_AddMembîByP‹t
(
p‹t_num_t
 
Õ‹t
, 
vœn_id_t
 
tdVid
);

1276 
DRV_RET_E
 
Drv_Vœn_DeÁu…Desc
(
vœn_id_t
 
tdVid
);

1277 
DRV_RET_E
 
Drv_GëGroupMembî
–
UINT8
 
ucVid
, 
logic_pmask_t
 *
p°P‹tMsk
);

1278 
DRV_RET_E
 
Drv_PVœnDeÁu…Së
();

1279 
DRV_RET_E
 
Drv_PVœn_Dñëe
(
UINT8
 
ucVid
);

1280 
DRV_RET_E
 
Drv_PVœn_Cª©e
(
UINT8
 
ucVid
);

1281 
UINT8
 
Drv_P‹t_IsInGroup
(UINT8 
ucVid
, 
p‹t_num_t
 
ulP‹tNo
);

1282 
DRV_RET_E
 
Drv_PVœn_Së
(
UINT8
 
ucVid
, 
logic_pmask_t
 *
p°PVœnMsk
);

1283 
DRV_RET_E
 
Drv_PVœn_AddP‹t
(
UINT8
 
ucVid
, 
p‹t_num_t
 
ulP‹tNo
);

1284 
DRV_RET_E
 
Drv_PVœn_DñP‹t
(
UINT8
 
ucVid
, 
p‹t_num_t
 
ulP‹tNo
);

1285 
DRV_RET_E
 
Drv_PVœn_Upd©aC⁄fig
();

1286 
DRV_RET_E
 
Drv_P‹t_SëTagged
–
UINT8
 
ucVÆue
, 
logic_pmask_t
 * 
p°P‹tMask
, 
vœn_id_t
 
tdVid
);

1287 
DRV_RET_E
 
Drv_GëVœnSètus
(
vœn_id_t
 
uiVid
, 
UINT32
 * 
puiSètus
);

1292 
	#MAC_UCAST
 0x00

	)

1293 
	#MAC_MCAST
 0x01

	)

1294 
	#MAC_L2PRTCL
 0x02

	)

1295 
	#MAC_BROAD
 0x03

	)

1296 
	#MAC_ZERO
 0x04

	)

1297 
	#MAC_MULTICAST
 0x05

	)

1298 
	#MAC_SELF
 0x06

	)

1299 
	#MAC_NORMAL
 0x07

	)

1302 
	#MACADD_TYPE_TAB
 0x01

	)

1303 
	#MACADD_TYPE_ARL
 0x02

	)

1307 
vœn_id_t
 
	gvid
;

1308 
mac_addªss_t
 
	gmac_addr
;

1309 
logic_pmask_t
 
	gp‹t_mask
;

1310 }
	tmac_èb_t
;

1312 
	#DRV_MAC_DUMP_FLAG_VALID
 0x01

	)

1313 
	#DRV_MAC_DUMP_FLAG_AGGR
 0x02

	)

1314 
	#DRV_MAC_DUMP_FLAG_STATIC
 0x04

	)

1318 
vœn_id_t
 
	gvid
;

1319 
UINT8
 
	gÊag
;

1320 
mac_addªss_t
 
	gmac_addr
;

1321 
p‹t_num_t
 
	gÕ‹t
;

1322 
agg_gΩ_num_t
 
	gaggrGroup
;

1323 }
	tmac_dump_uˇ°_èb_t
;

1325 
	s_mac_dump_lök_s


1327 
mac_dump_uˇ°_èb_t
 *
	gp°MacDump
;

1328 
_mac_dump_lök_s
 *
	gp°MacDumpLökPª
;

1329 
_mac_dump_lök_s
 *
	gp°MacDumpLökNext
;

1330 }
	tmac_dump_uˇ°_lök_t
;

1334 
mac_addªss_t
 
	gmac_addr
;

1335 
vœn_id_t
 
	gvid
;

1336 
logic_pmask_t
 
	gp‹t_mask
;

1339 
UINT8
 
	gVÆid
 ;

1340 
UINT8
 
	gSètic
 ;

1341 
UINT8
 
	gMacTy≥
 ;

1342 
UINT8
 
	gBœckHﬁe
 ;

1343 }
	gMacFœg
;

1344 
UINT16
 
	gmc_ödex
;

1345 }
	tMac_›_t
;

1349 
mac_addªss_t
 
	gmac_addr
;

1350 
vœn_id_t
 
	gtdVid
;

1351 
p‹t_num_t
 
	glgcP‹t
;

1352 
UINT8
 
	gucSètic
;

1353 
UINT8
 
	gucIsAggr
;

1354 
agg_gΩ_num_t
 
	gaggr_group
;

1355 }
	tmac_uˇ°_t
;

1359 
mac_addªss_t
 
	gmac_addr
;

1360 
vœn_id_t
 
	gtdVid
;

1361 
logic_pmask_t
 
	gp‹t_mask
;

1362 }
	tmac_mˇ°_t
;

1366 
mac_addªss_t
 
	gmac
;

1367 
vœn_id_t
 
	gvid
;

1368 
p‹t_num_t
 
	gp‹t
;

1369 
UINT8
 
	gucMacTy≥
;

1370 
UINT8
 
	gucSètic
;

1371 
UINT8
 
	gucIsAggr
;

1372 
agg_gΩ_num_t
 
	gaggr_group
;

1373 
logic_pmask_t
 
	gp‹t_mask
;

1374 
UINT32
 
	gulL2Idx
;

1375 }
	tmac_comm⁄_t
;

1377 
	smac_dñëe_s


1379 
UINT8
 
	gÊushByVid
;

1380 
UINT8
 
	gÊushByP‹t
;

1381 
UINT8
 
	gÊushByTunk
;

1382 
UINT8
 
	gÊushByMac
;

1383 
UINT8
 
	gÊushAŒ
;

1385 
vœn_id_t
 
	gvid
;

1386 
p‹t_num_t
 
	gp‹t
;

1387 
agg_gΩ_num_t
 
	gåunkGroup
;

1388 
mac_addªss_t
 
	gmacAddr
;

1389 
UINT8
 
	gÊushSèticAddr
;

1390 } 
	tmac_dñëe_t
;

1393 
	emac_å≠_mgmtTy≥_e


1395 
	gFRAME_TRAP_TYPE_RIP
 = 0,

1396 
	gFRAME_TRAP_TYPE_ICMP
,

1397 
	gFRAME_TRAP_TYPE_ICMPV6
,

1398 
	gFRAME_TRAP_TYPE_ARP
,

1399 
	gFRAME_TRAP_TYPE_MLD
,

1400 
	gFRAME_TRAP_TYPE_IGMP
,

1401 
	gFRAME_TRAP_TYPE_BGP
,

1402 
	gFRAME_TRAP_TYPE_OSPFV2
,

1403 
	gFRAME_TRAP_TYPE_OSPFV3
,

1404 
	gFRAME_TRAP_TYPE_SNMP
,

1405 
	gFRAME_TRAP_TYPE_SSH
,

1406 
	gFRAME_TRAP_TYPE_FTP
,

1407 
	gFRAME_TRAP_TYPE_TFTP
,

1408 
	gFRAME_TRAP_TYPE_TELNET
,

1409 
	gFRAME_TRAP_TYPE_HTTP
,

1410 
	gFRAME_TRAP_TYPE_HTTPS
,

1412 
	gFRAME_TRAP_TYPE_DHCPV6
,

1413 
	gFRAME_TRAP_TYPE_DHCP
,

1414 
	gFRAME_TRAP_TYPE_DOT1X
,

1415 
	gFRAME_TRAP_TYPE_BPDU
,

1416 
	gFRAME_TRAP_TYPE_END


1417 } 
	tmac_å≠_mgmtTy≥_t
;

1419 
	emac_å≠_a˘i⁄_e


1421 
	gFRAME_TRAP_ACTION_FORWARD
 = 0,

1422 
	gFRAME_TRAP_ACTION_DROP
,

1423 
	gFRAME_TRAP_ACTION_TRAP2CPU
,

1424 
	gFRAME_TRAP_ACTION_COPY2CPU
,

1425 
	gFRAME_TRAP_ACTION_TO_GUESTVLAN
,

1426 
	gFRAME_TRAP_ACTION_FLOOD_IN_VLAN
,

1427 
	gFRAME_TRAP_ACTION_FLOOD_IN_ALL_PORT
,

1428 
	gFRAME_TRAP_ACTION_FLOOD_IN_ROUTER_PORTS
,

1429 
	gFRAME_TRAP_ACTION_END


1430 } 
	tmac_å≠_a˘i⁄_t
;

1432 
	ersv_mac_a˘i⁄_e


1434 
	gPASS_TYPE_CPU_ONLY
 = 0,

1435 
	gPASS_TYPE_ALLPORTS
,

1436 
	gPASS_TYPE_CPU_EXCLUDE
,

1437 
	gPASS_TYPE_DROP
,

1438 
	gPASS_TYPE_END


1439 } 
	trsv_mac_∑ss_a˘i⁄_t
;

1442 
	emac_å≠_¥i‹ôy_e


1444 
	gFRAME_TRAP_PRIORITY_0
 = 0,

1445 
	gFRAME_TRAP_PRIORITY_1
,

1446 
	gFRAME_TRAP_PRIORITY_2
,

1447 
	gFRAME_TRAP_PRIORITY_3
,

1448 
	gFRAME_TRAP_PRIORITY_4
,

1449 
	gFRAME_TRAP_PRIORITY_5
,

1450 
	gFRAME_TRAP_PRIORITY_6
,

1451 
	gFRAME_TRAP_PRIORITY_7


1452 } 
	tmac_å≠_¥i‹ôy_t
;

1454 
	#FRAME_TRAP_PORT_ALL
 0

	)

1456 
	smac_å≠_£t_s


1458 
mac_å≠_mgmtTy≥_t
 
	g‰ameTy≥
;

1459 
mac_å≠_a˘i⁄_t
 
	gå≠A˘i⁄
;

1460 }
	tmac_å≠_£t_t
;

1463 
	emac_À¨n_íabÀ_e


1465 
	gMAC_LEARN_FWD_DISABLED
 = 0,

1466 
	gMAC_LEARN_FWD_ENABLED
,

1467 
	gMAC_LEARN_END


1468 } 
	tmac_À¨n_íabÀ_t
;

1470 
	gDRV_PACKET_PRI_LOWEST
 = 0,

1471 
	gDRV_PACKET_PRI_ARP_CPU
,

1472 
	gDRV_PACKET_PRI_L2_CPU
,

1473 
	gDRV_PACKET_PRI_IP_CPU
,

1474 
	gDRV_PACKET_PRI_DHCP_CPU
,

1475 
	gDRV_PACKET_PRI_DOT1X_CPU
,

1476 
	gDRV_PACKET_PRI_BPDU_CPU
,

1477 
	gDRV_PACKET_PRI_HIGHEST


1478 }
	tå≠CpuPri_E
;

1480 
UINT8
 
l2_mac_cmp
(UINT8 * 
mac1
, UINT8 * 
mac2
);

1481 
UINT8
 
l2_MacTy≥
(
mac_addªss_t
 
mac
 );

1482 
BOOL
 
IsMacAddrEquÆ
(
mac_addªss_t
 
mac1
, mac_addªss_à
mac2
);

1483 
Drv_bpduPktInô
();

1484 
DRV_RET_E
 
Drv_MacInô
();

1485 
DRV_RET_E
 
Drv_AddSwôchMacAddr
(
UINT8
 *
ucMacAddr
, 
vœn_id_t
 
vid
);

1486 
DRV_RET_E
 
Drv_DñSwôchMacAddr
(
UINT8
 *
ucMacAddr
, 
vœn_id_t
 
tdMVid
);

1487 
DRV_RET_E
 
Drv_F‹gëMacAŒ
();

1488 
DRV_RET_E
 
Drv_F‹gëMacByVœn
(
vœn_id_t
 
tdVid
);

1489 
DRV_RET_E
 
Drv_F‹gëMacByAggr
(
agg_gΩ_num_t
 
aggrGroup
);

1490 
DRV_RET_E
 
Drv_F‹gëMacByP‹t
(
p‹t_num_t
 
Õ‹t
);

1491 
DRV_RET_E
 
Drv_F‹gëTrunkS≥cülMac
(
p‹t_num_t
 
Õ‹t
);

1492 
DRV_RET_E
 
Drv_DñTrunkP‹tS≥cülMac
(
logic_pmask_t
 *
p°TrunkP‹tMask
);

1493 
DRV_RET_E
 
Drv_F‹gëMacByVœnP‹t
(
p‹t_num_t
 
Õ‹t
, 
vœn_id_t
 
tdVid
);

1494 
DRV_RET_E
 
Drv_SëAgeTime
(
UINT32
 
ulAgeTime
);

1495 
DRV_RET_E
 
Drv_DñMacAŒ
();

1496 
UINT16
 
SSP_FödMacTab
(
mac_èb_t
 *
p°MacE¡ry
);

1497 
DRV_RET_E
 
Drv_DñMacAddr
(
Mac_›_t
 *
p°MacE¡ry
);

1498 
DRV_RET_E
 
SSP_DñAddªssByMac
(
Mac_›_t
 *
p°MacE¡ry
);

1499 
DRV_RET_E
 
SSP_AddMacTab
(
Mac_›_t
 *
p°MacE¡ry
);

1500 
DRV_RET_E
 
SSP_DñMacTab
(
Mac_›_t
 *
p°MacE¡ry
);

1501 
DRV_RET_E
 
SSP_FödC⁄Êi˘MacAddr
 (
Mac_›_t
 *
p°MacE¡ry
, Mac_›_à*
p°C⁄fûi˘MacE¡ry
);

1502 
DRV_RET_E
 
SSP_AddMacAddr
 (
Mac_›_t
 *
p°MacE¡ry
);

1503 
DRV_RET_E
 
Drv_DñMacByP‹t
(
logic_pmask_t
 *
p°P‹tMask
);

1504 
DRV_RET_E
 
Drv_DñMacByVid
(
vœn_id_t
 
tdVid
);

1505 
DRV_RET_E
 
Drv_DñMacByP‹tVid
(
logic_pmask_t
 *
pLP‹tMask
, 
vœn_id_t
 
tdVid
);

1506 
DRV_RET_E
 
Drv_DñMu…iˇ°Addr
();

1507 
BOOL
 
Drv_IsExi°IpMu…iMac
();

1508 
DRV_RET_E
 
SSP_DñMacTabF‹P‹t
(
p‹t_num_t
 
Õ‹t
);

1509 
DRV_RET_E
 
SSP_DñMacTabF‹Vœn
(
vœn_id_t
 
vid
);

1510 
DRV_RET_E
 
SSP_DñMacTabF‹VœnP‹t
 (
vœn_id_t
 
vid
, 
p‹t_num_t
 
Õ‹t
);

1511 
DRV_RET_E
 
Drv_FödMacAddrUniˇ°
(
vœn_id_t
 
tdVœnId
, 
mac_addªss_t
 
macAdd
, 
p‹t_num_t
 *
p‹t_no
);

1512 
DRV_RET_E
 
Drv_FödMacAddr
(
vœn_id_t
 
tdVœnId
, 
mac_addªss_t
 
°MacAddªss
, 
logic_pmask_t
 *
p°P‹tMask
);

1513 
DRV_RET_E
 
Drv_E«bÀP‹tBödög
(
logic_pmask_t
 
°LP‹tMask
, 
UINT8
 
ucVÆue
);

1514 
DRV_RET_E
 
Drv_P‹tMacBödög
(
p‹t_num_t
 
Õ‹t
, 
mac_addªss_t
 
°MacAddr
,
vœn_id_t
 
tdVid
);

1515 
BOOL
 
SSP_MacTabUMacExi°
 (
p‹t_num_t
 
Õ‹t
);

1516 
DRV_RET_E
 
SSP_GëMacTab
(
mac_addªss_t
 
°MacAddr
, c⁄° 
vœn_id_t
 
tdVid
, 
mac_èb_t
 *
p°MacTab
);

1517 
DRV_RET_E
 
Drv_MacUndoBödög
 (
p‹t_num_t
 
Õ‹t
,
mac_addªss_t
 
°MacAddr
,
vœn_id_t
 
tdVid
);

1518 
DRV_RET_E
 
Drv_GëAgeTime
(
UINT32
 *
pulAgeTime
);

1519 
Drv_DñDy«micP‹tMac
(
logic_pmask_t
 
°LP‹tMask
);

1520 
Drv_DñDy«micVœnP‹tMac
(
logic_pmask_t
 
°LP‹tMask
, 
vœn_id_t
 
tdVid
);

1521 
BOOL
 
l2_MacIsBœckhﬁe
(
mac_èb_t
 
°MacTab
);

1522 
DRV_RET_E
 
SSP_GëMmCou¡î
(
UINT32
 *
pulMˇ°Cou¡
);

1523 
Drv_DñMacEx˚±O√VœnP‹t
(
vœn_id_t
 
tdVid
, 
logic_pmask_t
 
°P‹tMask
);

1524 
DRV_RET_E
 
Drv_DñayAgögP‹t
(
logic_pmask_t
 *
°LP‹tMask
, 
Êag
);

1525 
DRV_RET_E
 
Drv_P‹tMacLimô
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
lmt_˙t
, UINT32 
ulDisF‹w¨d
);

1526 
BOOL
 
Drv_P‹tMacLó∫IsFuŒ
(
p‹t_num_t
 
Õ‹t
);

1527 
DRV_RET_E
 
SSP_SëMaxMacLimô
 (
logic_pmask_t
 *
pLgcPMask
, 
UINT32
 
ulMaxCou¡
, UINT32 
ulDisF‹w¨d
);

1528 
DRV_RET_E
 
Drv_Sy°emMacLimô
(
UINT32
 
lmt_˙t
);

1529 
DRV_RET_E
 
Drv_MacUˇ°Re‰eshCÆl
(
UINT32
 
uiI¡îvÆ
);

1530 
DRV_RET_E
 
Drv_GëMacUˇ°Dump
(
mac_dump_uˇ°_èb_t
 *
p°MacUˇ°Dump
, 
UINT32
 *
puiCou¡
);

1531 
DRV_RET_E
 
Drv_GëMacMˇ°Dump
(
mac_mˇ°_t
 *
p°MacMˇ°Dump
, 
UINT32
 *
puiCou¡
);

1532 
DRV_RET_E
 
Drv_GëMacUˇ°DumpS‹ãd
(
mac_dump_uˇ°_èb_t
 *
p°MacUˇ°Dump
, 
UINT32
 *
puiCou¡
);

1533 
DRV_RET_E
 
Drv_TøpS≥cifyFøme
(
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
å≠CpuPri_E
 
¥i‹ôy
);

1534 
DRV_RET_E
 
Drv_SëRe£rvedMacTøp
(
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
);

1535 
DRV_RET_E
 
Drv_GëAæTabÀ
(
UINT32
 
ulIdx
, 
mac_comm⁄_t
 * 
p°MacUˇ°Dump
);

1536 
DRV_RET_E
 
Drv_GëMacL2Idx
(
mac_addªss_t
 
°Mac
, 
vœn_id_t
 
tdVid
, 
UINT32
 * 
pulIndex
);

1537 
UINT32
 
Drv_CÆcAæIndex
(
mac_addªss_t
 
°Mac
, 
vœn_id_t
 
tdVid
);

1538 
DRV_RET_E
 
Drv_GëMacCou¡
(
UINT32
 *
pulTŸÆC¡
);

1539 
DRV_RET_E
 
Drv_AddTabMacAddr
(
Mac_›_t
 *
p°MacE¡ry
, 
UINT32
 
ulAddTy≥
);

1540 
DRV_RET_E
 
Drv_GëM‹eMac
–
UINT32
 
ulIdx
, UINT32 
uiGëCou¡
,

1541 
mac_comm⁄_t
 *
p°MacDump
, 
UINT32
 *
puiCou¡
, UINT32 *
puiNextIdx
);

1542 
DRV_RET_E
 
Drv_£tUnk⁄wMˇ°F‹w¨d
(
UINT32
 
ulE«bÀ
);

1543 
VOID
 
Drv_XMˇ°FwdInô
(VOID);

1545 
VOID
 
Drv_P‹tIsﬁ©e_Inô
(VOID);

1546 
BOOL
 
Drv_IsP‹tIsﬁ©eEn
(
p‹t_num_t
 
Õ‹t
);

1547 
DRV_RET_E
 
Drv_P‹tIsﬁ©e_AddMembî
(
logic_pmask_t
 *
p°P‹tMask
);

1548 
DRV_RET_E
 
Drv_P‹tIsﬁ©e_DñMembî
(
logic_pmask_t
 *
p°P‹tMask
);

1549 
VOID
 
Drv_P‹tLed_Inô
(VOID);

1550 
DRV_RET_E
 
Drv_SëP‹tLed
(
p‹t_num_t
 
Õ‹t
, 
UINT32
 
ulLökSèã
, UINT32 
ulP‹tTy≥
);

1551 
DRV_RET_E
 
Drv_SídP‹tO±i⁄Msg
(
PORT_INPUT_PARA_S
 *
p°P¨a
);

1562 
	#IN_MIRROR
 1

	)

1563 
	#OUT_MIRROR
 2

	)

1564 
	#BOTH_MIRROR
 3

	)

1566 
DRV_RET_E
 
Drv_InôMúr‹
();

1567 
DRV_RET_E
 
Drv_Cª©eMúr‹Group
(
MIRROR_GROUP_S
 *
p°MúrGroup
);

1568 
DRV_RET_E
 
Drv_SëMúr‹GroupM⁄ô‹
(
MIRROR_GROUP_S
 *
p°MúrGroup
);

1569 
DRV_RET_E
 
Drv_SëMúr‹GroupMúr‹
(
MIRROR_GROUP_S
 *
p°MúrGroup
);

1570 
DRV_RET_E
 
Drv_DñMúr‹Group
(
MIRROR_GROUP_S
 *
p°MúrGroup
);

1571 
DRV_RET_E
 
Drv_GëM⁄ô‹P‹tAŒ
(
logic_pmask_t
 *
p‹t_mask
);

1577 
	#I2C_START
 0x00

	)

1578 
	#I2C_TRANSCEIVER_CODES_ADDR
 0x03

	)

1579 
	#I2C_TRANSCEIVER_CODES_LEN
 4

	)

1580 
	#I2C_RB_NOMINAL_ADDR
 0x0¯

	)

1581 
	#I2C_RB_NOMINAL_LEN
 1

	)

1582 
	#I2C_CONNECTOR_ADDR
 0x02

	)

1583 
	#I2C_TRANSFER_DISTANCE_ADDR
 0x0ê

	)

1584 
	#I2C_TRANSFER_DISTANCE_LEN
 6

	)

1585 
	#I2C_TWISTED_PAIR_ADDR
 0x12

	)

1586 
	#I2C_WAVELENGTH_ADDR
 0x3¯

	)

1587 
	#I2C_CENTER_WAVELENGTH_ADDR
 0x75

	)

1588 
	#I2C_DIAGNOSTIC_MONITORING_ADDR
 0x5¯

	)

1589 
	#I2C_VENDOR_NAME_ADDR
 0x14

	)

1590 
	#I2C_VENDOR_NAME_LEN
 16

	)

1591 
	#I2C_PRODUCTOR_IDIOGRAPH_ADDR
 0x60

	)

1592 
	#I2C_PRODUCTOR_IDIOGRAPH_LEN
 11

	)

1593 
	#I2C_MAX_TX_POWER_ADDR
 0x77

	)

1594 
	#I2C_MIN_TX_POWER_ADDR
 0x79

	)

1595 
	#I2C_MIN_RX_POWER_ADDR
 0x7b

	)

1596 
	#I2C_MAX_RX_POWER_ADDR
 0x7d

	)

1597 
	#I2C_PART_NUMBER_ADDR
 0x28

	)

1598 
	#I2C_PART_NUMBER_LEN
 16

	)

1599 
	#I2C_REV_NUMBER_ADDR
 0x38

	)

1600 
	#I2C_REV_NUMBER_LEN
 4

	)

1601 
	#I2C_SERIAL_NUMBER_ADDR
 0x44

	)

1602 
	#I2C_SERIAL_NUMBER_LEN
 16

	)

1603 
	#I2C_PRODUCT_DATA_ADDR
 0x54

	)

1604 
	#I2C_PRODUCT_DATA_LEN
 8

	)

1606 
	#SFP_EEPROM1_DEVICE_NO
 0

	)

1608 
	#I2C_READ_SFP_FROM_DRAM
 1

	)

1609 
	#I2C_READ_SFP_FROM_EEPROM
 2

	)

1613 
	#I2C_RANSCEIVER_CODES_MASK
 0x700f7fff

	)

1615 
	#SFP_STACK_PLUS
 0x00000000

	)

1616 
	#SFP_STACK
 0x000000FF

	)

1617 
	#SFP_1000_BASE_SX
 0x00000001

	)

1618 
	#SFP_1000_BASE_LX
 0x00000002

	)

1619 
	#SFP_1000_BASE_T_AN
 0x00000008

	)

1620 
	#SFP_1000_BASE_LX_AN
 0x00000012

	)

1621 
	#SFP_100X_BASE_BX_Y
 0x00000040

	)

1622 
	#SFP_1000_BASE_PX
 0x00000080

	)

1623 
	#SFP_100_BASE_SX1
 0x00000100

	)

1624 
	#SFP_100_BASE_SX2
 0x00000020

	)

1625 
	#SFP_100_BASE_SX3
 0x00000120

	)

1626 
	#SFP_100_BASE_LX1
 0x00000200

	)

1627 
	#SFP_100_BASE_LX2
 0x00000010

	)

1628 
	#SFP_100_BASE_LX3
 0x00000210

	)

1629 
	#SFP_100_BASE_BX_Y
 0x00000240

	)

1630 
	#SFP_100_BASE_ZX
 0x00000400

	)

1631 
	#SFP_10G_BASE_SR
 0x00100000

	)

1632 
	#SFP_10G_BASE_LR
 0x00200000

	)

1633 
	#SFP_10G_BASE_LRM
 0x00400000

	)

1635 
	#SFP_100_BASE_BX_D
 0

	)

1636 
	#SFP_100_BASE_BX_U
 1

	)

1637 
	#SFP_1000_BASE_BX_D
 2

	)

1638 
	#SFP_1000_BASE_BX_U
 3

	)

1640 
	#SFP_100_BASE_LH
 0

	)

1641 
	#SFP_1000_BASE_LH
 1

	)

1642 
	#MAX_TRANSCEIVER_CODE_LEN
 128

	)

1643 
	#MAX_TRANSCEIVER_TYPE_LEN
 24

	)

1644 
	#MAX_SFP_VENDOR_LEN
 20

	)

1645 
	#MAX_CONNECTOR_TYPE_LEN
 8

	)

1646 
	#MAX_TRANSFER_DISTANCE_LEN
 24

	)

1647 
	#MAX_POWER_LEN
 2

	)

1648 
	#MAX_POWER_STR_LEN
 8

	)

1650 
	#MAX_WAVE_LEN
 2000

	)

1651 
	#MIN_WAVE_LEN
 500

	)

1653 
	#UNKNOWN
 "UNKNOWN"

	)

1654 
	#UNKNOWN_SFP
 "UNKNOWN_SFP"

	)

1655 
	#UNKNOWN_GBIC
 "UNKNOWN_GBIC"

	)

1658 
	#TRANSCEIVER_TYPE_SFP
 0

	)

1659 
	#TRANSCEIVER_TYPE_GBIC
 1

	)

1660 
	#TRANSCEIVER_TYPE_POS
 2

	)

1661 
	#TRANSCEIVER_TYPE_TP
 3

	)

1662 
	#TRANSCEIVER_TYPE_UNKNOWN
 4

	)

1664 
	#TRANSCEIVER_HWTYPE_SM
 0

	)

1665 
	#TRANSCEIVER_HWTYPE_MM
 1

	)

1667 
	#TRANSCEIVER_FIBER_9
 1

	)

1668 
	#TRANSCEIVER_FIBER_50
 2

	)

1669 
	#TRANSCEIVER_FIBER_625
 3

	)

1670 
	#TRANSCEIVER_COPPER
 4

	)

1671 
	#TRANSCEIVER_UNKOWN
 65535

	)

1672 
	#SFP_WARELENGTH_SHORT
 1260

	)

1673 
	#SFP_WARELENGTH_LONG
 1360

	)

1675 
	#KILOMETER
 1000

	)

1676 
	#TEN_METER
 10

	)

1678 
	#SFP_LH_SHORT
 40

	)

1679 
	#SFP_GE_LH_LONG
 70

	)

1680 
	#SFP_FE_LH_LONG
 80

	)

1683 
	#DISPLAY_NORMAL
 0

	)

1684 
	#DISPLAY_SECRET
 1

	)

1686 
	#SFP_BIT_0
 0x01

	)

1687 
	#SFP_BIT_2
 0x04

	)

1688 
	#SFP_BIT_3
 0x08

	)

1689 
	#SFP_BIT_4
 0x10

	)

1690 
	#SFP_BIT_6
 0x40

	)

1691 
	#SFP_BIT_7
 0x80

	)

1693 
	#FIBERPORTCHECK
 0

	)

1694 
	#ISETHERNET
 1

	)

1696 
	sègTRANSCEIVER_TYPE


1698 
CHAR
 *
	gc_«me
;

1699 
INT32
 
	gc_vÆ
;

1700 } 
	tTRANSCEIVER_TYPE_S
;

1702 
	sègSFP_TRANSFER_DISTANCE


1704 
BOOL
 
	gbIsSM
;

1705 
UINT16
 
	guc9um_km
;

1706 
UINT16
 
	guc9um
;

1707 
UINT16
 
	guc50um
;

1708 
UINT16
 
	guc625um
;

1709 
UINT16
 
	gucC›≥r
;

1710 
UINT16
 
	gucOM3
;

1711 }
	tSFP_TRANSFER_DISTANCE_S
;

1712 
	sègSFP_PRODUCT_DATE


1714 
UINT8
 
	gucYór
;

1715 
UINT8
 
	gucM⁄th
;

1716 
UINT8
 
	gucDay
;

1717 } 
	tSFP_PRODUCT_DATE_S
;

1720 
	sègSFP_TXRX_POWER


1722 
UINT8
 
	gaucMaxTxPowî
[
MAX_POWER_LEN
];

1723 
UINT8
 
	gaucMöTxPowî
[
MAX_POWER_LEN
];

1724 
UINT8
 
	gaucMaxRxPowî
[
MAX_POWER_LEN
];

1725 
UINT8
 
	gaucMöRxPowî
[
MAX_POWER_LEN
];

1726 } 
	tSFP_TXRX_POWER_S
;

1728 
	sègSFP_TRANSCEIVER


1730 
BOOL
 
	gbIsTwi°Paú
;

1731 
BOOL
 
	gbSupDügno°ic
;

1732 
UINT32
 
	gulModuÀTy≥
;

1733 
UINT32
 
	gulTrscvCode
;

1734 
UINT8
 
	gaucTrscvTy≥
[
MAX_TRANSCEIVER_TYPE_LEN
];

1735 
UINT8
 
	gaucC⁄√˘‹
[
MAX_CONNECTOR_TYPE_LEN
];

1736 
UINT8
 
	gaucDi°™˚
[
MAX_TRANSFER_DISTANCE_LEN
];

1737 
UINT8
 
	gaucVíd‹Name
[
MAX_SFP_VENDOR_LEN
];

1738 
UINT8
 
	gaucOrigöÆ
[
MAX_SFP_VENDOR_LEN
];

1739 
UINT8
 
	gaucP¨tNumbî
[
MAX_SFP_VENDOR_LEN
];

1740 
UINT8
 
	gaucRevNumbî
[
MAX_SFP_VENDOR_LEN
];

1741 
UINT8
 
	gaucSîülNumbî
[
MAX_SFP_VENDOR_LEN
];

1742 
UINT8
 
	gaucProdu˘D©e
[
MAX_SFP_VENDOR_LEN
];

1743 
SFP_TXRX_POWER_S
 
	g°Powî
;

1744 
SFP_PRODUCT_DATE_S
 
	g°D©e
;

1745 
SFP_TRANSFER_DISTANCE_S
 
	g°Di°™˚
;

1746 
UINT16
 
	gusWaveLí
;

1747 
UINT8
 
	gucBXIndex
;

1748 } 
	tSFP_TRANSCEIVER_S
;

1750 
	#ADDRESS_IN_USER_SPACE
 1

	)

1751 
	#ADDRESS_IN_KERNEL_SPACE
 2

	)

1753 #i‡
I2C_BUS_SUPPORT


1754 
VOID
 
Drv_I2cInô
(VOID);

1755 
UINT32
 
Drv_I2cGëFibîP‹tS≥ed
(
p‹t_num_t
 
Õ‹t
);

1756 
DRV_RET_E
 
Drv_I2cP‹tRód
(
p‹t_num_t
 
uÕ‹t
, 
UINT16
 
ucDevNo
, UINT16 
ucAddr
, 
UINT8
* 
pucD©a
, 
UINT32
 *
pulLí
, UINT8 
ucRódTy≥
);

1757 
BOOL
 
SFP_IsTP
(
UINT8
 *
pucD©a
);

1758 
UINT32
 
SFP_GëModuÀTy≥
(
UINT8
 *
pucD©a
);

1759 
VOID
 
SFP_GëBxTy≥Index
(
UINT8
 *
pucD©a
, 
UINT32
 
ulCodeVÆ
, UINT8 *
pucIndex
);

1760 
DRV_RET_E
 
SFP_GëTøns˚ivîCode
(
UINT8
 * 
pucD©a
, 
UINT32
 * 
pulCodeVÆ
);

1761 
DRV_RET_E
 
SFP_GëTøns˚ivîTy≥
(
UINT8
 *
pucD©a
, UINT8 * 
pucTy≥Så
);

1762 
DRV_RET_E
 
SFP_GëTøns„rDi°™˚
(
UINT8
 * 
pucD©a
, UINT8 * 
pucDi°™˚
, 
SFP_TRANSFER_DISTANCE_S
 * 
p°Tøns„r
);

1763 
DRV_RET_E
 
SFP_GëC⁄√˘‹Ty≥
(
UINT8
 *
pucD©a
, UINT8 * 
pucTy≥Så
);

1764 
DRV_RET_E
 
SFP_GëWaveLígth
(
UINT8
 *
pucD©a
, 
UINT16
 * 
pusWaveLí
);

1765 
DRV_RET_E
 
SFP_GëDügno°ic
(
UINT8
 *
pucD©a
, 
BOOL
 *
pbSupDügn
);

1766 
DRV_RET_E
 
SFP_GëVíd‹Name
(
UINT8
 * 
pucD©a
, UINT8 * 
pucVdName
, 
BOOL
 * 
bIsH3C
);

1767 
DRV_RET_E
 
SFP_GëOrigöÆÁ˘‹y
(
UINT8
 *
pucD©a
, UINT8 *
pucOFName
);

1768 
DRV_RET_E
 
SFP_GëTXPowî
(
UINT8
 * 
pucD©a
, UINT8 * 
pucMöTP
, UINT8 * 
pucMaxTP
, 
SFP_TXRX_POWER_S
 * 
p°TxPowî
);

1769 
DRV_RET_E
 
SFP_GëRXPowî
(
UINT8
 * 
pucD©a
, UINT8 * 
pucMöRP
, UINT8 * 
pucMaxRP
, 
SFP_TXRX_POWER_S
 * 
p°RxPowî
);

1770 
DRV_RET_E
 
SFP_GëP¨tNumbî
(
UINT8
 *
pucD©a
, UINT8 *
pucP¨tNum
);

1771 
DRV_RET_E
 
SFP_GëRevNumbî
(
UINT8
 *
pucD©a
, UINT8 *
pucRevNum
);

1772 
DRV_RET_E
 
SFP_GëSîülNumbî
(
UINT8
 *
pucD©a
, UINT8 *
pucSîülNum
);

1773 
DRV_RET_E
 
SFP_GëProdu˘D©e
(
UINT8
 *
pucD©a
, UINT8 *
pucD©e
);

1774 
DRV_RET_E
 
SFP_GëInf‹m©i⁄AŒ
(
p‹t_num_t
 
ulP‹t
, 
SFP_TRANSCEIVER_S
 *
p°SFPInfo
);

1782 
	gINOCTETS
 = 0,

1783 
	gINUCAST
,

1784 
	gINNUCAST
,

1785 
	gINDISCARDS
,

1786 
	gINERRS
,

1787 
	gINUNKNOWN
,

1788 
	gOUTOCTETS
,

1789 
	gOUTUCAST
,

1790 
	gOUTNUCAST
,

1791 
	gOUTDISCARDS
,

1792 
	gOUTERRS
,

1793 
	gOUTQLEN
,

1794 
	gHCINOCTETS
,

1795 
	gHCINUCAST
,

1796 
	gHCINMCAST
,

1797 
	gHCINBCAST
,

1798 
	gHCOUTOCTETS
,

1799 
	gHCOUTUCAST
,

1800 
	gHCOUTMCAST
,

1801 
	gHCOUTBCAST
,

1802 
	gPORTDELAYEXEEDE_DISCARDS
,

1803 
	gPORTMTUEXCEED_DISCARDS
,

1804 
	gTPPPORT_IN_FRAMES
,

1805 
	gTPPORT_OUT_FRAMS
,

1806 
	gPORT_IN_DISCARDS
,

1808 
	gDOT3STATSALIGNERR
,

1809 
	gDOT3STATSFCSERR
,

1810 
	gDOT3STATSSINGLECOLLISION
,

1811 
	gDOT3STATSMULTICOLLISION
,

1812 
	gDOT3STATSSQETESTERR
,

1813 
	gDOT3STATSDEFERREDTX
,

1814 
	gDOT3STATSLATECOLLISION
,

1815 
	gDOT3STATSEXCOLLSION
,

1816 
	gDOT3STATSINTERMACTXERR
,

1817 
	gDOT3STATSCARRIERSENSEERR
,

1818 
	gDOT3STATSFRAMETOOLONG
,

1819 
	gDOT3STATSINTERMACRXERR
,

1820 
	gDOT3STATSSYMBOLERR


1821 }
	tMIB_IfSètTy≥_t
;

1826 
	gINPUT_TOTAL_PACKETS
 = 0,

1827 
	gINPUT_TOTAL_BYTES
 = 1,

1828 
	gINPUT_TOTAL_BROADCASTS
 = 2,

1829 
	gINPUT_TOTAL_MULTICASTS
 = 3,

1830 
	gINPUT_ERRORS
 = 4,

1831 
	gINPUT_PAUSE_PACKETS
= 5,

1832 
	gOUTPUT_TOTAL_PACKETS
 = 6,

1833 
	gOUTPUT_TOTAL_BYTES
 = 7,

1834 
	gOUTPUT_TOTAL_BROADCASTS
 = 8,

1835 
	gOUTPUT_TOTAL_MULTICASTS
 = 9,

1836 
	gOUTPUT_ERRORS
 = 10,

1837 
	gOUTPUT_PAUSE_PACKETS
 = 11

1838 }
	tCou¡îName_E
;

1840 #ifde‡
CONFIG_PRODUCT_EPN204


1841 
	e°©_ªg_e


1844 
	gRxDr›Pkts
=0,

1845 
	gRxO˘ës
=1,

1846 
	gRxBrﬂdˇ°Pkts
=2,

1847 
	gRxMu…iˇ°Pkts
=3,

1848 
	gRxSACh™ges
=4,

1849 
	gRxUdîsizePkts
=5,

1850 
	gRxOvîsizePkts
=6,

1851 
	gRxFøgmít
=7,

1852 
	gRxJabbîs
=8,

1853 
	gRxUniˇ°Pkts
=9,

1854 
	gRxAlignmítEº‹s
=10,

1855 
	gRxFCSEº‹s
=11,

1856 
	gRxGoodO˘ës
=12,

1857 
	gRxEx˚ssSizeDisc
=13,

1858 
	gRxPau£Pkts
=14,

1859 
	gRxSymbﬁEº‹s
=15,

1860 
	gRxQosQPkt
=16,

1861 
	gRxQosQO˘ë
=17,

1863 
	gTxDr›Pkts
=18,

1864 
	gTxO˘ës
=19,

1865 
	gTxBrﬂdˇ°Pkts
=20,

1866 
	gTxMu…iˇ°Pkts
=21,

1867 
	gTxCﬁlisi⁄s
=22,

1868 
	gTxUniˇ°Pkts
=23,

1869 
	gTxSögÀCﬁlisi⁄
=24,

1870 
	gTxMu…ùÀCﬁlisi⁄
=25,

1871 
	gTxDe„ºedTønsmô
=26,

1872 
	gTxL©eCﬁlisi⁄
=27,

1873 
	gTxPau£Pkts
=28,

1874 
	gTxFømeInDisc
=29,

1875 
	gTxQoSQPkt
=30,

1876 
	gTxQoSQO˘ë
=31,

1877 
	gPkt64O˘ës
=32,

1878 
	gPkt65to127O˘ës
=33,

1879 
	gPkt128to255O˘ës
=34,

1880 
	gPkt256to511O˘ës
=35,

1881 
	gPkt512to1023O˘ës
=36,

1882 
	gPkt1024to1522o˘ës
=37,

1883 
	gRxEºPkts
=38,

1884 
	gTxEºPkts
=39,

1885 
	gEND_OF_STAT_REG


1886 }
	t°©_ªg_t
;

1890 
	e°©_ªg_e


1893 
	gRxDr›Pkts
=0,

1894 
	gRxO˘ës
=1,

1895 
	gRxUniˇ°Pkts
=2,

1896 
	gRxBrﬂdˇ°Pkts
=3,

1897 
	gRxMu…iˇ°Pkts
=4,

1898 
	gRxSACh™ges
=5,

1899 
	gRxFøgmít
=6,

1900 
	gRxJabbîs
=7,

1901 
	gRxAlignmítEº‹s
=8,

1902 
	gRxFCSEº‹s
=9,

1903 
	gRxGoodO˘ës
=10,

1904 
	gRxEx˚ssSizeDisc
=11,

1905 
	gRxPau£Pkts
=12,

1906 
	gRxSymbﬁEº‹s
=13,

1907 
	gRxQosQPkt
=14,

1908 
	gRxQosQO˘ë
=15,

1909 
	gRxUdîsizePkts
=16,

1910 
	gRxOvîsizePkts
=17,

1911 
	gRxPkt64O˘ës
=18,

1912 
	gRxPkt65to127O˘ës
=19,

1913 
	gRxPkt128to255O˘ës
=20,

1914 
	gRxPkt256to511O˘ës
=21,

1915 
	gRxPkt512to1023O˘ës
=22,

1916 
	gRxPkt1024to1518o˘ës
=23,

1917 
	gRxPkt1519toMAXo˘ës
=24,

1918 
	gª£rved1
=25,

1919 
	gª£rved2
=26,

1920 
	gª£rved3
=27,

1921 
	gª£rved4
=28,

1922 
	gª£rved5
=29,

1923 
	gª£rved6
=30,

1925 
	gTxDr›Pkts
=31,

1926 
	gTxO˘ës
=32,

1927 
	gTxUniˇ°Pkts
=33,

1928 
	gTxBrﬂdˇ°Pkts
=34,

1929 
	gTxMu…iˇ°Pkts
=35,

1930 
	gTxCﬁlisi⁄s
=36,

1931 
	gTxSögÀCﬁlisi⁄
=37,

1932 
	gTxMu…ùÀCﬁlisi⁄
=38,

1933 
	gTxDe„ºedTønsmô
=39,

1934 
	gTxL©eCﬁlisi⁄
=40,

1935 
	gTxPau£Pkts
=41,

1936 
	gTxFømeInDisc
=42,

1937 
	gTxQoSQPkt
=43,

1938 
	gTxQoSQO˘ë
=44,

1939 
	gTxUdîsizePkts
=45,

1940 
	gTxOvîsizePkts
=46,

1941 
	gTxPkt64O˘ës
=47,

1942 
	gTxPkt65to127O˘ës
=48,

1943 
	gTxPkt128to255O˘ës
=49,

1944 
	gTxPkt256to511O˘ës
=50,

1945 
	gTxPkt512to1023O˘ës
=51,

1946 
	gTxPkt1024to1518o˘ës
=52,

1947 
	gTxPkt1519toMAXo˘ës
=53,

1948 
	gRxEºPkts
=54,

1949 
	gTxEºPkts
=55,

1950 
	gEND_OF_STAT_REG


1951 }
	t°©_ªg_t
;

1954 
	#MIB_REG_NUM
 
END_OF_STAT_REG


	)

1955 
	#PORT_MIB_NUM
 19

	)

1956 #i‚de‡
__OPCONN_PORT_STAT__


1957 
	#__OPCONN_PORT_STAT__


	)

1958 
UINT64
 
	tp‹t_°©i°ics_t
[
MIB_REG_NUM
];

1963 
DRV_RET_E
 
Drv_InôSèti°ics
();

1964 
DRV_RET_E
 
Drv_GëP‹tCou¡î
(
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
cou¡îName
, 
UINT64
 *
ªtu∫VÆue
);

1965 
DRV_RET_E
 
Drv_GëP‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
, 
p‹t_°©i°ics_t
 *
p‹t_°©
);

1966 
DRV_RET_E
 
Drv_CÀ¨P‹tSèti°ics
(
p‹t_num_t
 
Õ‹t
);

1967 
DRV_RET_E
 
Drv_SyncP‹tSèti°ics
();

1968 
DRV_RET_E
 
Drv_MIBGëP‹tSèt
(
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
PktTy≥
, 
UINT64
 *
p_uŒSèt
);

1974 
	#DRV_RATELIMIT_NONE
 0x0

	)

1975 
	#DRV_RATELIMIT_RX
 0x01

	)

1976 
	#DRV_RATELIMIT_TX
 0x02

	)

1977 
	#MAX_100M_RATELEVEL
 (
UINT32
)(100000/64)

	)

1978 
	#MAX_1000M_RATELEVEL
 (
UINT32
)(1000000/64)

	)

1979 
	#INVALID_RATELEVEL
 (
UINT32
)((UINT32)-1/64)

	)

1981 
DRV_RET_E
 
Drv_InôLöeR©e
();

1982 
DRV_RET_E
 
Drv_SëLöeR©e
(
logic_pmask_t
 *
pLgcPMask
, 
UINT32
 
ulR©eLevñ
,

1983 
UINT32
 
ulDúe˘i⁄
, UINT32 
ulE«bÀ
);

1984 
DRV_RET_E
 
Drv_InôSt‹mC⁄åﬁ
();

1985 
DRV_RET_E
 
Drv_SëSt‹mC⁄åﬁ
(
logic_pmask_t
 *
pLgcPMask
, 
STORM_CTLTYPE_E
 
ty≥
, 
STORM_CTLRATE_S
 *
p°Såom
);

1990 
	#QOS_MAX_1P_PRIORITY
 8

	)

1991 
	#QOS_MAX_DSCP_PRIORITY
 64

	)

1992 
	#QOS_MAX_INTERNAL_PRIORITY
 8

	)

1993 
	#QOS_MAX_1P_QUEUENO
 8

	)

1995 
	#QOS_COLOR_RED
 2

	)

1996 
	#QOS_COLOR_YELLOW
 1

	)

1997 
	#QOS_COLOR_GREEEN
 0

	)

1999 
	#QOS_COS
 0

	)

2000 
	#QOS_DSCP
 1

	)

2001 
	#QOS_PORT
 2

	)

2003 #i‡
deföed
(
CHIPSET_RTL8305
Ë|| deföed(
CHIPSET_RTL9607
Ë|| deföed(
CHIPSET_RTL9601
)

2004 
	#QOS_SVLAN
 3

	)

2007 
	#QOS_COS_STR
 "cos"

	)

2008 
	#QOS_DSCP_STR
 "ds˝"

	)

2009 
	#QOS_PORT_STR
 "p‹t"

	)

2010 
	#QOS_HQ_WRR_STR
 "hq-wº"

	)

2011 
	#QOS_WRR_STR
 "wº"

	)

2014 
	sqos_8021p_to_öçri_s


2018 
UINT8
 
	göã∫ÆPri
[
QOS_MAX_1P_PRIORITY
];

2019 } 
	tqos_8021p_to_öçri_t
;

2022 
	sqos_ds˝_to_öçri_s


2026 
UINT8
 
	göã∫ÆPri
[
QOS_MAX_DSCP_PRIORITY
];

2027 } 
	tqos_ds˝_to_öçri_t
;

2030 
	#QUEUE_MODE_WRR
 0

	)

2031 
	#QUEUE_MODE_HQ_WRR
 1

	)

2032 
	#QUEUE_MODE_WFQ
 2

	)

2033 
	#QUEUE_MODE_WRR_STR
 "wº"

	)

2034 
	#QUEUE_MODE_HQ_WRR_STR
 "hq-wº"

	)

2035 
	#QUEUE_MODE_WFQ_STR
 "wfq"

	)

2036 
	#DEFAULT_QUEUE_MODE
 
QUEUE_MODE_WRR


	)

2037 
	#DEFAULT_QUEUE_WEIGHT_1
 1

	)

2038 
	#DEFAULT_QUEUE_WEIGHT_2
 2

	)

2039 
	#DEFAULT_QUEUE_WEIGHT_3
 4

	)

2040 
	#DEFAULT_QUEUE_WEIGHT_4
 8

	)

2041 
	#QUEUE_WEIGHT_COUNT
 8

	)

2043 
DRV_RET_E
 
Drv_InôQoS
();

2044 
DRV_RET_E
 
Drv_SëQosTru°Mode
 (
UINT32
 
åu°Mode
);

2045 
DRV_RET_E
 
Drv_SëQoSQueueScheduÀr
(
QueueMode_S
 *
°Queue
);

2046 
DRV_RET_E
 
Drv_SëQosDs˝M≠
(
qos_ds˝_to_öçri_t
 *
°Ds˝M≠
);

2047 
DRV_RET_E
 
Drv_SëQosCosqM≠
(
qos_8021p_to_öçri_t
 *
°CosM≠
);

2053 
	#IC_DISABLE
 0

	)

2054 
	#IC_ENABLE
 1

	)

2056 
	#IC_LOGHOST_LEN
 16

	)

2057 
	#IC_MODULE_DESC_LEN
 512

	)

2059 
CHAR
 
	tic_logho°_t
[
IC_LOGHOST_LEN
];

2060 
CHAR
 
	tic_moduÀ_desc_t
[
IC_MODULE_DESC_LEN
];

2067 
INT32
 
Drv_SwôchInô
();

2072 
DRV_RET_E
 
Drv_VœnIf_DeÁu…Desc
(
vœn_id_t
 
tdVid
);

2073 
DRV_RET_E
 
Drv_CPUP‹tToVœn
(
UINT32
 
ulA˘i⁄
, 
vœn_id_t
 
tdVid
);

2074 
DRV_RET_E
 
Drv_MVœn_Inô
();

2075 
DRV_RET_E
 
Drv_SëMVœn
(
vœn_id_t
 
tdMVid
);

2076 
DRV_RET_E
 
Drv_VœnIfCª©e
(
vœn_id_t
 
tdMVid
);

2077 
DRV_RET_E
 
Drv_VœnIfDñ
(
vœn_id_t
 
tdMVid
);

2082 
DRV_RET_E
 
Drv_SëM™ageVœn
(
UINT32
 
uiVœnId
);

2084 #i‚de‡
CONFIG_WDT


2085 
	#CONFIG_WDT
 1

	)

2088 #ifde‡ 
DRV_VLAN_DEBUG


2089 
	#Drv_debug
 
¥ötf


	)

2090 
	#Drv_debug_mask
(
±r
Ë
	`¥öt_mask
’å, 8)

	)

2092 
	#Drv_debug
(
°r
, 
_m
...)

	)

2093 
	#Drv_debug_mask
(
±r
)

	)

2099 
DRV_RET_E
 
Drv_Cª©eAΩLi°
(
VOID
 * 
p°AΩLi°Hód
);

2104 
	s_ù_fûãr_s_
 {

2105 
ù_addªss_t
 
	gù
;

2106 
p‹t_num_t
 
	glP‹t
;

2107 
vœn_id_t
 
	gvid
;

2108 
mac_addªss_t
 
	gmac
;

2109 
UINT8
 
	gvÆid
;

2110 }
	tùFûãr_t
;

2112 
	s_vœn_ötf_s_
 {

2113 
mac_addªss_t
 
	göt_mac
;

2114 
UINT32
 
	guimacRuÀid_˘ag
;

2115 
UINT32
 
	guüΩRuÀid_˘ag
;

2116 
UINT32
 
	guidh˝brd¸eqRuÀid_˘ag
;

2117 
UINT32
 
	guidh˝brd§eqRuÀid_˘ag
;

2118 
UINT32
 
	guidh˝brdßckRuÀid_˘ag
;

2119 
UINT32
 
	guidh˝brdˇckRuÀid_˘ag
;

2120 
UINT32
 
	guidh˝brd¸eqRuÀid_°ag
;

2121 
UINT32
 
	guidh˝brd§eqRuÀid_°ag
;

2122 
UINT32
 
	guidh˝brdßckRuÀid_°ag
;

2123 
UINT32
 
	guidh˝brdˇckRuÀid_°ag
;

2124 
vœn_id_t
 
	gvid
;

2125 
	gvÆid
;

2126 }
	tvœnI¡f_t
;

2130 
	eDRV_ègACL_Tru°Mode


2132 
	gDRV_ACL_TRUST_PORT
 = 1,

2133 
	gDRV_ACL_TRUST_SMAC
,

2134 
	gDRV_ACL_TRUST_DMAC
,

2135 
	gDRV_ACL_TRUST_CTAG_PRIO
,

2136 
	gDRV_ACL_TRUST_ETHTYPE
,

2137 
	gDRV_ACL_TRUST_CTAG_VID
,

2138 
	gDRV_ACL_TRUST_IPV4_SIP
,

2139 
	gDRV_ACL_TRUST_IPV4_DIP
,

2140 
	gDRV_ACL_TRUST_IPV4_PRENCEDENCE
,

2141 
	gDRV_ACL_TRUST_IPV4_TOS
,

2142 
	gDRV_ACL_TRUST_IPV4_PROTOCOL
,

2143 
	gDRV_ACL_TRUST_TCP_SPORT
,

2144 
	gDRV_ACL_TRUST_TCP_DPORT
,

2145 
	gDRV_ACL_TRUST_UDP_SPORT
,

2146 
	gDRV_ACL_TRUST_UDP_DPORT
,

2147 
	gDRV_ACL_TRUST_STAG_VID
,

2148 
	gDRV_ACL_TRUST_END


2149 }
	tDRV_ACL_TRUST_MODE_E
;

2152 
	#MAX_ACL_RULE_ID
 65535

	)

2154 
	#ACL_RULE_ADD
 1

	)

2155 
	#ACL_RULE_MOD
 2

	)

2156 
	#ACL_MOD_RULE_NOT_MIRROR
 0

	)

2159 
	#ACL_DEBUG_ENABLE
 0

	)

2162 
	#DRV_ACL_IPPROTO_HOPBYHOP
 0

	)

2163 
	#DRV_ACL_IPPROTO_ICMP
 1

	)

2164 
	#DRV_ACL_IPPROTO_IGMP
 2

	)

2165 
	#DRV_ACL_IPPROTO_GGP
 3

	)

2166 
	#DRV_ACL_IPPROTO_IP
 4

	)

2167 
	#DRV_ACL_IPPROTO_ST
 5

	)

2168 
	#DRV_ACL_IPPROTO_TCP
 6

	)

2169 
	#DRV_ACL_IPPROTO_UCL
 7

	)

2170 
	#DRV_ACL_IPPROTO_EGP
 8

	)

2171 
	#DRV_ACL_IPPROTO_IGP
 9

	)

2172 
	#DRV_ACL_IPPROTO_BBN_RCC_MON
 10

	)

2173 
	#DRV_ACL_IPPROTO_NVP_II
 11

	)

2174 
	#DRV_ACL_IPPROTO_PUP
 12

	)

2175 
	#DRV_ACL_IPPROTO_ARGUS
 13

	)

2176 
	#DRV_ACL_IPPROTO_EMCON
 14

	)

2177 
	#DRV_ACL_IPPROTO_XNET
 15

	)

2178 
	#DRV_ACL_IPPROTO_CHAOS
 16

	)

2179 
	#DRV_ACL_IPPROTO_UDP
 17

	)

2180 
	#DRV_ACL_IPPROTO_MUX
 18

	)

2181 
	#DRV_ACL_IPPROTO_DCN_MEAS
 19

	)

2182 
	#DRV_ACL_IPPROTO_HMP
 20

	)

2183 
	#DRV_ACL_IPPROTO_PRM
 21

	)

2184 
	#DRV_ACL_IPPROTO_XNS_IDP
 22

	)

2185 
	#DRV_ACL_IPPROTO_TRUNK_1
 23

	)

2186 
	#DRV_ACL_IPPROTO_TRUNK_2
 24

	)

2187 
	#DRV_ACL_IPPROTO_LEAF_1
 25

	)

2188 
	#DRV_ACL_IPPROTO_LEAF_2
 26

	)

2189 
	#DRV_ACL_IPPROTO_RDP
 27

	)

2190 
	#DRV_ACL_IPPROTO_IRTP
 28

	)

2191 
	#DRV_ACL_IPPROTO_ISO_TP4
 29

	)

2192 
	#DRV_ACL_IPPROTO_NETBLT
 30

	)

2193 
	#DRV_ACL_IPPROTO_MFE_NSP
 31

	)

2194 
	#DRV_ACL_IPPROTO_MERIT_INP
 32

	)

2195 
	#DRV_ACL_IPPROTO_SEP
 33

	)

2196 
	#DRV_ACL_IPPROTO_3PC
 34

	)

2197 
	#DRV_ACL_IPPROTO_IDPR
 35

	)

2198 
	#DRV_ACL_IPPROTO_XTP
 36

	)

2199 
	#DRV_ACL_IPPROTO_DDP
 37

	)

2200 
	#DRV_ACL_IPPROTO_IDPR_CMTP
 38

	)

2201 
	#DRV_ACL_IPPROTO_TP_P_P
 39

	)

2202 
	#DRV_ACL_IPPROTO_IL
 40

	)

2203 
	#DRV_ACL_IPPROTO_SIP
 41

	)

2204 
	#DRV_ACL_IPPROTO_SDRP
 42

	)

2205 
	#DRV_ACL_IPPROTO_SIP_SR
 43

	)

2206 
	#DRV_ACL_IPPROTO_SIP_FRAG
 44

	)

2207 
	#DRV_ACL_IPPROTO_IDRP
 45

	)

2208 
	#DRV_ACL_IPPROTO_RSVP
 46

	)

2209 
	#DRV_ACL_IPPROTO_GRE
 47

	)

2210 
	#DRV_ACL_IPPROTO_MHRP
 48

	)

2211 
	#DRV_ACL_IPPROTO_BNA
 49

	)

2212 
	#DRV_ACL_IPPROTO_SIPP_ESP
 50

	)

2213 
	#DRV_ACL_IPPROTO_SIPP_AH
 51

	)

2214 
	#DRV_ACL_IPPROTO_I_NLSP
 52

	)

2215 
	#DRV_ACL_IPPROTO_SWIPE
 53

	)

2216 
	#DRV_ACL_IPPROTO_NHRP
 54

	)

2218 
	#DRV_ACL_IPPROTO_AHIP
 61

	)

2219 
	#DRV_ACL_IPPROTO_CFTP
 62

	)

2220 
	#DRV_ACL_IPPROTO_HI
 63

	)

2221 
	#DRV_ACL_IPPROTO_SAT_EXPAK
 64

	)

2222 
	#DRV_ACL_IPPROTO_KRYPTOLAN
 65

	)

2223 
	#DRV_ACL_IPPROTO_RVD
 66

	)

2224 
	#DRV_ACL_IPPROTO_IPPC
 67

	)

2225 
	#DRV_ACL_IPPROTO_ADFS
 68

	)

2226 
	#DRV_ACL_IPPROTO_SAT_MON
 69

	)

2227 
	#DRV_ACL_IPPROTO_VISA
 70

	)

2228 
	#DRV_ACL_IPPROTO_IPCV
 71

	)

2229 
	#DRV_ACL_IPPROTO_CPNX
 72

	)

2230 
	#DRV_ACL_IPPROTO_CPHB
 73

	)

2231 
	#DRV_ACL_IPPROTO_WSN
 74

	)

2232 
	#DRV_ACL_IPPROTO_PVP
 75

	)

2233 
	#DRV_ACL_IPPROTO_BR_SAT_MON
 76

	)

2234 
	#DRV_ACL_IPPROTO_SUN_ND
 77

	)

2235 
	#DRV_ACL_IPPROTO_WB_MON
 78

	)

2236 
	#DRV_ACL_IPPROTO_WB_EXPAK
 79

	)

2237 
	#DRV_ACL_IPPROTO_ISO_IP
 80

	)

2238 
	#DRV_ACL_IPPROTO_VMTP
 81

	)

2239 
	#DRV_ACL_IPPROTO_SECURE_VMTP
 82

	)

2240 
	#DRV_ACL_IPPROTO_VINES
 83

	)

2241 
	#DRV_ACL_IPPROTO_TTP
 84

	)

2242 
	#DRV_ACL_IPPROTO_NSFNET_IGP
 85

	)

2243 
	#DRV_ACL_IPPROTO_DGP
 86

	)

2244 
	#DRV_ACL_IPPROTO_TCF
 87

	)

2245 
	#DRV_ACL_IPPROTO_IGRP
 88

	)

2246 
	#DRV_ACL_IPPROTO_OSPFIGP
 89

	)

2247 
	#DRV_ACL_IPPROTO_SPRITE_RPC
 90

	)

2248 
	#DRV_ACL_IPPROTO_LARP
 91

	)

2249 
	#DRV_ACL_IPPROTO_MTP
 92

	)

2250 
	#DRV_ACL_IPPROTO_AX_25
 93

	)

2251 
	#DRV_ACL_IPPROTO_IPIP
 94

	)

2252 
	#DRV_ACL_IPPROTO_MICP
 95

	)

2253 
	#DRV_ACL_IPPROTO_SCC_SP
 96

	)

2254 
	#DRV_ACL_IPPROTO_ETHERIP
 97

	)

2255 
	#DRV_ACL_IPPROTO_ENCAP
 98

	)

2256 
	#DRV_ACL_IPPROTO_APES
 99

	)

2257 
	#DRV_ACL_IPPROTO_GMTP
 100

	)

2258 
	#DRV_ACL_IPPROTO_L2TP
 115

	)

2259 
	#DRV_ACL_IPPROTO_ISIS
 124

	)

2261 
	#DRV_ACL_IPPROTO_ANY
 255

	)

2264 
	#MAX_ACL_NAME_LEN
 33

	)

2266 
	#ACL_RULE_PRIO_MODE_AUTO
 1

	)

2267 
	#ACL_RULE_PRIO_MODE_MAN
 2

	)

2269 
	#ACL_TYPE_MAC_BASED
 1

	)

2270 
	#ACL_TYPE_IP_BASED
 2

	)

2272 
	#ACL_RULE_ACTION_DENY
 1

	)

2273 
	#ACL_RULE_ACTION_PERMIT
 2

	)

2274 
	#ACL_RULE_ACTION_MIRROR
 3

	)

2275 
	#ACL_RULE_ACTION_METER
 4

	)

2276 
	#ACL_RULE_ACTION_NEW_PRI
 5

	)

2278 
	#ACL_RULE_ACTION_PRI_LOWEST
 0

	)

2279 
	#ACL_RULE_ACTION_PRI_LOW
 1

	)

2280 
	#ACL_RULE_ACTION_PRI_HIGH
 2

	)

2281 
	#ACL_RULE_ACTION_PRI_HIGHEST
 3

	)

2283 
	#ACL_MACRULE_QUALIFY_SRC_MAC_MASK
 0x01

	)

2284 
	#ACL_MACRULE_QUALIFY_DST_MAC_MASK
 0x02

	)

2285 
	#ACL_MACRULE_QUALIFY_VLAN_ID_MASK
 0x04

	)

2286 
	#ACL_MACRULE_QUALIFY_ETH_TYPE_MASK
 0x08

	)

2287 
	#ACL_MACRULE_QUALIFY_COS_MASK
 0x10

	)

2289 
	sdrv_a˛_li°_macBa£d_s
 {

2290 
UINT16
 
	gusA˛Prio
;

2291 
UINT16
 
	gusRuÀPrio
;

2292 
vœn_id_t
 
	gusVœnId
;

2293 
mac_addªss_t
 
	gu˝SrcMac
;

2294 
mac_addªss_t
 
	gu˝SrcMacMask
;

2295 
mac_addªss_t
 
	gu˝D°Mac
;

2296 
mac_addªss_t
 
	gu˝D°MacMask
;

2297 
UINT8
 
	gucCos
;

2298 
UINT8
 
	gucCosMask
;

2299 
UINT16
 
	gusEthîTy≥
;

2300 
UINT8
 
	gucA˘i⁄
;

2301 
UINT8
 
	gfQuÆifyFœg
;

2309 
UINT32
 
	gulIdítifõr
;

2310 
UINT8
 
	gucNewPri
;

2316 
UINT32
 
	gulMëîR©e
;

2317 
UINT8
 
	gmúr‹D°P‹t
;

2318 } 
	tdrv_a˛_li°_macBa£d_t
;

2320 
	#ACL_IPRULE_QUALIFY_SRC_L4_PORT_MASK
 0x01

	)

2321 
	#ACL_IPRULE_QUALIFY_DST_L4_PORT_MASK
 0x02

	)

2322 
	#ACL_IPRULE_QUALIFY_TCP_FLAG_MASK
 0x04

	)

2323 
	#ACL_IPRULE_QUALIFY_SRC_IP_MASK
 0x08

	)

2324 
	#ACL_IPRULE_QUALIFY_DST_IP_MASK
 0x10

	)

2325 
	#ACL_IPRULE_QUALIFY_DSCP_MASK
 0x20

	)

2326 
	#ACL_IPRULE_QUALIFY_IP_PRECEDENCE_MASK
 0x40

	)

2327 
	#ACL_IPRULE_QUALIFY_IP_PROTO_MASK
 0x80

	)

2329 
	#ACL_IPRULE_QUALIFY_TCP_FIN_MASK
 0x01

	)

2330 
	#ACL_IPRULE_QUALIFY_TCP_SYN_MASK
 0x02

	)

2331 
	#ACL_IPRULE_QUALIFY_TCP_RST_MASK
 0x04

	)

2332 
	#ACL_IPRULE_QUALIFY_TCP_PUSH_MASK
 0x08

	)

2333 
	#ACL_IPRULE_QUALIFY_TCP_ACK_MASK
 0x10

	)

2334 
	#ACL_IPRULE_QUALIFY_TCP_URGENT_MASK
 0x20

	)

2337 
	sdrv_a˛_li°_ùBa£d_s
 {

2338 
UINT16
 
	gusA˛Prio
;

2339 
UINT16
 
	gusRuÀPrio
;

2340 
UINT8
 
	gucIpPrŸocﬁ
;

2341 
UINT16
 
	gusSrcL4P‹t
;

2347 
UINT16
 
	gusD°L4P‹t
;

2348 
ù_addªss_t
 
	gucSrcIpAdd
;

2349 
ù_addªss_t
 
	gucSrcIpAddMask
;

2350 
ù_addªss_t
 
	gucD°IpAdd
;

2351 
ù_addªss_t
 
	gucD°IpAddMask
;

2352 
UINT8
 
	gfT˝Fœg
;

2353 
UINT8
 
	gfT˝FœgMask
;

2354 
UINT8
 
	gucTos
;

2355 
UINT8
 
	gucA˘i⁄
;

2356 
UINT8
 
	gfQuÆifyFœg
;

2367 
UINT32
 
	gulIdítifõr
;

2368 
UINT8
 
	gucNewPri
;

2374 
UINT32
 
	gulMëîR©e
;

2375 
UINT8
 
	gmúr‹D°P‹t
;

2376 } 
	tdrv_a˛_li°_ùBa£d_t
;

2379 
	sdrv_a˛_li°_comm⁄_s
 {

2380 
UINT16
 
	gusA˛Prio
;

2381 
UINT8
 
	gbA˛RuÀPrioMode
;

2385 
CHAR
 
	gszA˛Name
[
MAX_ACL_NAME_LEN
];

2386 
UINT8
 
	gucA˛Ty≥
;

2387 } 
	tdrv_a˛_li°_comm⁄_t
;

2390 
	sdrv_a˛_böd_s
 {

2391 
UINT16
 
	gusA˛Prio
;

2392 
logic_pmask_t
 
	g°P‹tMask
;

2393 
UINT16
 
	gusVid
;

2394 }
	tdrv_a˛_böd_t
;

2396 
	sdrv_a˛_ruÀ_lök_s
 {

2397 *
	gp°RuÀ
;

2398 
drv_a˛_ruÀ_lök_s
 *
	gp°RuÀLökPª
;

2399 
drv_a˛_ruÀ_lök_s
 *
	gp°RuÀLökNxt
;

2400 
UINT16
 
	gusKeyBôWide
;

2401 
UINT16
 
	gusPri‹ôy
;

2402 
UINT32
 
	gulIdítifõr
;

2403 }
	tdrv_a˛_ruÀ_lök_t
;

2405 
	sdrv_a˛_li°_comm⁄_lök_s
 {

2406 
drv_a˛_ruÀ_lök_t
 *
	gp°RuÀHód
;

2407 
UINT16
 
	gusA˛Prio
;

2408 
UINT16
 
	gusTŸÆRuÀ
;

2409 
UINT8
 
	gucRuÀTy≥
;

2410 } 
	tdrv_a˛_li°_comm⁄_lök_t
;

2413 
	gWORM_FILTER_DROP
,

2414 
	gDOS_DROP
,

2415 
	gCASHER_CHANGE_PRI
,

2416 
	gIMP_BIND_DROPCANCEL
,

2417 
	gIMP_BIND_DROP
,

2418 
	gDOS_METER
,

2419 
	gARP_TRUST_COPY
,

2420 
	gARP_SNOOPING_EN
,

2421 
	gACL_MIRROR
,

2422 
	gACL_MIRROR_CANCEL
,

2423 
	gIP_FILTER_DROP
,

2424 
	gDHCP_CLIENT_PASS
,

2425 
	gDHCP_SERVER_DROP
,

2426 
	gDHCP_SERVER_COPY
,

2427 
	gMAC_ACL_BIND_ENTRY
,

2428 
	gIP_ACL_BIND_ENTRY
,

2429 
	gCPU_ATTACK_PREVENT
,

2430 
	gARP_ATTACK_DROP
,

2431 
	gVOICE_VLAN_ACL
,

2432 
	gSWITCH_DSTMAC_COPY
,

2433 
	gCPU_ATTACK_BC
,

2434 
	gDOT1X_EAP_COPY
,

2435 
	gACL_MODULE_TYPE_MAX


2436 }
	tfõld_íåy_¥i_ty≥
;

2438 
	#ACL_ALLOC
 1

	)

2439 
	#ACL_FREE
 0

	)

2441 
	sa˛_ªs_mng_s
 {

2442 
UINT32
 
	gdevi˚_˙t
;

2443 
UINT32
 
	ggroup1_˙t
;

2444 
UINT32
 
	ggroup2_˙t
;

2445 
UINT32
 
	ggroup3_˙t
;

2446 
UINT32
 
	ggroup4_˙t
;

2447 
UINT32
 
	ggroup1_u£d
;

2448 
UINT32
 
	ggroup2_u£d
;

2449 
UINT32
 
	ggroup3_u£d
;

2450 
UINT32
 
	ggroup4_u£d
;

2451 
UINT32
 
	ga˛_moduÀ_u£d
[
ACL_MODULE_TYPE_MAX
];

2452 }
	ta˛_ªs_mng_t
;

2454 #i‡
CONFIG_WDT


2455 
Drv_upd©eW©chdog
();

2458 
DRV_RET_E
 
Drv_A˛Inô
();

2459 
DRV_RET_E
 
Drv_A˛Te°
();

2460 
DRV_RET_E
 
drv_a˛_gë_em±y
(
UINT16
 *
pusA˛Prio
);

2461 
DRV_RET_E
 
drv_mac_a˛_gë_em±y
(
UINT16
 *
pusA˛Prio
);

2462 
DRV_RET_E
 
drv_ù_a˛_gë_em±y
(
UINT16
 *
pusA˛Prio
);

2463 
DRV_RET_E
 
drv_a˛_¸óã
(
drv_a˛_li°_comm⁄_t
 *
p°A˛E¡ry
);

2464 
BOOL
 
drv_a˛_mbRuÀ_isExi°
(
UINT16
 
usA˛Prio
, UINT16 
usRuÀPrio
, 
UINT32
 * 
ulRuÀIdíti„r
);

2465 
BOOL
 
drv_a˛_ibRuÀ_isExi°
(
UINT16
 
usA˛Prio
, UINT16 
usRuÀPrio
, 
UINT32
 * 
ulRuÀIdíti„r
);

2466 
DRV_RET_E
 
drv_a˛_ruÀ_ªmove_f‹Cli
(
UINT16
 
usA˛Prio
, UINT16 
usRuÀPrio
);

2467 
DRV_RET_E
 
drv_a˛_£t_«me
(
UINT16
 
usA˛Prio
, 
CHAR
 * 
ucName
);

2468 
DRV_RET_E
 
drv_a˛_ªmove_«me
(
UINT16
 
usA˛Prio
);

2469 
DRV_RET_E
 
drv_a˛_c›y
(
UINT16
 
usC›yFrom
, UINT16 
usNewA˛Prio
, 
CHAR
 *
szA˛Name
, 
UINT8
 
ucNameLí
);

2470 
DRV_RET_E
 
drv_a˛_ibRuÀ_mod
(
drv_a˛_li°_ùBa£d_t
 *
p°A˛IpRuÀ
, 
UINT32
 
ulRuÀIdíti„r
);

2471 
DRV_RET_E
 
drv_a˛_mbRuÀ_mod
(
drv_a˛_li°_macBa£d_t
 *
p°A˛MacRuÀ
, 
UINT32
 
ulRuÀIdíti„r
);

2472 
DRV_RET_E
 
drv_a˛_ibRuÀ_add
(
drv_a˛_li°_ùBa£d_t
 *
p°A˛IpRuÀ
, 
UINT32
 *
pulRuÀIdíti„r
);

2473 
DRV_RET_E
 
drv_a˛_mbRuÀ_add
(
drv_a˛_li°_macBa£d_t
 *
p°A˛MacRuÀ
, 
UINT32
 *
pulRuÀIdíti„r
);

2474 
DRV_RET_E
 
drv_a˛_ruÀ_ªmove
(
UINT16
 
usA˛Prio
, 
UINT32
 
ulRuÀIdíti„r
);

2475 
DRV_RET_E
 
drv_a˛_ruÀ_ªmove_Æl
(
UINT16
 
usA˛Prio
);

2476 
DRV_RET_E
 
drv_a˛_böd_p‹t
(
logic_pmask_t
 *
pbmp
, 
UINT16
 
usA˛Prio
);

2477 
DRV_RET_E
 
drv_a˛_böd_vœn
(
vœn_id_t
 
usVid
, 
UINT16
 
usA˛Prio
);

2478 
DRV_RET_E
 
drv_a˛_unböd_vœn
(
vœn_id_t
 
usVid
, 
UINT16
 
usA˛Prio
);

2479 
DRV_RET_E
 
drv_a˛_unböd_p‹t
(
logic_pmask_t
 *
pbmp
, 
UINT16
 
usA˛Prio
);

2480 
DRV_RET_E
 
drv_a˛_ªmove
(
UINT16
 
usA˛Prio
);

2481 
DRV_RET_E
 
drv_a˛_di•_ruÀ
(
UINT16
 
usA˛Prio
);

2482 
DRV_RET_E
 
Voi˚VLAN_SëACL
 (
p‹t_num_t
 
Õ‹t
, 
UINT16
 
usVœnId
, 
UINT8
 
ucOUI
[6],

2483 
UINT8
 
ucOUImask
[6], UINT8 
ucCos
, UINT8 
ucDs˝
);

2484 
DRV_RET_E
 
Voi˚VLAN_DñACL
 (
p‹t_num_t
 
Õ‹t
, 
UINT16
 
usVœnId
, 
UINT8
 
ucOUI
[6],

2485 
UINT8
 
ucOUImask
[6], UINT8 
ucCos
, UINT8 
ucDs˝
);

2487 
DRV_RET_E
 
drv_a˛_¸óã_BpduLimô
(
p‹t_num_t
 
Õ‹t
, 
UINT8
 
ucLa°DMacByã
,

2488 
UINT8
 
ucLa°DMacByãMask
, 
UINT32
 
ulR©e
);

2489 
DRV_RET_E
 
drv_a˛_dñ_BpduLimô
(
p‹t_num_t
 
Õ‹t
, 
UINT8
 
ucLa°DMacByã
,

2490 
UINT8
 
ucLa°DMacByãMask
, 
UINT32
 
ulR©e
);

2492 
DRV_RET_E
 
drv_a˛_upd©e_˝u_mac
();

2493 
DRV_RET_E
 
drv_a˛_upd©e_˝u_ù
();

2494 #ifde‡
CONFIG_DHCPSP


2495 
DRV_RET_E
 
drv_dh˝•_åu°_p‹t
(
p‹t_num_t
 
Õ‹t
, 
UINT8
 
íabÀ
);

2496 
DRV_RET_E
 
drv_dh˝•_íabÀ
(
UINT8
 
íabÀ
);

2497 
DRV_RET_E
 
drv_dh˝•_öô
();

2498 
DRV_RET_E
 
drv_dh˝•_ùfûãr_íabÀ
(
p‹t_num_t
 
Õ‹t
, 
UINT8
 
íabÀ
);

2500 
DRV_RET_E
 
drv_dh˝•_dr›_¨p
(
BOOL
 
íabÀ
);

2502 
DRV_RET_E
 
drv_gë_a˛E¡ry
(
UINT16
 
usIndex
, 
drv_a˛_li°_comm⁄_t
 * 
p°a˛E¡ry
);

2503 
DRV_RET_E
 
drv_gë_a˛Böd
(
UINT16
 
usIndex
, 
drv_a˛_böd_t
 * 
p°a˛Böd
);

2504 
UINT32
 
drv_a˛_gë_a˛_˙t
(
UINT16
 
usA˛Púo
);

2505 
DRV_RET_E
 
drv_a˛_sync_böd_˛ór
(
logic_pmask_t
 * 
p°P‹tMask
);

2506 
DRV_RET_E
 
drv_a˛_sync_böd
(
p‹t_num_t
 
lP‹tNo
, 
logic_pmask_t
 * 
p°P‹tMask
);

2511 
DRV_RET_E
 
Drv_InôEEE
();

2512 
DRV_RET_E
 
Drv_SëEEEE«bÀ
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

2513 
DRV_RET_E
 
Drv_InôAutoPwrDwn
();

2514 
DRV_RET_E
 
Drv_SëAutoPwrDwnE«bÀ
(
logic_pmask_t
 *
∂p‹tMask
, 
BOOL
 
íabÀ
);

2524 
drv_›l_C⁄√˘
();

2525 
drv_›l_ªcvBuf
(
sock
, 
UCHAR
 *
pBuf
, 
iBufLí
);

2526 
drv_›l_£ndBuf
(
sock
, 
UCHAR
 *
pBuf
, 
iBufLí
);

2527 
¥öt2c⁄sﬁe
(*
fmt
, ...);

2532 
	gCABLE_STATE_OK
 = 0,

2533 
	gCABLE_STATE_OPEN
,

2534 
	gCABLE_STATE_SHORT
,

2535 
	gCABLE_STATE_OPENSHORT
,

2536 
	gCABLE_STATE_CROSSTALK
,

2537 
	gCABLE_STATE_UNKNOWN
,

2538 
	gCABLE_STATE_COUNT


2539 }
	tˇbÀ_°©e_t
;

2541 
	sˇbÀ_düg_s
{

2542 
ˇbÀ_°©e_t
 
	g°©e
;

2543 
UINT8
 
	g≈aús
;

2544 
ˇbÀ_°©e_t
 
	g∑ú_°©e
[4];

2545 
UINT16
 
	g∑ú_Àn
[4];

2546 
UINT8
 
	gfuzz_Àn
;

2547 }
	tˇbÀ_düg_t
;

2549 
DRV_RET_E
 
Drv_gëCabÀDüg
(
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°Düg
);

2550 
	#L2_LOGIC_ENABLE
 1

	)

2551 
	#L2_LOGIC_DISABLE
 0

	)

2552 
	#L2_NO_PRIORITY
 0xff

	)

2553 
	sègSídOp
{

2554 
logic_pmask_t
 
	gp‹tmask
;

2555 
UINT8
 
	gucLogicE«bÀ
;

2559 
UINT16
 
	gusVid
;

2560 
UINT8
 
	gucPri‹ôy
;

2561 
UINT8
 
	gucDevid
;

2562 }
	tl2_£nd_›
;

2563 
	smw_l2_˘l_s


2565 
	g¶l_p‹t
;

2566 
	g¶l_vœnid
;

2569 
DRV_RET_E
 
Drv_Lo›BackExã∫Æ
 (
p‹t_num_t
 
Õ‹t
);

2570 
DRV_RET_E
 
Drv_Lo›BackI¡î«l
 (
p‹t_num_t
 
Õ‹t
);

2574 #i‡
deföed
(
CHIPSET_RTL8305
Ë|| deföed(
CHIPSET_RTL9607
Ë|| deföed(
CHIPSET_RTL9601
)

2576 
	#SWITCH_HEADER_POSITION_BEHIND_SRC_MAC
 0

	)

2579 
	#ACL_RULE_NUM_MAX
 64

	)

2580 
	#CLF_RULE_NUM_MAX
 512

	)

2582 
	#SWITCH_CPU_PHY_PORT
 6

	)

2583 
	#SWITCH_UPLINK_PHY_PORT
 6

	)

2585 
	svœn_p‹t_ba£_íåy


2587 
	gevid
;

2588 
	gmbr
;

2589 
	gfid_m°i
;

2590 
	gívœ≈ﬁ
;

2591 
	gmëîidx
;

2592 
	gvb≥n
;

2593 
	gvb¥i
;

2594 }
	tvœn_p‹t_ba£_íåy_t
;

2596 
	#ACL_RULE_NUM_MAX
 0

	)

2598 
	#SWITCH_CPU_PHY_PORT
 0

	)

2599 
	#SWITCH_UPLINK_PHY_PORT
 0

	)

2601 
	#ACL_RULE_ID_IVALLID
 0xFFFF

	)

2603 
	#DEFAULT_VLAN_ID
 0

	)

2604 
	#DEFAULT_SVLAN_MEM_CFG_ENTRY
 63

	)

2605 
	#DEFAULT_SVLAN_ID
 4095

	)

2606 
	#CTC_VLAN_TRANSL_PAIR_NUM_MAX
 31

	)

2607 
	#CTC_CLF_REMARK_RULE_NUM_MAX
 8

	)

2608 
	#EOAM_FILTER_RULE_NUM_MAX
 32

	)

2609 
	#MAX_QINQ_CTAG_STAG_ENTRY
 8

	)

2610 
	#MAX_QINQ_CTAG_NUM
 32

	)

2611 
	#QINQ_CLASS_NAME_LEN
 32

	)

2613 #i‡
deföed
(
CONFIG_PRODUCT_EPN104
)

2614 
	#LOGIC_PON_PORT
 
LOGIC_CPU_PORT


	)

2615 #ñi‡
deföed
(
CONFIG_PRODUCT_EPN104N
Ë|| deföed (
CONFIG_PRODUCT_5500
Ë|| deföed(
CONFIG_PRODUCT_EPN104W
Ë|| deföed(
CONFIG_PRODUCT_EPN101R
Ë|| deföed(
CONFIG_PRODUCT_EPN101ZG
Ë|| deföed(
CONFIG_PRODUCT_EPN104ZG
Ë|| deföed(
CONFIG_PRODUCT_EPN104ZG_A
Ë|| deföed(
CONFIG_PRODUCT_EPN105
Ë|| deföed(
CONFIG_PRODUCT_GPN104N
)

2616 
	#LOGIC_PON_PORT
 
LOGIC_PORT_NO
 + 1

	)

2618 
	#LOGIC_PON_PORT
 
INVALID_PORT


	)

2620 
	#LOGIC_UPPON_PORT
 
LOGIC_PON_PORT


	)

2622 
	eègMCAST_UnknowA˘


2624 
	gMCAST_ACT_FORWARD
 = 0,

2625 
	gMCAST_ACT_DROP
,

2626 
	gMCAST_ACT_TRAP2CPU
,

2627 
	gMCAST_ACT_ROUTER_PORT
,

2628 
	gMCAST_ACT_END


2629 } 
	tMCAST_UNKNOW_ACT_E
;

2631 
	eègACL_Tru°Mode


2633 
	gACL_TRUST_PORT
 = 1,

2634 
	gACL_TRUST_SMAC
,

2635 
	gACL_TRUST_DMAC
,

2636 
	gACL_TRUST_CTAG_PRIO
,

2637 
	gACL_TRUST_ETHTYPE
,

2638 
	gACL_TRUST_CTAG_VID
,

2639 
	gACL_TRUST_IPV4_SIP
,

2640 
	gACL_TRUST_IPV4_DIP
,

2641 
	gACL_TRUST_IPV4_PRENCEDENCE
,

2642 
	gACL_TRUST_IPV4_TOS
,

2643 
	gACL_TRUST_IPV4_PROTOCOL
,

2644 
	gACL_TRUST_TCP_SPORT
,

2645 
	gACL_TRUST_TCP_DPORT
,

2646 
	gACL_TRUST_UDP_SPORT
,

2647 
	gACL_TRUST_UDP_DPORT
,

2648 
	gACL_TRUST_STAG_VID
,

2649 
	gACL_TRUST_END


2650 }
	tACL_TRUST_MODE_E
;

2652 
	eègACL_A˘i⁄


2654 
	gACL_ACTION_REMATK_PRIORITY
 = 0,

2655 
	gACL_ACTION_MIRROR
,

2656 
	gACL_ACTION_CVLAN_REMARK
,

2657 
	gACL_ACTION_CVLAN_ASSIGN
,

2658 
	gACL_ACTION_SVLAN_REMARK
,

2659 
	gACL_ACTION_COPY_TO_PORTS
,

2660 
	gACL_ACTION_REDIRECT_TO_PORTS
,

2661 
	gACL_ACTION_COPY_TO_CPU
,

2662 
	gACL_ACTION_TRAP_TO_CPU
,

2663 
	gACL_ACTION_POLICING_0
,

2664 
	gACL_ACTION_DROP
,

2665 
	gACL_ACTION_END


2666 }
	tACL_ACTION_E
;

2669 
	eègDr›Lo›d_O≥øti⁄


2671 
	gACL_DROPLOOPD_ADD_PORT
,

2672 
	gACL_DROPLOOPD_REMOVE_PORT
,

2673 
	gACL_DROPLOOPD_END


2674 }
	tDROP_LOOPD_OP_E
;

2677 
	eègACL_Dúe˘i⁄


2679 
	gACL_DIRECTION_UPLINK
,

2680 
	gACL_DIRECTION_DOWNLINK
,

2681 
	gACL_DIRECTION_BOTH
,

2682 
	gACL_DIRECTION_END


2683 }
	tACL_DIRECTION_E
;

2685 
	eègCTC_VœnMemMode


2687 
	gVLAN_MEM_UNTAG
,

2688 
	gVLAN_MEM_TAG
,

2689 
	gVLAN_MEM_NO
,

2690 
	gVLAN_MEM_END


2691 } 
	tCTC_VLAN_MEM_E
;

2693 
	eègCTC_VœnMode


2695 
	gCTC_VLAN_MODE_TRANSPARENT
 = 0x01,

2696 
	gCTC_VLAN_MODE_TAG
 = 0x02,

2697 
	gCTC_VLAN_MODE_TRANSLATION
 = 0x03,

2698 
	gCTC_VLAN_MODE_QINQ
 = 0x04,

2699 
	gCTC_VLAN_MODE_TRUNK
 = 0x05,

2700 
	gCTC_VLAN_MODE_END


2701 } 
	tCTC_VLAN_MODE_E
;

2703 
	sègCTC_VœnCfg


2705 
CTC_VLAN_MODE_E
 
	gmode
;

2706 
UINT32
 
	gdeÁu…_vœn
;

2707 
UINT32
 
	guiPri‹ôy
;

2708 
UINT32
 
	gvœn_li°
[
CTC_VLAN_TRANSL_PAIR_NUM_MAX
];

2709 
UINT32
 
	gnumbî_of_íåõs
;

2710 
UINT32
 
	gnumbî_of_a˛_ruÀs
;

2711 
UINT32
 
	ga˛_li°
[
ACL_RULE_NUM_MAX
];

2713 } 
	tCTC_VLAN_CFG_S
;

2715 
	sègPORT_ClfRem¨kCfg


2717 
UINT32
 
	guiClfRmkRuÀNum
;

2720 
UINT32
 
	gauiA˛Li°
[
CTC_CLF_REMARK_RULE_NUM_MAX
*2];

2721 
ACL_TRUST_MODE_E
 
	g´nClfRem¨kMode
[
CTC_CLF_REMARK_RULE_NUM_MAX
*2];

2722 } 
	tPORT_CLF_REMAERK_CFG_S
;

2724 
	sègPORT_ClfPri2QueueCfg


2726 
UINT32
 
	guiClfRmkRuÀNum
;

2729 
UINT32
 
	gauiClfLi°
[
CTC_CLF_REMARK_RULE_NUM_MAX
*2];

2730 } 
	tPORT_CLF_PRI_TO_QUEUE_CFG_S
;

2732 
	sègPORT_FûãrCfg


2734 
UINT32
 
	guiFûãrRuÀNum
;

2735 
UINT32
 
	gauiA˛Li°
[
EOAM_FILTER_RULE_NUM_MAX
*2];

2736 
ACL_TRUST_MODE_E
 
	g´nFûërkMode
[
EOAM_FILTER_RULE_NUM_MAX
*2];

2737 } 
	tPORT_FILTER_CFG_S
;

2741 
	#CTC_MC_MAX_GROUP_NUM
 64

	)

2742 
	#CTC_MC_VLAN_ID_IVALID
 0xFFFF

	)

2743 
	sègPORT_McVœnCfg


2745 
UINT32
 
	guiMcVœnNum
;

2746 
UINT32
 
	gauiA˛Li°
[
CTC_MC_MAX_GROUP_NUM
];

2747 
UINT32
 
	gauiVœnLi°
[
CTC_MC_MAX_GROUP_NUM
];

2748 } 
	tPORT_MC_VLAN_CFG_S
;

2751 
	sègQöq_Cèg_Sèg_E¡ry


2753 
BOOL
 
	gbAŒCègVid
;

2754 
UINT32
 
	guiCègVidNum
;

2755 
UINT32
 
	gauiCègVid
[
MAX_QINQ_CTAG_NUM
];

2756 
UINT32
 
	guiSègVid
;

2757 
UINT32
 
	guiSègPri
;

2758 
UINT32
 
	guiA˛CœssNum
;

2759 
	ga°rA˛CœssName
[
MAX_QINQ_CTAG_NUM
+1][
QINQ_CLASS_NAME_LEN
];

2760 }
	tQINQ_CTAG_STAG_ENTRY_S
;

2762 
	sègP‹t_Qöq


2764 
BOOL
 
	gbE«bÀ
;

2765 
UINT32
 
	guiTpid
;

2766 
UINT32
 
	guiPvid
;

2767 
UINT32
 
	guiPri‹ôy
;

2768 
UINT32
 
	guiCègSègE¡ryNum
;

2769 
QINQ_CTAG_STAG_ENTRY_S
 
	ga°CègSègE¡ry
[
MAX_QINQ_CTAG_STAG_ENTRY
];

2772 }
	tPORT_QINQ_S
;

2774 
	eègPORT_Ingªss_Mode


2776 
	gPORT_IN_FRAM_BOTH
 = 0,

2777 
	gPORT_IN_FRAM_TAGGED_ONLY
,

2778 
	gPORT_IN_FRAM_UNTAGGED_ONLY
,

2779 
	gPORT_IN_FRAM_END


2780 } 
	tPORT_INGRESS_MODE_E
;

2782 
	eègPORT_Egªss_Mode


2784 
	gPORT_EG_TAG_MODE_ORI
 = 0,

2785 
	gPORT_EG_TAG_MODE_KEEP
,

2786 
	gPORT_EG_TAG_MODE_PRI_TAG
,

2787 
	gPORT_EG_TAG_MODE_REAL_KEEP
,

2788 
	gPORT_EG_TAG_MODE_END


2789 } 
	tPORT_EGRESS_MODE_E
;

2795 
	eègPORT_Sç_°©e


2797 
	gPORT_STATE_DISABLED
 = 0,

2798 
	gPORT_STATE_BLOCKING
,

2799 
	gPORT_STATE_LEARNING
,

2800 
	gPORT_STATE_FORWARDING
,

2801 
	gPORT_STATE_END


2802 }
	tPORT_STP_STATE_E
;

2805 
	eègPORT_ALERT_PONSTATUS


2807 
	gPORT_ALERT_PON_ALWAYS_LASER_ON
 = 1,

2808 
	gPORT_ALERT_PON_ALWAYS_LASER_RECOVER
,

2809 
	gPORT_ALERT_PON_BUTT


2810 }
	tPORT_ALERT_PONSTATUS_E
;

2812 #ifde‡ 
__˝lu•lus


	@lw_drv_req.h

4 #i‚de‡
_DRV_REQ_H_


5 
	#_DRV_REQ_H_


	)

7 #ifde‡ 
__˝lu•lus


11 
	~<lw_c⁄fig.h
>

12 
	#DEV_SWTICH
 "l2swôch"

	)

13 
	#DEV_PORT_NA
 1

	)

15 
	#SIOCDRVPRIVATE
 (
SIOCDEVPRIVATE
 + 12)

	)

16 
	#TIOTTYCLOSE
 (
SIOCDEVPRIVATE
 + 19Ë

	)

18 
	#IOCTL_SUPPORT_MAX_PARA_NUM
 3

	)

20 
	#DRV_SPEED_0M
 0

	)

21 
	#DRV_SPEED_10M
 1

	)

22 
	#DRV_SPEED_100M
 2

	)

23 
	#DRV_SPEED_1000M
 3

	)

24 
	#DRV_SPEED_AUTO
 4

	)

26 
	#DRV_DEPLUX_HALF
 1

	)

27 
	#DRV_DEPLUX_FULL
 2

	)

28 
	#DRV_DEPLUX_AUTO
 3

	)

30 
	#DRV_PORT_LINKDOWN
 1

	)

31 
	#DRV_PORT_LINKUP
 2

	)

34 
	#MONITOR_INIT
 0xff

	)

35 
	#DBG_COM_LEN
 4

	)

38 
	#DRV_GPIO_0_SPI
 0

	)

39 
	#DRV_GPIO_1_SPI
 1

	)

40 
	#DRV_GPIO_2_SPI
 2

	)

41 
	#DRV_GPIO_3_SS0
 3

	)

42 
	#DRV_GPIO_4_UART
 4

	)

43 
	#DRV_GPIO_5_UART
 5

	)

44 
	#DRV_GPIO_6_I2C
 6

	)

45 
	#DRV_GPIO_7_I2C
 7

	)

46 
	#DRV_GPIO_8_SS1
 8

	)

47 
	#DRV_GPIO_9_SS2
 9

	)

49 
	#DRV_GPIO_9_PON_TX
 9

	)

51 
	#DRV_GPIO_10_TX
 10

	)

52 
	#DRV_GPIO_11_VCCT
 11

	)

54 
	#DRV_SYS_LED_FILED_OFFSET
 8

	)

57 
	#DRV_GPIO_WORKMODE_GPIO
 0

	)

58 
	#DRV_GPIO_WORKMODE_SPI
 1

	)

59 
	#DRV_GPIO_WORKMODE_UART
 1

	)

60 
	#DRV_GPIO_WORKMODE_I2C
 1

	)

63 
	#DRV_GPIO_VALUE_LOW
 0

	)

64 
	#DRV_GPIO_VALUE_HIGH
 1

	)

67 
	#WIDE_BYTE
 0

	)

68 
	#WIDE_HWORD
 1

	)

69 
	#WIDE_WORD
 2

	)

70 
	#WIDE_DWORD
 3

	)

72 
	#OPERATION_TYPE_NO
 0

	)

73 
	#OPERATION_TYPE_RDB
 1

	)

74 
	#OPERATION_TYPE_RDH
 2

	)

75 
	#OPERATION_TYPE_RD
 3

	)

76 
	#OPERATION_TYPE_RDD
 4

	)

77 
	#OPERATION_TYPE_CPB
 5

	)

78 
	#OPERATION_TYPE_CPH
 6

	)

79 
	#OPERATION_TYPE_CP
 7

	)

80 
	#OPERATION_TYPE_CPD
 8

	)

81 
	#OPERATION_TYPE_WRB
 9

	)

82 
	#OPERATION_TYPE_WRH
 10

	)

83 
	#OPERATION_TYPE_WR
 11

	)

84 
	#OPERATION_TYPE_WRD
 12

	)

85 
	#OPERATION_TYPE_ER
 13

	)

86 
	#OPERATION_TYPE_NUM
 14

	)

88 
	#OPERATION_VAL_MAX_BYTE
 256

	)

89 
	#OPERATION_VAL_MAX_HWORD
 (
OPERATION_VAL_MAX_BYTE
/2)

	)

90 
	#OPERATION_VAL_MAX_WORD
 (
OPERATION_VAL_MAX_BYTE
/4)

	)

91 
	#OPERATION_VAL_MAX_DWORD
 (
OPERATION_VAL_MAX_BYTE
/8)

	)

94 
	eègDrv_cmd
{

95 
DRV_CMD_FIBER_CFG_INIT
 ,

96 
DRV_CMD_COPPER_CFG_INIT
,

97 
DRV_CMD_SET_MEDIUM
,

98 
DRV_CMD_SET_PRIORITY
,

99 
DRV_CMD_SET_MDIX
,

100 
DRV_CMD_SET_PORTENABLE
,

101 
DRV_CMD_SET_JUMBO
,

102 
DRV_CMD_SET_TXRX
,

103 
DRV_CMD_SET_ABILITY
,

104 
DRV_CMD_SET_AUTONEG
,

105 
DRV_CMD_GET_AUTONEG
,

106 
DRV_CMD_SET_SPEED
,

107 
DRV_CMD_SET_DUPLEX
,

108 
DRV_CMD_SET_SPDLX
 ,

109 
DRV_CMD_GET_SPDLX_SET
,

110 
DRV_CMD_SET_PHYREG
,

111 
DRV_CMD_SET_PAUSE
,

112 
DRV_CMD_GET_PORTMEDIUM
,

113 
DRV_CMD_GET_CUR_LINK
,

114 
DRV_CMD_GET_PORTABILITY
,

115 
DRV_CMD_GET_PORTSPEED
,

116 
DRV_CMD_GET_PORTDUPLEX
,

117 
DRV_CMD_GET_PHYREG
,

118 
DRV_CMD_GET_LINK_MASK
 ,

119 
DRV_CMD_GET_MEDIA_FIBER_MASK
,

120 
DRV_CMD_GET_PORTMDIX
,

121 
DRV_CMD_GET_PORTPRIO
,

122 
DRV_CMD_GET_PORTFLOWCTRL
,

123 
DRV_CMD_GET_PORTJUMBO
,

124 
DRV_CMD_GET_PORTFRAMELEN
,

125 
DRV_CMD_SET_PORTFRAMELEN
,

126 
DRV_CMD_GET_FIBERPORTSPEED
,

127 
DRV_CMD_SET_ETHDBG
,

128 
DRV_CMD_SET_AGGRMODE
,

129 
DRV_CMD_SET_AGGRGROUP
,

130 
DRV_CMD_GET_AGGRGROUP
,

131 
DRV_CMD_SET_AGGR_GLOBAL_CFG_FLAG
,

132 
DRV_CMD_GET_AGGR_GLOBAL_CFG_FLAG
,

133 
DRV_CMD_STP_INIT
,

134 
DRV_CMD_STP_INSTANCE_CREATE
,

135 
DRV_CMD_STP_INSTANCE_DESTORY
,

136 
DRV_CMD_STP_INSTANCD_VLAN_SET
,

137 
DRV_CMD_STP_SET_PORT_STATE
,

138 
DRV_CMD_STP_GET_PORT_STATE
,

139 
DRV_CMD_SET_MANAGE_VLAN
,

141 
DRV_CMD_SET_WIRELESS_UP_SERVICE_VLAN
,

143 
DRV_CMD_GET_VLAN_NUM
,

144 
DRV_CMD_SET_VLANMODE
,

145 
DRV_CMD_SET_VLAN_ENTRY_CREATE
,

146 
DRV_CMD_SET_VLAN_ENTRY_DELETE
,

147 
DRV_CMD_SET_VLAN_MEMBER_REMOVE
,

148 
DRV_CMD_SET_VLAN_MEMBER_ADD
,

149 
DRV_CMD_SET_VLAN_PVID
,

150 
DRV_CMD_SET_VLAN_PORT_VLAN_MEMBER
,

151 
DRV_CMD_GET_VLAN_MEMBER
,

152 
DRV_CMD_SET_CPU_IN_VLAN
,

153 
DRV_CMD_SET_CPU_OUT_VLAN
,

154 
DRV_CMD_SET_MAC_CPU_PORT_LEARM_ENABLE
,

155 
DRV_CMD_SET_MAC_LEARN_ENABLE
,

156 
DRV_CMD_GET_MAC_LEARN_ENABLE
,

157 
DRV_CMD_SET_MAC_CPU_MAC_ADD
,

158 
DRV_CMD_SET_MAC_FLUSH_UCAST_MAC
,

159 
DRV_CMD_SET_MAC_ADD_UCAST_MAC
,

160 
DRV_CMD_SET_MAC_DEL_UCAST_MAC
,

161 
DRV_CMD_SET_MAC_ADD_MCAST_MAC
,

162 
DRV_CMD_SET_MAC_DEL_MCAST_MAC
,

163 
DRV_CMD_GET_MAC_AGE_TIME
,

164 
DRV_CMD_SET_MAC_AGE_TIME
,

165 
DRV_CMD_SET_MAC_LEARN_LIMIT
,

166 
DRV_CMD_GET_MAC_UCAST_MAC
,

167 
DRV_CMD_GET_MAC_MCAST_MAC
,

168 
DRV_CMD_SET_MAC_SET_MCAST_MAC
,

169 
DRV_CMD_SET_MAC_UCAST_LOOK_FAIL_FRD
,

170 
DRV_CMD_GET_MAC_LEARN_COUNT
,

171 
DRV_CMD_SET_MAC_REFRESH_UCAST
,

172 
DRV_CMD_GET_MAC_DUMP_UCAST
,

173 
DRV_CMD_GET_MAC_DUMP_MCAST
,

174 
DRV_CMD_GET_MAC_DUMP_UCAST_SORTED
,

175 
DRV_CMD_SET_MAC_TRAP_CPU
,

176 
DRV_CMD_GET_MAC_CONFLICT
,

177 
DRV_CMD_SET_RSV_MAC_TRAP
,

178 
DRV_CMD_GET_MAC_BYINDEX
,

179 
DRV_CMD_GET_MAC_MORE_BYINDEX
,

180 
DRV_CMD_GET_MAC_EXACT
,

181 
DRV_CMD_GET_MCASTCOUNT
,

182 
DRV_CMD_SET_MAC_DLF_MCAST_DROP
,

183 
DRV_CMD_SET_IGMP_TRAP
,

184 
DRV_CMD_SET_PORT_ISOLATE_MASK
,

185 
DRV_CMD_GET_ISOLATE_SET
,

186 
DRV_CMD_PORT_LED_INIT
,

187 
DRV_CMD_SET_PORT_LED
,

188 
DRV_CMD_I2C_INIT
,

189 
DRV_CMD_I2C_PORT_READ
,

190 
DRV_CMD_SET_MIRROR_GROUP
,

191 
DRV_CMD_GET_MIB_COUNT
,

192 
DRV_CMD_SET_MIB_COUNT_SYNC
,

193 
DRV_CMD_SET_MIB_COUNT_RESET
,

194 
DRV_CMD_GET_PORT_COUNTER
,

195 
DRV_CMD_GET_PORT_STATISTICS
,

196 
DRV_CMD_GET_EPON_MIB_COUNTER
,

197 
DRV_CMD_EPON_MIB_GLOBAL_RESET
,

198 
DRV_CMD_GET_PONMAC_TRANSCEIVER
,

200 #i‡
deföed
(
CONFIG_BOSA
)

201 
DRV_CMD_GET_PONFTOVERFLAG
,

202 
DRV_CMD_SET_PONFTOVERFLAG
,

203 
DRV_CMD_SET_LASER
,

204 
DRV_CMD_GET_LASER
,

205 
DRV_CMD_GET_APCSET
,

206 
DRV_CMD_SET_APCSET
,

207 
DRV_CMD_GET_IMODSET
,

208 
DRV_CMD_SET_IMODSET
,

211 
DRV_CMD_SET_RATELIMIT_INIT
,

212 
DRV_CMD_SET_RATELIMIT_PORT
,

213 
DRV_CMD_SET_RATELIMIT_STORM
,

214 
DRV_CMD_SET_QOS_INIT
,

215 
DRV_CMD_SET_QOS_1P_REMAP
,

216 
DRV_CMD_SET_QOS_2_QID
,

217 
DRV_CMD_SET_QOS_DSCP_REMAP
,

218 
DRV_CMD_SET_QOS_TRUST_MODE
,

219 
DRV_CMD_SET_QOS_SCHEDULE
,

220 
DRV_CMD_REG_READ
,

221 
DRV_CMD_REG_WRITE
,

222 
DRV_CMD_MEM_READ
,

223 
DRV_CMD_MEM_WRITE
,

224 
DRV_CMD_CPU_GET
,

225 
DRV_CMD_CPU_SET
,

226 
DRV_CMD_SET_ACL_INIT
,

227 
DRV_CMD_ADD_ACL_VLAN_INTF
,

228 
DRV_CMD_DEL_ACL_VLAN_INTF
,

229 
DRV_CMD_ADD_ACL_FILTER
,

230 
DRV_CMD_DEL_ACL_FILTER
,

231 
DRV_CMD_DEL_ACL_FILTER_BYPORT
,

232 
DRV_CMD_ADD_CTC_CLF_BYPORT
,

233 
DRV_CMD_DEL_CTC_CLF_BYPREC
,

234 
DRV_CMD_CLEAR_CTC_CLF_BYPORT
,

236 
DRV_CMD_ADD_CTC_CLF_PRI_TO_QUEUE_BYPORT
,

237 
DRV_CMD_DEL_CTC_CLF_PRI_TO_QUEUE_BYPREC
,

238 
DRV_CMD_CLEAR_CTC_CLF_PRI_TO_QUEUE_BYPORT
,

241 
DRV_CMD_EEE_ENABLE
,

242 
DRV_CMD_AUTO_PWR_DWN_ENABLE
,

243 
DRV_CMD_GET_CABLE_DIAG
,

244 
DRV_CMD_GET_STP_PORTSTATE
,

245 
DRV_CMD_SET_STP_PORTSTATE
,

246 
DRV_CMD_L2_SEND
,

247 
DRV_CMD_SET_INTER_LOOPBACK
,

248 
DRV_CMD_GPIO_GET
,

249 
DRV_CMD_GPIO_SET
,

250 
DRV_CMD_GPIO_MULTIPLEX_GET
,

251 
DRV_CMD_GPIO_MULTIPLEX_SET
,

252 
DRV_CMD_GPIO_DIR_IN_SET
,

253 
DRV_CMD_GPIO_DIR_OUT_SET
,

254 
DRV_CMD_GPIO_MODE_LEVEL_SET
,

255 
DRV_CMD_GPIO_MODE_EDGE_SET
,

256 
DRV_CMD_GPIO_INT_LEVEL_HIGH_SET
,

257 
DRV_CMD_GPIO_INT_LEVEL_LOW_SET
,

258 
DRV_CMD_GPIO_INT_EDGE_SET
,

259 
DRV_CMD_GET_PON_STATUS_ERR_FLAG
,

260 
DRV_CMD_SET_PON_STATUS_ERR_FLAG
,

261 
DRV_CMD_GET_OAM_DISCOVERY_STATE
,

262 
DRV_CMD_SET_OAM_DISCOVERY_STATE
,

263 
DRV_CMD_GET_MAC_WRITE_FLAG
,

264 
DRV_CMD_SET_MAC_WRITE_FLAG
,

265 
DRV_CMD_GET_PON_INT_CHANGE_FLAG
,

266 
DRV_CMD_SET_PON_INT_CHANGE_FLAG
,

267 
DRV_CMD_OPL_INTREG_FIELD_READ
,

268 
DRV_CMD_OPL_INTREG_FIELD_WRITE
,

269 
DRV_CMD_GET_PON_MODE_OFF_FLAG
,

270 
DRV_CMD_SET_PON_MODE_OFF_FLAG
,

271 
DRV_CMD_SET_SYS_LED
,

272 
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_ADD_BY_ID
,

273 
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_DEL_BY_ID
,

274 
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_ADD
,

275 
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_DEL
,

276 
DRV_CMD_CTC_PORT_BASE_VLAN_ENTY_CLR
,

277 
DRV_CMD_CTC_MC_VLAN_ADD
,

278 
DRV_CMD_CTC_MC_MAC_GET
,

279 
DRV_CMD_CTC_MC_MAC_SET
,

280 
DRV_CMD_CTC_MC_MAC_DEL
,

281 
DRV_CMD_CTC_MC_VLAN_MEM_RMV
,

282 
DRV_CMD_CTC_MC_VLAN_MEM_GET
,

283 
DRV_CMD_CTC_ACL_FOR_TRANSP_VLAN_CREATE
,

284 
DRV_CMD_CTC_ACL_FOR_TRANSP_VLAN_DELETE
,

285 
DRV_CMD_CTC_ACL_FOR_TAG_VLAN_CREATE
,

286 
DRV_CMD_CTC_ACL_FOR_TAG_VLAN_DELETE
,

287 
DRV_CMD_CTC_ACL_FOR_TRANSL_VLAN_CREATE
,

288 
DRV_CMD_CTC_ACL_FOR_TRANSL_VLAN_DELETE
,

289 
DRV_CMD_CTC_ACL_FOR_MC_VLAN_CREATE
,

290 
DRV_CMD_CTC_ACL_FOR_MC_VLAN_DELETE
,

291 
DRV_CMD_CTC_PORT_INGRESS_VLAN_FILTER
,

292 
DRV_CMD_CTC_PORT_INGRESS_VLAN_RECIEVE
,

293 
DRV_CMD_CTC_PORT_EGRESS_VLAN_FILTER
,

294 
DRV_CMD_CTC_GET_EMPTY_ACL_RULE_NUM
,

295 
DRV_CMD_CTC_GET_PORT_VLAN_CFG
,

296 
DRV_CMD_CTC_SET_PORT_VLAN_CFG
,

297 
DRV_CMD_CTC_RESTART_AUTONEG
,

298 
DRV_CMD_CTC_ENOUGH_VLAN_INDEX_CHECK
,

299 
DRV_CMD_IGMP_UNKNOW_IP4_ACT
,

300 
DRV_CMD_SINGLE_DBG_REG_GET
,

301 
DRV_CMD_SINGLE_DBG_REG_SET
,

302 
DRV_CMD_FDB_ENTRY_GET
,

303 
DRV_CMD_CVLAN_ENTRY_GET
,

304 
DRV_CMD_SVLAN_ENTRY_GET
,

305 
DRV_CMD_C2S_ENTRY_GET
,

306 
DRV_CMD_S2C_ENTRY_GET
,

307 
DRV_CMD_PORT_EGRESS_MODE
,

308 
DRV_CMD_PORTS_INIT
,

309 
DRV_CMD_ACL_DROP_LOOPD_CREATE_ADD_PORT
,

310 
DRV_CMD_ACL_DROP_LOOPD_CREATE_REMOVE_PORT
,

311 
DRV_CMD_ACL_DROP_LOOPD_DELETE
,

312 
DRV_CMD_GET_PORTENABLE
,

313 
DRV_CMD_SET_LASERON_TEST_FLAG
,

314 
DRV_CMD_GET_LASERON_TEST_FLAG
,

315 
DRV_CMD_SET_FECMODE
,

316 
DRV_CMD_GET_FECMODE
,

317 
DRV_CMD_ACL_GET_EMPTY_ENTRY
,

318 
DRV_CMD_ACL_DELETE_BY_ID
,

319 
DRV_CMD_ADDS2C_BY_PORT
,

320 
DRV_CMD_DELS2C_BY_PORT
,

321 
DRV_CMD_ADDC2S_BY_PORT
,

322 
DRV_CMD_DELC2S_BY_PORT
,

323 
DRV_CMD_ADDTRSLMC_MBR
,

324 
DRV_CMD_DELTRSLMC_MBR
,

325 
DRV_CMD_LOOKUP_MISS_FLOOD_SET
,

326 
DRV_CMD_NUM


327 }
	tDRV_CMD_E
;

331 
	#RTK_EPON_MAX_QUEUE_PER_LLID
 8

	)

332 
	sπk_ï⁄_ŒidCou¡î_≠p_s


334 
queueTxFømes
[
RTK_EPON_MAX_QUEUE_PER_LLID
];

335 
mp˝TxRï‹t
;

336 
mp˝RxG©e
;

337 
⁄uLlidNŸBc°
;

338 }
	tπk_ï⁄_ŒidCou¡î_≠p_t
;

341 
	sπk_ï⁄_cou¡î_≠p_s


343 
πk_ï⁄_ŒidCou¡î_≠p_t
 
ŒidIdxC¡
;

344 
ŒidIdx
;

345 
mp˝RxDiscG©e
;

346 
„cC‹ª˘edBlocks
;

347 
„cUnc‹ª˘edBlocks
;

348 
„cCodögVio
;

349 
nŸBc°BôNŸOnuLlid
;

350 
bc°BôPlusOnuLLid
;

351 
bc°NŸOnuLLid
;

352 
¸c8Eº
;

353 
mp˝TxRegReque°
;

354 
mp˝TxRegAck
;

355 }
	tπk_ï⁄_cou¡î_≠p_t
;

357 
	#TRANSCEIVER_LEN
 24

	)

358 
	sπk_å™s˚ivî_d©a_≠p_s
{

359 
buf
[
TRANSCEIVER_LEN
];

360 }
	tπk_å™s˚ivî_d©a_≠p_t
;

362 
	eπk_å™s˚ivî_∑èmëî_ty≥_≠p_e
{

363 
RTK_TRANSCEIVER_PARA_TYPE_VENDOR_NAME_
 = 0,

364 
RTK_TRANSCEIVER_PARA_TYPE_VENDOR_PART_NUM_
,

365 
RTK_TRANSCEIVER_PARA_TYPE_TEMPERATURE_
,

366 
RTK_TRANSCEIVER_PARA_TYPE_VOLTAGE_
,

367 
RTK_TRANSCEIVER_PARA_TYPE_TX_POWER_
,

368 
RTK_TRANSCEIVER_PARA_TYPE_RX_POWER_
,

369 
RTK_TRANSCEIVER_PARA_TYPE_MAX_


370 }
	tπk_å™s˚ivî_∑ømëî_ty≥_≠p_t
;

375 
	sègDrvReq
{

376 
DRV_CMD_E
 
cmd
;

377 
DRV_RET_E
 
îr
;

379 
p‹t_num_t
 
lgcP‹t
;

380 
UINT32
 
uiVÆue
;

381 
STORM_CTLTYPE_E
 
°‹mTy≥
;

382 
UCHAR
 *
uiAddr
;

383 }
∑ø1_u
;

384 
	#p_Õ‹t
 
∑ø1_u
.
lgcP‹t


	)

385 
	#p_group_num
 
∑ø1_u
.
uiVÆue


	)

386 
	#pmsg
 
∑ø1_u
.
uiAddr


	)

388 
logic_pmask_t
 
lgcMask
;

389 
UINT32
 
uiVÆue
;

390 
mac_addªss_t
 
mac_addªss
;

391 
mac_uˇ°_t
 
°MacUˇ°
;

392 
mac_mˇ°_t
 
°MacMˇ°
;

393 
mac_comm⁄_t
 
°MacComm⁄
;

394 
mac_dñëe_t
 
°MacDñëe
;

395 
Mac_›_t
 
°MacOp
;

396 
MIB_IfSètTy≥_t
 
mibCou¡Ty≥
;

397 
Cou¡îName_E
 
p‹tCou¡îTy≥
;

398 
°©_ªg_t
 
p‹tSèti°icsTy≥
;

399 
mac_å≠_£t_t
 
°TøpSë
;

400 
qos_8021p_to_öçri_t
 
°1pToI¡Pri
;

401 
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
;

402 
QueueMode_S
 
°QueueScheduÀ
;

403 
COMBO_PORT_CONFIG_S
 
°ComboCfg
;

404 
ULONG
 
ulVÆue
;

405 
ˇbÀ_düg_t
 
°CabÀDüg
;

407 
πk_ï⁄_cou¡î_≠p_s
 *
Cou¡î
;

408 
πk_å™s˚ivî_d©a_≠p_t
 *
pD©a
;

411 
CTC_VLAN_CFG_S
 *
p°CtcVœnCfg
;

413 }
∑ø2_u
;

414 
	#p_•ìd
 
∑ø2_u
.
uiVÆue


	)

415 
	#p_du∂ex
 
∑ø2_u
.
uiVÆue


	)

416 
	#p_•dlx
 
∑ø2_u
.
uiVÆue


	)

417 
	#p_abûôy
 
∑ø2_u
.
uiVÆue


	)

418 
	#p_jumbo
 
∑ø2_u
.
uiVÆue


	)

419 
	#p_∑u£_tx
 
∑ø2_u
.
uiVÆue


	)

420 
	#p_mask
 
∑ø2_u
.
lgcMask


	)

421 
	#p_medium
 
∑ø2_u
.
uiVÆue


	)

422 
	#p_mdix
 
∑ø2_u
.
uiVÆue


	)

423 
	#p_¥io
 
∑ø2_u
.
uiVÆue


	)

424 
	#p_cur_lök
 
∑ø2_u
.
uiVÆue


	)

425 
	#p_íabÀ
 
∑ø2_u
.
uiVÆue


	)

426 
	#p_Êow˘æ
 
∑ø2_u
.
uiVÆue


	)

427 
	#p_aut⁄eg
 
∑ø2_u
.
uiVÆue


	)

428 
	#p_txrx
 
∑ø2_u
.
uiVÆue


	)

429 
	#aggr_mode
 
∑ø2_u
.
uiVÆue


	)

430 
	#vœn_mode
 
∑ø2_u
.
uiVÆue


	)

431 
	#p_Àd°©e
 
∑ø2_u
.
uiVÆue


	)

432 
	#p_‰ame_Àn
 
∑ø2_u
.
uiVÆue


	)

433 
	#p_msg_Àn
 
∑ø2_u
.
uiVÆue


	)

435 
logic_pmask_t
 
lgcMask
;

436 
UINT32
 
uiVÆue
;

437 
mac_addªss_t
 
mac_addªss
;

438 
Mac_›_t
 
°MacOp
;

439 
UINT64
 
ui64VÆue
;

440 
rsv_mac_∑ss_a˘i⁄_t
 
uiA˘i⁄
;

441 
STORM_CTLRATE_S
 
°St‹m
;

442 
l2_£nd_›
 
l2_›
;

443 
UINT16
 
usVÆue
;

444 }
∑ø3_u
;

445 
	#p_∑u£_rx
 
∑ø3_u
.
uiVÆue


	)

446 
	#p_p‹ây≥
 
∑ø3_u
.
uiVÆue


	)

447 
	#l2_›
 
∑ø3_u
.
l2_›


	)

449 
UINT32
 
uiVÆue
;

450 }
∑ø4_u
;

452 
UINT32
 
uiVÆue
;

453 
logic_pmask_t
 
lgcMask
;

454 }
∑ø5_u
;

455 }
	tDRV_REQ_S
;

459 
DRV_RET_E
 
Drv_Io˘lCmd
(
CHAR
 *
pcDevName
, 
DRV_REQ_S
 * 
drv_ªq
 );

460 
DRV_RET_E
 
Io˘l_SëSwôchU32P¨a
(
DRV_CMD_E
 
cmd
,
INT32
 
∑øNum
,...);

461 
DRV_RET_E
 
Io˘l_GëSwôchU32P¨a
(
DRV_CMD_E
 
cmd
,
UINT
 
uiP‹t
,
UINT32
 *
pResu…
,UINT32 
uiVÆue
);

462 
DRV_RET_E
 
Io˘l_GëP‹tLökMask
(
logic_pmask_t
 *
pMask
);

463 
DRV_RET_E
 
Io˘l_GëIsﬁ©eSë
(
logic_pmask_t
 *
pMask
);

464 
DRV_RET_E
 
Io˘l_GëP‹tMedüFibîMask
(
logic_pmask_t
 *
pMask
);

465 
DRV_RET_E
 
Io˘l_GëP‹tMask
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, 
logic_pmask_t
 *
pMask
);

466 
DRV_RET_E
 
Io˘l_GëUni⁄Uöt32
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 * 
puiVÆue
);

467 
DRV_RET_E
 
Io˘l_SëUni⁄Uöt32
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
);

468 
DRV_RET_E
 
Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, UINT32 
uiVÆue2
);

469 
DRV_RET_E
 
Io˘l_SëUni⁄Uöt32Uöt32Uöt32
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, UINT32 
uiVÆue2
, UINT32 
uiVÆue3
);

470 
DRV_RET_E
 
Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, UINT32 *
uiVÆue2
);

471 
DRV_RET_E
 
Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, 
logic_pmask_t
 
°LpMask
);

472 
DRV_RET_E
 
Io˘l_GëUni⁄Uöt32MaskMask
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, 
logic_pmask_t
 * 
pMask
,Üogic_pmask_à* 
pMask2
);

473 
DRV_RET_E
 
Io˘l_SëUni⁄Uöt32LpmaskLpmask
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, 
logic_pmask_t
 
°LpMask
,Üogic_pmask_à
°LpMask2
);

474 
DRV_RET_E
 
Io˘l_SëUni⁄Lp‹tLpmaskLpmask
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
logic_pmask_t
 
°LpMask
,Üogic_pmask_à
°LpMask2
);

475 
DRV_RET_E
 
Io˘l_SëUni⁄Uöt32MacAdd
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, 
mac_addªss_t
 
mac_addªss
);

476 
DRV_RET_E
 
Io˘l_SëUni⁄MacDñ
(
DRV_CMD_E
 
io˘lCmd
, 
mac_dñëe_t
 
°MacDñëe
);

477 
DRV_RET_E
 
Io˘l_SëUni⁄MacUˇ°
(
DRV_CMD_E
 
io˘lCmd
, 
mac_uˇ°_t
 
°MacUˇ°
);

478 
DRV_RET_E
 
Io˘l_SëUni⁄MacMˇ°
(
DRV_CMD_E
 
io˘lCmd
, 
mac_mˇ°_t
 
°MacMˇ°
);

479 
DRV_RET_E
 
Io˘l_GëUni⁄MacVidUˇ°
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
ulVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacUˇ°
);

480 
DRV_RET_E
 
Io˘l_GëUni⁄MacVidUˇ°
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
ulVid
, 
mac_addªss_t
 
mac_addr
, 
mac_uˇ°_t
 *
p°MacMˇ°
);

481 
DRV_RET_E
 
Io˘l_GëUni⁄MacVidMˇ°
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
ulVid
, 
mac_addªss_t
 
mac_addr
, 
mac_mˇ°_t
 *
p°MacMˇ°
);

482 
DRV_RET_E
 
Io˘l_GëC⁄Êi˘Mac
(
DRV_CMD_E
 
io˘lCmd
, 
Mac_›_t
 
°MacOp
, Mac_›_à*
p°MacOp
);

483 
DRV_RET_E
 
Io˘l_GëVÆidMacByIndex
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
ulSèπIdx
, 
mac_comm⁄_t
 *
p°TmpMac
);

484 
DRV_RET_E
 
Io˘l_GëUni⁄MacM‹eByIndex
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
ulIdx
, UINT32 
uiCou¡
, 
ULONG
 
ulPoöãr
, UINT32 *
puiRólCou¡
, UINT32 *
puiNextIdx
);

485 
DRV_RET_E
 
Io˘l_GëUni⁄MacVidMacComm⁄
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
ulVid
, 
mac_addªss_t
 
mac_addr
, 
mac_comm⁄_t
 *
p°TmpMac
);

486 
DRV_RET_E
 
Io˘l_GëUni⁄Uöt32ByUl⁄g
(
DRV_CMD_E
 
io˘lCmd
, 
ULONG
 
ulVÆue
, 
UINT32
 *
uiVÆue
);

487 
DRV_RET_E
 
Io˘l_GëUni⁄Uöt32Uöt32Uöt32ByUl⁄g
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
ULONG
 
ulVÆue
, 
UINT32
 
uiVÆue1
, UINT32 
uiVÆue2
);

488 
DRV_RET_E
 
Io˘l_GëMIbCou¡ByP‹t
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
MIB_IfSètTy≥_t
 
mibCou¡Ty≥
, 
UINT64
 *
ui64VÆue
);

489 
DRV_RET_E
 
Io˘l_GëP‹tCou¡î
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
Cou¡îName_E
 
p‹tCou¡Ty≥
, 
UINT64
 *
ui64VÆue
);

490 
DRV_RET_E
 
Io˘l_GëP‹tSèti°ics
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
°©_ªg_t
 
p‹tSèti°icsTy≥
, 
UINT64
 *
ui64VÆue
);

491 
DRV_RET_E
 
Io˘l_SëP‹tR©ñimô
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
dúe˘i⁄
, 
logic_pmask_t
 
°LpMask
, UINT32 
uiR©e
);

492 
DRV_RET_E
 
Io˘l_SëTøpCpu
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
mac_å≠_£t_t
 
°TøpSë
, 
UINT32
 
¥i‹ôy
);

493 
DRV_RET_E
 
Io˘l_SëRsvMacTøp
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiIndex
, UINT32 
¥i‹ôy
, 
rsv_mac_∑ss_a˘i⁄_t
 
a˘i⁄
);

494 
DRV_RET_E
 
Io˘l_SëQos1pRem≠Cé
(
DRV_CMD_E
 
io˘lCmd
, 
qos_8021p_to_öçri_t
 
°1pToI¡Pri
);

495 
DRV_RET_E
 
Io˘l_SëQosDs˝Rem≠Cé
(
DRV_CMD_E
 
io˘lCmd
, 
qos_ds˝_to_öçri_t
 
°Ds˝ToI¡Pri
);

496 
DRV_RET_E
 
Io˘l_SëQosQueueSchedulCé
(
DRV_CMD_E
 
io˘lCmd
, 
QueueMode_S
 
°QueueScheduÀ
);

497 
DRV_RET_E
 
Io˘l_InôCmboP‹tC⁄fig
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
COMBO_PORT_CONFIG_S
 * 
p°Cfg
);

498 
DRV_RET_E
 
Io˘l_GëCabÀDüg
(
DRV_CMD_E
 
io˘lCmd
, 
p‹t_num_t
 
Õ‹t
, 
ˇbÀ_düg_t
 *
p°CabÀDüg
);

499 
DRV_RET_E
 
Io˘l_GëReg
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, UINT32 
uiVÆue2
, UINT32 * 
uiVÆue3
);

500 
DRV_RET_E
 
Io˘l_SëReg
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, UINT32 
uiVÆue2
, UINT32 
uiVÆue3
);

501 
DRV_RET_E
 
Io˘l_SëP‹tSt‹mlimô
(
DRV_CMD_E
 
io˘lCmd
, 
STORM_CTLTYPE_E
 
ty≥
, 
logic_pmask_t
 *
pLgcPMask
, 
STORM_CTLRATE_S
 *
p°St‹m
);

502 
DRV_RET_E
 
Io˘l_AddA˛Fûãr
(
UINT32
 
Õ‹t
,

503 
UINT32
 
uiRuÀPª˚dí˚
,

504 
UINT32
 
uiA˛RuÀTy≥
,

505 
UINT32
 
uiA˛RuÀDú
,

506 
VOID
 *
pRuÀVÆue
);

507 
DRV_RET_E
 
Io˘l_DñA˛FûãrByP‹t
(
UINT32
 
Õ‹t
, UINT32 
uiRuÀPª˚dí˚
, UINT32 
uiA˛RuÀDú
);

508 
DRV_RET_E
 
Io˘l_AddCtcClfByP‹t
(
UINT32
 
Õ‹t
,

509 
UINT32
 
uiRuÀPª˚dí˚
,

510 
UINT32
 
uiA˛RuÀTy≥
,

511 
VOID
 *
pRuÀVÆue
,

512 
UINT32
 
uiRem¨kPri
);

513 
DRV_RET_E
 
Io˘l_DñCtcClfByPªc
(
UINT32
 
Õ‹t
, UINT32 
uiRuÀPª˚dí˚
);

514 
DRV_RET_E
 
Io˘l_CÀ¨CtcClfByP‹t
(
UINT32
 
Õ‹t
);

517 
DRV_RET_E
 
Io˘l_A˛Dr›Lo›dCª©eAddP‹t
(
UINT32
 
Õ‹t
);

518 
DRV_RET_E
 
Io˘l_A˛Dr›Lo›dCª©eRemoveP‹t
(
UINT32
 
Õ‹t
);

519 
DRV_RET_E
 
Io˘l_A˛Dr›Lo›dDñëe
(
VOID
);

523 
DRV_RET_E
 
Io˘l_SëLookupMissFloodP‹tMask
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
ty≥
, 
logic_pmask_t
 
Êood_p‹tmask
);

527 
	#Io˘l_SëP‹tMedium
–
_Õ‹t
, 
_uiMedium
)\

528 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_MEDIUM
,2,
_Õ‹t
,
_uiMedium
)

	)

530 
	#Io˘l_SëP‹tPri‹ôy
(
_Õ‹t
, 
_uiPrio
) \

531 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_PRIORITY
,2,
_Õ‹t
,
_uiPrio
)

	)

533 
	#Io˘l_SëP‹tMdix
–
_Õ‹t
, 
_uiMdi
)\

534 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_MDIX
,2,
_Õ‹t
,
_uiMdi
)

	)

536 
	#Io˘l_SëP‹tE«bÀ
–
_Õ‹t
, 
_uiSèã
)\

537 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_PORTENABLE
,2,
_Õ‹t
,
_uiSèã
)

	)

539 
	#Io˘l_SëP‹tJumbo
–
_Õ‹t
, 
_uiJumbo
)\

540 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_JUMBO
,2,
_Õ‹t
,
_uiJumbo
)

	)

542 
	#Io˘l_SëP‹tTxRx
–
_Õ‹t
, 
_uiSèã
)\

543 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_TXRX
,2,
_Õ‹t
,
_uiSèã
)

	)

545 
	#Io˘l_SëP‹tAbûôy
–
_Õ‹t
, 
_abûôy
, 
_p‹ây≥
)\

546 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_ABILITY
,3,
_Õ‹t
,
_abûôy
, 
_p‹ây≥
)

	)

548 
	#Io˘l_SëP‹tAut⁄eg
–
_Õ‹t
, 
_uiSèã
, 
_p‹ây≥
)\

549 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_AUTONEG
,3,
_Õ‹t
,
_uiSèã
, 
_p‹ây≥
)

	)

552 
	#Io˘l_GëP‹tAut⁄eg
–
_Õ‹t
, 
_puiAuto
)\

553 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_AUTONEG
,
_Õ‹t
,(
UINT32
 *)(
_puiAuto
), 0)

	)

556 
	#Io˘l_SëP‹tS≥ed
–
_Õ‹t
, 
_uiS≥ed
, 
_p‹ây≥
)\

557 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_SPEED
,3,
_Õ‹t
,
_uiS≥ed
, 
_p‹ây≥
)

	)

559 
	#Io˘l_SëP‹tDu∂ex
–
_Õ‹t
, 
_uiDu∂ex
, 
_p‹ây≥
)\

560 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_DUPLEX
,3,
_Õ‹t
, 
_uiDu∂ex
, 
_p‹ây≥
)

	)

563 
	#Io˘l_SëP‹tSpdlx
–
_Õ‹t
, 
_uiSpdlx
)\

564 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_SPDLX
,2,
_Õ‹t
, 
_uiSpdlx
)

	)

567 
	#Io˘l_SëP‹tPau£
–
_Õ‹t
, 
_uiPau£Tx
, 
_uiPau£Rx
)\

568 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_PAUSE
,3,
_Õ‹t
,
_uiPau£Tx
,
_uiPau£Rx
)

	)

570 
	#Io˘l_ComboP‹tFibîCfgInô
(
_Õ‹t
, 
_p°Cfg
)\

571 
	`Io˘l_InôCmboP‹tC⁄fig
(
DRV_CMD_FIBER_CFG_INIT
, 
_Õ‹t
, 
_p°Cfg
)

	)

573 
	#Io˘l_ComboP‹tC›≥rCfgInô
(
_Õ‹t
, 
_p°Cfg
)\

574 
	`Io˘l_InôCmboP‹tC⁄fig
(
DRV_CMD_COPPER_CFG_INIT
, 
_Õ‹t
, 
_p°Cfg
)

	)

575 
	#Io˘l_SëP‹tI¡î«lLo›back
(
_Õ‹t
,
__íabÀ
) \

576 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_INTER_LOOPBACK
,2,
_Õ‹t
,
__íabÀ
)

	)

579 
	#Io˘l_SëPhyReg
–
_Õ‹t
, 
_ªg_no
, 
_ªg_vÆue
)\

580 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_PHYREG
,3,
_Õ‹t
, 
_ªg_no
, 
_ªg_vÆue
)

	)

581 
	#Io˘l_SëP‹tFømeLí
(
_Õ‹t
, 
_puiLígth
)\

582 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_PORTFRAMELEN
,2, 
_Õ‹t
, 
_puiLígth
)

	)

588 
	#Io˘l_GëP‹tMedium
–
_Õ‹t
, 
_pMedium
)\

589 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTMEDIUM
,
_Õ‹t
,(
UINT32
 *)(
_pMedium
), 0)

	)

591 
	#Io˘l_GëP‹tE«bÀ
–
_Õ‹t
, 
_uiSèã
)\

592 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTENABLE
,
_Õ‹t
,(
UINT32
 *)
_uiSèã
,0)

	)

594 
	#Io˘l_GëP‹tCuºítLök
–
_Õ‹t
, 
_pLök
)\

595 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_CUR_LINK
,
_Õ‹t
,(
UINT32
 *)(
_pLök
), 0)

	)

597 
	#Io˘l_GëP‹tAbûôy
–
_Õ‹t
, 
_pAbûôy
, 
_p‹ây≥
)\

598 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTABILITY
,
_Õ‹t
,(
UINT32
 *)(
_pAbûôy
), 
_p‹ây≥
)

	)

600 
	#Io˘l_GëP‹tS≥ed
–
_Õ‹t
, 
_puiS≥ed
)\

601 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTSPEED
,
_Õ‹t
,(
UINT32
 *)(
_puiS≥ed
), 0)

	)

603 
	#Io˘l_GëP‹tDu∂ex
–
_Õ‹t
, 
_puiDu∂ex
)\

604 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTDUPLEX
,
_Õ‹t
,(
UINT32
 *)(
_puiDu∂ex
), 0)

	)

606 
	#Io˘l_GëP‹tMdix
–
_Õ‹t
, 
_puiMdix
)\

607 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTMDIX
,
_Õ‹t
,(
UINT32
 *)(
_puiMdix
), 0)

	)

609 
	#Io˘l_GëP‹tPri‹ôy
–
_Õ‹t
, 
_puiPrio
)\

610 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTPRIO
,
_Õ‹t
,(
UINT32
 *)(
_puiPrio
), 0)

	)

612 
	#Io˘l_GëP‹tFlow˘æ
–
_Õ‹t
, 
_puiFc
)\

613 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTFLOWCTRL
,
_Õ‹t
,(
UINT32
 *)(
_puiFc
), 0)

	)

615 
	#Io˘l_GëP‹tJumbo
–
_Õ‹t
, 
_puiJumbo
)\

616 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTJUMBO
,
_Õ‹t
,(
UINT32
 *)(
_puiJumbo
), 0)

	)

617 
	#Io˘l_GëP‹tFømeLí
–
_Õ‹t
, 
_puiLígth
)\

618 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PORTFRAMELEN
,
_Õ‹t
,(
UINT32
 *)(
_puiLígth
), 0)

	)

619 
	#Io˘l_GëFibîP‹tS≥ed
–
_Õ‹t
, 
_puiS≥ed
)\

620 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_FIBERPORTSPEED
,
_Õ‹t
,(
UINT32
 *)(
_puiS≥ed
), 0)

	)

623 
	#Io˘l_GëPhyReg
–
_Õ‹t
, 
_pVÆ
, 
_ªg_no
)\

624 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_GET_PHYREG
,
_Õ‹t
,(
UINT32
 *)(
_pVÆ
), 
_ªg_no
)

	)

626 
	#Io˘l_GëSpdlxSë
–
_Õ‹t
, 
_pVÆ
)\

627 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GET_SPDLX_SET
, 
_Õ‹t
,(
UINT32
 *)(
_pVÆ
))

	)

633 
	#Io˘l_SëAggªMode
(
_aggr_mode
) \

634 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_AGGRMODE
, (
UINT32
)
_aggr_mode
)

	)

636 
	#Io˘l_SëAggªGroup
(
_group_numbî
, 
_Õ‹t_mask
) \

637 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_SET_AGGRGROUP
, (
UINT32
)
_group_numbî
, 
_Õ‹t_mask
)

	)

639 
	#Io˘l_GëAggªGroup
(
_group_numbî
, 
_∂p‹t_mask
) \

640 
	`Io˘l_GëP‹tMask
(
DRV_CMD_GET_AGGRGROUP
, (
UINT32
)
_group_numbî
, (
logic_pmask_t
 *)
_∂p‹t_mask
)

	)

642 
	#Io˘l_SëAggªGlobÆCfgFœg
(
_g_cfg_Êag
) \

643 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_AGGR_GLOBAL_CFG_FLAG
, (
UINT32
)
_g_cfg_Êag
)

	)

645 
	#Io˘l_GëAggªGlobÆCfgFœg
(
_gp_cfg_Êag
)\

646 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GET_AGGR_GLOBAL_CFG_FLAG
, 0, (
UINT32
 *)
_gp_cfg_Êag
)

	)

651 
	#Io˘l_SçInô
() \

652 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_STP_INIT
, (
UINT32
)0)

	)

654 
	#Io˘l_SçIn°™˚Cª©e
(
_°p_ö°
) \

655 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_STP_INSTANCE_CREATE
, (
UINT32
)
_°p_ö°
)

	)

657 
	#Io˘l_SçIn°™˚De°‹y
(
_°p_ö°
) \

658 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_STP_INSTANCE_DESTORY
, (
UINT32
)
_°p_ö°
)

	)

660 
	#Io˘l_SçIn°™˚VœnSë
(
_°p_ö°
, 
_vœn_id
) \

661 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_STP_INSTANCD_VLAN_SET
, (
UINT32
)
_°p_ö°
, (UINT32)
_vœn_id
)

	)

663 
	#Io˘l_SëSçP‹tSèã
(
_°p_ö°
, 
_p‹t_numbî
, 
_°p_°©e
) \

664 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_STP_SET_PORT_STATE
,3,
_°p_ö°
,
_p‹t_numbî
,
_°p_°©e
)

	)

666 
	#Io˘l_GëSçP‹tSèã
(
_°p_ö°
, 
_p‹t_numbî
, 
_p_°p_°©e
)\

667 
	`Io˘l_GëSwôchU32P¨a
(
DRV_CMD_STP_GET_PORT_STATE
, 
_°p_ö°
, (
UINT32
 *)(
_p_°p_°©e
), 
_p‹t_numbî
)

	)

672 
	#Io˘l_GëVœnExi°Num
(
_puiNum
)\

673 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GET_VLAN_NUM
, 0, (
UINT32
 *)
_puiNum
)

	)

675 
	#Io˘l_SëVœnMode
(
_vœn_mode
)\

676 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_VLANMODE
, (
UINT32
)
_vœn_mode
)

	)

678 
	#Io˘l_SëVœnE¡ryCª©e
(
_vœn_id
)\

679 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_VLAN_ENTRY_CREATE
, (
UINT32
)
_vœn_id
)

	)

681 
	#Io˘l_SëVœnE¡ryDñëe
(
_vœn_id
)\

682 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_VLAN_ENTRY_DELETE
, (
UINT32
)
_vœn_id
)

	)

684 
	#Io˘l_SëVœnMembîRemove
(
_vœn_id
, 
_Õ‹t_mask
)\

685 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_SET_VLAN_MEMBER_REMOVE
, (
UINT32
)
_vœn_id
, 
_Õ‹t_mask
)

	)

687 
	#Io˘l_SëVœnMembîAdd
(
_vœn_id
, 
_Õ‹t_mask
, 
_Õ‹t_mask_u¡ag
)\

688 
	`Io˘l_SëUni⁄Uöt32LpmaskLpmask
(
DRV_CMD_SET_VLAN_MEMBER_ADD
, (
UINT32
)
_vœn_id
,
_Õ‹t_mask
,
_Õ‹t_mask_u¡ag
)

	)

690 
	#Io˘l_SëVœnPvid
(
_p‹t_numbî
, 
_pvid
)\

691 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_SET_VLAN_PVID
, (
UINT32
)
_p‹t_numbî
, (UINT32)
_pvid
)

	)

693 
	#Io˘l_SëVœnP‹tVœnMembî
(
_p‹t_numbî
, 
_Õ‹t_mask
)\

694 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_SET_VLAN_PORT_VLAN_MEMBER
, (
UINT32
)
_p‹t_numbî
, 
_Õ‹t_mask
)

	)

696 
	#Io˘l_GëVœnMembî
(
_vœn_id
, 
_Õ‹t_mask
, 
_Õ‹t_mask_u¡ag
)\

697 
	`Io˘l_GëUni⁄Uöt32MaskMask
(
DRV_CMD_GET_VLAN_MEMBER
, (
UINT32
)
_vœn_id
,(
logic_pmask_t
 *)
_Õ‹t_mask
,÷ogic_pmask_à*)
_Õ‹t_mask_u¡ag
)

	)

700 
	#Io˘l_SëEthDbg
(
_ëh_dbg_mode
)\

701 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_ETHDBG
, (
UINT32
)
_ëh_dbg_mode
)

	)

707 
	#Io˘l_SëMacCpuP‹tMacLó∫E«bÀ
(
_íabÀ
)\

708 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MAC_CPU_PORT_LEARM_ENABLE
, (
UINT32
)
_íabÀ
)

	)

709 
	#Io˘l_SëMacLó∫E«bÀ
(
_Õ‹t_mask
, 
_íabÀ
)\

710 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_SET_MAC_LEARN_ENABLE
, (
UINT32
)
_íabÀ
, 
_Õ‹t_mask
)

	)

711 
	#Io˘l_GëMacLó∫E«bÀ
(
_lgcP‹t
, 
_PE«bÀ
)\

712 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GET_MAC_LEARN_ENABLE
, 
_lgcP‹t
, (
UINT32
 *)
_PE«bÀ
)

	)

713 
	#Io˘l_SëMacCpuMacAdd
(
_vid
, 
_mac_addªss
)\

714 
	`Io˘l_SëUni⁄Uöt32MacAdd
(
DRV_CMD_SET_MAC_CPU_MAC_ADD
, (
UINT32
)
_vid
, 
_mac_addªss
)

	)

715 
	#Io˘l_SëMacFlushUˇ°Mac
(
_°MacDñ
)\

716 
	`Io˘l_SëUni⁄MacDñ
(
DRV_CMD_SET_MAC_FLUSH_UCAST_MAC
, (
mac_dñëe_t
)
_°MacDñ
)

	)

717 
	#Io˘l_SëMacAddUˇ°Mac
(
_mac_uˇ°
)\

718 
	`Io˘l_SëUni⁄MacUˇ°
(
DRV_CMD_SET_MAC_ADD_UCAST_MAC
, (
mac_uˇ°_t
)
_mac_uˇ°
)

	)

719 
	#Io˘l_SëMacDñUˇ°Mac
(
_mac_uˇ°
)\

720 
	`Io˘l_SëUni⁄MacUˇ°
(
DRV_CMD_SET_MAC_DEL_UCAST_MAC
, (
mac_uˇ°_t
)
_mac_uˇ°
)

	)

721 
	#Io˘l_SëMacAddMˇ°Mac
(
_mac_mˇ°
)\

722 
	`Io˘l_SëUni⁄MacMˇ°
(
DRV_CMD_SET_MAC_ADD_MCAST_MAC
, (
mac_mˇ°_t
)
_mac_mˇ°
)

	)

723 
	#Io˘l_SëMacDñMˇ°Mac
(
_mac_mˇ°
)\

724 
	`Io˘l_SëUni⁄MacMˇ°
(
DRV_CMD_SET_MAC_DEL_MCAST_MAC
, (
mac_mˇ°_t
)
_mac_mˇ°
)

	)

726 
	#Io˘l_GëMacAgeTime
(
pAge_time
)\

727 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_MAC_AGE_TIME
, (
UINT32
 *)
pAge_time
)

	)

729 
	#Io˘l_SëMacAgeTime
(
_age_time
)\

730 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MAC_AGE_TIME
, (
UINT32
)
_age_time
)

	)

731 
	#Io˘l_SëMacLó∫Limô
(
_lgcP‹t
, 
_À¨n_limô
, 
_dis_f‹w¨d
)\

732 
	`Io˘l_SëUni⁄Uöt32Uöt32Uöt32
(
DRV_CMD_SET_MAC_LEARN_LIMIT
, (
UINT32
)
_lgcP‹t
, (UINT32)
_À¨n_limô
, (UINT32)
_dis_f‹w¨d
)

	)

733 
	#Io˘l_GëMacUˇ°Mac
(
_vid
, 
_mac_addªss
, 
_pmac_uˇ°
)\

734 
	`Io˘l_GëUni⁄MacVidUˇ°
(
DRV_CMD_GET_MAC_UCAST_MAC
, (
UINT32
)
_vid
, 
_mac_addªss
, (
mac_uˇ°_t
 *)
_pmac_uˇ°
)

	)

735 
	#Io˘l_GëMacMˇ°Mac
(
_vid
, 
_mac_addªss
, 
_pmac_mˇ°
)\

736 
	`Io˘l_GëUni⁄MacVidMˇ°
(
DRV_CMD_GET_MAC_MCAST_MAC
, (
UINT32
)
_vid
, 
_mac_addªss
, (
mac_mˇ°_t
 *)
_pmac_mˇ°
)

	)

737 
	#Io˘l_SëMacSëMˇ°Mac
(
_mac_mˇ°
)\

738 
	`Io˘l_SëUni⁄MacMˇ°
(
DRV_CMD_SET_MAC_SET_MCAST_MAC
, (
mac_mˇ°_t
)
_mac_mˇ°
)

	)

739 
	#Io˘l_SëMacUˇ°LookFaûFrd
(
_Õ‹t_mask
)\

740 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_SET_MAC_UCAST_LOOK_FAIL_FRD
, (
UINT32
)0, 
_Õ‹t_mask
)

	)

741 
	#Io˘l_GëMacLó∫Cou¡ByP‹t
(
_lgcP‹t
, 
_pulCou¡
)\

742 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GET_MAC_LEARN_COUNT
, 
_lgcP‹t
, (
UINT32
 *)
_pulCou¡
)

	)

743 
	#Io˘l_SëMacRe‰eshUˇ°
(
_ãrvÆ
)\

744 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MAC_REFRESH_UCAST
, (
UINT32
)
_ãrvÆ
)

	)

745 
	#Io˘l_GëMacDumpUˇ°
(
_ulPoöãr
, 
puiCou¡
)\

746 
	`Io˘l_GëUni⁄Uöt32ByUl⁄g
(
DRV_CMD_GET_MAC_DUMP_UCAST
, (
ULONG
)
_ulPoöãr
, (
UINT32
 *)
puiCou¡
)

	)

747 
	#Io˘l_GëMacDumpMˇ°
(
_ulPoöãr
, 
puiCou¡
)\

748 
	`Io˘l_GëUni⁄Uöt32ByUl⁄g
(
DRV_CMD_GET_MAC_DUMP_MCAST
, (
ULONG
)
_ulPoöãr
, (
UINT32
 *)
puiCou¡
)

	)

749 
	#Io˘l_GëMacDumpUˇ°S‹ãd
(
_ulPoöãr
, 
puiCou¡
)\

750 
	`Io˘l_GëUni⁄Uöt32ByUl⁄g
(
DRV_CMD_GET_MAC_DUMP_UCAST_SORTED
, (
ULONG
)
_ulPoöãr
, (
UINT32
 *)
puiCou¡
)

	)

751 
	#Io˘l_SëTøpToCpu
(
_Õ‹t
, 
_å≠_£t
, 
_¥i‹ôy
)\

752 
	`Io˘l_SëTøpCpu
(
DRV_CMD_SET_MAC_TRAP_CPU
, (
p‹t_num_t
)
_Õ‹t
, (
mac_å≠_£t_t
)
_å≠_£t
, (
UINT32
)
_¥i‹ôy
)

	)

753 
	#Io˘l_GëMacC⁄Êi˘
(
_°MacOp
, 
_p°MacOp
)\

754 
	`Io˘l_GëC⁄Êi˘Mac
(
DRV_CMD_GET_MAC_CONFLICT
, (
Mac_›_t
)
_°MacOp
, (Mac_›_à*)
_p°MacOp
)

	)

755 
	#Io˘l_SëRe£rvedMacTøp
(
_uiIndex
, 
_uiPri
, 
_a˘i⁄
)\

756 
	`Io˘l_SëRsvMacTøp
(
DRV_CMD_SET_RSV_MAC_TRAP
, (
_uiIndex
), (
_uiPri
), (
_a˘i⁄
))

	)

757 
	#Io˘l_GëMacByIdx
(
_ulSèπIdx
, 
_pComm⁄Mac
)\

758 
	`Io˘l_GëVÆidMacByIndex
(
DRV_CMD_GET_MAC_BYINDEX
, 
_ulSèπIdx
, (
mac_comm⁄_t
 *)
_pComm⁄Mac
)

	)

759 
	#Io˘l_GëMacM‹eByIdx
(
_ulSèπIdx
, 
_ulGëCou¡
, 
_ulPoöãr
, 
puiCou¡
, 
puiNextIdx
)\

760 
	`Io˘l_GëUni⁄MacM‹eByIndex
(
DRV_CMD_GET_MAC_MORE_BYINDEX
, 
_ulSèπIdx
, 
_ulGëCou¡
, (
ULONG
)
_ulPoöãr
, (
UINT32
 *)
puiCou¡
, (UINT32 *)
puiNextIdx
)

	)

761 
	#Io˘l_GëMacExa˘
(
_vid
, 
_mac_addªss
, 
_pComm⁄Mac
)\

762 
	`Io˘l_GëUni⁄MacVidMacComm⁄
(
DRV_CMD_GET_MAC_EXACT
, (
UINT32
)
_vid
, 
_mac_addªss
, (
mac_comm⁄_t
 *)
_pComm⁄Mac
)

	)

763 
	#Io˘l_GëMˇ°Cou¡
(
pulC¡
)\

764 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_MCASTCOUNT
, (
UINT32
 *)
pulC¡
)

	)

765 
	#Io˘l_SëMˇ°LookupMissDr›
(
_íabÀ
)\

766 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MAC_DLF_MCAST_DROP
, (
UINT32
)
_íabÀ
)

	)

770 
	#Io˘l_SëIgmpPktA˘i⁄
(
_a˘i⁄
)\

771 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_IGMP_TRAP
, (
UINT32
)
_a˘i⁄
)

	)

776 
	#Io˘l_SëP‹tIsﬁ©e
(
_Õ‹t_mask
)\

777 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_SET_PORT_ISOLATE_MASK
, (
UINT32
)0, 
_Õ‹t_mask
)

	)

782 
	#Io˘l_P‹tLedInô
()\

783 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_PORT_LED_INIT
, (
UINT32
)0)

	)

785 
	#Io˘l_SëP‹tLed
(
_Õ‹t
, 
_lök°©e
, 
_p‹ây≥
)\

786 
	`Io˘l_SëSwôchU32P¨a
(
DRV_CMD_SET_PORT_LED
,3,
_Õ‹t
,
_lök°©e
,
_p‹ây≥
)

	)

791 
	#Io˘l_I2cInô
()\

792 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_I2C_INIT
, (
UINT32
)0)

	)

793 
	#Io˘l_I2cP‹tRód
(
_Õ‹t
, 
_uiAddr
, 
_ulPoöãr
, 
_uiLí
)\

794 
	`Io˘l_GëUni⁄Uöt32Uöt32Uöt32ByUl⁄g
(
DRV_CMD_I2C_PORT_READ
, (
UINT32
 )
_Õ‹t
, (
ULONG
)
_ulPoöãr
, (UINT32 )
_uiAddr
, (UINT32 )
_uiLí
)

	)

799 
	#Io˘l_SëMúr‹Group
(
_múr‹_de°_p‹t
, 
_ögªss_Õ‹t_mask
, 
_egªss_Õ‹t_mask
)\

800 
	`Io˘l_SëUni⁄Lp‹tLpmaskLpmask
(
DRV_CMD_SET_MIRROR_GROUP
, 
_múr‹_de°_p‹t
, 
_ögªss_Õ‹t_mask
, 
_egªss_Õ‹t_mask
)

	)

805 
	#Io˘l_GëMibCou¡ByP‹t
(
_Õ‹t
, 
_ty≥
, 
_pui64VÆue
)\

806 
	`Io˘l_GëMIbCou¡ByP‹t
(
DRV_CMD_GET_MIB_COUNT
, (
p‹t_num_t
)
_Õ‹t
, (
MIB_IfSètTy≥_t
)
_ty≥
, (
UINT64
 *)
_pui64VÆue
)

	)

807 
	#Io˘l_SëMibCou¡Sync
()\

808 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MIB_COUNT_SYNC
, 0)

	)

809 
	#Io˘l_SëMibCou¡Re£t
(
_Õ‹t
)\

810 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MIB_COUNT_RESET
, (
UINT32
)
_Õ‹t
)

	)

811 
	#Io˘l_GëP‹tCou¡îByP‹t
(
_Õ‹t
, 
_ty≥
, 
_pui64VÆue
)\

812 
	`Io˘l_GëP‹tCou¡î
(
DRV_CMD_GET_PORT_COUNTER
, (
p‹t_num_t
)
_Õ‹t
, (
Cou¡îName_E
)
_ty≥
, (
UINT64
 *)
_pui64VÆue
)

	)

813 
	#Io˘l_GëP‹tSèti°icsByP‹t
(
_Õ‹t
, 
_ty≥
, 
_pui64VÆue
)\

814 
	`Io˘l_GëP‹tSèti°ics
(
DRV_CMD_GET_PORT_STATISTICS
, (
p‹t_num_t
)
_Õ‹t
, (
°©_ªg_t
)
_ty≥
, (
UINT64
 *)
_pui64VÆue
)

	)

816 
	#Io˘l_Gë_Ep⁄_Mib_Cou¡î
(
Cou¡î
)\

817 
	`Io˘l_GëEp⁄MibCou¡î
(
DRV_CMD_GET_EPON_MIB_COUNTER
,(
πk_ï⁄_cou¡î_≠p_t
 *)
Cou¡î
)

	)

818 
	#Io˘l_Ep⁄MibGlobÆRe£t
()\

819 
	`Io˘l_Ep⁄_Mib_GlobÆ_Re£t
(
DRV_CMD_EPON_MIB_GLOBAL_RESET
)

	)

820 
	#Io˘l_GëP⁄macTøns˚ivî
(
∑ø_ty≥
, 
pD©a
)\

821 
	`Io˘l_Gë_P⁄mac_Tøns˚ivî
(
DRV_CMD_GET_PONMAC_TRANSCEIVER
, 
∑ø_ty≥
, 
pD©a
)

	)

824 #i‡
deföed
(
CONFIG_BOSA
)

825 
	#Io˘l_GëP⁄·ovîÊag
(
FTOvîFLAG
)\

826 
	`Io˘l_Gë_P⁄·ovîÊag
(
DRV_CMD_GET_PONFTOVERFLAG
, (
UINT32
*)
FTOvîFLAG
)

	)

827 
	#Io˘l_SëP⁄·ovîÊag
(
FTOvîFLAG
)\

828 
	`Io˘l_Së_P⁄·ovîÊag
(
DRV_CMD_SET_PONFTOVERFLAG
, (
UINT32
)
FTOvîFLAG
)

	)

829 
	#Io˘l_SëLa£r
(
uiA˘i⁄
)\

830 
	`Io˘l_Së_La£r
(
DRV_CMD_SET_LASER
, (
UINT32
)
uiA˘i⁄
)

	)

831 
	#Io˘l_GëLa£r
(
uiA˘i⁄
)\

832 
	`Io˘l_Gë_La£r
(
DRV_CMD_GET_LASER
, (
UINT32
 *)
uiA˘i⁄
)

	)

833 
	#Io˘l_GëApc£t
(
pApcVÆ
)\

834 
	`Io˘l_Gë_Apc£t
(
DRV_CMD_GET_APCSET
, (
UINT32
 *)
pApcVÆ
)

	)

835 
	#Io˘l_SëApc£t
(
uiApcVÆ
)\

836 
	`Io˘l_Së_Apc£t
(
DRV_CMD_SET_APCSET
, (
UINT32
)
uiApcVÆ
)

	)

837 
	#Io˘l_GëImod£t
(
pModVÆ
)\

838 
	`Io˘l_Gë_Imod£t
(
DRV_CMD_GET_IMODSET
, (
UINT32
 *)
pModVÆ
)

	)

839 
	#Io˘l_SëImod£t
(
uiModVÆ
)\

840 
	`Io˘l_Së_Imod£t
(
DRV_CMD_SET_IMODSET
, (
UINT32
)
uiModVÆ
)

	)

847 
	#Io˘l_SëR©eLimôInô
()\

848 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_RATELIMIT_INIT
, 0)

	)

849 
	#Io˘l_SëR©eLimôP‹t
(
_dúe˘i⁄
, 
_lP‹tMask
, 
_ulKBps
)\

850 
	`Io˘l_SëP‹tR©ñimô
(
DRV_CMD_SET_RATELIMIT_PORT
, 
_dúe˘i⁄
, 
_lP‹tMask
, 
_ulKBps
)

	)

851 
	#Io˘l_SëSt‹mCålP‹t
(
_ty≥
, 
_lP‹tMask
, 
_p°‹m
)\

852 
	`Io˘l_SëP‹tSt‹mlimô
(
DRV_CMD_SET_RATELIMIT_STORM
, 
_ty≥
, 
_lP‹tMask
, 
_p°‹m
)

	)

857 
	#Io˘l_SëQosInô
()\

858 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_QOS_INIT
, 0)

	)

859 
	#Io˘l_SëQos1pRem≠
(
_°1pToI¡Pri
)\

860 
	`Io˘l_SëQos1pRem≠Cé
(
DRV_CMD_SET_QOS_1P_REMAP
, 
_°1pToI¡Pri
)

	)

861 
	#Io˘l_SëQosDs˝Rem≠
(
_°Ds˝ToI¡Pri
)\

862 
	`Io˘l_SëQosDs˝Rem≠Cé
(
DRV_CMD_SET_QOS_DSCP_REMAP
, 
_°Ds˝ToI¡Pri
)

	)

863 
	#Io˘l_SëQosTru°Mode
(
_mode
)\

864 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_QOS_TRUST_MODE
, 
_mode
)

	)

865 
	#Io˘l_SëQosQueueSchedul
(
_°QueueScheduÀ
)\

866 
	`Io˘l_SëQosQueueSchedulCé
(
DRV_CMD_SET_QOS_SCHEDULE
, 
_°QueueScheduÀ
)

	)

867 
	#Io˘l_SëQos2Qid
(
_°1pToI¡Pri
)\

868 
	`Io˘l_SëQos1pRem≠Cé
(
DRV_CMD_SET_QOS_2_QID
, 
_°1pToI¡Pri
)

	)

873 
	#Io˘l_RódReg
(
_chù
, 
_ªgIndex
, 
_pulD©a
)\

874 
	`Io˘l_GëReg
(
DRV_CMD_REG_READ
, 
_chù
, 
_ªgIndex
, (
UINT32
*)
_pulD©a
)

	)

875 
	#Io˘l_WrôeReg
(
_chù
, 
_ªgIndex
, 
_pulD©a
)\

876 
	`Io˘l_SëReg
(
DRV_CMD_REG_WRITE
, 
_chù
, 
_ªgIndex
, 
_pulD©a
)

	)

880 
	#Io˘l_GëCpu
(
_˝uaddr
, 
_pulD©a
)\

881 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_CPU_GET
, 
_˝uaddr
, (
UINT32
*)
_pulD©a
)

	)

882 
	#Io˘l_SëCpu
(
_˝uaddr
, 
_pulD©a
)\

883 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_CPU_SET
, 
_˝uaddr
, 
_pulD©a
)

	)

888 
	#Io˘l_AddCpuToVœnMembî
(
_vœn_id
)\

889 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_CPU_IN_VLAN
, (
UINT32
)(
_vœn_id
))

	)

890 
	#Io˘l_RemoveCpuFromVœnMembî
(
_vœn_id
)\

891 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_CPU_OUT_VLAN
, (
UINT32
)(
_vœn_id
))

	)

896 
	#Io˘l_SëA˛Inô
()\

897 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_ACL_INIT
, 0)

	)

898 
	#Io˘l_AddVœnI¡f
(
_vid
, 
_mac_addr
)\

899 
	`Io˘l_SëUni⁄Uöt32MacAdd
(
DRV_CMD_ADD_ACL_VLAN_INTF
, (
UINT32
)
_vid
, 
_mac_addr
)

	)

900 
	#Io˘l_DñVœnI¡f
(
_vid
)\

901 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_DEL_ACL_VLAN_INTF
, (
UINT32
)
_vid
)

	)

906 
	#Io˘l_£t_ìe_íabÀ
(
_p‹tMask
, 
_íabÀ
)\

907 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_EEE_ENABLE
, (
UINT32
)
_íabÀ
, 
_p‹tMask
)

	)

908 
	#Io˘l_£t_auto_pwr_dwn_íabÀ
(
_p‹tMask
, 
_íabÀ
)\

909 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_AUTO_PWR_DWN_ENABLE
, (
UINT32
)
_íabÀ
, 
_p‹tMask
)

	)

914 
	#Io˘l_gë_ˇbÀ_düg
(
_Õ‹t
, 
_p°CabÀDüg
)\

915 
	`Io˘l_GëCabÀDüg
(
DRV_CMD_GET_CABLE_DIAG
, 
_Õ‹t
, 
_p°CabÀDüg
)

	)

920 
	#Io˘l_GëRSçP‹tSèã
(
_Õ‹t
, 
_puiSèã
)\

921 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GET_STP_PORTSTATE
, 
_Õ‹t
, (
UINT32
 *)
_puiSèã
)

	)

922 
	#Io˘l_SëRSçP‹tSèã
(
_Õ‹t
, 
_uiSèã
)\

923 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_SET_STP_PORTSTATE
, 
_Õ‹t
, 
_uiSèã
)

	)

927 
	#Io˘l_GëGpioVÆ
(
_gpi›ö
, 
_pulD©a
)\

928 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GPIO_GET
, 
_gpi›ö
, (
UINT32
*)
_pulD©a
)

	)

929 
	#Io˘l_SëGpioVÆ
(
_gpi›ö
, 
_pulD©a
)\

930 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_GPIO_SET
, 
_gpi›ö
, 
_pulD©a
)

	)

931 
	#Io˘l_GëGpioMu…i
(
_gpi›ö
, 
_pulD©a
)\

932 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_GPIO_MULTIPLEX_GET
, 
_gpi›ö
, (
UINT32
*)
_pulD©a
)

	)

933 
	#Io˘l_SëGpioMu…i
(
_gpi›ö
, 
_pulD©a
)\

934 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_GPIO_MULTIPLEX_SET
, 
_gpi›ö
, 
_pulD©a
)

	)

935 
	#Io˘l_SëGpioDúIn
(
_gpi›ö
)\

936 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_GPIO_DIR_IN_SET
, 
_gpi›ö
)

	)

937 
	#Io˘l_SëGpioDúOut
(
_gpi›ö
)\

938 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_GPIO_DIR_OUT_SET
, 
_gpi›ö
)

	)

939 
	#Io˘l_SëGpioTrigModeLevñ
(
_gpi›ö
)\

940 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_GPIO_MODE_LEVEL_SET
, 
_gpi›ö
)

	)

941 
	#Io˘l_SëGpioTrigModeEdge
(
_gpi›ö
)\

942 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_GPIO_MODE_EDGE_SET
, 
_gpi›ö
)

	)

943 
	#Io˘l_SëGpioI¡LevñHigh
(
_gpi›ö
)\

944 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_GPIO_INT_LEVEL_HIGH_SET
, 
_gpi›ö
)

	)

945 
	#Io˘l_SëGpioI¡LevñLow
(
_gpi›ö
)\

946 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_GPIO_INT_LEVEL_LOW_SET
, 
_gpi›ö
)

	)

947 
	#Io˘l_SëGpioI¡Edge
(
_gpi›ö
, 
_pulD©a
)\

948 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_GPIO_INT_EDGE_SET
, 
_gpi›ö
, 
_pulD©a
)

	)

949 
	#Io˘l_GëP⁄SètusEºFœg
(
_îrÊag
)\

950 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_PON_STATUS_ERR_FLAG
, (
UINT32
*)
_îrÊag
)

	)

951 
	#Io˘l_SëP⁄SètusEºFœg
(
_îrÊag
)\

952 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_PON_STATUS_ERR_FLAG
, 
_îrÊag
)

	)

953 
	#Io˘l_GëP⁄ModeOffFœg
(
_îrÊag
)\

954 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_PON_MODE_OFF_FLAG
, (
UINT32
*)
_îrÊag
)

	)

955 
	#Io˘l_SëP⁄ModeOffFœg
(
_îrÊag
)\

956 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_PON_MODE_OFF_FLAG
, 
_îrÊag
)

	)

958 
	#Io˘l_GëOamDiscovîySèã
(
_ﬂm_discovîy_°©e
)\

959 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_OAM_DISCOVERY_STATE
, (
UINT32
*)
_ﬂm_discovîy_°©e
)

	)

960 
	#Io˘l_SëOamDiscovîySèã
(
_ﬂm_discovîy_°©e
)\

961 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_OAM_DISCOVERY_STATE
, 
_ﬂm_discovîy_°©e
)

	)

964 
	#Io˘l_GëMacWrôeFœg
(
_wrôe_Êag
)\

965 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_MAC_WRITE_FLAG
, (
UINT32
*)
_wrôe_Êag
)

	)

966 
	#Io˘l_SëMacWrôeFœg
(
_wrôe_Êag
)\

967 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MAC_WRITE_FLAG
, 
_wrôe_Êag
)

	)

969 
	#Io˘l_GëP⁄I¡Ch™geFœg
(
_ch™geÊag
)\

970 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_PON_INT_CHANGE_FLAG
, (
UINT32
*)
_ch™geÊag
)

	)

971 
	#Io˘l_SëP⁄I¡Ch™geFœg
(
_ch™geÊag
)\

972 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_PON_INT_CHANGE_FLAG
, 
_ch™geÊag
)

	)

973 
	#Io˘l_GëGpioI¡Sètus
(
_gpi›ö
, 
_pulD©a
)\

974 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_OPL_INTREG_FIELD_READ
, 
_gpi›ö
, (
UINT32
*)
_pulD©a
)

	)

975 
	#Io˘l_SëGpioI¡Sètus
(
_gpi›ö
, 
_pulD©a
)\

976 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_OPL_INTREG_FIELD_WRITE
, 
_gpi›ö
, 
_pulD©a
)

	)

979 
	#Io˘l_SëSysLed
(
_off£t
, 
_pulD©a
)\

980 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_SET_SYS_LED
, 
_off£t
, 
_pulD©a
)

	)

983 
DRV_RET_E
 
Io˘l_CtcDólP‹tBa£VœnMem
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVid
, 
logic_pmask_t
 *
pLgcPMask
);

984 
DRV_RET_E
 
Io˘l_CtcDñP‹tA˛RuÀ
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiLP‹t
);

985 
DRV_RET_E
 
Io˘l_CtcP‹tIngrVœnFûãr
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiLP‹t
, 
BOOL
 
bE«bÀ
);

986 
DRV_RET_E
 
Io˘l_CtcP‹tIngrVœnRcvMode
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiLP‹t
, 
PORT_INGRESS_MODE_E
 
íIngªssMode
);

987 
DRV_RET_E
 
Io˘l_CtcGëP‹tVœnCfg
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiLP‹t
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnCfg
);

988 
DRV_RET_E
 
Io˘l_CtcSëP‹tVœnCfg
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiLP‹t
, 
CTC_VLAN_CFG_S
 *
p°CtcVœnCfg
);

989 
DRV_RET_E
 
Io˘l_CtcAddP‹tA˛RuÀF‹Vœn
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiLP‹t
, 
CTC_VLAN_CFG_S
 
°CtcVœnCfg
);

990 
DRV_RET_E
 
Io˘l_CtcCheckEnoughVœnE¡ry
(
DRV_CMD_E
 
io˘lCmd
, 
CTC_VLAN_CFG_S
 
°CtcVœnCfg
, 
UINT32
 *
puiEnough
);

991 
DRV_RET_E
 
Io˘l_GëUni⁄Uöt32Uöt32Uöt32ByUöt32
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiVÆue
, UINT32 *
puiVÆue1
, UINT32 *
puiVÆue2
, UINT32 *
puiVÆue3
);

992 
DRV_RET_E
 
Io˘l_GëUni⁄FdbE¡ryByIndex
(
DRV_CMD_E
 
io˘lCmd
, 
UINT32
 
uiIndex
, UINT32 *
puiFid
, 
mac_comm⁄_t
 *
p°FdbE¡ry
);

994 
	#Io˘l_˘c_add_p‹t_ba£_vœn_mem
(
_Vid
, 
_lP‹tMask
)\

995 
	`Io˘l_CtcDólP‹tBa£VœnMem
(
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_ADD
, 
_Vid
, 
_lP‹tMask
)

	)

996 
	#Io˘l_˘c_dñ_p‹t_ba£_vœn_mem
(
_Vid
, 
_pLP‹tMask
)\

997 
	`Io˘l_CtcDólP‹tBa£VœnMem
(
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_DEL
, 
_Vid
, 
_pLP‹tMask
)

	)

998 
	#Io˘l_˘c_add_p‹t_ba£_vœn_mem_by_id
(
_E¡ryId
, 
_pLP‹tMask
)\

999 
	`Io˘l_CtcDólP‹tBa£VœnMem
(
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_ADD_BY_ID
, 
_E¡ryId
, 
_pLP‹tMask
)

	)

1000 
	#Io˘l_˘c_dñ_p‹t_ba£_vœn_mem_by_id
(
_E¡ryId
, 
_pLP‹tMask
)\

1001 
	`Io˘l_CtcDólP‹tBa£VœnMem
(
DRV_CMD_CTC_PORT_BASE_VLAN_MEM_DEL_BY_ID
, 
_E¡ryId
, 
_pLP‹tMask
)

	)

1002 
	#Io˘l_˘c_˛r_p‹t_ba£_vœn_íåy_by_vid
(
_VœnId
)\

1003 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_CTC_PORT_BASE_VLAN_ENTY_CLR
, 
_VœnId
)

	)

1004 
	#Io˘l_˘c_dñ_a˛_ruÀ_f‹_å™•
(
_uiLP‹t
)\

1005 
	`Io˘l_CtcDñP‹tA˛RuÀ
(
DRV_CMD_CTC_ACL_FOR_TRANSP_VLAN_DELETE
, 
_uiLP‹t
)

	)

1006 
	#Io˘l_˘c_dñ_a˛_ruÀ_f‹_èg
(
_uiLP‹t
)\

1007 
	`Io˘l_CtcDñP‹tA˛RuÀ
(
DRV_CMD_CTC_ACL_FOR_TAG_VLAN_DELETE
, 
_uiLP‹t
)

	)

1009 
	#Io˘l_SëMcVœnMembîAdd
(
_vœn_id
, 
_Õ‹t_mask
, 
_Õ‹t_mask_u¡ag
)\

1010 
	`Io˘l_SëUni⁄Uöt32LpmaskLpmask
(
DRV_CMD_CTC_MC_VLAN_ADD
, (
UINT32
)
_vœn_id
,
_Õ‹t_mask
,
_Õ‹t_mask_u¡ag
)

	)

1012 
	#Io˘l_˘c_mc_gë_mac
(
_vid
, 
_mac_addªss
, 
_pmac_mˇ°
)\

1013 
	`Io˘l_GëUni⁄MacVidMˇ°
(
DRV_CMD_CTC_MC_MAC_GET
, (
UINT32
)
_vid
, 
_mac_addªss
, (
mac_mˇ°_t
 *)
_pmac_mˇ°
)

	)

1014 
	#Io˘l_˘c_mc_£t_mac
(
_mac_mˇ°
)\

1015 
	`Io˘l_SëUni⁄MacMˇ°
(
DRV_CMD_CTC_MC_MAC_SET
, (
mac_mˇ°_t
)
_mac_mˇ°
)

	)

1016 
	#Io˘l_˘c_mc_dñ_mac
(
_mac_mˇ°
)\

1017 
	`Io˘l_SëUni⁄MacMˇ°
(
DRV_CMD_CTC_MC_MAC_DEL
, (
mac_mˇ°_t
)
_mac_mˇ°
)

	)

1018 
	#Io˘l_˘c_mc_rmv_vœn_mem
(
_vœn_id
, 
_Õ‹t_mask
)\

1019 
	`Io˘l_SëUni⁄Uöt32Lpmask
(
DRV_CMD_CTC_MC_VLAN_MEM_RMV
, (
UINT32
)
_vœn_id
,
_Õ‹t_mask
)

	)

1020 
	#Io˘l_˘c_mc_gë_vœn_mem
(
_vœn_id
, 
_Õ‹t_mask
, 
_Õ‹t_mask_u¡ag
)\

1021 
	`Io˘l_GëUni⁄Uöt32MaskMask
(
DRV_CMD_CTC_MC_VLAN_MEM_GET
, (
UINT32
)
_vœn_id
,(
logic_pmask_t
 *)
_Õ‹t_mask
,÷ogic_pmask_à*)
_Õ‹t_mask_u¡ag
)

	)

1023 
	#Io˘l_˘c_add_a˛_ruÀ_f‹_å™•
(
_uiLP‹t
, 
°CtcVœn
)\

1024 
	`Io˘l_CtcAddP‹tA˛RuÀF‹Vœn
(
DRV_CMD_CTC_ACL_FOR_TRANSP_VLAN_CREATE
, 
_uiLP‹t
, 
°CtcVœn
)

	)

1025 
	#Io˘l_˘c_add_a˛_ruÀ_f‹_èg
(
_uiLP‹t
, 
°CtcVœn
)\

1026 
	`Io˘l_CtcAddP‹tA˛RuÀF‹Vœn
(
DRV_CMD_CTC_ACL_FOR_TAG_VLAN_CREATE
, 
_uiLP‹t
, 
°CtcVœn
)

	)

1027 
	#Io˘l_˘c_add_a˛_ruÀ_f‹_å™¶
(
_uiLP‹t
, 
°CtcVœn
)\

1028 
	`Io˘l_CtcAddP‹tA˛RuÀF‹Vœn
(
DRV_CMD_CTC_ACL_FOR_TRANSL_VLAN_CREATE
, 
_uiLP‹t
, 
°CtcVœn
)

	)

1032 
	#Io˘l_˘c_add_a˛_ruÀ_f‹_mvœn
(
_uiLP‹t
, 
_uiMcVœn
)\

1033 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_CTC_ACL_FOR_MC_VLAN_CREATE
, 
_uiLP‹t
, 
_uiMcVœn
)

	)

1034 
	#Io˘l_˘c_dñ_a˛_ruÀ_f‹_mvœn
(
_uiLP‹t
, 
_uiMcVœn
)\

1035 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_CTC_ACL_FOR_MC_VLAN_DELETE
, 
_uiLP‹t
, 
_uiMcVœn
)

	)

1038 
	#Io˘l_˘c_gë_a˛_ruÀ
(
_uiLP‹t
, 
_p°CtcVœn
)\

1039 
	`Io˘l_CtcGëP‹tVœnCfg
(
DRV_CMD_CTC_GET_PORT_VLAN_CFG
, 
_uiLP‹t
, 
_p°CtcVœn
)

	)

1040 
	#Io˘l_˘c_£t_a˛_ruÀ
(
_uiLP‹t
, 
_p°CtcVœn
)\

1041 
	`Io˘l_CtcSëP‹tVœnCfg
(
DRV_CMD_CTC_SET_PORT_VLAN_CFG
, 
_uiLP‹t
, 
_p°CtcVœn
)

	)

1043 
	#Io˘l_˘c_dñ_a˛_ruÀ_f‹_å™¶
(
_uiLP‹t
)\

1044 
	`Io˘l_CtcDñP‹tA˛RuÀ
(
DRV_CMD_CTC_ACL_FOR_TRANSL_VLAN_DELETE
, 
_uiLP‹t
)

	)

1045 
	#Io˘l_˘c_p‹t_ögªss_vœn_fûãr
(
_uiLP‹t
, 
_bE«bÀ
)\

1046 
	`Io˘l_CtcP‹tIngrVœnFûãr
(
DRV_CMD_CTC_PORT_INGRESS_VLAN_FILTER
, 
_uiLP‹t
, 
_bE«bÀ
)

	)

1047 
	#Io˘l_˘c_p‹t_ögªss_vœn_rcv_mod
(
_uiLP‹t
, 
_íMode
)\

1048 
	`Io˘l_CtcP‹tIngrVœnRcvMode
(
DRV_CMD_CTC_PORT_INGRESS_VLAN_RECIEVE
, 
_uiLP‹t
, 
_íMode
)

	)

1049 
	#Io˘l_˘c_p‹t_egªss_vœn_mode
(
_uiLP‹t
, 
_íMode
)\

1050 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_CTC_PORT_EGRESS_VLAN_FILTER
, 
_uiLP‹t
, 
_íMode
)

	)

1051 
	#Io˘l_˘c_gë_em±y_a˛_num
(
_puiNum
)\

1052 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_CTC_GET_EMPTY_ACL_RULE_NUM
, 
_puiNum
)

	)

1053 
	#Io˘l_˘c_ª°¨t_aut⁄eg
(
_uiLP‹t
)\

1054 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_CTC_RESTART_AUTONEG
, 
_uiLP‹t
)

	)

1055 
	#Io˘l_˘c_íough_vœn_ödex_check
(
_°CtcVœn
, 
_puiVÆ
)\

1056 
	`Io˘l_CtcCheckEnoughVœnE¡ry
(
DRV_CMD_CTC_ENOUGH_VLAN_INDEX_CHECK
, 
_°CtcVœn
, 
_puiVÆ
)

	)

1058 
	#Io˘l_igmp_unknow_ù4_a˘
(
_uiA˘Mode
)\

1059 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_IGMP_UNKNOW_IP4_ACT
, 
_uiA˘Mode
)

	)

1061 
	#Io˘l_˘c_gë_cvœn_íåy
(
_uiCvid
,
_puiPP‹tMsk
,
_puiPP‹tMskU¡ag
,
_puiFid
)\

1062 
	`Io˘l_GëUni⁄Uöt32Uöt32Uöt32ByUöt32
(
DRV_CMD_CVLAN_ENTRY_GET
, 
_uiCvid
, \

1063 
_puiPP‹tMsk
,
_puiPP‹tMskU¡ag
,
_puiFid
)

	)

1064 
	#Io˘l_˘c_gë_svœn_íåy
(
_uiSvid
,
_puiPP‹tMsk
,
_puiPP‹tMskU¡ag
,
_puiFid
)\

1065 
	`Io˘l_GëUni⁄Uöt32Uöt32Uöt32ByUöt32
(
DRV_CMD_SVLAN_ENTRY_GET
, 
_uiSvid
, \

1066 
_puiPP‹tMsk
,
_puiPP‹tMskU¡ag
,
_puiFid
)

	)

1067 
	#Io˘l_˘c_gë_c2s_íåy
(
_uiIndx
,
_puiCvid
,
_puiSvid
,
_puiPP‹tMsk
)\

1068 
	`Io˘l_GëUni⁄Uöt32Uöt32Uöt32ByUöt32
(
DRV_CMD_C2S_ENTRY_GET
, 
_uiIndx
, \

1069 
_puiCvid
,
_puiSvid
,
_puiPP‹tMsk
)

	)

1070 
	#Io˘l_˘c_gë_s2c_íåy
(
_uiIndx
,
_puiCvid
,
_puiSvid
,
_puiD°PP‹t
)\

1071 
	`Io˘l_GëUni⁄Uöt32Uöt32Uöt32ByUöt32
(
DRV_CMD_S2C_ENTRY_GET
, 
_uiIndx
, \

1072 
_puiCvid
,
_puiSvid
,
_puiD°PP‹t
)

	)

1074 
	#Io˘l_gë_fdb_íåy
(
_uiIndex
, 
_puiFid
, 
_p°FdbE¡ry
)\

1075 
	`Io˘l_GëUni⁄FdbE¡ryByIndex
(
DRV_CMD_FDB_ENTRY_GET
, 
_uiIndex
, \

1076 
_puiFid
, 
_p°FdbE¡ry
)

	)

1080 
	#Io˘l_GëSögÀDbgReg
(
_RgAdd
, 
_pulD©a
)\

1081 
	`Io˘l_GëUni⁄Uöt32ByUöt32
(
DRV_CMD_SINGLE_DBG_REG_GET
, 
_RgAdd
, (
UINT32
*)
_pulD©a
)

	)

1082 
	#Io˘l_SëSögÀDbgReg
(
_RgAdd
, 
_ulD©a
)\

1083 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_SINGLE_DBG_REG_SET
, 
_RgAdd
, 
_ulD©a
)

	)

1087 
	#Io˘l_SëVœnP‹tEgªssMode
(
_p‹t_numbî
, 
_íMode
)\

1088 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_PORT_EGRESS_MODE
, (
UINT32
)
_p‹t_numbî
, 
_íMode
)

	)

1095 
	#Io˘l_P‹tsInô
()\

1096 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_PORTS_INIT
, 0)

	)

1099 
	#Io˘l_SëM™ageVœn
(
_vœnIndex
)\

1100 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_MANAGE_VLAN
, 
_vœnIndex
)

	)

1103 
	#Io˘l_SëWúñessUpSîvi˚Vœn
(
_vœnIndex
)\

1104 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_WIRELESS_UP_SERVICE_VLAN
, 
_vœnIndex
)

	)

1108 
	#Io˘l_SëLa£rOnTe°Fœg
(
d©a0
)\

1109 
	`Io˘l_SëLa£rOnTe°_Fœg
(
DRV_CMD_SET_LASERON_TEST_FLAG
, 
d©a0
)

	)

1111 
	#Io˘l_GëLa£rOnTe°Fœg
(
d©a0
)\

1112 
	`Io˘l_GëLa£rOnTe°_Fœg
(
DRV_CMD_GET_LASERON_TEST_FLAG
, 
d©a0
)

	)

1117 
	#Io˘l_SëFecMode
(
_íabÀ
)\

1118 
	`Io˘l_SëUni⁄Uöt32
(
DRV_CMD_SET_FECMODE
, (
UINT32
)
_íabÀ
)

	)

1120 
	#Io˘l_GëFecMode
(
_a˘i⁄
)\

1121 
	`Io˘l_GëUni⁄Uöt32
(
DRV_CMD_GET_FECMODE
, (
UINT32
 *)
_a˘i⁄
)

	)

1124 
	#Io˘l_p‹t_ögªss_vœn_fûãr
(
_uiLP‹t
, 
_bE«bÀ
)\

1125 
	`Io˘l_CtcP‹tIngrVœnFûãr
(
DRV_CMD_CTC_PORT_INGRESS_VLAN_FILTER
, 
_uiLP‹t
, 
_bE«bÀ
)

	)

1126 
	#Io˘l_p‹t_ögªss_vœn_rcv_mod
(
_uiLP‹t
, 
_íMode
)\

1127 
	`Io˘l_CtcP‹tIngrVœnRcvMode
(
DRV_CMD_CTC_PORT_INGRESS_VLAN_RECIEVE
, 
_uiLP‹t
, 
_íMode
)

	)

1128 
	#Io˘l_p‹t_egªss_vœn_mode
(
_uiLP‹t
, 
_íMode
)\

1129 
	`Io˘l_SëUni⁄Uöt32Uöt32
(
DRV_CMD_CTC_PORT_EGRESS_VLAN_FILTER
, 
_uiLP‹t
, 
_íMode
)

	)

1132 
	#Io˘l_SëLookupMissFloodE«bÀ
(
ty≥
, 
Êood_p‹tmask
)\

1133 
	`Io˘l_SëLookupMissFloodP‹tMask
(
DRV_CMD_LOOKUP_MISS_FLOOD_SET
, 
ty≥
, 
Êood_p‹tmask
)

	)

1136 
DRV_RET_E
 
io˘l_SëM˘øn¶tVœnMembîRmv
(
UINT32
 
u§vœn
,UINT32 
mvœn
, 
logic_pmask_t
 
°LgcMask
);

1137 
DRV_RET_E
 
io˘l_SëMcTøn¶tVœnMembîAdd
(
UINT32
 
u§vœn
, UINT32 
mvœn
, 
logic_pmask_t
 
°LgcMask
,Üogic_pmask_à
°LgcMaskU¡ag
,logic_pmask_à
°LgcMasksvœnU¡ag
);

1138 
DRV_RET_E
 
io˘l_˘cdñc2£¡ry
(
UINT32
 
uiLP‹t
,UINT32 
cvœn
,UINT32 
svœn
);

1139 
DRV_RET_E
 
io˘l_˘ˇddc2£¡ry
(
UINT32
 
uiLP‹t
,UINT32 
cvœn
,UINT32 
svœn
);

1140 
DRV_RET_E
 
io˘l_˘cdñs2˚¡ry
(
UINT32
 
uiLP‹t
,UINT32 
svœn
);

1141 
DRV_RET_E
 
io˘l_˘ˇdds2˚¡ry
(
UINT32
 
uiLP‹t
,UINT32 
svœn
,UINT32 
cvœn
);

1143 #ifde‡ 
__˝lu•lus


	@lw_if_api.h

4 #i‚de‡
_IF_API_H_


5 
	#_IF_API_H_


	)

7 #ifde‡ 
__˝lu•lus


10 
	~"lw_if_ëhp‹t.h
"

12 
	sègIF_FUNC


14 
IF_ETH_FUNC_S
 *
p°EthP‹tFuncs
;

19 }
	tIF_FUNC_S
;

24 
IF_RET_E
 
IF_InôI¡îÁ˚
(
IN
 
ifödex_t
 
uiIfödex
);

25 
IF_RET_E
 
IF_GëP£udoName
(
IN
 
ifödex_t
 
uiIfödex
, 
OUT
 
CHAR
 * 
pcName
);

26 
IF_RET_E
 
IF_GëPhysiˇlId
(
IN
 
ifödex_t
 
uiIfödex
, 
OUT
 
UINT32
 *
puiPid
);

27 
IF_RET_E
 
IF_GëSèã
(
IN
 
ifödex_t
 
uiIfödex
, 
OUT
 
UINT32
 *
puiSèã
);

28 
IF_RET_E
 
IF_GëS≥ed
(
IN
 
ifödex_t
 
uiIfödex
, 
OUT
 
UINT32
 *
puiS≥ed
);

29 
IF_RET_E
 
IF_GëDu∂ex
(
IN
 
ifödex_t
 
uiIfödex
, 
OUT
 
UINT32
 *
puiDu∂ex
);

30 
IF_RET_E
 
IF_GëMdix
(
IN
 
ifödex_t
 
uiIfödex
, 
OUT
 
UINT32
 *
puiMdix
);

31 
IF_RET_E
 
IF_SëIpMask
(
IN
 
ifödex_t
 
uiIfödex
,IN 
CHAR
 *
pIp°r
,IN CHAR *
pMsk°r
);

32 
IF_RET_E
 
IF_SëG©eWay
(
IN
 
ifödex_t
 
uiIfödex
,IN 
CHAR
 *
pGw°r
);

33 
IF_RET_E
 
IF_SëMtu
(
IN
 
ifödex_t
 
uiIfödex
,IN 
UINT
 
uiMtu
);

34 
IF_RET_E
 
IF_De°roy
(
IN
 
ifödex_t
 
uiIfödex
);

35 
IF_RET_E
 
IF_E«bÀ
(
IN
 
ifödex_t
 
uiIfödex
);

36 
IF_RET_E
 
IF_DißbÀ
(
IN
 
ifödex_t
 
uiIfödex
);

45 #ifde‡ 
__˝lu•lus


	@lw_if_ethport.h

17 #i‚de‡
_IF_ETHPORT_H_


18 
	#_IF_ETHPORT_H_


	)

20 #ifde‡ 
__˝lu•lus


24 
	eègPORTSTATE_E


26 
ETHPORT_DOWN
,

27 
ETHPORT_UP
,

28 
ETHPORT_STATE_ALL


29 }
	tPORTSTATE_E
;

31 
	eègDUPLEX_E


33 
DUPLEX_AUTO
,

34 
DUPLEX_HALF
,

35 
DUPLEX_FULL


36 }
	tDUPLEX_E
;

38 
	eègSPEED_E


40 
SPEED_AUTO
,

41 
SPEED_10M
,

42 
SPEED_100M
,

43 
SPEED_1000M


44 }
	tSPEED_E
;

45 
	#MACLEN
 18

	)

47 
	eègFIBERINFOFLAG_E


49 
FIBER_INFO_VALID
,

50 
FIBER_INFO_INVALID


51 }
	tFIBERINFOFLAG_E
;

52 
	#MAX_FIBER_INFO_LEN
 512

	)

54 
	sègETHPORT_S


56 
PORTSTATE_E
 
íSèã
;

57 
UCHAR
 
ucMac
[
MACLEN
];

58 
DUPLEX_E
 
íDu∂ex
;

59 
SPEED_E
 
íS≥ed
;

60 
UINT
 
uiP‹tid
;

61 
FIBERINFOFLAG_E
 
íFibîInfoFœg
;

62 
UCHAR
 *
pucFibîInfo
;

63 
USHORT
 
usP‹tSètus
;

64 
ULONG
 
ulBñ⁄gToPA
;

65 
ULONG
 
ulMa°îP‹t
;

66 
ULONG
 
ulAggGroupID
;

67 
ULONG
 
ulU£Resour˚
;

68 
ULONG
 
ulBlockSètus
;

69 
ULONG
 
ulP‹tModeInAgg
;

70 
ULONG
 
ulPAmode
;

71 
USHORT
 
usLökSètus
;

72 
USHORT
 
usDu∂exSë
;

73 
USHORT
 
usA˘uÆDu∂ex
;

74 
USHORT
 
usSçSèã
;

75 
USHORT
 
usS≥edSë
;

76 
USHORT
 
usA˘uÆS≥ed
;

77 
ULONG
 
ulP‹tDeÁu…Mdi
;

78 
ULONG
 
ulP‹tDeÁu…Du∂ex
;

79 
ULONG
 
ulP‹tDeÁu…S≥ed
;

80 
ULONG
 
uiIsFibî
;

81 }
	tETHPORT_S
;

83 
	sègIf_EthFunc


85 
IF_RET_E
 (*
Inô
)(
ifödex_t
);

86 
IF_RET_E
 (*
SëSèã
)(
ifödex_t
, 
UINT32
);

87 
IF_RET_E
 (*
GëSèã
)(
ifödex_t
, 
UINT32
 *);

88 
IF_RET_E
 (*
SëS≥ed
)(
ifödex_t
, 
UINT32
);

89 
IF_RET_E
 (*
GëS≥ed
)(
ifödex_t
, 
UINT32
 *);

90 
IF_RET_E
 (*
SëDu∂ex
)(
ifödex_t
, 
UINT32
);

91 
IF_RET_E
 (*
GëDu∂ex
)(
ifödex_t
, 
UINT32
 *);

92 
IF_RET_E
 (*
SëMdix
)(
ifödex_t
, 
UINT32
);

93 
IF_RET_E
 (*
GëMdix
)(
ifödex_t
, 
UINT32
 *);

95 }
	tIF_ETH_FUNC_S
;

97 
IF_ETH_FUNC_S
 
g_°EthP‹tFunc
;

99 
IF_RET_E
 
IF_EthP‹tGëDu∂ex
(
ifödex_t
 
uiIfödex
,
UINT32
 *
puiDu∂ex
);

100 
IF_RET_E
 
IF_EthP‹tGëMdix
(
ifödex_t
 
uiIfödex
,
UINT32
 *
puiMdix
);

101 
IF_RET_E
 
IF_EthP‹tGëS≥ed
(
ifödex_t
 
uiIfödex
,
UINT32
 *
puiS≥ed
);

102 
IF_RET_E
 
IF_EthP‹tGëSèã
(
ifödex_t
 
uiIfödex
,
UINT32
 *
puiSèã
);

103 
IF_RET_E
 
IF_EthP‹tInô
(
ifödex_t
 
uiIfödex
);

104 
IF_RET_E
 
IF_EthP‹tSëDu∂ex
(
ifödex_t
 
uiIfödex
,
UINT32
 
uiDu∂ex
);

105 
IF_RET_E
 
IF_EthP‹tSëMdix
(
ifödex_t
 
uiIfödex
,
UINT32
 
uiMdix
);

106 
IF_RET_E
 
IF_EthP‹tSëS≥ed
(
ifödex_t
 
uiIfödex
,
UINT32
 
uiS≥ed
);

107 
IF_RET_E
 
IF_EthP‹tSëSèã
(
ifödex_t
 
uiIfödex
,
UINT32
 
uiSèã
);

109 #ifde‡ 
__˝lu•lus


	@lw_if_l3if.h

17 #i‚de‡
_IF_L3IF_H_


18 
	#_IF_L3IF_H_


	)

20 #ifde‡ 
__˝lu•lus


25 
	sègL3IF_S


27 #ifde‡
CONFIG_IPV6


29 
UINT
 
uiIpAddr
;

30 
UINT
 
uiMask
;

31 
UINT
 
uiG©eWay
;

32 
UINT
 
uiMtu
;

33 
UINT
 
uiPhyid
;

34 
CHAR
 
szLökName
[
IFNAMESIZE
];

35 
CHAR
 
szNëName
[
IFNAMESIZE
];

36 
CHAR
 
szMaˇddr
[
MACADDRSIZE
];

37 
UINT
 
uiDnsM°
;

38 
UINT
 
uiDnsSlv
;

39 
UINT
 
uiW‹kMode
;

40 
ULONG
 
uiLökSèã
;

41 
VOID
 * 
pPri
;

42 }
	tL3IF_S
;

44 
IF_RET_E
 
IF_L3IfInô
(
IN
 
ifödex_t
 
uiIfödex
,
INOUT
 
VOID
 *
pvP¨a
);

45 
VOID
 * 
IF_L3IfAŒoc
(
IF_SUB_TYPE_E
 
íI·y≥
);

46 
VOID
 
IF_L3IfFªe
(
CONST
 VOID * 
pD©a
);

47 
IF_RET_E
 
IF_L3IfGëAâr
(
ifödex_t
 
uiIfödex
,
INT
 
iAârId
, 
VOID
 * 
pVÆue
 ,
UINT
 
iLí
);

48 
IF_RET_E
 
IF_L3IfSëAâr
(
ifödex_t
 
uiIfödex
, 
INT
 
iAârId
,
VOID
 * 
pVÆue
,
UINT
 
uiLí
 );

49 
VOID
 
IF_L3vœnRegi°î
(VOID);

50 
VOID
 
IF_L3vœnUnRegi°î
(VOID);

59 #ifde‡ 
__˝lu•lus


	@lw_if_obj.h

17 #i‚de‡
_IF_OBJ_H_


18 
	#_IF_OBJ_H_


	)

20 #ifde‡ 
__˝lu•lus


24 
	sègIf_Obj
 {

25 
ifödex_t
 
uiIfIndex
;

26 
INT
 
iChûdC¡
;

27 
UCHAR
 
ucP£udoName
[
IFNAMESIZE
];

28 
UCHAR
 
ucIfName
[
IFNAMESIZE
];

29 
CHAR
 
szDesc
[
IF_DESC_LEN
];

30 
IF_ENABLE_E
 
íE«bÀ
;

31 
IF_STATUS_E
 
íSètus
;

32 
ègIf_Obj
 * 
p°Next
;

33 
ègIf_Obj
 * 
p°P¨ít
;

34 
VOID
 * 
p°D©a
;

35 }
	tIF_OBJ_S
;

37 
	sègIF_HEAD


39 
UINT
 
uiMax
;

40 
UINT
 
uiCou¡
;

41 
IF_OBJ_S
 *
p°Next
;

42 }
	tIF_HEAD_S
;

43 
	#IF_Li°LockInô
(
sub_ty≥
Ë
	`•ö_lock_öô
(
lock
[sub_ty≥])

	)

44 
	#IF_Li°RódLock
(
sub_ty≥
Ë
	`ªad_lock_bh
(
lock
[sub_ty≥])

	)

45 
	#IF_Li°RódU∆ock
(
sub_ty≥
Ë
	`ªad_u∆ock_bh
(
lock
[sub_ty≥])

	)

46 
	#IF_Li°WrôeLock
(
sub_ty≥
Ë
	`wrôe_lock_bh
(
lock
[sub_ty≥])

	)

47 
	#IF_Li°WrôeU∆ock
(
sub_ty≥
Ë
	`wrôe_u∆ock_bh
(
lock
[sub_ty≥])

	)

52 
	eègIF_PROC_TYPE


54 
IF_SET_PROC
,

55 
IF_GET_PROC
,

56 
IF_SET_ATTR_PROC
,

59 
IF_END_PROC


60 }
	tIF_PROC_TYPE_E
;

62 
	sègIF_MSG


64 
UINT
 
uiMsgTy≥
;

65 
UINT
 
uiLí
;

66 
UCHAR
 
d©a
[0];

67 }
	tIF_MSG_S
;

70 
	sègIF_SET_PAYLOAD


72 
ifödex_t
 
uiIfödex
;

73 
UINT
 
uiId
;

74 
UINT
 
uiP¨aNum
;

75 
UINT
 
uiLí
;

76 
UCHAR
 
d©a
[0];

77 }
	tIF_SET_PAYLOAD_S
;

78 
	sègIF_DEL_PAYLOAD


80 
ifödex_t
 
ifödex
;

81 }
	tIF_DEL_PAYLOAD_S
;

85 
	sègIF_GET_PAYLOAD


87 
ifödex_t
 
uiIfödex
;

88 
UINT
 
uiD©aId
;

89 }
	tIF_GET_PAYLOAD_S
;

92 
	sègIF_RET_PAYLOAD


94 
INT
 
iRë
;

95 
UINT
 
uiPaylﬂdÀn
;

96 
UCHAR
 
d©a
[0];

97 }
	tIF_RET_PAYLOAD_S
;

102 
	sègIF_ETH_DATA


104 
UCHAR
 
ucEthName
[
IFNAMESIZE
];

105 
INT
 
iEthPhysiˇlId
;

106 
INT
 
iEthSèã
;

107 
INT
 
iEthS≥ed
;

108 
INT
 
iEthDu∂ex
;

110 }
	tIF_ETH_DATA_S
;

113 
VOID
 
InôObjBôPoﬁ
(VOID);

114 
IF_OBJ_S
 * 
AŒocIfObj
(
VOID
);

115 
VOID
 
FªeIfObj
(
IF_OBJ_S
 * 
p°Obj
);

116 
IF_RET_E
 
AddObjToLi°
(
IF_OBJ_S
 * 
p°Obj
);

117 
IF_RET_E
 
RemoveObjFromLi°
(
IF_OBJ_S
 * 
p°Obj
);

118 
IF_OBJ_S
 * 
GëObjByIfödex
(
ifödex_t
 
uiIfödex
);

119 
IF_OBJ_S
 * 
GëObjByP£udoNameByDomaö
(
CHAR
 * 
pcP£udo_«me
,
IF_DOMAIN_E
 
íDomaö
);

120 
	#GëObjByP£udoName
(
pcP£udo_«me
Ë
	`GëObjByP£udoNameByDomaö
’cP£udo_«me,
IF_DOMAIN_NORMAL
)

	)

121 
INT
 
Te°IfObjExi°
(
ifödex_t
 
uiIfödex
);

122 
ifödex_t
 
GëFªeIfödex
(
IF_SUB_TYPE_E
 
íSubTy≥
,
IF_DOMAIN_E
 
íDomaö
);

124 
VOID
 * 
MÆlocIfD©a
(
IF_SUB_TYPE_E
 
íSubTy≥
);

125 
VOID
 
FªeIfD©a
(
ifödex_t
 
ifödex
,
CONST
 VOID * 
pD©a
);

126 
VOID
 
SëIfP£udoName
(
IF_OBJ_S
 *
p°IfObj
, 
CHAR
 * 
pcP£udo_«me
);

127 
VOID
 
SëIfPhysiˇlId
(
IF_OBJ_S
 *
p°IfObj
, 
INT
 
iId
);

128 
IF_RET_E
 
De°royIfD©a
(
ifödex_t
 
ifödex
);

129 
IF_RET_E
 
InôIfD©a
(
ifödex_t
 
ifödex
,
VOID
 *
pD©a
);

132 
VOID
 
K_IF_Regi°î
(
UINT
 
uiSubTy≥
,
IF_REGISTER_BLOCK
 *
p°IfRegBlock
);

133 
VOID
 
K_IF_UnRegi°î
(
UINT
 
uiSubTy≥
);

134 
IF_RET_E
 
InôIfD©a
(
ifödex_t
 
ifödex
,
VOID
 *
pD©a
);

135 
VOID
 
InôIFRegi°îTbl
 (VOID);

136 
VOID
 
SëIfName
(
IF_OBJ_S
 *
p°IfObj
, 
CHAR
 * 
pcIf_«me
);

137 
IF_RET_E
 
SëPriAâr
(
IN
 
ifödex_t
 
uiIfödex
, IN 
IF_ATTR_E
 
iAârId
, IN 
VOID
 * 
pVÆue
,IN 
UINT
 
iLí
);

138 
IF_RET_E
 
GëIfPriAâr
–
IN
 
ifödex_t
 
uiIfödex
, IN 
IF_ATTR_E
 
iAârId
, 
INOUT
 
VOID
 * 
pVÆue
 ,IN 
UINT
 
iLí
);

139 
IF_OBJ_S
 * 
GëNextObj
(
IN
 
IF_SUB_TYPE_E
 
íSubTy≥
,
INOUT
 
ifödex_t
 
uiIfödex
);

140 
IF_OBJ_S
 * 
GëObjByIfNameBYDomaö
(
CHAR
 * 
pcIf_«me
,
IF_DOMAIN_E
 
íDomaö
);

141 
	#GëObjByIfName
(
pcIf_«me
Ë
	`GëObjByIfNameBYDomaö
’cIf_«me,
IF_DOMAIN_NORMAL
)

	)

142 
IF_RET_E
 
GëFú°IfödexbyDomaö
–
IN
 
IF_SUB_TYPE_E
 
íSubTy≥
, IN 
IF_DOMAIN_E
 
íDomaö
,
OUT
 
ifödex_t
 * 
puiIfödex
 );

143 
	#GëFú°Ifödex
(
íSubTy≥
,
puiIfödex
Ë
	`GëFú°IfödexbyDomaö
”nSubTy≥,
IF_DOMAIN_NORMAL
,puiIfödex)

	)

145 
VOID
 
InôIFTbl
(VOID);

147 #ifde‡ 
__˝lu•lus


	@lw_if_pub.h

4 #i‚de‡
_IF_PUB_H_


5 
	#_IF_PUB_H_


	)

7 #ifde‡ 
__˝lu•lus


10 
	~<lw_c⁄fig.h
>

11 #i‡
deföed
(
__KERNEL__
)

12 
	~<löux/li°.h
>

14 
	~<lw_li°.h
>

16 
	~<lw_drv_pub.h
>

20 
	tifödex_t
;

21 
	eègIfdomaö


23 
IF_DOMAIN_NORMAL
=0,

24 
IF_DOMAIN_DEFAULT
,

25 
IF_DOMAIN_VIRTUAL
,

26 
IF_DOMAIN_ATOM
,

27 
IF_DOMAIN_ALL


28 }
	tIF_DOMAIN_E
;

29 
	#IF_FLAG_MASK
 0x3

	)

30 
	#IF_FORCE_DELETE_FLAG
 0x1

	)

31 
	#IF_NO_COMMIT_FLAG
 0x2

	)

32 
	#IF_SUB_TYPE_MASK
 0xff

	)

33 
	#IF_SUB_MAXIFCOUNT
 256

	)

34 
	#IF_SUB_TYPE
(
ifidx
Ë(
IF_SUB_TYPE_E
)(((ifidx)>>24Ë& 
IF_SUB_TYPE_MASK
)

	)

35 
	#IF_INDEX_MASK
 0xff

	)

36 
	#IF_INDEX
(
ifidx
Ë((ifidxË& 
IF_INDEX_MASK
)

	)

37 
	#IF_DOMAIN_MASK
 0x7

	)

38 
	#IF_DOMAIN
(
ifidx
Ë(
IF_DOMAIN_E
)(((ifidx)>>21)&
IF_DOMAIN_MASK
)

	)

39 
	#IF_IFINDEX
(
_sub_ty≥
, 
_ödex
Ë((((
UINT
)_sub_ty≥)<<24)|(_ödex&
IF_INDEX_MASK
))

	)

40 
	#IF_ADD_FALG
(
ifidx
,
Êag
Ë((ifidx)|(((Êag)&
IF_FLAG_MASK
)<<19))

	)

41 
	#IF_GET_FLAG
(
ifidx
Ë(((ifidx)>>19)&
IF_FLAG_MASK
)

	)

42 
	#IF_CLR_FLAG
(
_ifidx
Ë((_ifidxË& (~((
IF_FLAG_MASK
)<<19)))

	)

43 
	#IF_INVALID_IFINDEX
 (
ifödex_t
)(-1)

	)

44 
	#IF_DOMAIN_IFINDEX
(
_sub_ty≥
,
domaö
,
_ödex
Ë((((
UINT
)_sub_ty≥)<<24)|(((UINT)domaö)<<21)|(_ödex&
IF_INDEX_MASK
))

	)

45 
	#IFINDEX_ADDDOMAIN
(
_ifidx
, 
_domaö
Ë(((_ifidxË& (~(((
ifödex_t
)(
IF_DOMAIN_MASK
))<<21))Ë| (((ifödex_t)(IF_DOMAIN_MASK & (_domaö)))<<21))

	)

47 
	eègC⁄√˘i⁄_ty≥


49 
CT_PUREBRIDGE
 = 0,

50 
CT_STATIC
 = 1,

51 
CT_DHCP
 = 2,

52 
CT_PPPOE
 = 3,

53 
CT_DISABLE
 = 4,

54 
CT_PPPOA
 = 5,

55 
CT_IPOA
 = 6,

56 
CT_3G
 = 7 ,

57 
CT_UNDEFINE
 = 8,

58 
CT_MAX


59 }
	tCONNECTION_TYPE_E
;

64 
	eègIf_Aâr


66 
IF_PSEUDONAME
=0,

67 
IF_NAME
,

68 
IF_PARENT
,

69 
IF_PHYID
,

70 
IF_DUPLEX
,

71 
IF_SPEED
,

72 
IF_STATE
,

73 
IF_ATTRENABLE
,

74 
IF_MAC
,

75 
IF_TYPE
,

76 
IF_FIBER_INFO_FLAG
,

77 
IF_FIBER_INFO
,

78 
IF_IP
,

79 
IF_MASK
,

80 
IF_MTU
,

81 
IF_GATEWAY
,

82 
IF_LINKNAME
,

83 
IF_NETNAME
,

84 
IF_DNSPRI_DYN
,

85 
IF_DNSSLV_DYN
,

86 
IF_WORKMODE
,

87 
IF_REFCNT
,

88 
IF_MONITOR_STATE
,

89 
IF_ATTR_ALL


90 }
	tIF_ATTR_E
;

91 
	#IF_WORKMODE_BRIDGE
 2

	)

92 
	#IF_WORKMODE_ROUTER
 1

	)

93 
	#IF_WORKMODE_PHYBASE
 0

	)

95 
	#VALID_IF_ATTR_ID
(
_©å_id
Ë((_©å_idË< 
IF_ATTR_ALL
)

	)

98 
	#CT_PUREBRIDGE_STR
 "bridge"

	)

99 
	#CT_STATIC_STR
 "°©ic"

	)

100 
	#CT_DHCP_STR
 "dh˝-Æloc"

	)

101 
	#CT_PPPOE_STR
 "µp€-Æloc"

	)

102 
	#CT_DISABLE_STR
 "dül-dißbÀ"

	)

103 
	#CT_PPPOA_STR
 "µpﬂ-Æloc"

	)

104 
	#CT_IPOA_STR
 "ùﬂ"

	)

105 
	#CT_3G_STR
 "3G"

	)

106 
	#CT_UNDEFINE_STR
 "dül-undeföe"

	)

109 
	eègIf_Sub_ty≥
 {

110 
IF_SUB_ROOT
 = 0,

111 
IF_SUB_ETH
,

112 
IF_SUB_ETHSUB
,

113 
IF_SUB_ETHPORT
,

114 
IF_SUB_ATM
,

115 
IF_SUB_LAG
,

116 
IF_SUB_L3VLAN
,

117 
IF_SUB_IPSEC
,

118 
IF_SUB_3G
,

119 
IF_SUB_PHY_ALL
,

120 
IF_SUB_TYPE_COUNT


121 }
	tIF_SUB_TYPE_E
;

122 
	#TEMPINDEX
 0xff

	)

123 
	#NOSAVEINDEX
 0x„

	)

124 
	#IF_ROOT_IFINDEX
 
	`IF_IFINDEX
(
IF_SUB_ROOT
,0Ë

	)

125 
	#IF_NOSAVE_IFINDEX
 
	`IF_IFINDEX
(
IF_SUB_ROOT
,
NOSAVEINDEX
)

	)

126 
	#IF_TEMP_IFINDEX
 
IF_NOSAVE_IFINDEX


	)

128 
	#IF_OBJ_SUB_TYPE_MAX
 
IF_SUB_PHY_ALL


	)

129 
	#IF_DESC_LEN
 81

	)

131 
	#IF_LOGIF_PHYID
 (-1Ë

	)

132 
	#ISL3INTF
(
ifödex
Ë((
	`IF_SUB_TYPE
(ifödex)==
IF_SUB_L3VLAN
)||\

	)

133 (
IF_SUB_TYPE
(
ifödex
)==
IF_SUB_IPSEC
)||\

134 (
IF_SUB_TYPE
(
ifödex
)==
IF_SUB_ETH
)||\

135 (
IF_SUB_TYPE
(
ifödex
)==
IF_SUB_ETHSUB
))

137 
	#VALID_SUB_TYPE
(
_subTy≥
Ë((
IF_SUB_TYPE_E
)(_subTy≥Ë< 
IF_OBJ_SUB_TYPE_MAX
)

	)

138 
	#VALID_IFINDEX
(
_ifidx
Ë(
	`VALID_SUB_TYPE
(
	`IF_SUB_TYPE
((_ifidx))Ë&& \

	)

139 (0 =((
_ifidx
Ë& (~ 
IF_ADD_FALG
(
IF_DOMAIN_IFINDEX
(
IF_SUB_TYPE_MASK
,
IF_DOMAIN_MASK
,
IF_INDEX_MASK
),
IF_FLAG_MASK
)))))

141 
	#IFNAMESIZE
 16

	)

142 
	#MACADDRSIZE
 18

	)

143 
	#IFNAMSIZ
 
IFNAMESIZE


	)

145 
	sègIF_ATTR


147 
IF_ATTR_E
 
íAârTy≥
;

148 
CHAR
 * 
pcDe•
;

149 
UINT
 
uiD©aLí
;

150 }
	tIF_ATTR_S
;

152 
	eègIF_ENABLE


154 
IF_MOD_DISABLE
=0,

155 
IF_MOD_ENABLE


156 }
	tIF_ENABLE_E
;

157 
	#IF_MOD_ENABLE_STR
 
ENABLE_STR


	)

158 
	#IF_MOD_DISABLE_STR
 
DISABLE_STR


	)

160 
	eègIF_STATE


162 
IFM_INIT
 = -1,

163 
IFM_PHYLINKDOWN
 = 0,

164 
IFM_NOIPGET
,

165 
IFM_LINKINVALID
,

166 
IFM_LINKVALID
,

167 
IFM_MAX


168 }
	tIF_STATUS_E
;

170 
	#IF_LGC_STATE_E
 
IF_STATUS_E


	)

175 
	sègIf_Info
 {

176 
INT
 
iPhysiˇlId
;

177 
IF_SUB_TYPE_E
 
íSubTy≥
;

178 
ifödex_t
 
uiP¨ítIfödex
;

179 
ifödex_t
 
uiS≥cIndex
;

180 
CHAR
 
szP£udoName
[
IFNAMESIZE
];

181 
CHAR
 
szIfName
[
IFNAMESIZE
];

182 }
	tIF_INFO_S
;

184 
	#IF_INTFINFO_PHYID
(
x
Ë((x).
iPhysiˇlId
)

	)

185 
	#IF_INTFINFO_PHYTYPE
(
x
Ë((x).
íSubTy≥
)

	)

186 
	#IF_INTFINFO_PSEUDO
(
x
Ë((x).
szP£udoName
)

	)

187 
	#IF_INTFINFO_PARENT
(
x
Ë((x).
uiP¨ítIfödex
)

	)

188 
	#IF_INTFINFO_SPEC
(
x
Ë((x).
uiS≥cIndex
)

	)

191 
	#F‹InR™geSubTy≥
(
_subTy≥
, 
_°¨t
, 
_íd
Ë\

	)

192 (
_subTy≥
)=(
INT32
)(
_°¨t
); (_subTy≥)<=(
_íd
); (_subType)++)

198 
	eègIf_Rëu∫_VÆue


200 
IF_OK
 = 0,

201 
IF_NFOUND
,

202 
IF_ALREADY_MAX_NUM
,

203 
IF_ALREADY_EXIST
,

204 
IF_INVALID_IDX
,

205 
IF_ERR_PARAM
,

206 
IF_ERR_TYPE
,

207 
IF_ERR_NO_MEM
,

208 
IF_ERR_PANIC
,

209 
IF_ERR_MSG
,

210 
IF_ERR_MSG_TYPE
,

211 
IF_ERR_COMMIT_NONE
,

212 
IF_NFUND_REG_FUNC
,

213 
IF_INIT_ERR
,

214 
IF_ERR_ATTRID
,

215 
IF_INVALID_DATA
,

216 
IF_CREATE_ERR
,

217 
IF_DELETE_ERR
,

218 
IF_CHILD_EXIST
,

219 
IF_ERR_DEL_DATA
,

220 
IF_ERR_REMOVE_OBJ
,

221 
IF_ERR_ADD_OBJ
,

222 
IF_SHORT_BUFF_SIZE
,

223 
IF_NO_PARENT
,

224 
IF_ERR_GETATTR
,

225 
IF_ERR_SETATTR
,

226 
IF_ERR_PDNAME_USED
,

227 
IF_ERR_NAME_USED
,

228 
IF_NO_FREE_INDEX
,

229 
IF_ERR_PHYID
,

230 
IF_ERR_SPEED
,

231 
IF_ERR_DUPLEX
,

232 
IF_ERR_STATE
,

233 
IF_ERR_MAC
,

234 
IF_ERR_FIBER_INFO_FLAG
,

235 
IF_ERR_FIBER_INFO
,

236 
IF_INVALID_EVENT_TYPE
,

237 
IF_INVALID_EVENT
,

238 
IF_ERR_SPECIFY_TYPE
,

239 
IF_NFOUND_REG_BLOCK
,

240 
IF_RESUME_BLOCK_NFOUND
,

241 
IF_DESTROY_ERR
,

242 
IF_ERR_LINKNAME
,

243 
IF_ERR_GATEWAY
,

244 
IF_ERR_MTU
,

245 
IF_SETIP_ERR
,

246 
IF_SETMASK_ERR
,

247 
IF_ERR_ENABLE
,

248 
IF_VLAN_NOT_EXIST
,

249 
IF_VLAN_IF_ALREADY_EXIST
,

250 
IF_ERR_CREAT_QUEUE
,

251 
IF_ERR_DELETE_QUEUE
,

252 
IF_AGGR_NOT_SUPPORT_MAC_LIMIT
,

253 
IF_ERR_AGG_PORTINFO
,

254 
IF_ERR_AGG_INFO
,

255 
IF_ERR_AGG_FSMPORTINFO
,

256 
IF_LACP_PORTADDFAIL_ALLREADYIN
,

257 
IF_LACP_PORTIPFILTER_ENABLE
,

258 
IF_LACP_PORTIPMACBIND_ENABLE
,

259 
IF_ERR_AGGR_NOT_SUPPORT_MAC_LIMIT
,

260 
IF_ERR_AGGR_INVALID_TYPE
,

261 
IF_LACP_PORTLACPCFGERR_NOTEXIST
,

262 
IF_ERR_AGGR_PORT_IS_MONITOR
,

263 
IF_ERR_AGGR_MAX_MEMBER
,

264 
IF_ERR_AGGR_PORT_IS_AGGRE
,

265 
IF_ERR_AGGR_FE_GE_TOGETHER
,

266 
IF_ERR_AGGR_PORT_IS_ISOLATE
,

267 
IF_ERR_AGGR_PORT_IS_BIDING
,

268 
IF_ERR_AGGR_PORT_IS_ON_AUTH
,

269 
IF_ERR_ISOUSERVLAN_ASSOCIATED_NATIVE_PORT_ADD_TO_AGG
,

270 
IF_LACP_GET_AGGPORTINFO
,

271 
IF_LACP_GET_AGGINFO_ERR
,

272 
IF_LACP_GETPORTMASK_ERR
,

273 
IF_LACP_PORTNOTIN_AGGR
,

274 
IF_LACP_CHECKPORT_ERR
,

275 
IF_LACP_DELETEAGGPORT_ERR
,

276 
IF_LACP_ALLOCATE_OPERKEY_ERR
,

277 
IF_LACP_NO_AGGR_GROUP
,

278 
IF_LACP_AGGR_GROUP_NOT_EXIST
,

279 
IF_LACP_AGGR_GROUP_ALREADY_EXIST
,

280 
IF_LACP_AGGR_DIFFRENT_TYPE
,

281 
IF_GET_PAMASTERPORT_ERR
,

282 
IF_LACP_MODIFYAGGRMODE_ERR
,

283 
IF_LACP_SET_AGGR_MODE_ERR
,

284 
IF_LACP_ENABLE_ERR
,

285 
IF_LACP_MISTYPE
,

286 
IF_LACP_GET_SYSPRI_ERR
,

287 
IF_LACP_GET_SYSMAC_ERR
,

288 
IF_LACP_GET_MASK_ERR
,

289 
IF_ERR_MAX_NUM


290 }
	tIF_RET_E
;

293 
	eègSYS_SETUP_STATE


295 
SYS_SETUP_EARLY
,

296 
SYS_SETUP_CFGINIT
,

297 
SYS_SETUP_IFINIT
,

298 
SYS_SETUP_LATER
,

299 
SYS_SETUP_FINISH


300 }
	tSYS_SETUP_STATE_E
;

303 
IF_INFO_S
 
	tIF_CREATE_PAYLOAD_S
;

305 
	sègIf_GëIndex_Paylﬂd
{

306 
IF_SUB_TYPE_E
 
íTy≥
;

307 
IF_DOMAIN_E
 
íDomaö
;

308 
ifödex_t
 
uiIfödex
;

309 }
	tIF_GETINDEX_PAYLOAD_S
;

311 
	sègIf_GëAâr_Paylﬂd
{

312 
IF_ATTR_E
 
íAârId
;

313 
ifödex_t
 
uiIfödex
;

314 
UINT
 
uiLí
;

315 }
	tIF_GET_ATTR_PAYLOAD_S
;

317 
	sègIf_SëAâr_Paylﬂd
{

318 
IF_ATTR_E
 
íAârId
;

319 
ifödex_t
 
uiIfödex
;

320 
UINT
 
uiLí
;

324 
UCHAR
 *
∑ddr
;

325 
UINT64
 
∑d
;

326 }
d©a
;

327 }
	tIF_SET_ATTR_PAYLOAD_S
;

329 
	sègIf_Gë_Paylﬂd
{

330 
CHAR
 
szP£udoName
[
IFNAMESIZE
];

331 
CHAR
 
szIfName
[
IFNAMESIZE
];

332 
IF_DOMAIN_E
 
íDomaö
;

333 }
	tIF_GET_PAYLOAD_S
;

335 
	sègIF_DEL_PAYLOAD


337 
ifödex_t
 
ifödex
;

338 }
	tIF_DEL_PAYLOAD_S
;

340 
	sègIF_TEST_PAYLOAD


342 
ifödex_t
 
ifödex
;

343 }
	tIF_TEST_PAYLOAD_S
;

346 
	sègIF_SYSSTATE_PAYLOAD


348 
SYS_SETUP_STATE_E
 
íSèã
;

349 }
	tIF_SYSSTATE_PAYLOAD_S
;

350 
	sègIF_ATTACH_PAYLOAD


352 
ifödex_t
 
uiIfödex
;

353 
ifödex_t
 
uiPifödex
;

354 }
	tIF_ATTACH_PAYLOAD_S
;

355 
	sègIF_Regi°î_Block_S


357 
IF_RET_E
 (*
öô
)(
ifödex_t
 
ifödex
,
VOID
 *
∑ø
);

358 
IF_RET_E
 (*
de°roy
)(
ifödex_t
 
ifödex
);

359 
VOID
 * (*
Æloc
)(
IF_SUB_TYPE_E
 
i·y≥
);

360 
VOID
 (*
‰ì
)(
CONST
 VOID *
p
);

361 
IF_RET_E
 (*
©åibuã
)(
ifödex_t
 
uiIfödex
,
INT
 
iAârId
, 
VOID
 * 
pVÆue
 ,
UINT
 
iLí
);

362 
IF_RET_E
 (*
£èâr
)(
ifödex_t
 
uiIfödex
, 
INT
 
iAârId
,
VOID
 * 
pVÆue
,
UINT
 
uiLí
 );

363 }
	tIF_REGISTER_BLOCK
;

365 
	eègIfmcmd
{

366 
IF_CMD_CREATE
,

367 
IF_CMD_DELETE
,

368 
IF_CMD_TEST
,

369 
IF_CMD_GETATTR
,

370 
IF_CMD_GETBYPSNAME
,

371 
IF_CMD_GETNEXTINDEX
,

372 
IF_CMD_GETBYIFNAME
,

373 
IF_CMD_GETFIRSTINDEX
,

374 
IF_CMD_SETATTR
,

375 
IF_CMD_SETSYSSTATE
,

376 
IF_CMD_GETSYSSTATE
,

377 
IF_CMD_ATTACH
,

378 
IF_CMD_MAX


379 }
	tIFM_CMD_E
;

380 
	sègIfmReq
{

381 
IFM_CMD_E
 
cmd
;

382 
IF_RET_E
 
îr
;

384 
IF_CREATE_PAYLOAD_S
 
ifm_¸óçld
;

385 
IF_DEL_PAYLOAD_S
 
ifm_dñ∂d
;

386 
IF_TEST_PAYLOAD_S
 
ifm_ã°∂d
;

387 
IF_GET_ATTR_PAYLOAD_S
 
ifm_gë©å∂d
;

388 
IF_GETINDEX_PAYLOAD_S
 
ifm_gëödex∂d
;

389 
IF_SET_ATTR_PAYLOAD_S
 
ifm_£èâΩld
;

390 
IF_SYSSTATE_PAYLOAD_S
 
ifm_sys°©ïld
;

391 
IF_ATTACH_PAYLOAD_S
 
ifm_©èch
;

392 
IF_GET_PAYLOAD_S
 
ifm_gë∂d
;

393 }
öpuçld
;

394 
	#m_ifm_¸óçld
 
öpuçld
.
ifm_¸óçld


	)

395 
	#m_ifm_dñ∂d
 
öpuçld
.
ifm_dñ∂d


	)

396 
	#m_ifm_ã°∂d
 
öpuçld
.
ifm_ã°∂d


	)

397 
	#m_ifm_gë©å∂d
 
öpuçld
.
ifm_gë©å∂d


	)

398 
	#m_ifm_gëödex∂d
 
öpuçld
.
ifm_gëödex∂d


	)

399 
	#m_ifm_£èâΩld
 
öpuçld
.
ifm_£èâΩld


	)

400 
	#m_ifm_sys°©ïld
 
öpuçld
.
ifm_sys°©ïld


	)

401 
	#m_ifm_©èch
 
öpuçld
.
ifm_©èch


	)

402 
	#m_ifm_gë∂d
 
öpuçld
.
ifm_gë∂d


	)

404 
IF_GETINDEX_PAYLOAD_S
 
ifm_gëidx∂d
;

405 
IF_SYSSTATE_PAYLOAD_S
 
ifm_sysgë°©e
;

408 
UCHAR
 * 
∑ddr
;

409 
UINT64
 
∑d
;

410 }
pd©a
;

411 }
ouçuçld
;

412 
	#m_ifm_¸óãªçld
 
ouçuçld
.
ifm_gëidx∂d


	)

413 
	#m_ifm_gë©åªçld
 
ouçuçld
.
pd©a
.
∑ddr


	)

414 
	#m_ifm_gësys°©e
 
ouçuçld
.
ifm_sysgë°©e


	)

415 
	#m_ifm_gëbyp¢amïld
 
ouçuçld
.
ifm_gëidx∂d
;

	)

417 }
	tIFM_REQ_S
;

420 
	#DEFINE_IF_REGISTER
(
a
Ë
STATIC
 
IF_REGISTER_BLOCK
 
	)
a

424 
	#IFM_DBG_ERR
(
fmt
,
¨g
...)

	)

425 
	#IFM_DBG_INFO
(
fmt
,
¨g
...)

	)

426 #i‡
deföed
(
__KERNEL__
)

427 
IF_RET_E
 
K_IF_Cª©I¡îÁ˚
–
IN
 
IF_INFO_S
 * 
p°Info
, 
OUT
 
ifödex_t
 * 
puiIfIndex
 );

428 
IF_RET_E
 
K_IF_DñëeI¡îÁ˚
–
IN
 
ifödex_t
 
uiIfIndex
 );

429 
IF_RET_E
 
K_IF_GëAâr
–
IN
 
ifödex_t
 
uiIfödex
, IN 
IF_ATTR_E
 
iAârId
, 
INOUT
 
VOID
 * 
pVÆue
 ,IN 
UINT
 
iLí
);

430 
IF_RET_E
 
K_IF_GëNextIfödex
–
IN
 
IF_SUB_TYPE_E
 
íSubTy≥
,
INOUT
 
ifödex_t
 * 
puiIfödex
 );

431 
IF_RET_E
 
K_IF_GëByIFNameDomaö
–
IN
 
CHAR
 * 
«me
, IN 
IF_DOMAIN_E
 
íDomaö
,
OUT
 
ifödex_t
 * 
puiIfIndex
 );

432 
	#K_IF_GëByIFName
(
«me
, 
puiIfIndex
 ) 
	`K_IF_GëByIFNameDomaö
“ame,
IF_DOMAIN_NORMAL
,puiIfIndex)

	)

433 
IF_RET_E
 
K_IF_GëByP£udoNameDomaö
–
IN
 
CHAR
 * 
«me
,IN 
IF_DOMAIN_E
 
íDomaö
, 
OUT
 
ifödex_t
 * 
puiIfIndex
 );

434 
	#K_IF_GëByP£udoName
(
«me
, 
puiIfIndex
 ) 
	`K_IF_GëByP£udoNameDomaö
“ame,
IF_DOMAIN_NORMAL
,puiIfIndex)

	)

435 
IF_RET_E
 
K_IF_GëFú°IfödexByDomaö
–
IN
 
IF_SUB_TYPE_E
 
íSubTy≥
,IN 
IF_DOMAIN_E
 
íDomaö
, 
OUT
 
ifödex_t
 * 
puiIfödex
 );

436 
	#K_IF_GëFú°Ifödex
(
íSubTy≥
,
puiIfödex
Ë
	`K_IF_GëFú°IfödexByDomaö
”nSubTy≥,
IF_DOMAIN_NORMAL
,puiIfödex)

	)

438 
IF_RET_E
 
K_IF_SëAâr
–
IN
 
ifödex_t
 
uiIfödex
, IN 
IF_ATTR_E
 
iAârId
, IN 
VOID
 * 
pVÆue
,IN 
UINT
 
uiLí
 );

439 
IF_RET_E
 
K_IF_Te°IfExi°
(
IN
 
ifödex_t
 
uiIfödex
);

440 
IF_RET_E
 
K_IF_AâachP¨ít
(
IN
 
ifödex_t
 
uiIfödex
,IN ifödex_à
uiPifödex
);

443 
IF_RET_E
 
IF_Cª©I¡îÁ˚
–
IN
 
IF_INFO_S
 * 
p°Info
, 
OUT
 
ifödex_t
 * 
puiIfIndex
 );

444 
IF_RET_E
 
IF_DñëeI¡îÁ˚
–
IN
 
ifödex_t
 
uiIfIndex
 );

445 
IF_RET_E
 
IF_GëAâr
–
IN
 
ifödex_t
 
uiIfödex
, IN 
IF_ATTR_E
 
íAârId
, 
INOUT
 
VOID
 * 
pVÆue
 ,IN 
UINT
 
uiLí
);

446 
IF_RET_E
 
IF_GëNextIfödex
–
IN
 
IF_SUB_TYPE_E
 
íSubTy≥
,
INOUT
 
ifödex_t
 * 
puiIfödex
 );

447 
IF_RET_E
 
IF_GëByP£udoNameDomaö
–
IN
 
CHAR
 * 
«me
, IN 
IF_DOMAIN_E
 
íDomaö
,
OUT
 
ifödex_t
 * 
puiIfIndex
 );

448 
	#IF_GëByP£udoName
(
«me
,
puiIfIndex
Ë
	`IF_GëByP£udoNameDomaö
“ame,
IF_DOMAIN_NORMAL
,puiIfIndex)

	)

449 
IF_RET_E
 
IF_GëFú°IfödexByDomaö
–
IN
 
IF_SUB_TYPE_E
 
íSubTy≥
,IN 
IF_DOMAIN_E
 
íDomaö
, 
OUT
 
ifödex_t
 * 
puiIfödex
 );

450 
	#IF_GëFú°Ifödex
(
íSubTy≥
,
puiIfödex
Ë
	`IF_GëFú°IfödexByDomaö
”nSubTy≥,
IF_DOMAIN_NORMAL
,puiIfödex)

	)

451 
IF_RET_E
 
IF_SëAâr
–
IN
 
ifödex_t
 
uiIfödex
, IN 
IF_ATTR_E
 
iAârId
, IN 
VOID
 * 
pVÆue
,IN 
UINT
 
uiLí
 );

452 
IF_RET_E
 
IF_Te°IfExi°
(
IN
 
ifödex_t
 
uiIfödex
);

453 
IF_RET_E
 
IF_SëSysSèã
(
SYS_SETUP_STATE_E
 
íSèã
);

454 
IF_RET_E
 
IF_GëSysSèã
(
SYS_SETUP_STATE_E
 *
íSèã
);

456 
INT32
 
IF_Exi°I¡îÁ˚Inô
();

457 
IF_RET_E
 
IF_SëPhysiˇlId
(
IN
 
ifödex_t
 
uiIfödex
, IN 
UINT32
 
uiPid
);

458 
IF_RET_E
 
IF_GëPhysiˇlId
(
IN
 
ifödex_t
 
uiIfödex
, 
OUT
 
UINT32
 * 
puiPid
);

459 
IF_RET_E
 
IF_SëP£udoName
(
IN
 
ifödex_t
 
uiIfödex
, IN 
CHAR
 * 
pcName
);

460 
IF_RET_E
 
IF_GëByIFNameDomaö
–
IN
 
CHAR
 * 
«me
, IN 
IF_DOMAIN_E
 
íDomaö
,
OUT
 
ifödex_t
 * 
puiIfIndex
 );

461 
	#IF_GëByIFName
–
«me
, 
puiIfIndex
 ) 
	`IF_GëByIFNameDomaö
“ame,
IF_DOMAIN_NORMAL
,puiIfIndex)

	)

462 
IF_RET_E
 
IF_L2Up
(
IN
 
ifödex_t
 
uiIfödex
);

463 
IF_RET_E
 
IF_AâachP¨ít
(
IN
 
ifödex_t
 
uiIfödex
,IN ifödex_à
uiPifödex
);

464 
IF_RET_E
 
IF_L3IfM⁄ô‹
(
VOID
);

465 
IF_RET_E
 
IF_GëCliName
(
IN
 
ifödex_t
 
uiIfödex
,
INOUT
 
CHAR
 *
pszName
,IN 
UINT
 
uiSize
);

466 
IF_RET_E
 
IF_U£r°r2iÁme
(
INOUT
 
CHAR
 *
°r
,INOUT CHAR *
pszName
,
IN
 
UINT
 
uiSize
);

467 
IF_RET_E
 
IF_GëWebName
(
IN
 
ifödex_t
 
uiIfödex
,
INOUT
 
CHAR
 *
pszName
,IN 
UINT
 
uiSize
);

472 
	#IF_UP
(
s
Ë((s)>=
IFM_NOIPGET
)

	)

473 
	#LINE_PROTOCOL_UP
(
s
Ë((s)=
IFM_LINKVALID
)

	)

475 
	#IP_ZERO
 "0.0.0.0"

	)

480 
	#IF_ETH_MAX
 1

	)

481 
	#IF_L3VLAN_MAX
 3

	)

482 
	#IF_ROOT_MAX
 3

	)

484 
	#IF_ETHPORT_MAX
 48

	)

485 
	sègIf_GëVœnLi°_Paylﬂd
{

486 
IF_DOMAIN_E
 
íDomaö
;

487 }
	tIF_GETVLANLIST_PAYLOAD_S
;

489 
	#IF_L3VLAN_NAMEPREFIX
 "l3vœn"

	)

490 
	#IF_ETH_NAMEPREFIX
 "ëh"

	)

491 
	#IF_ETHPORT_NAMEPREFIX
 "ëhp‹t"

	)

493 
	#IF_TMP_NAME
 "tm¥oŸ"

	)

494 
	#IF_L3VLAN_BASE
 "ëh0"

	)

495 
	#CLI_GIGAPORTPREFIX
 "gigabôëhî√t"

	)

496 
	#CLI_FASTPORTPREFIX
 "ëhî√t"

	)

497 
	#CLI_CABLE
 "ˇbÀ"

	)

499 
	#WEB_GIGAPORTPREFIX
 "GE"

	)

500 
	#WEB_FASTPORTPREFIX
 "FE"

	)

501 
	#WEB_CABLEPORTPREFIX
 "CAB"

	)

502 
	#IF_AGGR_NAMEPREFIX
 "œg"

	)

503 #ifde‡ 
__˝lu•lus


	@lw_if_type.h

5 #i‚de‡
_IF_TYPE_H_


6 
	#_IF_TYPE_H_


	)

8 #ifde‡ 
__˝lu•lus


13 
	eègIf_Maö_ty≥
 {

14 
IF_MAIN_TYPE_ROOT
 = 0,

15 
IF_MAIN_TYPE_ETH
,

16 
IF_MAIN_TYPE_ETHPORT
,

17 
IF_MAIN_TYPE_L3VLAN
,

18 
IF_MAIN_TYPE_ATM
,

19 
IF_MAIN_TYPE_WIRELESS
,

20 
IF_MAIN_TYPE_ALL
,

21 
IF_MAIN_TYPE_COUNT


22 }
	tIF_MAIN_TYPE_E
;

24 #ifde‡ 
__˝lu•lus


	@lw_list.h

1 #i‚de‡
__LW_LIST_H_


2 
	#__LW_LIST_H_


	)

4 #ifde‡
__GNUC__


5 
	#_INLINE_
 
__ölöe__


	)

7 
	#_INLINE_
 
ölöe


	)

10 #unde‡
off£tof


11 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

21 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

22 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

23 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

25 #ifde‡
__KERNEL__


27 
	#¥e„tch
(
x
Ë1

	)

31 #ifde‡
__KERNEL__


34 
	#smp_wmb
()

	)

37 
	sli°_hód
 {

38 
li°_hód
 *
	m√xt
, *
	m¥ev
;

41 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

43 
	#DEFINE_LIST_HEAD
(
«me
Ë
li°_hód
 
	)
name

45 
	#LIST_HEAD
(
«me
) \

46 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

48 
	#INIT_LIST_HEAD
(
±r
) do { \

49 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

50 } 0)

	)

58 
_INLINE_
 
	$__li°_add
(
li°_hód
 * 
add
,

59 
li°_hód
 * 
¥ev
,

60 
li°_hód
 * 
√xt
)

62 
√xt
->
¥ev
 = 
add
;

63 
add
->
√xt
 =Çext;

64 
add
->
¥ev
 =Örev;

65 
¥ev
->
√xt
 = 
add
;

66 
	}
}

76 
_INLINE_
 
	$li°_add
(
li°_hód
 *
add
, li°_hód *
hód
)

78 
	`__li°_add
(
add
, 
hód
, hód->
√xt
);

79 
	}
}

89 
_INLINE_
 
	$li°_add_èû
(
li°_hód
 *
add
, li°_hód *
hód
)

91 
	`__li°_add
(
add
, 
hód
->
¥ev
, head);

92 
	}
}

101 
_INLINE_
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
,

102 
li°_hód
 * 
√xt
)

104 
√xt
->
¥ev
 =Örev;

105 
¥ev
->
√xt
 =Çext;

106 
	}
}

115 
_INLINE_
 
	$li°_dñ
(
li°_hód
 *
íåy
)

117 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

118 
	}
}

124 
_INLINE_
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

126 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

127 
	`INIT_LIST_HEAD
(
íåy
);

128 
	}
}

134 
_INLINE_
 
	$li°_em±y
(
li°_hód
 *
hód
)

136  
hód
->
√xt
 == head;

137 
	}
}

144 
_INLINE_
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

146 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

148 i‡(
fú°
 !
li°
) {

149 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

150 
li°_hód
 *
©
 = 
hód
->
√xt
;

152 
fú°
->
¥ev
 = 
hód
;

153 
hód
->
√xt
 = 
fú°
;

155 
œ°
->
√xt
 = 
©
;

156 
©
->
¥ev
 = 
œ°
;

158 
	}
}

166 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

168 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

175 
	#li°_f‹_óch
(
pos
, 
hód
) \

176 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

185 
	#li°_f‹_óch_ß„
(
pos
, 
≤ext
, 
hód
) \

186 
pos
 = (
hód
)->
√xt
, 
≤ext
 =Öos->next;Öos != (head); \

187 
pos
 = 
≤ext
,Ö√xàpos->
√xt
)

	)

196 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

198 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

199 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

200 &
pos
->
membî
 !(
hód
); \

201 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), member)) \

202 

	)

210 #ifde‡
__KERNEL__


211 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

212 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

213 
	`¥e„tch
(
pos
->
membî
.
√xt
); \

214 &
pos
->
membî
 !(
hód
); \

215 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

216 
	`¥e„tch
(
pos
->
membî
.
√xt
))

	)

219 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

221 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
);\

222 &
pos
->
membî
 !(
hód
); \

223 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member)) \

224 

	)

233 #ifde‡
__KERNEL__


234 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

235 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

236 
	`¥e„tch
(
pos
->
membî
.
¥ev
), &pos->membî !(
hód
); \

237 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), membî))

	)

240 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

242 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
); \

243 &
pos
->
membî
 !(
hód
); \

244 
pos
 = 
	`li°_íåy
’os->
membî
.
¥ev
, 
	`ty≥of
(*pos), member)) \

245 

	)

262 
	#li°_f‹_óch_íåy_ß„_ªvî£
(
pos
, 
n
, 
hód
, 
membî
) \

264 
pos
 = 
	`li°_íåy
((
hód
)->
¥ev
, 
	`ty≥of
(*pos), 
membî
), \

265 
n
 = 
	`li°_íåy
(
pos
->
membî
.
¥ev
, 
	`ty≥of
(*pos), member); \

266 &
pos
->
membî
 !(
hód
); \

267 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
¥ev
, 
	`ty≥of
(*n), member)) \

268 

	)

270 #ifde‡
__KERNEL__


271 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
membî
) \

273 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

274 
	`¥e„tch
(
pos
->
membî
.
√xt
); \

275 &
pos
->
membî
 !(
hód
); \

276 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member), \

277 
	`¥e„tch
(
pos
->
membî
.
√xt
)) \

278 

	)

281 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
membî
) \

283 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

284 &
pos
->
membî
 !(
hód
); \

285 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), member)) \

286 

	)

288 #i‚de‡
__KERNEL__


290 
	#li°_fú°_íåy
(
fú°
, 
hód
, 
membî
,
ty≥
)\

293 if((
hód
)->
√xt
==(head)) \

295 
fú°
=
NULL
; \

298 
fú°
 = 
	`li°_íåy
((
hód
)->
√xt
, 
ty≥
,
membî
); \

300 

	)

302 
	#li°_√xt_íåy
(
pos
,
≤ext
,
hód
, 
membî
,
ty≥
)\

305 if(((
hód
)->
√xt
==(hód))||(
pos
 =
NULL
)||’os->
membî
.next==(head)))\

307 
≤ext
=
NULL
; \

310 
≤ext
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
,
ty≥
,member); \

312 

	)

	@lw_type.h

4 #i‚de‡ 
_INCLUDE_LW_TYPE_DEF_H_


5 
	#_INCLUDE_LW_TYPE_DEF_H_


	)

7 #ifde‡ 
__˝lu•lus


11 
	~"lw_c⁄fig.h
"

13 #if !
deföed
(
NULL
)

14 #i‡
deföed
 
__GNUG__


15 
	#NULL
 (
__nuŒ
)

	)

17 #i‡!
deföed
(
__˝lu•lus
) && 0

18 
	#NULL
 ((*)0)

	)

20 
	#NULL
 (0)

	)

25 #if !
deföed
(
EOF
) || (EOF!=(-1))

26 
	#EOF
 (-1)

	)

29 #if !
deföed
(
FALSE
) || (FALSE!=0)

30 
	#FALSE
 0

	)

33 #if !
deföed
(
TRUE
) || (TRUE!=1)

34 
	#TRUE
 1

	)

37 #i‚de‡
_MWTYPE_DEF


38 
	#_MWTYPE_DEF


	)

40 
	tCHAR
;

41 
	tINT
;

42 
	tLONG
;

43 
	tSHORT
;

44 
	tFLOAT
;

46 
	tINT8
;

47 
	tINT16
;

48 
	tINT32
;

49 
	tINT64
;

51 
	tUINT8
;

52 
	tUINT16
;

53 
	tUINT32
;

54 
	tUINT64
;

56 
	tUCHAR
;

57 
	tUSHORT
;

58 
	tUINT
;

59 
	tULONG
;

60 
	tULONG64
;

61 
ULONG
 
	tIP_ADDRESS
;

62 
	tBYTE
;

64 
	tBOOL
;

65 
	tBOOL_T
;

66 #i‡
deföed
(
CONFIG_PRODUCT_EPN104
Ë|| deföed(
CONFIG_PRODUCT_EPN204
)

67 
	tSTATUS
;

69 
	tARGINT
;

71 
	#BUF_SIZE_16
 16

	)

72 
	#BUF_SIZE_32
 32

	)

73 
	#BUF_SIZE_64
 64

	)

74 
	#BUF_SIZE_128
 128

	)

75 
	#BUF_SIZE_256
 256

	)

77 #i‚de‡
OK


78 
	#OK
 0

	)

81 #i‚de‡
ERROR


82 
	#ERROR
 -1

	)

85 #i‚de‡
NO_ERROR


86 
	#NO_ERROR
 0

	)

89 #i‡
deföed
(
__KERNEL__
)

90 
	#ASSERT
(
_x
Ëdo{ \

	)

91 i‡(!(
_x
)) { \

92 
¥ötk
("As£π[%s][%d] %s\n", 
__FUNCTION__
, 
__LINE__
, #_x); \

96 
	#ASSERT
(
_x
Ëdo{ \

	)

97 i‡(!(
_x
)) { \

98 
¥ötf
("As£π[%s][%d] %s\n", 
__FUNCTION__
, 
__LINE__
, #_x); \

107 
	#BOOL_TRUE
 ((
BOOL_T
)1)

	)

108 
	#BOOL_FALSE
 ((
BOOL_T
)0)

	)

110 
	#ENUMTOSTR
(
VAL
ËVAL##
_STR


	)

111 
	#ENABLE_STR
 "íabÀ"

	)

112 
	#DISABLE_STR
 "dißbÀ"

	)

113 
	#TRUE_STR
 "åue"

	)

114 
	#FALSE_STR
 "Êa£"

	)

118 
	#VOID
 

	)

120 
	tPART_ID
;

122 
	#FAST
 

	)

123 
	#IMPORT
 

	)

124 
	#LOCAL
 

	)

125 
	#CONST
 c⁄°

	)

126 #i‡
deföed
(
UT_TEST
Ë|| deföed(
UT_TEST_X86
)

127 
	#STATIC


	)

129 
	#STATIC
 

	)

133 
	#NO_WAIT
 (0)

	)

134 
	#WAIT_FOREVER
 (-1)

	)

138 
	#IN


	)

139 
	#INOUT


	)

140 
	#OUT


	)

141 
UINT32
 
	tp‹t_num_t
;

143 
UINT16
 
	tvœn_id_t
;

147 
UINT32
 
	tu£r_p‹t_num_t
;

148 
UINT32
 
	tagg_gΩ_num_t
;

150 
	#BUF_SIZE128
 128

	)

151 
	#BUF_SIZE64
 64

	)

152 
	#BUF_SIZE32
 32

	)

153 
	#BUF_SIZE1024
 1024

	)

154 
	#BUF_SIZE256
 256

	)

155 #ifde‡ 
__˝lu•lus


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_CAIF
 37

	)

113 
	#PF_ALG
 38

	)

114 
	#PF_NFC
 39

	)

115 
	#PF_MAX
 40

	)

118 
	#AF_UNSPEC
 
PF_UNSPEC


	)

119 
	#AF_LOCAL
 
PF_LOCAL


	)

120 
	#AF_UNIX
 
PF_UNIX


	)

121 
	#AF_FILE
 
PF_FILE


	)

122 
	#AF_INET
 
PF_INET


	)

123 
	#AF_AX25
 
PF_AX25


	)

124 
	#AF_IPX
 
PF_IPX


	)

125 
	#AF_APPLETALK
 
PF_APPLETALK


	)

126 
	#AF_NETROM
 
PF_NETROM


	)

127 
	#AF_BRIDGE
 
PF_BRIDGE


	)

128 
	#AF_ATMPVC
 
PF_ATMPVC


	)

129 
	#AF_X25
 
PF_X25


	)

130 
	#AF_INET6
 
PF_INET6


	)

131 
	#AF_ROSE
 
PF_ROSE


	)

132 
	#AF_DEC√t
 
PF_DEC√t


	)

133 
	#AF_NETBEUI
 
PF_NETBEUI


	)

134 
	#AF_SECURITY
 
PF_SECURITY


	)

135 
	#AF_KEY
 
PF_KEY


	)

136 
	#AF_NETLINK
 
PF_NETLINK


	)

137 
	#AF_ROUTE
 
PF_ROUTE


	)

138 
	#AF_PACKET
 
PF_PACKET


	)

139 
	#AF_ASH
 
PF_ASH


	)

140 
	#AF_ECONET
 
PF_ECONET


	)

141 
	#AF_ATMSVC
 
PF_ATMSVC


	)

142 
	#AF_RDS
 
PF_RDS


	)

143 
	#AF_SNA
 
PF_SNA


	)

144 
	#AF_IRDA
 
PF_IRDA


	)

145 
	#AF_PPPOX
 
PF_PPPOX


	)

146 
	#AF_WANPIPE
 
PF_WANPIPE


	)

147 
	#AF_LLC
 
PF_LLC


	)

148 
	#AF_CAN
 
PF_CAN


	)

149 
	#AF_TIPC
 
PF_TIPC


	)

150 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

151 
	#AF_IUCV
 
PF_IUCV


	)

152 
	#AF_RXRPC
 
PF_RXRPC


	)

153 
	#AF_ISDN
 
PF_ISDN


	)

154 
	#AF_PHONET
 
PF_PHONET


	)

155 
	#AF_IEEE802154
 
PF_IEEE802154


	)

156 
	#AF_CAIF
 
PF_CAIF


	)

157 
	#AF_ALG
 
PF_ALG


	)

158 
	#AF_NFC
 
PF_NFC


	)

159 
	#AF_MAX
 
PF_MAX


	)

165 
	#SOL_RAW
 255

	)

166 
	#SOL_DECNET
 261

	)

167 
	#SOL_X25
 262

	)

168 
	#SOL_PACKET
 263

	)

169 
	#SOL_ATM
 264

	)

170 
	#SOL_AAL
 265

	)

171 
	#SOL_IRDA
 266

	)

174 
	#SOMAXCONN
 128

	)

177 
	~<bôs/sockaddr.h
>

180 
	ssockaddr


182 
__SOCKADDR_COMMON
 (
ß_
);

183 
	mß_d©a
[14];

189 
	#__ss_Æig¡y≥
 

	)

190 
	#_SS_SIZE
 128

	)

191 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

193 
	ssockaddr_°‹age


195 
__SOCKADDR_COMMON
 (
ss_
);

196 
__ss_Æig¡y≥
 
	m__ss_Æign
;

197 
	m__ss_∑ddög
[
_SS_PADSIZE
];

204 
	mMSG_OOB
 = 0x01,

205 
	#MSG_OOB
 
MSG_OOB


	)

206 
	mMSG_PEEK
 = 0x02,

207 
	#MSG_PEEK
 
MSG_PEEK


	)

208 
	mMSG_DONTROUTE
 = 0x04,

209 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

210 #ifde‡
__USE_GNU


212 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

213 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

215 
	mMSG_CTRUNC
 = 0x08,

216 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

217 
	mMSG_PROXY
 = 0x10,

218 
	#MSG_PROXY
 
MSG_PROXY


	)

219 
	mMSG_TRUNC
 = 0x20,

220 
	#MSG_TRUNC
 
MSG_TRUNC


	)

221 
	mMSG_DONTWAIT
 = 0x40,

222 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

223 
	mMSG_EOR
 = 0x80,

224 
	#MSG_EOR
 
MSG_EOR


	)

225 
	mMSG_WAITALL
 = 0x100,

226 
	#MSG_WAITALL
 
MSG_WAITALL


	)

227 
	mMSG_FIN
 = 0x200,

228 
	#MSG_FIN
 
MSG_FIN


	)

229 
	mMSG_SYN
 = 0x400,

230 
	#MSG_SYN
 
MSG_SYN


	)

231 
	mMSG_CONFIRM
 = 0x800,

232 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

233 
	mMSG_RST
 = 0x1000,

234 
	#MSG_RST
 
MSG_RST


	)

235 
	mMSG_ERRQUEUE
 = 0x2000,

236 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

237 
	mMSG_NOSIGNAL
 = 0x4000,

238 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

239 
	mMSG_MORE
 = 0x8000,

240 
	#MSG_MORE
 
MSG_MORE


	)

241 
	mMSG_WAITFORONE
 = 0x10000,

242 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

244 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

247 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

253 
	smsghdr


255 *
	mmsg_«me
;

256 
sockÀn_t
 
	mmsg_«mñí
;

258 
iovec
 *
	mmsg_iov
;

259 
size_t
 
	mmsg_iovÀn
;

261 *
	mmsg_c⁄åﬁ
;

262 
size_t
 
	mmsg_c⁄åﬁÀn
;

267 
	mmsg_Êags
;

270 #ifde‡
__USE_GNU


272 
	smmsghdr


274 
msghdr
 
	mmsg_hdr
;

275 
	mmsg_Àn
;

280 
	scmsghdr


282 
size_t
 
	mcmsg_Àn
;

287 
	mcmsg_Àvñ
;

288 
	mcmsg_ty≥
;

289 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

290 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

295 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

296 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

298 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

300 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

301 
	#CMSG_FIRSTHDR
(
mhdr
) \

302 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

303 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

304 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

305 & (
size_t
Ë~( (size_tË- 1))

	)

306 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

307 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

308 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

310 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

311 
cmsghdr
 *
__cmsg
Ë
__THROW
;

312 #ifde‡
__USE_EXTERN_INLINES


313 #i‚de‡
_EXTERN_INLINE


314 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

316 
_EXTERN_INLINE
 
cmsghdr
 *

317 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

319 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

321  (
cmsghdr
 *) 0;

323 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

324 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

325 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


326 + 
__mhdr
->
msg_c⁄åﬁÀn
)

327 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

328 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

330  (
cmsghdr
 *) 0;

331  
__cmsg
;

332 
	}
}

339 
	mSCM_RIGHTS
 = 0x01

340 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

341 #ifde‡
__USE_GNU


342 , 
	mSCM_CREDENTIALS
 = 0x02

343 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

347 #ifde‡
__USE_GNU


349 
	su¸ed


351 
pid_t
 
	mpid
;

352 
uid_t
 
	muid
;

353 
gid_t
 
	mgid
;

358 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


359 #i‚de‡
FIOGETOWN


360 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

362 #i‚de‡
FIOSETOWN


363 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

365 #i‚de‡
SIOCATMARK


366 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

368 #i‚de‡
SIOCGPGRP


369 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

371 #i‚de‡
SIOCGSTAMP


372 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

374 #i‚de‡
SIOCGSTAMPNS


375 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

377 #i‚de‡
SIOCSPGRP


378 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

383 
	~<asm/sockë.h
>

385 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


386 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


387 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


388 #unde‡
FIOGETOWN


390 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


391 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


392 #unde‡
FIOSETOWN


394 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


395 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


396 #unde‡
SIOCATMARK


398 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


399 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


400 #unde‡
SIOCGPGRP


402 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


403 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


404 #unde‡
SIOCGSTAMP


406 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


407 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


408 #unde‡
SIOCGSTAMPNS


410 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


411 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


412 #unde‡
SIOCSPGRP


417 
	slögî


419 
	ml_⁄off
;

420 
	ml_lögî
;

424 
__BEGIN_DECLS


431 
ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

432 
__vÀn
, 
__Êags
,

433 
__c⁄°
 
time•ec
 *
__tmo
);

439 
£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

440 
__vÀn
, 
__Êags
);

442 
	g__END_DECLS


	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/time.h

24 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


25 #i‚de‡
_STRUCT_TIMEVAL


26 
	#_STRUCT_TIMEVAL
 1

	)

27 
	~<bôs/ty≥s.h
>

31 
	stimevÆ


33 
__time_t
 
	mtv_£c
;

34 
__su£c⁄ds_t
 
	mtv_u£c
;

39 #i‚de‡
__√ed_timevÆ


40 #i‚de‡
_BITS_TIME_H


41 
	#_BITS_TIME_H
 1

	)

49 
	#CLOCKS_PER_SEC
 1000000l

	)

51 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


60 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

61 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

62 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

69 #ifde‡
__USE_XOPEN


70 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

71 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

73 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

74 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

76 } 
	tfd_£t
;

79 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

81 #ifde‡
__USE_MISC


83 
__fd_mask
 
	tfd_mask
;

86 
	#NFDBITS
 
__NFDBITS


	)

91 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

92 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

93 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

94 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

97 
__BEGIN_DECLS


107 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

108 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

109 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

110 
timevÆ
 *
__ª°ri˘
 
__timeout
);

112 #ifde‡
__USE_XOPEN2K


119 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

120 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

121 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

122 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

123 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


129 
	~<bôs/£À˘2.h
>

132 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (Ë(
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (Ë(
x
); \

51 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

56 
	#__bsw≠_c⁄°™t_32
(
x
) \

57 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

58 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

60 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

61 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

62 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

63 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

64 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

65 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

66 || 
deföed
 
	g__amdÁm10__
)

69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

76 
__v
; }))

	)

78 
	#__bsw≠_32
(
x
) \

79 (
__exãnsi⁄__
 \

80 ({ 
__v
, 
__x
 = (
x
); \

81 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

82 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

84 
	`__asm__
 ("rorw $8, %w0;" \

87 : "Ù" (
__v
) \

88 : "0" (
__x
) \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

99 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

101 
	#__bsw≠_c⁄°™t_64
(
x
) \

102 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

103 | (((
x
) & 0x00ff000000000000ull) >> 40) \

104 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

105 | (((
x
) & 0x000000ff00000000ull) >> 8) \

106 | (((
x
) & 0x00000000ff000000ull) << 8) \

107 | (((
x
) & 0x0000000000ff0000ull) << 24) \

108 | (((
x
) & 0x000000000000ff00ull) << 40) \

109 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

111 #i‡
__WORDSIZE
 == 64

112 
	#__bsw≠_64
(
x
) \

113 (
__exãnsi⁄__
 \

114 ({ 
__v
, 
__x
 = (
x
); \

115 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

116 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

118 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

119 
__v
; }))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

67 
	#IP_MTU
 14

	)

68 
	#IP_FREEBIND
 15

	)

69 
	#IP_IPSEC_POLICY
 16

	)

70 
	#IP_XFRM_POLICY
 17

	)

71 
	#IP_PASSSEC
 18

	)

72 
	#IP_TRANSPARENT
 19

	)

73 
	#IP_MULTICAST_ALL
 49

	)

76 
	#IP_ORIGDSTADDR
 20

	)

77 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

79 
	#IP_MINTTL
 21

	)

83 
	#IP_PMTUDISC_DONT
 0

	)

84 
	#IP_PMTUDISC_WANT
 1

	)

85 
	#IP_PMTUDISC_DO
 2

	)

86 
	#IP_PMTUDISC_PROBE
 3

	)

89 
	#SOL_IP
 0

	)

91 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

92 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

93 
	#IP_MAX_MEMBERSHIPS
 20

	)

95 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


99 
	sù_›ts


101 
ö_addr
 
	mù_d°
;

102 
	mù_›ts
[40];

106 
	sù_mªqn


108 
ö_addr
 
	mimr_mu…üddr
;

109 
ö_addr
 
	mimr_addªss
;

110 
	mimr_ifödex
;

114 
	sö_pktöfo


116 
	mùi_ifödex
;

117 
ö_addr
 
	mùi_•ec_d°
;

118 
ö_addr
 
	mùi_addr
;

125 
	#IPV6_ADDRFORM
 1

	)

126 
	#IPV6_2292PKTINFO
 2

	)

127 
	#IPV6_2292HOPOPTS
 3

	)

128 
	#IPV6_2292DSTOPTS
 4

	)

129 
	#IPV6_2292RTHDR
 5

	)

130 
	#IPV6_2292PKTOPTIONS
 6

	)

131 
	#IPV6_CHECKSUM
 7

	)

132 
	#IPV6_2292HOPLIMIT
 8

	)

134 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

136 
	#IPV6_NEXTHOP
 9

	)

137 
	#IPV6_AUTHHDR
 10

	)

138 
	#IPV6_UNICAST_HOPS
 16

	)

139 
	#IPV6_MULTICAST_IF
 17

	)

140 
	#IPV6_MULTICAST_HOPS
 18

	)

141 
	#IPV6_MULTICAST_LOOP
 19

	)

142 
	#IPV6_JOIN_GROUP
 20

	)

143 
	#IPV6_LEAVE_GROUP
 21

	)

144 
	#IPV6_ROUTER_ALERT
 22

	)

145 
	#IPV6_MTU_DISCOVER
 23

	)

146 
	#IPV6_MTU
 24

	)

147 
	#IPV6_RECVERR
 25

	)

148 
	#IPV6_V6ONLY
 26

	)

149 
	#IPV6_JOIN_ANYCAST
 27

	)

150 
	#IPV6_LEAVE_ANYCAST
 28

	)

151 
	#IPV6_IPSEC_POLICY
 34

	)

152 
	#IPV6_XFRM_POLICY
 35

	)

154 
	#IPV6_RECVPKTINFO
 49

	)

155 
	#IPV6_PKTINFO
 50

	)

156 
	#IPV6_RECVHOPLIMIT
 51

	)

157 
	#IPV6_HOPLIMIT
 52

	)

158 
	#IPV6_RECVHOPOPTS
 53

	)

159 
	#IPV6_HOPOPTS
 54

	)

160 
	#IPV6_RTHDRDSTOPTS
 55

	)

161 
	#IPV6_RECVRTHDR
 56

	)

162 
	#IPV6_RTHDR
 57

	)

163 
	#IPV6_RECVDSTOPTS
 58

	)

164 
	#IPV6_DSTOPTS
 59

	)

166 
	#IPV6_RECVTCLASS
 66

	)

167 
	#IPV6_TCLASS
 67

	)

170 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

171 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

172 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

173 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

176 
	#IPV6_PMTUDISC_DONT
 0

	)

177 
	#IPV6_PMTUDISC_WANT
 1

	)

178 
	#IPV6_PMTUDISC_DO
 2

	)

179 
	#IPV6_PMTUDISC_PROBE
 3

	)

182 
	#SOL_IPV6
 41

	)

183 
	#SOL_ICMPV6
 58

	)

186 
	#IPV6_RTHDR_LOOSE
 0

	)

187 
	#IPV6_RTHDR_STRICT
 1

	)

189 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


23 
	~<bôs/w‹dsize.h
>

26 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

28 #i‡
__WORDSIZE
 == 64

29 
	#__FD_ZERO_STOS
 "°osq"

	)

31 
	#__FD_ZERO_STOS
 "°o¶"

	)

34 
	#__FD_ZERO
(
fd•
) \

36 
__d0
, 
__d1
; \

37 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

38 : "=c" (
__d0
), "=D" (
__d1
) \

39 : "a" (0), "0" ( (
fd_£t
) \

40 /  (
__fd_mask
)), \

41 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

43 } 0)

	)

49 
	#__FD_ZERO
(
£t
) \

51 
__i
; \

52 
fd_£t
 *
__¨r
 = (
£t
); \

53 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

54 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

55 } 0)

	)

59 
	#__FD_SET
(
d
, 
£t
) \

60 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

61 
	#__FD_CLR
(
d
, 
£t
) \

62 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

63 
	#__FD_ISSET
(
d
, 
£t
) \

64 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

20 #i‚de‡
_SYS_SELECT_H


25 
__fdñt_chk
 (
__d
);

26 
	$__fdñt_w¨n
 (
__d
)

27 
	`__w¨«âr
 ("bit outside of fd_set selected");

28 #unde‡
__FD_ELT


29 
	#__FD_ELT
(
d
) \

30 
__exãnsi⁄__
 \

31 ({ 
__d
 = (
d
); \

32 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

33 ? (
__d
 >
__FD_SETSIZE
 \

34 ? 
	`__fdñt_w¨n
 (
__d
Ë: (__d / 
__NFDBITS
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/timex.h

19 #i‚def 
_BITS_TIMEX_H


20 
	#_BITS_TIMEX_H
 1

	)

24 
	stimex


26 
	mmodes
;

27 
	moff£t
;

28 
	m‰eq
;

29 
	mmaxîr‹
;

30 
	me°îr‹
;

31 
	m°©us
;

32 
	mc⁄°™t
;

33 
	m¥ecisi⁄
;

34 
	mtﬁî™˚
;

35 
timevÆ
 
	mtime
;

36 
	mtick
;

38 
	mµs‰eq
;

39 
	mjôãr
;

40 
	mshi·
;

41 
	m°abû
;

42 
	mjô˙t
;

43 
	mˇl˙t
;

44 
	mîr˙t
;

45 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

52 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


53 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

55 
__BEGIN_DECLS


58 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

59 
__liov˙t
,

60 
__c⁄°
 
iovec
 *
__rvec
,

61 
__riov˙t
,

62 
__Êags
)

63 
__THROW
;

66 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, 
__c⁄°
 
iovec
 *
__lvec
,

67 
__liov˙t
,

68 
__c⁄°
 
iovec
 *
__rvec
,

69 
__riov˙t
,

70 
__Êags
)

71 
__THROW
;

73 
__END_DECLS


	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


44 
	#__LEAF
 , 
__Àaf__


	)

45 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

47 
	#__LEAF


	)

48 
	#__LEAF_ATTR


	)

56 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

57 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

58 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

59 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

61 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

62 
	#__THROW
 
	`throw
 ()

	)

63 
	#__THROWNL
 
	`throw
 ()

	)

64 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

66 
	#__THROW


	)

67 
	#__THROWNL


	)

68 
	#__NTH
(
f˘
Ë
	)
fct

74 
	#__ölöe


	)

76 
	#__THROW


	)

77 
	#__THROWNL


	)

78 
	#__NTH
(
f˘
Ë
	)
fct

80 
	#__c⁄°
 c⁄°

	)

81 
	#__sig√d
 sig√d

	)

82 
	#__vﬁ©ûe
 vﬁ©ûe

	)

88 
	#__P
(
¨gs
Ë
	)
args

89 
	#__PMT
(
¨gs
Ë
	)
args

94 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

95 
	#__STRING
(
x
Ë#x

	)

98 
	#__±r_t
 *

	)

99 
	#__l⁄g_doubÀ_t
 

	)

103 #ifdef 
__˝lu•lus


104 
	#__BEGIN_DECLS
 "C" {

	)

105 
	#__END_DECLS
 }

	)

107 
	#__BEGIN_DECLS


	)

108 
	#__END_DECLS


	)

117 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


118 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

119 
	#__END_NAMESPACE_STD
 }

	)

120 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

121 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

122 
	#__END_NAMESPACE_C99
 }

	)

123 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

128 
	#__BEGIN_NAMESPACE_STD


	)

129 
	#__END_NAMESPACE_STD


	)

130 
	#__USING_NAMESPACE_STD
(
«me
)

	)

131 
	#__BEGIN_NAMESPACE_C99


	)

132 
	#__END_NAMESPACE_C99


	)

133 
	#__USING_NAMESPACE_C99
(
«me
)

	)

138 #i‚de‡
__BOUNDED_POINTERS__


139 
	#__bounded


	)

140 
	#__unbounded


	)

141 
	#__±rvÆue


	)

146 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

147 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

149 #i‡
__GNUC_PREREQ
 (4,3)

150 
	#__w¨nde˛
(
«me
, 
msg
) \

151 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

152 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

153 
	#__îr‹de˛
(
«me
, 
msg
) \

154 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

156 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

157 
	#__w¨«âr
(
msg
)

	)

158 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

162 #i‡
__GNUC_PREREQ
 (2,97)

164 
	#__Êex¨r
 []

	)

166 #ifde‡
__GNUC__


167 
	#__Êex¨r
 [0]

	)

169 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

170 
	#__Êex¨r
 []

	)

173 
	#__Êex¨r
 [1]

	)

189 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

191 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

192 #ifde‡
__˝lu•lus


193 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

194 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

195 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

196 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

198 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

199 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

200 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

201 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

203 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

204 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

217 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

218 
	#__©åibuã__
(
xyz
Ë

	)

224 #i‡
__GNUC_PREREQ
 (2,96)

225 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

227 
	#__©åibuã_mÆloc__


	)

233 #i‡
__GNUC_PREREQ
 (2,96)

234 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

236 
	#__©åibuã_puª__


	)

240 #i‡
__GNUC_PREREQ
 (2,5)

241 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

243 
	#__©åibuã_c⁄°__


	)

249 #i‡
__GNUC_PREREQ
 (3,1)

250 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

251 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

253 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

254 
	#__©åibuã_noölöe__


	)

258 #i‡
__GNUC_PREREQ
 (3,2)

259 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

261 
	#__©åibuã_dïªˇãd__


	)

270 #i‡
__GNUC_PREREQ
 (2,8)

271 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

273 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

280 #i‡
__GNUC_PREREQ
 (2,97)

281 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

282 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

284 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

289 #i‡
__GNUC_PREREQ
 (3,3)

290 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

292 
	#__n⁄nuŒ
(
∑øms
)

	)

297 #i‡
__GNUC_PREREQ
 (3,4)

298 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

299 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

300 #i‡
__USE_FORTIFY_LEVEL
 > 0

301 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

304 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

306 #i‚de‡
__wur


307 
	#__wur


	)

311 #i‡
__GNUC_PREREQ
 (3,2)

312 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

314 
	#__Æways_ölöe
 
__ölöe


	)

319 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

320 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


321 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

322 #i‡
__GNUC_PREREQ
 (4,3)

323 
	#__exã∫_Æways_ölöe
 \

324 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

326 
	#__exã∫_Æways_ölöe
 \

327 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

330 
	#__exã∫_ölöe
 
__ölöe


	)

331 #i‡
__GNUC_PREREQ
 (4,3)

332 
	#__exã∫_Æways_ölöe
 \

333 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

335 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #i‡
__GNUC_PREREQ
 (4,3)

343 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

344 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

351 #i‡!
__GNUC_PREREQ
 (2,8)

352 
	#__exãnsi⁄__


	)

356 #i‡!
__GNUC_PREREQ
 (2,92)

357 
	#__ª°ri˘


	)

363 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


364 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

366 #ifde‡
__GNUC__


367 
	#__ª°ri˘_¨r


	)

369 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

370 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

373 
	#__ª°ri˘_¨r


	)

378 
	~<bôs/w‹dsize.h
>

380 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


381 
	#__LDBL_COMPAT
 1

	)

382 #ifde‡
__REDIRECT


383 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

384 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

385 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

386 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

387 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

388 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

389 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

390 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

391 
	#__LDBL_REDIR_DECL
(
«me
) \

392 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

394 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

395 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

396 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

399 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


400 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

401 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

402 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

403 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

404 
	#__LDBL_REDIR_DECL
(
«me
)

	)

405 #ifde‡
__REDIRECT


406 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

407 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

408 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/types.h

23 #i‚def 
_SYS_TYPES_H


24 
	#_SYS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 #ifdef 
__USE_BSD


33 #i‚de‡
__u_ch¨_deföed


34 
__u_ch¨
 
	tu_ch¨
;

35 
__u_sh‹t
 
	tu_sh‹t
;

36 
__u_öt
 
	tu_öt
;

37 
__u_l⁄g
 
	tu_l⁄g
;

38 
__quad_t
 
	tquad_t
;

39 
__u_quad_t
 
	tu_quad_t
;

40 
__fsid_t
 
	tfsid_t
;

41 
	#__u_ch¨_deföed


	)

45 
__loff_t
 
	tloff_t
;

47 #i‚de‡
__öo_t_deföed


48 #i‚de‡
__USE_FILE_OFFSET64


49 
__öo_t
 
	töo_t
;

51 
__öo64_t
 
	töo_t
;

53 
	#__öo_t_deföed


	)

55 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


56 
__öo64_t
 
	töo64_t
;

57 
	#__öo64_t_deföed


	)

60 #i‚de‡
__dev_t_deföed


61 
__dev_t
 
	tdev_t
;

62 
	#__dev_t_deföed


	)

65 #i‚de‡
__gid_t_deföed


66 
__gid_t
 
	tgid_t
;

67 
	#__gid_t_deföed


	)

70 #i‚de‡
__mode_t_deföed


71 
__mode_t
 
	tmode_t
;

72 
	#__mode_t_deföed


	)

75 #i‚de‡
__∆ök_t_deföed


76 
__∆ök_t
 
	t∆ök_t
;

77 
	#__∆ök_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

85 #i‚de‡
__off_t_deföed


86 #i‚de‡
__USE_FILE_OFFSET64


87 
__off_t
 
	toff_t
;

89 
__off64_t
 
	toff_t
;

91 
	#__off_t_deföed


	)

93 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


94 
__off64_t
 
	toff64_t
;

95 
	#__off64_t_deföed


	)

98 #i‚de‡
__pid_t_deföed


99 
__pid_t
 
	tpid_t
;

100 
	#__pid_t_deföed


	)

103 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

104 && !
deföed
 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

228 && !
deföed
 
__blksize_t_deföed


229 
__blksize_t
 
	tblksize_t
;

230 
	#__blksize_t_deföed


	)

234 #i‚de‡
__USE_FILE_OFFSET64


235 #i‚de‡
__blk˙t_t_deföed


236 
__blk˙t_t
 
	tblk˙t_t
;

237 
	#__blk˙t_t_deföed


	)

239 #i‚de‡
__fsblk˙t_t_deföed


240 
__fsblk˙t_t
 
	tfsblk˙t_t
;

241 
	#__fsblk˙t_t_deföed


	)

243 #i‚de‡
__fsfû˙t_t_deföed


244 
__fsfû˙t_t
 
	tfsfû˙t_t
;

245 
	#__fsfû˙t_t_deföed


	)

248 #i‚de‡
__blk˙t_t_deföed


249 
__blk˙t64_t
 
	tblk˙t_t
;

250 
	#__blk˙t_t_deföed


	)

252 #i‚de‡
__fsblk˙t_t_deföed


253 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

254 
	#__fsblk˙t_t_deföed


	)

256 #i‚de‡
__fsfû˙t_t_deföed


257 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

258 
	#__fsfû˙t_t_deföed


	)

262 #ifde‡
__USE_LARGEFILE64


263 
__blk˙t64_t
 
	tblk˙t64_t
;

264 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

265 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

270 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


271 
	~<bôs/±hªadty≥s.h
>

274 
	g__END_DECLS


	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

27 #i‚de‡
SO_PASSCRED


28 
	#SO_PASSCRED
 16

	)

29 
	#SO_PEERCRED
 17

	)

30 
	#SO_RCVLOWAT
 18

	)

31 
	#SO_SNDLOWAT
 19

	)

32 
	#SO_RCVTIMEO
 20

	)

33 
	#SO_SNDTIMEO
 21

	)

37 
	#SO_SECURITY_AUTHENTICATION
 22

	)

38 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

39 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

41 
	#SO_BINDTODEVICE
 25

	)

44 
	#SO_ATTACH_FILTER
 26

	)

45 
	#SO_DETACH_FILTER
 27

	)

47 
	#SO_PEERNAME
 28

	)

48 
	#SO_TIMESTAMP
 29

	)

49 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

51 
	#SO_ACCEPTCONN
 30

	)

53 
	#SO_PEERSEC
 31

	)

54 
	#SO_PASSSEC
 34

	)

55 
	#SO_TIMESTAMPNS
 35

	)

56 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

58 
	#SO_MARK
 36

	)

60 
	#SO_TIMESTAMPING
 37

	)

61 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

63 
	#SO_PROTOCOL
 38

	)

64 
	#SO_DOMAIN
 39

	)

66 
	#SO_RXQ_OVFL
 40

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__BEGIN_DECLS


32 
__exãnsi⁄__


33 
	$gnu_dev_maj‹
 (
__dev
)

34 
__THROW
 
__©åibuã_c⁄°__
;

35 
__exãnsi⁄__


36 
	$gnu_dev_mö‹
 (
__dev
)

37 
__THROW
 
__©åibuã_c⁄°__
;

38 
__exãnsi⁄__


39 
	$gnu_dev_makedev
 (
__maj‹
,

40 
__mö‹
)

41 
__THROW
 
__©åibuã_c⁄°__
;

43 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

47  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

53  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

54 
	}
}

56 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

57 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

59  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

60 | (((Ë(
__mö‹
 & ~0xff)) << 12)

61 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

62 
	}
}

64 
	g__END_DECLS


67 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

68 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

69 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
54
1235
drv_wtd_user.h
if_notifier.h
ipc_protocol.h
lw_config_api.h
lw_config_oid.h
lw_drv_pub.h
lw_drv_req.h
lw_if_api.h
lw_if_ethport.h
lw_if_l3if.h
lw_if_obj.h
lw_if_pub.h
lw_if_type.h
lw_list.h
lw_type.h
/usr/include/arpa/inet.h
/usr/include/sys/socket.h
/usr/include/sys/time.h
/usr/include/time.h
/usr/include/bits/sigset.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/features.h
/usr/include/netinet/in.h
/usr/include/sys/select.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/asm/socket.h
/usr/include/bits/byteswap.h
/usr/include/bits/in.h
/usr/include/bits/predefs.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sockaddr.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/gnu/stubs.h
/usr/include/stdint.h
/usr/include/sys/cdefs.h
/usr/include/sys/types.h
/usr/include/asm-generic/socket.h
/usr/include/bits/endian.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/sys/sysmacros.h
/usr/include/asm/sockios.h
/usr/include/asm-generic/sockios.h
