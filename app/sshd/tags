!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#1	libtomcrypt/crypt.tex	/^	\\section*{#1}$/;"	s
#1	libtomcrypt/crypt.tex	/^	\\section{#1}$/;"	s
A	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned long A[32], B[32];$/;"	m	struct:xtea_key
ACC	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 ACC[MAXBLOCKSIZE],$/;"	m	struct:__anon19
ACCUM	libtommath/mtest/mpi.c	79;"	d	file:
ADDKEY	libtomcrypt/src/prngs/sober128.c	169;"	d	file:
AF_INET6	fake-rfc2553.h	88;"	d
AGENTDIRPREFIX	svr-agentfwd.c	44;"	d	file:
AGE_FACTOR	progressmeter.c	142;"	d	file:
AI_CANONNAME	fake-rfc2553.h	109;"	d
AI_NUMERICHOST	fake-rfc2553.h	112;"	d
AI_PASSIVE	fake-rfc2553.h	106;"	d
ALLOC	libtommath/mtest/mpi.h	58;"	d
AND OR and XOR Operations	libtommath/bn.tex	/^\\subsection{AND, OR and XOR Operations}$/;"	b
ANSI X9 63 Export	libtomcrypt/crypt.tex	/^\\subsection{ANSI X9.63 Export}$/;"	b
ANSI X9 63 Import	libtomcrypt/crypt.tex	/^\\subsection{ANSI X9.63 Import}$/;"	b
ANSI_RNG	libtomcrypt/src/prngs/rng_get_bytes.c	55;"	d	file:
AR	Makefile	/^AR=rsdk-linux-ar$/;"	m
ARGCHK	libtommath/mtest/mpi.h	63;"	d
ARGCHK	libtommath/mtest/mpi.h	66;"	d
ARGCHK	libtommath/mtest/mpi.h	68;"	d
ARGTYPE	libtomcrypt/crypt.tex	/^\\subsubsection{ARGTYPE}$/;"	b
ARGTYPE	libtomcrypt/src/headers/tomcrypt_cfg.h	48;"	d
ARM	libtomcrypt/src/prngs/rng_get_bytes.c	94;"	d	file:
ASCII Conversions	libtommath/bn.tex	/^\\section{ASCII Conversions}$/;"	s
ASN 1 BIT STRING	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 BIT STRING}$/;"	b
ASN 1 CHOICE	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 CHOICE}$/;"	b
ASN 1 Flexi Decoder	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 Flexi Decoder}$/;"	b
ASN 1 IA5 STRING	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 IA5 STRING}$/;"	b
ASN 1 INTEGER	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 INTEGER}$/;"	b
ASN 1 OBJECT IDENTIFIER	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 OBJECT IDENTIFIER}$/;"	b
ASN 1 OCTET STRING	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 OCTET STRING}$/;"	b
ASN 1 PRINTABLE STRING	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 PRINTABLE STRING}$/;"	b
ASN 1 UTCTIME	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 UTCTIME}$/;"	b
ASN 1 UTF8 STRING	libtomcrypt/crypt.tex	/^\\subsection{ASN.1 UTF8 STRING}$/;"	b
ASN1_CLASS_APPLICATION	keyimport.c	231;"	d	file:
ASN1_CLASS_CONTEXT_SPECIFIC	keyimport.c	232;"	d	file:
ASN1_CLASS_MASK	keyimport.c	234;"	d	file:
ASN1_CLASS_PRIVATE	keyimport.c	233;"	d	file:
ASN1_CLASS_UNIVERSAL	keyimport.c	230;"	d	file:
ASN1_CONSTRUCTED	keyimport.c	237;"	d	file:
ATTRIB_NORETURN	dbutil.h	38;"	d
ATTRIB_NORETURN	dbutil.h	42;"	d
ATTRIB_PRINTF	dbutil.h	37;"	d
ATTRIB_PRINTF	dbutil.h	41;"	d
ATTRIB_SENTINEL	dbutil.h	39;"	d
ATTRIB_SENTINEL	dbutil.h	43;"	d
AUTH_METHOD_INTERACT	auth.h	93;"	d
AUTH_METHOD_INTERACT_LEN	auth.h	94;"	d
AUTH_METHOD_NONE	auth.h	87;"	d
AUTH_METHOD_NONE_LEN	auth.h	88;"	d
AUTH_METHOD_PASSWORD	auth.h	91;"	d
AUTH_METHOD_PASSWORD_LEN	auth.h	92;"	d
AUTH_METHOD_PUBKEY	auth.h	89;"	d
AUTH_METHOD_PUBKEY_LEN	auth.h	90;"	d
AUTH_TIMEOUT	sysoptions.h	23;"	d
AUTH_TYPE_INTERACT	auth.h	85;"	d
AUTH_TYPE_NONE	auth.h	82;"	d
AUTH_TYPE_PASSWORD	auth.h	84;"	d
AUTH_TYPE_PUBKEY	auth.h	83;"	d
Absolute	libtommath/bn.tex	/^\\subsection{Absolute}$/;"	b
Accelerated CCM	libtomcrypt/crypt.tex	/^\\subsubsection{Accelerated CCM}$/;"	b
Accelerated F9	libtomcrypt/crypt.tex	/^\\subsubsection{Accelerated F9}$/;"	b
Accelerated GCM	libtomcrypt/crypt.tex	/^\\subsubsection{Accelerated GCM}$/;"	b
Accelerated LRW	libtomcrypt/crypt.tex	/^\\subsubsection{Accelerated LRW}$/;"	b
Accelerated OMAC	libtomcrypt/crypt.tex	/^\\subsubsection{Accelerated OMAC}$/;"	b
Accelerated XCBC MAC	libtomcrypt/crypt.tex	/^\\subsubsection{Accelerated XCBC-MAC}$/;"	b
Acceleration	libtomcrypt/crypt.tex	/^\\subsection{Acceleration}$/;"	b
Addition and Subtraction	libtommath/bn.tex	/^\\section{Addition and Subtraction}$/;"	s
Additional Authentication Data	libtomcrypt/crypt.tex	/^\\subsubsection{Additional Authentication Data}$/;"	b
Algebraic Functions	libtommath/bn.tex	/^\\chapter{Algebraic Functions}$/;"	c
Algo_Type	algo.h	/^struct Algo_Type {$/;"	s
Algorithm Two	libtomcrypt/crypt.tex	/^\\subsection{Algorithm Two}$/;"	b
AuthState	auth.h	/^struct AuthState {$/;"	s
B	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned long A[32], B[32];$/;"	m	struct:xtea_key
B	libtomcrypt/src/headers/tomcrypt_pk.h	/^   char *B;$/;"	m	struct:__anon28
B	libtomcrypt/src/prngs/sober128.c	43;"	d	file:
BASE64	libtomcrypt/src/headers/tomcrypt_custom.h	138;"	d
BITS	libtommath/mtest/mpi.h	188;"	d
BLOCKSIZE	libtomcrypt/src/ciphers/anubis.c	41;"	d	file:
BLOCKSIZE	libtomcrypt/src/ciphers/khazad.c	37;"	d	file:
BLOCKSIZEB	libtomcrypt/src/ciphers/anubis.c	42;"	d	file:
BLOCKSIZEB	libtomcrypt/src/ciphers/khazad.c	38;"	d	file:
BLOWFISH	libtomcrypt/src/headers/tomcrypt_custom.h	94;"	d
BNCORE_C	libtommath/tommath_class.h	129;"	d
BN_ERROR_C	libtommath/tommath_class.h	11;"	d
BN_FAST_MP_INVMOD_C	libtommath/tommath_class.h	12;"	d
BN_FAST_MP_INVMOD_C	libtommath/tommath_class.h	437;"	d
BN_FAST_MP_INVMOD_C	libtommath/tommath_superclass.h	60;"	d
BN_FAST_MP_MONTGOMERY_REDUCE_C	libtommath/tommath_class.h	13;"	d
BN_FAST_MP_MONTGOMERY_REDUCE_C	libtommath/tommath_class.h	345;"	d
BN_FAST_MP_MONTGOMERY_REDUCE_C	libtommath/tommath_class.h	543;"	d
BN_FAST_S_MP_MUL_DIGS_C	libtommath/tommath_class.h	14;"	d
BN_FAST_S_MP_MUL_DIGS_C	libtommath/tommath_class.h	557;"	d
BN_FAST_S_MP_MUL_DIGS_C	libtommath/tommath_class.h	958;"	d
BN_FAST_S_MP_MUL_HIGH_DIGS_C	libtommath/tommath_class.h	15;"	d
BN_FAST_S_MP_MUL_HIGH_DIGS_C	libtommath/tommath_class.h	713;"	d
BN_FAST_S_MP_MUL_HIGH_DIGS_C	libtommath/tommath_class.h	966;"	d
BN_FAST_S_MP_MUL_HIGH_DIGS_C	libtommath/tommath_superclass.h	59;"	d
BN_FAST_S_MP_SQR_C	libtommath/tommath_class.h	16;"	d
BN_FAST_S_MP_SQR_C	libtommath/tommath_class.h	801;"	d
BN_H_	libtommath/tommath.h	16;"	d
BN_MP_2EXPT_C	libtommath/tommath_class.h	17;"	d
BN_MP_2EXPT_C	libtommath/tommath_class.h	535;"	d
BN_MP_2EXPT_C	libtommath/tommath_class.h	751;"	d
BN_MP_2EXPT_C	libtommath/tommath_class.h	758;"	d
BN_MP_2EXPT_C	libtommath/tommath_class.h	773;"	d
BN_MP_ABS_C	libtommath/tommath_class.h	18;"	d
BN_MP_ABS_C	libtommath/tommath_class.h	250;"	d
BN_MP_ABS_C	libtommath/tommath_class.h	330;"	d
BN_MP_ABS_C	libtommath/tommath_class.h	389;"	d
BN_MP_ADDMOD_C	libtommath/tommath_class.h	21;"	d
BN_MP_ADDMOD_C	libtommath/tommath_superclass.h	24;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	148;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	199;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	19;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	254;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	450;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	485;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	497;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	519;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	720;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	819;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	873;"	d
BN_MP_ADD_C	libtommath/tommath_class.h	890;"	d
BN_MP_ADD_D_C	libtommath/tommath_class.h	20;"	d
BN_MP_ADD_D_C	libtommath/tommath_class.h	378;"	d
BN_MP_ADD_D_C	libtommath/tommath_class.h	652;"	d
BN_MP_ADD_D_C	libtommath/tommath_class.h	666;"	d
BN_MP_ADD_D_C	libtommath/tommath_class.h	683;"	d
BN_MP_ADD_D_C	libtommath/tommath_class.h	692;"	d
BN_MP_ADD_D_C	libtommath/tommath_class.h	834;"	d
BN_MP_AND_C	libtommath/tommath_class.h	22;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	156;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	163;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	168;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	173;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	194;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	206;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	23;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	264;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	270;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	280;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	286;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	297;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	307;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	483;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	492;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	526;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	545;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	570;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	575;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	607;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	704;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	788;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	835;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	922;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	938;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	960;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	968;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	975;"	d
BN_MP_CLAMP_C	libtommath/tommath_class.h	982;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	200;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	208;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	218;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	24;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	265;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	278;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	288;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	299;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	322;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	329;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	343;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	398;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	417;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	467;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	477;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	487;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	498;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	518;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	581;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	597;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	609;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	617;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	630;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	642;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	654;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	674;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	723;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	734;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	745;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	752;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	761;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	808;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	823;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	841;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	858;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	904;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	912;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	924;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	944;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	962;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	970;"	d
BN_MP_CLEAR_C	libtommath/tommath_class.h	977;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	150;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	257;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	25;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	331;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	371;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	456;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	507;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	880;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_class.h	897;"	d
BN_MP_CLEAR_MULTI_C	libtommath/tommath_superclass.h	28;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	145;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	252;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	26;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	452;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	594;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	616;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	640;"	d
BN_MP_CMP_C	libtommath/tommath_class.h	721;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	147;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	27;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	379;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	453;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	471;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	613;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	625;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	634;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	646;"	d
BN_MP_CMP_D_C	libtommath/tommath_class.h	717;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	157;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	187;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	222;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	244;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	28;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	308;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	394;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	454;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	466;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	504;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	538;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	547;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	732;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	743;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	821;"	d
BN_MP_CMP_MAG_C	libtommath/tommath_class.h	828;"	d
BN_MP_CNT_LSB_C	libtommath/tommath_class.h	29;"	d
BN_MP_CNT_LSB_C	libtommath/tommath_class.h	392;"	d
BN_MP_CNT_LSB_C	libtommath/tommath_class.h	474;"	d
BN_MP_CNT_LSB_C	libtommath/tommath_class.h	637;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	139;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	182;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	245;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	274;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	293;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	30;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	355;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	364;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	411;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	445;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	525;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	567;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	588;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	601;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	869;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	886;"	d
BN_MP_COPY_C	libtommath/tommath_class.h	950;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	249;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	31;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	341;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	534;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	670;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	728;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	739;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	750;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	759;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	766;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	917;"	d
BN_MP_COUNT_BITS_C	libtommath/tommath_class.h	942;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	255;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	294;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	34;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	393;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	475;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	638;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	729;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	740;"	d
BN_MP_DIV_2D_C	libtommath/tommath_class.h	857;"	d
BN_MP_DIV_2_C	libtommath/tommath_class.h	142;"	d
BN_MP_DIV_2_C	libtommath/tommath_class.h	33;"	d
BN_MP_DIV_2_C	libtommath/tommath_class.h	448;"	d
BN_MP_DIV_2_C	libtommath/tommath_class.h	664;"	d
BN_MP_DIV_2_C	libtommath/tommath_class.h	820;"	d
BN_MP_DIV_2_C	libtommath/tommath_class.h	875;"	d
BN_MP_DIV_2_C	libtommath/tommath_class.h	892;"	d
BN_MP_DIV_3_C	libtommath/tommath_class.h	295;"	d
BN_MP_DIV_3_C	libtommath/tommath_class.h	35;"	d
BN_MP_DIV_3_C	libtommath/tommath_class.h	878;"	d
BN_MP_DIV_3_C	libtommath/tommath_class.h	895;"	d
BN_MP_DIV_3_C	libtommath/tommath_superclass.h	57;"	d
BN_MP_DIV_C	libtommath/tommath_class.h	32;"	d
BN_MP_DIV_C	libtommath/tommath_class.h	366;"	d
BN_MP_DIV_C	libtommath/tommath_class.h	505;"	d
BN_MP_DIV_C	libtommath/tommath_class.h	517;"	d
BN_MP_DIV_C	libtommath/tommath_class.h	593;"	d
BN_MP_DIV_C	libtommath/tommath_class.h	774;"	d
BN_MP_DIV_C	libtommath/tommath_class.h	818;"	d
BN_MP_DIV_D_C	libtommath/tommath_class.h	36;"	d
BN_MP_DIV_D_C	libtommath/tommath_class.h	530;"	d
BN_MP_DIV_D_C	libtommath/tommath_class.h	673;"	d
BN_MP_DIV_D_C	libtommath/tommath_class.h	903;"	d
BN_MP_DIV_D_C	libtommath/tommath_class.h	911;"	d
BN_MP_DIV_SMALL	libtommath/tommath_superclass.h	37;"	d
BN_MP_DR_IS_MODULUS_C	libtommath/tommath_class.h	334;"	d
BN_MP_DR_IS_MODULUS_C	libtommath/tommath_class.h	37;"	d
BN_MP_DR_IS_MODULUS_C	libtommath/tommath_superclass.h	50;"	d
BN_MP_DR_REDUCE_C	libtommath/tommath_class.h	348;"	d
BN_MP_DR_REDUCE_C	libtommath/tommath_class.h	38;"	d
BN_MP_DR_REDUCE_C	libtommath/tommath_superclass.h	52;"	d
BN_MP_DR_SETUP_C	libtommath/tommath_class.h	347;"	d
BN_MP_DR_SETUP_C	libtommath/tommath_class.h	39;"	d
BN_MP_DR_SETUP_C	libtommath/tommath_superclass.h	51;"	d
BN_MP_ERROR_TO_STRING_C	libtommath/tommath_class.h	133;"	d
BN_MP_ERR_C	libtommath/tommath_class.h	415;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	149;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	207;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	256;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	281;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	287;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	298;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	358;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	370;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	395;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	40;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	455;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	520;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	596;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	608;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	822;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	923;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	954;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	961;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	969;"	d
BN_MP_EXCH_C	libtommath/tommath_class.h	976;"	d
BN_MP_EXPTMOD_C	libtommath/tommath_class.h	42;"	d
BN_MP_EXPTMOD_C	libtommath/tommath_class.h	615;"	d
BN_MP_EXPTMOD_C	libtommath/tommath_class.h	639;"	d
BN_MP_EXPTMOD_C	libtommath/tommath_superclass.h	25;"	d
BN_MP_EXPTMOD_FAST_C	libtommath/tommath_class.h	337;"	d
BN_MP_EXPTMOD_FAST_C	libtommath/tommath_class.h	43;"	d
BN_MP_EXPT_D_C	libtommath/tommath_class.h	41;"	d
BN_MP_EXPT_D_C	libtommath/tommath_class.h	589;"	d
BN_MP_EXTEUCLID_C	libtommath/tommath_class.h	44;"	d
BN_MP_FREAD_C	libtommath/tommath_class.h	45;"	d
BN_MP_FWRITE_C	libtommath/tommath_class.h	46;"	d
BN_MP_GCD_C	libtommath/tommath_class.h	47;"	d
BN_MP_GCD_C	libtommath/tommath_class.h	503;"	d
BN_MP_GCD_C	libtommath/tommath_superclass.h	21;"	d
BN_MP_GET_INT_C	libtommath/tommath_class.h	463;"	d
BN_MP_GET_INT_C	libtommath/tommath_class.h	48;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	154;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	162;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	167;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	172;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	178;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	192;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	236;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	269;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	306;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	49;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	511;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	544;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	563;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	568;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	574;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	701;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	833;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	937;"	d
BN_MP_GROW_C	libtommath/tommath_class.h	981;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	198;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	259;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	276;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	327;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	342;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	416;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	421;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	426;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	431;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	50;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	516;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	579;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	586;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	614;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	627;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	651;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	727;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	738;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	749;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	757;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	806;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	839;"	d
BN_MP_INIT_C	libtommath/tommath_class.h	943;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	205;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	260;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	319;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	391;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	473;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	51;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	606;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	635;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	671;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	709;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	816;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	855;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	902;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	910;"	d
BN_MP_INIT_COPY_C	libtommath/tommath_class.h	921;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	138;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	247;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	362;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	443;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	502;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	52;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	867;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_class.h	884;"	d
BN_MP_INIT_MULTI_C	libtommath/tommath_superclass.h	27;"	d
BN_MP_INIT_SET_C	libtommath/tommath_class.h	53;"	d
BN_MP_INIT_SET_INT_C	libtommath/tommath_class.h	461;"	d
BN_MP_INIT_SET_INT_C	libtommath/tommath_class.h	54;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	258;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	285;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	296;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	482;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	491;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	55;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	959;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	967;"	d
BN_MP_INIT_SIZE_C	libtommath/tommath_class.h	974;"	d
BN_MP_INVMOD_C	libtommath/tommath_class.h	328;"	d
BN_MP_INVMOD_C	libtommath/tommath_class.h	56;"	d
BN_MP_INVMOD_C	libtommath/tommath_superclass.h	20;"	d
BN_MP_INVMOD_SLOW_C	libtommath/tommath_class.h	438;"	d
BN_MP_INVMOD_SLOW_C	libtommath/tommath_class.h	57;"	d
BN_MP_ISEVEN_C	libtommath/tommath_class.h	137;"	d
BN_MP_ISEVEN_C	libtommath/tommath_class.h	446;"	d
BN_MP_ISEVEN_C	libtommath/tommath_class.h	649;"	d
BN_MP_ISODD_C	libtommath/tommath_class.h	143;"	d
BN_MP_ISODD_C	libtommath/tommath_class.h	336;"	d
BN_MP_ISODD_C	libtommath/tommath_class.h	436;"	d
BN_MP_ISODD_C	libtommath/tommath_class.h	449;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	146;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	232;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	243;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	292;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	365;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	388;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	435;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	442;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	472;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	602;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	672;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	693;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	814;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	856;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	901;"	d
BN_MP_ISZERO_C	libtommath/tommath_class.h	909;"	d
BN_MP_IS_SQUARE_C	libtommath/tommath_class.h	58;"	d
BN_MP_JACOBI_C	libtommath/tommath_class.h	59;"	d
BN_MP_KARATSUBA_MUL_C	libtommath/tommath_class.h	556;"	d
BN_MP_KARATSUBA_MUL_C	libtommath/tommath_class.h	60;"	d
BN_MP_KARATSUBA_MUL_C	libtommath/tommath_class.h	998;"	d
BN_MP_KARATSUBA_MUL_C	libtommath/tommath_superclass.h	46;"	d
BN_MP_KARATSUBA_SQR_C	libtommath/tommath_class.h	61;"	d
BN_MP_KARATSUBA_SQR_C	libtommath/tommath_class.h	800;"	d
BN_MP_KARATSUBA_SQR_C	libtommath/tommath_class.h	999;"	d
BN_MP_KARATSUBA_SQR_C	libtommath/tommath_superclass.h	47;"	d
BN_MP_LCM_C	libtommath/tommath_class.h	62;"	d
BN_MP_LCM_C	libtommath/tommath_superclass.h	18;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	261;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	486;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	496;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	569;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	63;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	684;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	719;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	879;"	d
BN_MP_LSHD_C	libtommath/tommath_class.h	896;"	d
BN_MP_MOD_2D_C	libtommath/tommath_class.h	277;"	d
BN_MP_MOD_2D_C	libtommath/tommath_class.h	65;"	d
BN_MP_MOD_2D_C	libtommath/tommath_class.h	714;"	d
BN_MP_MOD_2D_C	libtommath/tommath_class.h	868;"	d
BN_MP_MOD_2D_C	libtommath/tommath_class.h	885;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	140;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	201;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	354;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	444;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	462;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	476;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	582;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	64;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	809;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	842;"	d
BN_MP_MOD_C	libtommath/tommath_class.h	949;"	d
BN_MP_MOD_C	libtommath/tommath_superclass.h	22;"	d
BN_MP_MOD_D_C	libtommath/tommath_class.h	460;"	d
BN_MP_MOD_D_C	libtommath/tommath_class.h	621;"	d
BN_MP_MOD_D_C	libtommath/tommath_class.h	650;"	d
BN_MP_MOD_D_C	libtommath/tommath_class.h	66;"	d
BN_MP_MOD_D_C	libtommath/tommath_superclass.h	31;"	d
BN_MP_MONTGOMERY_CALC_NORMALIZATION_C	libtommath/tommath_class.h	351;"	d
BN_MP_MONTGOMERY_CALC_NORMALIZATION_C	libtommath/tommath_class.h	67;"	d
BN_MP_MONTGOMERY_REDUCE_C	libtommath/tommath_class.h	346;"	d
BN_MP_MONTGOMERY_REDUCE_C	libtommath/tommath_class.h	68;"	d
BN_MP_MONTGOMERY_REDUCE_C	libtommath/tommath_superclass.h	69;"	d
BN_MP_MONTGOMERY_SETUP_C	libtommath/tommath_class.h	344;"	d
BN_MP_MONTGOMERY_SETUP_C	libtommath/tommath_class.h	69;"	d
BN_MP_MULMOD_C	libtommath/tommath_class.h	352;"	d
BN_MP_MULMOD_C	libtommath/tommath_class.h	74;"	d
BN_MP_MULMOD_C	libtommath/tommath_superclass.h	23;"	d
BN_MP_MUL_2D_C	libtommath/tommath_class.h	251;"	d
BN_MP_MUL_2D_C	libtommath/tommath_class.h	397;"	d
BN_MP_MUL_2D_C	libtommath/tommath_class.h	703;"	d
BN_MP_MUL_2D_C	libtommath/tommath_class.h	72;"	d
BN_MP_MUL_2D_C	libtommath/tommath_class.h	787;"	d
BN_MP_MUL_2D_C	libtommath/tommath_class.h	876;"	d
BN_MP_MUL_2D_C	libtommath/tommath_class.h	893;"	d
BN_MP_MUL_2_C	libtommath/tommath_class.h	537;"	d
BN_MP_MUL_2_C	libtommath/tommath_class.h	665;"	d
BN_MP_MUL_2_C	libtommath/tommath_class.h	71;"	d
BN_MP_MUL_2_C	libtommath/tommath_class.h	872;"	d
BN_MP_MUL_2_C	libtommath/tommath_class.h	889;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	323;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	357;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	367;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	481;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	506;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	580;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	590;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	70;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	711;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	741;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	871;"	d
BN_MP_MUL_C	libtommath/tommath_class.h	952;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	263;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	377;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	592;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	691;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	730;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	73;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	877;"	d
BN_MP_MUL_D_C	libtommath/tommath_class.h	894;"	d
BN_MP_NEG_C	libtommath/tommath_class.h	369;"	d
BN_MP_NEG_C	libtommath/tommath_class.h	76;"	d
BN_MP_N_ROOT_C	libtommath/tommath_class.h	75;"	d
BN_MP_N_ROOT_C	libtommath/tommath_class.h	813;"	d
BN_MP_OR_C	libtommath/tommath_class.h	77;"	d
BN_MP_PRIME_FERMAT_C	libtommath/tommath_class.h	78;"	d
BN_MP_PRIME_IS_DIVISIBLE_C	libtommath/tommath_class.h	626;"	d
BN_MP_PRIME_IS_DIVISIBLE_C	libtommath/tommath_class.h	79;"	d
BN_MP_PRIME_IS_PRIME_C	libtommath/tommath_class.h	662;"	d
BN_MP_PRIME_IS_PRIME_C	libtommath/tommath_class.h	80;"	d
BN_MP_PRIME_MILLER_RABIN_C	libtommath/tommath_class.h	629;"	d
BN_MP_PRIME_MILLER_RABIN_C	libtommath/tommath_class.h	653;"	d
BN_MP_PRIME_MILLER_RABIN_C	libtommath/tommath_class.h	81;"	d
BN_MP_PRIME_NEXT_PRIME_C	libtommath/tommath_class.h	82;"	d
BN_MP_PRIME_RABIN_MILLER_TRIALS_C	libtommath/tommath_class.h	83;"	d
BN_MP_PRIME_RABIN_MILLER_TRIALS_C	libtommath/tommath_superclass.h	32;"	d
BN_MP_PRIME_RANDOM_EX_C	libtommath/tommath_class.h	84;"	d
BN_MP_PRIME_RANDOM_EX_C	libtommath/tommath_superclass.h	19;"	d
BN_MP_RADIX_SIZE_C	libtommath/tommath_class.h	383;"	d
BN_MP_RADIX_SIZE_C	libtommath/tommath_class.h	85;"	d
BN_MP_RADIX_SMAP_C	libtommath/tommath_class.h	690;"	d
BN_MP_RADIX_SMAP_C	libtommath/tommath_class.h	86;"	d
BN_MP_RAND_C	libtommath/tommath_class.h	87;"	d
BN_MP_READ_RADIX_C	libtommath/tommath_class.h	88;"	d
BN_MP_READ_SIGNED_BIN_C	libtommath/tommath_class.h	89;"	d
BN_MP_READ_UNSIGNED_BIN_C	libtommath/tommath_class.h	661;"	d
BN_MP_READ_UNSIGNED_BIN_C	libtommath/tommath_class.h	697;"	d
BN_MP_READ_UNSIGNED_BIN_C	libtommath/tommath_class.h	90;"	d
BN_MP_REDUCE_2K_C	libtommath/tommath_class.h	350;"	d
BN_MP_REDUCE_2K_C	libtommath/tommath_class.h	765;"	d
BN_MP_REDUCE_2K_C	libtommath/tommath_class.h	92;"	d
BN_MP_REDUCE_2K_C	libtommath/tommath_superclass.h	55;"	d
BN_MP_REDUCE_2K_L_C	libtommath/tommath_class.h	93;"	d
BN_MP_REDUCE_2K_L_C	libtommath/tommath_class.h	948;"	d
BN_MP_REDUCE_2K_SETUP_C	libtommath/tommath_class.h	349;"	d
BN_MP_REDUCE_2K_SETUP_C	libtommath/tommath_class.h	94;"	d
BN_MP_REDUCE_2K_SETUP_C	libtommath/tommath_superclass.h	54;"	d
BN_MP_REDUCE_2K_SETUP_L_C	libtommath/tommath_class.h	947;"	d
BN_MP_REDUCE_2K_SETUP_L_C	libtommath/tommath_class.h	95;"	d
BN_MP_REDUCE_C	libtommath/tommath_class.h	91;"	d
BN_MP_REDUCE_C	libtommath/tommath_class.h	946;"	d
BN_MP_REDUCE_C	libtommath/tommath_superclass.h	48;"	d
BN_MP_REDUCE_IS_2K_C	libtommath/tommath_class.h	335;"	d
BN_MP_REDUCE_IS_2K_C	libtommath/tommath_class.h	96;"	d
BN_MP_REDUCE_IS_2K_C	libtommath/tommath_superclass.h	53;"	d
BN_MP_REDUCE_IS_2K_L_C	libtommath/tommath_class.h	332;"	d
BN_MP_REDUCE_IS_2K_L_C	libtommath/tommath_class.h	97;"	d
BN_MP_REDUCE_SETUP_C	libtommath/tommath_class.h	708;"	d
BN_MP_REDUCE_SETUP_C	libtommath/tommath_class.h	945;"	d
BN_MP_REDUCE_SETUP_C	libtommath/tommath_class.h	98;"	d
BN_MP_REDUCE_SETUP_C	libtommath/tommath_superclass.h	49;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	155;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	262;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	279;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	512;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	546;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	710;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	817;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	870;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	887;"	d
BN_MP_RSHD_C	libtommath/tommath_class.h	99;"	d
BN_MP_SET_C	libtommath/tommath_class.h	100;"	d
BN_MP_SET_C	libtommath/tommath_class.h	141;"	d
BN_MP_SET_C	libtommath/tommath_class.h	248;"	d
BN_MP_SET_C	libtommath/tommath_class.h	320;"	d
BN_MP_SET_C	libtommath/tommath_class.h	353;"	d
BN_MP_SET_C	libtommath/tommath_class.h	363;"	d
BN_MP_SET_C	libtommath/tommath_class.h	422;"	d
BN_MP_SET_C	libtommath/tommath_class.h	447;"	d
BN_MP_SET_C	libtommath/tommath_class.h	536;"	d
BN_MP_SET_C	libtommath/tommath_class.h	587;"	d
BN_MP_SET_C	libtommath/tommath_class.h	628;"	d
BN_MP_SET_C	libtommath/tommath_class.h	647;"	d
BN_MP_SET_C	libtommath/tommath_class.h	718;"	d
BN_MP_SET_C	libtommath/tommath_class.h	953;"	d
BN_MP_SET_INT_C	libtommath/tommath_class.h	101;"	d
BN_MP_SET_INT_C	libtommath/tommath_class.h	427;"	d
BN_MP_SET_INT_C	libtommath/tommath_superclass.h	26;"	d
BN_MP_SHRINK_C	libtommath/tommath_class.h	102;"	d
BN_MP_SHRINK_C	libtommath/tommath_superclass.h	17;"	d
BN_MP_SIGNED_BIN_SIZE_C	libtommath/tommath_class.h	103;"	d
BN_MP_SIGNED_BIN_SIZE_C	libtommath/tommath_class.h	850;"	d
BN_MP_SQRMOD_C	libtommath/tommath_class.h	105;"	d
BN_MP_SQRMOD_C	libtommath/tommath_class.h	641;"	d
BN_MP_SQRT_C	libtommath/tommath_class.h	106;"	d
BN_MP_SQRT_C	libtommath/tommath_class.h	464;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	104;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	321;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	356;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	465;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	493;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	807;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	888;"	d
BN_MP_SQR_C	libtommath/tommath_class.h	951;"	d
BN_MP_SUBMOD_C	libtommath/tommath_class.h	109;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	107;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	144;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	253;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	368;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	451;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	484;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	494;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	591;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	716;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	840;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	874;"	d
BN_MP_SUB_C	libtommath/tommath_class.h	891;"	d
BN_MP_SUB_D_C	libtommath/tommath_class.h	108;"	d
BN_MP_SUB_D_C	libtommath/tommath_class.h	193;"	d
BN_MP_SUB_D_C	libtommath/tommath_class.h	595;"	d
BN_MP_SUB_D_C	libtommath/tommath_class.h	636;"	d
BN_MP_SUB_D_C	libtommath/tommath_class.h	648;"	d
BN_MP_SUB_D_C	libtommath/tommath_class.h	663;"	d
BN_MP_S_RMAP_C	libtommath/tommath_class.h	376;"	d
BN_MP_S_RMAP_C	libtommath/tommath_class.h	678;"	d
BN_MP_S_RMAP_C	libtommath/tommath_class.h	689;"	d
BN_MP_S_RMAP_C	libtommath/tommath_class.h	905;"	d
BN_MP_S_RMAP_C	libtommath/tommath_class.h	913;"	d
BN_MP_TOOM_MUL_C	libtommath/tommath_class.h	1000;"	d
BN_MP_TOOM_MUL_C	libtommath/tommath_class.h	114;"	d
BN_MP_TOOM_MUL_C	libtommath/tommath_class.h	555;"	d
BN_MP_TOOM_MUL_C	libtommath/tommath_superclass.h	44;"	d
BN_MP_TOOM_SQR_C	libtommath/tommath_class.h	1001;"	d
BN_MP_TOOM_SQR_C	libtommath/tommath_class.h	115;"	d
BN_MP_TOOM_SQR_C	libtommath/tommath_class.h	799;"	d
BN_MP_TOOM_SQR_C	libtommath/tommath_superclass.h	45;"	d
BN_MP_TORADIX_C	libtommath/tommath_class.h	116;"	d
BN_MP_TORADIX_C	libtommath/tommath_class.h	384;"	d
BN_MP_TORADIX_N_C	libtommath/tommath_class.h	117;"	d
BN_MP_TO_SIGNED_BIN_C	libtommath/tommath_class.h	110;"	d
BN_MP_TO_SIGNED_BIN_C	libtommath/tommath_class.h	851;"	d
BN_MP_TO_SIGNED_BIN_N_C	libtommath/tommath_class.h	111;"	d
BN_MP_TO_UNSIGNED_BIN_C	libtommath/tommath_class.h	112;"	d
BN_MP_TO_UNSIGNED_BIN_C	libtommath/tommath_class.h	846;"	d
BN_MP_TO_UNSIGNED_BIN_C	libtommath/tommath_class.h	863;"	d
BN_MP_TO_UNSIGNED_BIN_C	libtommath/tommath_superclass.h	30;"	d
BN_MP_TO_UNSIGNED_BIN_N_C	libtommath/tommath_class.h	113;"	d
BN_MP_UNSIGNED_BIN_SIZE_C	libtommath/tommath_class.h	118;"	d
BN_MP_UNSIGNED_BIN_SIZE_C	libtommath/tommath_class.h	795;"	d
BN_MP_UNSIGNED_BIN_SIZE_C	libtommath/tommath_class.h	862;"	d
BN_MP_UNSIGNED_BIN_SIZE_C	libtommath/tommath_superclass.h	29;"	d
BN_MP_XOR_C	libtommath/tommath_class.h	119;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	120;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	177;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	246;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	275;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	375;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	390;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	524;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	682;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	688;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	702;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	778;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	782;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	786;"	d
BN_MP_ZERO_C	libtommath/tommath_class.h	815;"	d
BN_PRIME_TAB_C	libtommath/tommath_class.h	121;"	d
BN_PRIME_TAB_C	libtommath/tommath_superclass.h	34;"	d
BN_REVERSE_C	libtommath/tommath_class.h	122;"	d
BN_REVERSE_C	libtommath/tommath_superclass.h	33;"	d
BN_S_MP_ADD_C	libtommath/tommath_class.h	123;"	d
BN_S_MP_ADD_C	libtommath/tommath_class.h	186;"	d
BN_S_MP_ADD_C	libtommath/tommath_class.h	495;"	d
BN_S_MP_ADD_C	libtommath/tommath_class.h	731;"	d
BN_S_MP_ADD_C	libtommath/tommath_class.h	742;"	d
BN_S_MP_ADD_C	libtommath/tommath_class.h	827;"	d
BN_S_MP_EXPTMOD_C	libtommath/tommath_class.h	124;"	d
BN_S_MP_EXPTMOD_C	libtommath/tommath_class.h	333;"	d
BN_S_MP_EXPTMOD_C	libtommath/tommath_superclass.h	56;"	d
BN_S_MP_MUL_C	libtommath/tommath_class.h	558;"	d
BN_S_MP_MUL_DIGS_C	libtommath/tommath_class.h	125;"	d
BN_S_MP_MUL_DIGS_C	libtommath/tommath_class.h	559;"	d
BN_S_MP_MUL_DIGS_C	libtommath/tommath_class.h	715;"	d
BN_S_MP_MUL_DIGS_C	libtommath/tommath_superclass.h	67;"	d
BN_S_MP_MUL_HIGH_DIGS_C	libtommath/tommath_class.h	126;"	d
BN_S_MP_MUL_HIGH_DIGS_C	libtommath/tommath_class.h	712;"	d
BN_S_MP_MUL_HIGH_DIGS_C	libtommath/tommath_superclass.h	58;"	d
BN_S_MP_SQR_C	libtommath/tommath_class.h	127;"	d
BN_S_MP_SQR_C	libtommath/tommath_class.h	802;"	d
BN_S_MP_SQR_C	libtommath/tommath_superclass.h	68;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	128;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	158;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	188;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	309;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	396;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	539;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	548;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	722;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	733;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	744;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	753;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	760;"	d
BN_S_MP_SUB_C	libtommath/tommath_class.h	829;"	d
BPD	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	108;"	d	file:
BSWAP	libtomcrypt/src/headers/tomcrypt_macros.h	230;"	d
BUF	scp.c	/^} BUF;$/;"	t	typeref:struct:__anon1	file:
BUF_MAX_INCR	buffer.c	34;"	d	file:
BUF_MAX_MPINT	buffer.c	38;"	d	file:
BUF_MAX_SIZE	buffer.c	35;"	d	file:
BUNDLED_LIBTOM	config.h	11;"	d
BYTE2WORD	libtomcrypt/src/prngs/sober128.c	/^static ulong32 BYTE2WORD(unsigned char *b)$/;"	f	file:
BYTES	libtommath/mtest/mpi.h	189;"	d
Background	libtomcrypt/crypt.tex	/^\\subsection{Background}$/;"	b
Barrett Reduction	libtommath/bn.tex	/^\\section{Barrett Reduction}$/;"	s
Basic Operations	libtommath/bn.tex	/^\\chapter{Basic Operations}$/;"	c
Binary Conversions	libtommath/bn.tex	/^\\section{Binary Conversions}$/;"	s
Block Size	libtomcrypt/crypt.tex	/^\\subsection{Block Size}$/;"	b
CARRYOUT	libtommath/mtest/mpi.c	78;"	d	file:
CBC Mode	libtomcrypt/crypt.tex	/^\\subsubsection{CBC Mode}$/;"	b
CC	Makefile	/^CC=rsdk-linux-gcc$/;"	m
CC	debian/rules	/^	CC='$(CC)' \\$/;"	m
CC	debian/rules	/^  CC =diet -v -Os gcc -nostdinc$/;"	m
CC	debian/rules	/^CC =gcc$/;"	m
CCM Example	libtomcrypt/crypt.tex	/^\\subsubsection{CCM Example}$/;"	b
CCM Mode	libtomcrypt/crypt.tex	/^\\subsection{CCM Mode}$/;"	b
CCM_DECRYPT	libtomcrypt/src/headers/tomcrypt_mac.h	199;"	d
CCM_ENCRYPT	libtomcrypt/src/headers/tomcrypt_mac.h	198;"	d
CFB Mode	libtomcrypt/crypt.tex	/^\\subsubsection{CFB Mode}$/;"	b
CFLAGS	debian/rules	/^CFLAGS =-Wall -g$/;"	m
CFLAGS	libtomcrypt/Makefile	/^	CFLAGS="$(CFLAGS) -fprofile-use" $(MAKE) timing EXTRALIBS="$(EXTRALIBS) -lgcov"$/;"	m
CHANNEL_ID_AGENT	channel.h	36;"	d
CHANNEL_ID_NONE	channel.h	33;"	d
CHANNEL_ID_SESSION	channel.h	34;"	d
CHANNEL_ID_TCPDIRECT	channel.h	37;"	d
CHANNEL_ID_TCPFORWARDED	channel.h	38;"	d
CHANNEL_ID_X11	channel.h	35;"	d
CHAN_EXTEND_SIZE	channel.h	48;"	d
CHECKCLEARTOWRITE	debug.h	50;"	d
CLIOBJS	Makefile	/^CLIOBJS=cli-main.o cli-auth.o cli-authpasswd.o cli-kex.o \\$/;"	m
CLISVROBJS	Makefile	/^CLISVROBJS=common-session.o packet.o common-algo.o common-kex.o \\$/;"	m
CMDNEEDS	scp.c	294;"	d	file:
COMMONOBJS	Makefile	/^COMMONOBJS=dbutil.o buffer.o \\$/;"	m
COMPRESSED	libtomcrypt/Makefile	/^COMPRESSED=crypt-$(VERSION).tar.bz2 crypt-$(VERSION).zip$/;"	m
CONFFLAGS	debian/rules	/^  CONFFLAGS =--disable-zlib$/;"	m
CONFFLAGS	debian/rules	/^CONFFLAGS =$/;"	m
CONST64	libtomcrypt/src/headers/tomcrypt_macros.h	3;"	d
CONST64	libtomcrypt/src/headers/tomcrypt_macros.h	6;"	d
CONVERTOBJS	Makefile	/^CONVERTOBJS=dropbearconvert.o keyimport.o$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS= -I\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/toolchains\/rsdk-1.5.6-5281-EB-2.6.30-0.9.30.3-110915\/usr\/include  -I\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/toolchains\/rsdk-1.5.6-5281-EB-2.6.30-0.9.30.3-110915\/include -I\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/app\/include -I\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/include$/;"	m
CRYPT	libtomcrypt/Makefile	/^CRYPT=encrypt$/;"	m
CRYPT	libtomcrypt/src/headers/tomcrypt.h	19;"	d
CRYPTOBJECTS	libtomcrypt/Makefile	/^CRYPTOBJECTS=demos\/encrypt.o$/;"	m
CRYPT_BUFFER_OVERFLOW	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_BUFFER_OVERFLOW,  \/* Not enough space for output *\/$/;"	e	enum:__anon12
CRYPT_ERROR	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_ERROR,            \/* Generic Error *\/$/;"	e	enum:__anon12
CRYPT_ERROR_READPRNG	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_ERROR_READPRNG,   \/* Could not read enough from PRNG *\/$/;"	e	enum:__anon12
CRYPT_FAIL_TESTVECTOR	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_FAIL_TESTVECTOR,  \/* Algorithm failed test vectors *\/$/;"	e	enum:__anon12
CRYPT_FILE_NOTFOUND	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_FILE_NOTFOUND,    \/* File Not Found *\/$/;"	e	enum:__anon12
CRYPT_INVALID_ARG	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_ARG,      \/* Generic invalid argument *\/$/;"	e	enum:__anon12
CRYPT_INVALID_CIPHER	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_CIPHER,   \/* Invalid cipher specified *\/$/;"	e	enum:__anon12
CRYPT_INVALID_HASH	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_HASH,     \/* Invalid hash specified *\/$/;"	e	enum:__anon12
CRYPT_INVALID_KEYSIZE	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_KEYSIZE,  \/* Invalid key size given *\/$/;"	e	enum:__anon12
CRYPT_INVALID_PACKET	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_PACKET,   \/* Invalid input packet given *\/$/;"	e	enum:__anon12
CRYPT_INVALID_PRIME_SIZE	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_PRIME_SIZE,\/* Invalid size of prime requested *\/$/;"	e	enum:__anon12
CRYPT_INVALID_PRNG	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_PRNG,     \/* Invalid PRNG specified *\/$/;"	e	enum:__anon12
CRYPT_INVALID_PRNGSIZE	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_PRNGSIZE, \/* Invalid number of bits for a PRNG *\/$/;"	e	enum:__anon12
CRYPT_INVALID_ROUNDS	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_INVALID_ROUNDS,   \/* Invalid number of rounds *\/$/;"	e	enum:__anon12
CRYPT_MEM	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_MEM,              \/* Out of memory *\/$/;"	e	enum:__anon12
CRYPT_NOP	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_NOP,              \/* Not a failure but no operation was performed *\/$/;"	e	enum:__anon12
CRYPT_OK	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_OK=0,             \/* Result OK *\/$/;"	e	enum:__anon12
CRYPT_PK_DUP	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_DUP,           \/* Duplicate key already in key ring *\/$/;"	e	enum:__anon12
CRYPT_PK_INVALID_PADDING	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_INVALID_PADDING \/* Invalid padding on input *\/$/;"	e	enum:__anon12
CRYPT_PK_INVALID_SIZE	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_INVALID_SIZE,  \/* Invalid size input for PK parameters *\/$/;"	e	enum:__anon12
CRYPT_PK_INVALID_SYSTEM	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_INVALID_SYSTEM,\/* Invalid PK system specified *\/$/;"	e	enum:__anon12
CRYPT_PK_INVALID_TYPE	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_INVALID_TYPE,  \/* Invalid type of PK key *\/$/;"	e	enum:__anon12
CRYPT_PK_NOT_FOUND	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_NOT_FOUND,     \/* Key not found in keyring *\/$/;"	e	enum:__anon12
CRYPT_PK_NOT_PRIVATE	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_NOT_PRIVATE,   \/* Requires a private PK key *\/$/;"	e	enum:__anon12
CRYPT_PK_TYPE_MISMATCH	libtomcrypt/src/headers/tomcrypt.h	/^   CRYPT_PK_TYPE_MISMATCH, \/* Not equivalent types of PK keys *\/$/;"	e	enum:__anon12
CTR Mode	libtomcrypt/crypt.tex	/^\\subsubsection{CTR Mode}$/;"	b
CTR_COUNTER_BIG_ENDIAN	libtomcrypt/src/headers/tomcrypt_cipher.h	776;"	d
CTR_COUNTER_LITTLE_ENDIAN	libtomcrypt/src/headers/tomcrypt_cipher.h	775;"	d
Ch	libtomcrypt/src/hashes/sha2/sha256.c	58;"	d	file:
Ch	libtomcrypt/src/hashes/sha2/sha512.c	83;"	d	file:
ChanSess	chansession.h	/^struct ChanSess {$/;"	s
ChanType	channel.h	/^struct ChanType {$/;"	s
Channel	channel.h	/^struct Channel {$/;"	s
ChildPid	chansession.h	/^struct ChildPid {$/;"	s
Choice of Mode	libtomcrypt/crypt.tex	/^\\subsection{Choice of Mode}$/;"	b
Cipher Termination	libtomcrypt/crypt.tex	/^\\subsection{Cipher Termination}$/;"	b
Ciphertext Stealing	libtomcrypt/crypt.tex	/^\\subsection{Ciphertext Stealing}$/;"	b
DATAPATH	libtomcrypt/Makefile	/^   DATAPATH=\/usr\/share\/doc\/libtomcrypt\/pdf$/;"	m
DATAPATH	libtommath/Makefile	/^DATAPATH=\/usr\/share\/doc\/libtommath\/pdf$/;"	m
DD	libtomcrypt/src/headers/tomcrypt_pk.h	/^            DD, \/* day *\/$/;"	m	struct:__anon33
DE1	libtomcrypt/src/ciphers/des.c	21;"	d	file:
DEBUG_TRACE	debug.h	62;"	d
DEB_BUILD_GNU_TYPE	debian/rules	/^DEB_BUILD_GNU_TYPE ?=$(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)$/;"	m
DEB_HOST_GNU_TYPE	debian/rules	/^DEB_HOST_GNU_TYPE ?=$(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)$/;"	m
DECODE_V	libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c	37;"	d	file:
DEFAULT_IDLE_TIMEOUT	options.h	296;"	d
DEFAULT_KEEPALIVE	options.h	292;"	d
DEFAULT_PATH	options.h	299;"	d
DEFAULT_RECV_WINDOW	options.h	277;"	d
DEFAULT_WINSIZE	progressmeter.c	33;"	d	file:
DEF_MP_INT	dbutil.h	92;"	d
DES	libtomcrypt/src/headers/tomcrypt_custom.h	112;"	d
DESC_DEF_ONLY	libtomcrypt/src/math/gmp_desc.c	12;"	d	file:
DESC_DEF_ONLY	libtomcrypt/src/math/ltm_desc.c	12;"	d	file:
DESC_DEF_ONLY	libtomcrypt/src/math/tfm_desc.c	12;"	d	file:
DESTDIR	libtomcrypt/Makefile	/^   DESTDIR=$/;"	m
DESTDIR	libtommath/Makefile	/^DESTDIR=$/;"	m
DH_G_VAL	common-kex.c	/^static const int DH_G_VAL = 2;$/;"	v	file:
DH_P_14_LEN	common-kex.c	54;"	d	file:
DH_P_1_LEN	common-kex.c	39;"	d	file:
DIAG	libtommath/mtest/mpi.c	20;"	d	file:
DIAG	libtommath/mtest/mpi.c	22;"	d	file:
DIGIT	libtommath/mtest/mpi.h	60;"	d
DIGIT	libtommath/tommath.h	189;"	d
DIGITS	libtommath/mtest/mpi.h	59;"	d
DIGIT_BIT	libtommath/mtest/mpi.h	52;"	d
DIGIT_BIT	libtommath/tommath.h	102;"	d
DIGIT_BIT	libtommath/tommath.h	127;"	d
DIGIT_BIT	libtommath/tommath.h	79;"	d
DIGIT_BIT	libtommath/tommath.h	99;"	d
DIGIT_FMT	libtommath/mtest/mpi-types.h	14;"	d
DIGIT_MAX	libtommath/mtest/mpi.h	53;"	d
DIR	debian/rules	/^DIR =$(shell pwd)\/debian\/dropbear$/;"	m
DISABLE_LASTLOG	config.h	29;"	d
DISABLE_PAM	config.h	32;"	d
DISABLE_PUTUTLINE	config.h	35;"	d
DISABLE_PUTUTXLINE	config.h	38;"	d
DISABLE_UTMP	config.h	44;"	d
DISABLE_UTMPX	config.h	47;"	d
DISABLE_WTMP	config.h	50;"	d
DISABLE_WTMPX	config.h	53;"	d
DISABLE_X11FWD	sysoptions.h	172;"	d
DISABLE_ZLIB	config.h	56;"	d
DO	libtomcrypt/testprof/tomcrypt_test.h	23;"	d
DO	libtomcrypt/testprof/tomcrypt_test.h	25;"	d
DO	libtommath/demo/timing.c	76;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	267;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	284;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	310;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	327;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	329;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	355;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	382;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	399;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	401;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	427;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	457;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	474;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	476;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	502;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	533;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	550;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	552;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	579;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	611;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	634;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	657;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	672;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	687;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	702;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	733;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	744;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	746;"	d	file:
DO1	libtomcrypt/testprof/x86_prof.c	757;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	311;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	328;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	330;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	354;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	383;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	400;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	402;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	426;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	458;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	475;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	477;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	501;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	534;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	551;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	553;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	578;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	612;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	633;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	658;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	673;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	688;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	703;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	734;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	743;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	747;"	d	file:
DO2	libtomcrypt/testprof/x86_prof.c	756;"	d	file:
DO_MOTD	options.h	160;"	d
DROPBEAR_3DES	options.h	91;"	d
DROPBEAR_AES	sysoptions.h	151;"	d
DROPBEAR_AES128	options.h	90;"	d
DROPBEAR_AES256	options.h	92;"	d
DROPBEAR_COMP_NONE	sysoptions.h	82;"	d
DROPBEAR_COMP_ZLIB	sysoptions.h	83;"	d
DROPBEAR_COMP_ZLIB_DELAY	sysoptions.h	84;"	d
DROPBEAR_DEFADDRESS	options.h	19;"	d
DROPBEAR_DEFPORT	options.h	14;"	d
DROPBEAR_DSS	options.h	137;"	d
DROPBEAR_ENABLE_CTR_MODE	options.h	101;"	d
DROPBEAR_ESCAPE_CHAR	sysoptions.h	66;"	d
DROPBEAR_FAILURE	sysoptions.h	70;"	d
DROPBEAR_KEX_DH_GROUP1	sysoptions.h	74;"	d
DROPBEAR_KEX_DH_GROUP14	sysoptions.h	75;"	d
DROPBEAR_KEX_NONE	sysoptions.h	73;"	d
DROPBEAR_KEY_LINES	sysoptions.h	198;"	d
DROPBEAR_MAX_CLI_INTERACT_PROMPTS	sysoptions.h	146;"	d
DROPBEAR_MAX_CLI_PASS	sysoptions.h	144;"	d
DROPBEAR_MAX_PORTS	sysoptions.h	56;"	d
DROPBEAR_MAX_SOCKS	sysoptions.h	141;"	d
DROPBEAR_MD5	sysoptions.h	159;"	d
DROPBEAR_MD5_HMAC	options.h	125;"	d
DROPBEAR_MODE_CBC	algo.h	33;"	d
DROPBEAR_MODE_CTR	algo.h	34;"	d
DROPBEAR_MODE_UNUSED	algo.h	32;"	d
DROPBEAR_PASSWORD_ENV	options.h	198;"	d
DROPBEAR_PIDFILE	options.h	244;"	d
DROPBEAR_RSA	options.h	136;"	d
DROPBEAR_SHA1_96_HMAC	options.h	122;"	d
DROPBEAR_SHA1_HMAC	options.h	121;"	d
DROPBEAR_SHA256	sysoptions.h	163;"	d
DROPBEAR_SHA512	sysoptions.h	168;"	d
DROPBEAR_SIGNKEY_ANY	sysoptions.h	77;"	d
DROPBEAR_SIGNKEY_DSS	sysoptions.h	79;"	d
DROPBEAR_SIGNKEY_NONE	sysoptions.h	80;"	d
DROPBEAR_SIGNKEY_RSA	sysoptions.h	78;"	d
DROPBEAR_SIGNKEY_VERIFY	sysoptions.h	88;"	d
DROPBEAR_SUCCESS	sysoptions.h	69;"	d
DROPBEAR_TCP_ACCEPT	sysoptions.h	180;"	d
DROPBEAR_TWOFISH	sysoptions.h	155;"	d
DROPBEAR_TWOFISH128	options.h	96;"	d
DROPBEAR_TWOFISH256	options.h	95;"	d
DROPBEAR_URANDOM_DEV	options.h	217;"	d
DROPBEAR_VERSION	sysoptions.h	7;"	d
DROPBEAR_ZLIB_MEM_LEVEL	sysoptions.h	203;"	d
DROPBEAR_ZLIB_WINDOW_BITS	options.h	152;"	d
DROUND	libtomcrypt/src/prngs/sober128.c	176;"	d	file:
DSS_PRIV_FILENAME	options.h	24;"	d
DSS_SIGNATURE_SIZE	dss.h	33;"	d
DSS_SIZE	dropbearkey.c	58;"	d	file:
Digest Size	libtomcrypt/crypt.tex	/^\\subsection{Digest Size}$/;"	b
Digital Signature Algorithm	libtomcrypt/crypt.tex	/^\\chapter{Digital Signature Algorithm}$/;"	c
Done	libtomcrypt/crypt.tex	/^\\subsection{Done}$/;"	b
E	libtomcrypt/notes/etc/whirlgen.c	/^unsigned E[16] =  { 1, 0xb, 9, 0xc, 0xd, 6, 0xf, 3, 0xe, 8, 7, 4, 0xa, 2, 5, 0 };$/;"	v
EAI_FAMILY	fake-rfc2553.h	135;"	d
EAI_MEMORY	fake-rfc2553.h	126;"	d
EAI_NODATA	fake-rfc2553.h	123;"	d
EAI_NONAME	fake-rfc2553.h	129;"	d
EAI_SYSTEM	fake-rfc2553.h	132;"	d
EAX Mode	libtomcrypt/crypt.tex	/^\\subsection{EAX Mode}$/;"	b
EC DSA Signature Generation	libtomcrypt/crypt.tex	/^\\subsection{EC-DSA Signature Generation}$/;"	b
EC DSA Signature Verification	libtomcrypt/crypt.tex	/^\\subsection{EC-DSA Signature Verification}$/;"	b
ECB Mode	libtomcrypt/crypt.tex	/^\\subsubsection{ECB Mode}$/;"	b
ECB_DEC	libtomcrypt/src/ciphers/aes/aes.c	/^int ECB_DEC(const unsigned char *ct, unsigned char *pt, symmetric_key *skey) $/;"	f
ECB_DEC	libtomcrypt/src/ciphers/aes/aes.c	41;"	d	file:
ECB_DONE	libtomcrypt/src/ciphers/aes/aes.c	/^void ECB_DONE(symmetric_key *skey)$/;"	f
ECB_DONE	libtomcrypt/src/ciphers/aes/aes.c	42;"	d	file:
ECB_DONE	libtomcrypt/src/ciphers/aes/aes.c	71;"	d	file:
ECB_ENC	libtomcrypt/src/ciphers/aes/aes.c	/^int ECB_ENC(const unsigned char *pt, unsigned char *ct, symmetric_key *skey) $/;"	f
ECB_ENC	libtomcrypt/src/ciphers/aes/aes.c	40;"	d	file:
ECB_ENC	libtomcrypt/src/ciphers/aes/aes.c	69;"	d	file:
ECB_KS	libtomcrypt/src/ciphers/aes/aes.c	/^int ECB_KS(int *keysize)$/;"	f
ECB_KS	libtomcrypt/src/ciphers/aes/aes.c	44;"	d	file:
ECB_KS	libtomcrypt/src/ciphers/aes/aes.c	70;"	d	file:
ECB_TEST	libtomcrypt/src/ciphers/aes/aes.c	/^int ECB_TEST(void)$/;"	f
ECB_TEST	libtomcrypt/src/ciphers/aes/aes.c	43;"	d	file:
ECC DH Decryption	libtomcrypt/crypt.tex	/^\\subsection{ECC-DH Decryption}$/;"	b
ECC Encryption Format	libtomcrypt/crypt.tex	/^\\subsection{ECC Encryption Format}$/;"	b
ECC Key Export	libtomcrypt/crypt.tex	/^\\subsection{ECC Key Export}$/;"	b
ECC Key Free	libtomcrypt/crypt.tex	/^\\subsection{ECC Key Free}$/;"	b
ECC Key Generation	libtomcrypt/crypt.tex	/^\\subsection{ECC Key Generation}$/;"	b
ECC Key Import	libtomcrypt/crypt.tex	/^\\subsection{ECC Key Import}$/;"	b
ECC Shared Secret	libtomcrypt/crypt.tex	/^\\subsection{ECC Shared Secret}$/;"	b
ECC_BUF_SIZE	libtomcrypt/src/headers/tomcrypt_pk.h	150;"	d
ECC_MAXSIZE	libtomcrypt/src/headers/tomcrypt_pk.h	153;"	d
EN0	libtomcrypt/src/ciphers/des.c	20;"	d	file:
ENABLE_CLI_AGENTFWD	options.h	69;"	d
ENABLE_CLI_ANYTCPFWD	sysoptions.h	176;"	d
ENABLE_CLI_INTERACT_AUTH	options.h	190;"	d
ENABLE_CLI_LOCALTCPFWD	options.h	61;"	d
ENABLE_CLI_MULTIHOP	sysoptions.h	190;"	d
ENABLE_CLI_NETCAT	options.h	81;"	d
ENABLE_CLI_PASSWORD_AUTH	options.h	188;"	d
ENABLE_CLI_PROXYCMD	options.h	77;"	d
ENABLE_CLI_PUBKEY_AUTH	options.h	189;"	d
ENABLE_CLI_REMOTETCPFWD	options.h	62;"	d
ENABLE_CONNECT_UNIX	sysoptions.h	194;"	d
ENABLE_SVR_AGENTFWD	options.h	68;"	d
ENABLE_SVR_LOCALTCPFWD	options.h	64;"	d
ENABLE_SVR_PASSWORD_AUTH	options.h	177;"	d
ENABLE_SVR_PUBKEY_AUTH	options.h	180;"	d
ENABLE_SVR_PUBKEY_OPTIONS	options.h	185;"	d
ENABLE_SVR_REMOTETCPFWD	options.h	65;"	d
ENABLE_USER_ALGO_LIST	options.h	84;"	d
ENABLE_X11FWD	options.h	55;"	d
ENCRYPT_ONLY	libtomcrypt/src/mac/pelican/pelican.c	20;"	d	file:
ENDIAN_32BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	109;"	d
ENDIAN_32BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	61;"	d
ENDIAN_32BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	83;"	d
ENDIAN_32BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	94;"	d
ENDIAN_64BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	110;"	d
ENDIAN_64BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	69;"	d
ENDIAN_64BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	75;"	d
ENDIAN_64BITWORD	libtomcrypt/src/headers/tomcrypt_cfg.h	92;"	d
ENDIAN_BIG	libtomcrypt/src/headers/tomcrypt_cfg.h	108;"	d
ENDIAN_BIG	libtomcrypt/src/headers/tomcrypt_cfg.h	82;"	d
ENDIAN_BIG	libtomcrypt/src/headers/tomcrypt_cfg.h	90;"	d
ENDIAN_LITTLE	libtomcrypt/src/headers/tomcrypt_cfg.h	107;"	d
ENDIAN_LITTLE	libtomcrypt/src/headers/tomcrypt_cfg.h	60;"	d
ENDIAN_LITTLE	libtomcrypt/src/headers/tomcrypt_cfg.h	68;"	d
ENDIAN_LITTLE	libtomcrypt/src/headers/tomcrypt_cfg.h	74;"	d
ENDIAN_NEUTRAL	libtomcrypt/src/headers/tomcrypt_cfg.h	128;"	d
ENV_SIZE	sysoptions.h	48;"	d
ERRFD_IS_READ	common-channel.c	59;"	d	file:
ERRFD_IS_WRITE	common-channel.c	60;"	d	file:
EXEEXT	Makefile	/^EXEEXT=$/;"	m
EXP	libtomcrypt/src/ciphers/safer/safer.c	92;"	d	file:
Ei	libtomcrypt/notes/etc/whirlgen.c	/^unsigned Ei[16];$/;"	v
Endianess	libtomcrypt/crypt.tex	/^\\subsubsection{Endianess}$/;"	b
Entropy Addition	libtomcrypt/crypt.tex	/^\\subsection{Entropy Addition}$/;"	b
Example	libtomcrypt/crypt.tex	/^\\subsection{Example}$/;"	b
Example Usage	libtomcrypt/crypt.tex	/^\\subsubsection{Example Usage}$/;"	b
Exponentiation	libtommath/bn.tex	/^\\chapter{Exponentiation}$/;"	c
Export Size	libtomcrypt/crypt.tex	/^\\subsection{Export Size}$/;"	b
Exporting and Importing	libtomcrypt/crypt.tex	/^\\subsection{Exporting and Importing}$/;"	b
Extended ANSI X9 63 Import	libtomcrypt/crypt.tex	/^\\subsection{Extended ANSI X9.63 Import}$/;"	b
Extended Euclidean Algorithm	libtommath/bn.tex	/^\\section{Extended Euclidean Algorithm}$/;"	s
Extended Key Generation	libtomcrypt/crypt.tex	/^\\subsection{Extended Key Generation}$/;"	b
Extended Key Import	libtomcrypt/crypt.tex	/^\\subsection{Extended Key Import}$/;"	b
F	libtomcrypt/src/ciphers/blowfish.c	378;"	d	file:
F	libtomcrypt/src/ciphers/blowfish.c	380;"	d	file:
F	libtomcrypt/src/ciphers/kseed.c	188;"	d	file:
F	libtomcrypt/src/hashes/md4.c	52;"	d	file:
F	libtomcrypt/src/hashes/md5.c	39;"	d	file:
F	libtomcrypt/src/hashes/rmd128.c	45;"	d	file:
F	libtomcrypt/src/hashes/rmd160.c	45;"	d	file:
F	libtomcrypt/src/hashes/rmd256.c	39;"	d	file:
F	libtomcrypt/src/hashes/rmd320.c	39;"	d	file:
F0	libtomcrypt/src/hashes/sha1.c	39;"	d	file:
F1	libtomcrypt/src/hashes/sha1.c	40;"	d	file:
F2	libtomcrypt/src/hashes/sha1.c	41;"	d	file:
F3	libtomcrypt/src/hashes/sha1.c	42;"	d	file:
F8 Mode	libtomcrypt/crypt.tex	/^\\subsection{F8 Mode}$/;"	b
FD_CLOSED	common-channel.c	57;"	d	file:
FD_UNINIT	common-channel.c	56;"	d	file:
FF	libtomcrypt/src/hashes/md4.c	62;"	d	file:
FF	libtomcrypt/src/hashes/md5.c	46;"	d	file:
FF	libtomcrypt/src/hashes/md5.c	85;"	d	file:
FF	libtomcrypt/src/hashes/rmd128.c	51;"	d	file:
FF	libtomcrypt/src/hashes/rmd160.c	52;"	d	file:
FF	libtomcrypt/src/hashes/rmd256.c	45;"	d	file:
FF	libtomcrypt/src/hashes/rmd320.c	46;"	d	file:
FF0	libtomcrypt/src/hashes/sha1.c	135;"	d	file:
FF0	libtomcrypt/src/hashes/sha1.c	74;"	d	file:
FF1	libtomcrypt/src/hashes/sha1.c	136;"	d	file:
FF1	libtomcrypt/src/hashes/sha1.c	75;"	d	file:
FF2	libtomcrypt/src/hashes/sha1.c	137;"	d	file:
FF2	libtomcrypt/src/hashes/sha1.c	76;"	d	file:
FF3	libtomcrypt/src/hashes/sha1.c	138;"	d	file:
FF3	libtomcrypt/src/hashes/sha1.c	77;"	d	file:
FFF	libtomcrypt/src/hashes/rmd128.c	67;"	d	file:
FFF	libtomcrypt/src/hashes/rmd160.c	77;"	d	file:
FFF	libtomcrypt/src/hashes/rmd256.c	61;"	d	file:
FFF	libtomcrypt/src/hashes/rmd320.c	71;"	d	file:
FI	libtomcrypt/src/ciphers/cast5.c	/^INLINE static ulong32 FI(ulong32 R, ulong32 Km, ulong32 Kr)$/;"	f	file:
FI	libtomcrypt/src/ciphers/kasumi.c	/^static u16 FI( u16 in, u16 subkey )$/;"	f	file:
FII	libtomcrypt/src/ciphers/cast5.c	/^INLINE static ulong32 FII(ulong32 R, ulong32 Km, ulong32 Kr)$/;"	f	file:
FIII	libtomcrypt/src/ciphers/cast5.c	/^INLINE static ulong32 FIII(ulong32 R, ulong32 Km, ulong32 Kr)$/;"	f	file:
FILEMODEMASK	scp.c	659;"	d	file:
FL	libtomcrypt/src/ciphers/kasumi.c	/^static ulong32 FL( ulong32 in, int round_no, symmetric_key *key )$/;"	f	file:
FLAGS	libtommath/Makefile	/^	make CFLAGS="$(CFLAGS) -fbranch-probabilities"$/;"	m
FO	libtomcrypt/src/ciphers/kasumi.c	/^static ulong32 FO( ulong32 in, int round_no, symmetric_key *key)$/;"	f	file:
FOLD	libtomcrypt/src/prngs/sober128.c	38;"	d	file:
FOLDP	libtomcrypt/src/prngs/sober128.c	41;"	d	file:
FORTUNA_POOLS	libtomcrypt/src/headers/tomcrypt_custom.h	147;"	d
FORTUNA_POOLS	libtomcrypt/src/prngs/fortuna.c	33;"	d	file:
FP_ENTRIES	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	23;"	d	file:
FP_LUT	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	28;"	d	file:
Fortuna	libtomcrypt/crypt.tex	/^\\subsubsection{Fortuna}$/;"	b
Free s password Since the algorithm allows binary passwords you must also specify the length in textit password _len	libtomcrypt/crypt.tex	/^\\subsubsection{Free'ing a Flexi List}$/;"	b
From ASCII	libtommath/bn.tex	/^\\subsection{From ASCII}$/;"	b
G	libtomcrypt/src/ciphers/kseed.c	186;"	d	file:
G	libtomcrypt/src/hashes/md4.c	53;"	d	file:
G	libtomcrypt/src/hashes/md5.c	40;"	d	file:
G	libtomcrypt/src/hashes/rmd128.c	46;"	d	file:
G	libtomcrypt/src/hashes/rmd160.c	46;"	d	file:
G	libtomcrypt/src/hashes/rmd256.c	40;"	d	file:
G	libtomcrypt/src/hashes/rmd320.c	40;"	d	file:
GAMMA	libtomcrypt/src/ciphers/noekeon.c	53;"	d	file:
GB	libtomcrypt/src/ciphers/cast5.c	395;"	d	file:
GB	libtomcrypt/src/ciphers/cast5.c	397;"	d	file:
GB	libtomcrypt/src/hashes/whirl/whirl.c	43;"	d	file:
GCM Mode	libtomcrypt/crypt.tex	/^\\subsection{GCM Mode}$/;"	b
GCM _TABLES	libtomcrypt/crypt.tex	/^\\subsection{GCM\\_TABLES}$/;"	b
GCM _TABLES _SSE2	libtomcrypt/crypt.tex	/^\\subsection{GCM\\_TABLES\\_SSE2}$/;"	b
GCM_DECRYPT	libtomcrypt/src/headers/tomcrypt_mac.h	228;"	d
GCM_ENCRYPT	libtomcrypt/src/headers/tomcrypt_mac.h	227;"	d
GCM_MODE_AAD	libtomcrypt/src/headers/tomcrypt_mac.h	231;"	d
GCM_MODE_IV	libtomcrypt/src/headers/tomcrypt_mac.h	230;"	d
GCM_MODE_TEXT	libtomcrypt/src/headers/tomcrypt_mac.h	232;"	d
GET_32BIT	keyimport.c	46;"	d	file:
GG	libtomcrypt/src/hashes/md4.c	66;"	d	file:
GG	libtomcrypt/src/hashes/md5.c	49;"	d	file:
GG	libtomcrypt/src/hashes/md5.c	88;"	d	file:
GG	libtomcrypt/src/hashes/rmd128.c	55;"	d	file:
GG	libtomcrypt/src/hashes/rmd160.c	57;"	d	file:
GG	libtomcrypt/src/hashes/rmd256.c	49;"	d	file:
GG	libtomcrypt/src/hashes/rmd320.c	51;"	d	file:
GGG	libtomcrypt/src/hashes/rmd128.c	71;"	d	file:
GGG	libtomcrypt/src/hashes/rmd160.c	82;"	d	file:
GGG	libtomcrypt/src/hashes/rmd256.c	65;"	d	file:
GGG	libtomcrypt/src/hashes/rmd320.c	76;"	d	file:
GROUP	libtomcrypt/Makefile	/^GROUP=$(INSTALL_GROUP)$/;"	m
GROUP	libtomcrypt/Makefile	/^GROUP=wheel$/;"	m
GROUP	libtommath/Makefile	/^   GROUP=$(INSTALL_GROUP)$/;"	m
GROUP	libtommath/Makefile	/^   GROUP=wheel$/;"	m
Gamma0	libtomcrypt/src/hashes/sha2/sha256.c	64;"	d	file:
Gamma0	libtomcrypt/src/hashes/sha2/sha512.c	89;"	d	file:
Gamma1	libtomcrypt/src/hashes/sha2/sha256.c	65;"	d	file:
Gamma1	libtomcrypt/src/hashes/sha2/sha512.c	90;"	d	file:
Greatest Common Divisor	libtommath/bn.tex	/^\\section{Greatest Common Divisor}$/;"	s
Gx	libtomcrypt/src/headers/tomcrypt_pk.h	/^   char *Gx;$/;"	m	struct:__anon28
Gy	libtomcrypt/src/headers/tomcrypt_pk.h	/^   char *Gy;$/;"	m	struct:__anon28
H	libtomcrypt/src/hashes/md4.c	54;"	d	file:
H	libtomcrypt/src/hashes/md5.c	41;"	d	file:
H	libtomcrypt/src/hashes/rmd128.c	47;"	d	file:
H	libtomcrypt/src/hashes/rmd160.c	47;"	d	file:
H	libtomcrypt/src/hashes/rmd256.c	41;"	d	file:
H	libtomcrypt/src/hashes/rmd320.c	41;"	d	file:
H	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char       H[16],        \/* multiplier *\/$/;"	m	struct:__anon17
HASH	libtomcrypt/Makefile	/^HASH=hashsum$/;"	m
HASHOBJECTS	libtomcrypt/Makefile	/^HASHOBJECTS=demos\/hashsum.o$/;"	m
HASH_PROCESS	libtomcrypt/src/headers/tomcrypt_hash.h	341;"	d
HAVE_BASENAME	config.h	59;"	d
HAVE_CLEARENV	config.h	62;"	d
HAVE_CONST_GAI_STRERROR_PROTO	config.h	65;"	d
HAVE_CRYPT_H	config.h	68;"	d
HAVE_DAEMON	config.h	71;"	d
HAVE_DEV_PTMX	sshpty.c	27;"	d	file:
HAVE_DUP2	config.h	77;"	d
HAVE_ENDUTENT	config.h	80;"	d
HAVE_FCNTL_H	config.h	86;"	d
HAVE_FORK	config.h	89;"	d
HAVE_FREEADDRINFO	config.h	92;"	d
HAVE_GAI_STRERROR	config.h	95;"	d
HAVE_GETADDRINFO	config.h	98;"	d
HAVE_GETNAMEINFO	config.h	101;"	d
HAVE_GETSPNAM	config.h	104;"	d
HAVE_GETUSERSHELL	config.h	107;"	d
HAVE_GETUTENT	config.h	110;"	d
HAVE_GETUTID	config.h	113;"	d
HAVE_GETUTLINE	config.h	116;"	d
HAVE_INTTYPES_H	config.h	128;"	d
HAVE_LASTLOG_H	config.h	134;"	d
HAVE_LIBGEN_H	config.h	137;"	d
HAVE_LIMITS_H	config.h	155;"	d
HAVE_LOGOUT	config.h	161;"	d
HAVE_LOGWTMP	config.h	164;"	d
HAVE_MEMORY_H	config.h	167;"	d
HAVE_MEMSET	config.h	170;"	d
HAVE_NETDB_H	config.h	173;"	d
HAVE_NETINET_IN_H	config.h	176;"	d
HAVE_NETINET_TCP_H	config.h	182;"	d
HAVE_OPENPTY	config.h	185;"	d
HAVE_PATHS_H	config.h	194;"	d
HAVE_PTY_H	config.h	197;"	d
HAVE_PUTENV	config.h	200;"	d
HAVE_PUTUTLINE	config.h	203;"	d
HAVE_SELECT	config.h	212;"	d
HAVE_SETUTENT	config.h	215;"	d
HAVE_SHADOW_H	config.h	221;"	d
HAVE_SOCKET	config.h	224;"	d
HAVE_STDINT_H	config.h	227;"	d
HAVE_STDLIB_H	config.h	230;"	d
HAVE_STRDUP	config.h	233;"	d
HAVE_STRINGS_H	config.h	236;"	d
HAVE_STRING_H	config.h	239;"	d
HAVE_STRLCAT	config.h	242;"	d
HAVE_STRLCPY	config.h	245;"	d
HAVE_STRUCT_ADDRINFO	config.h	251;"	d
HAVE_STRUCT_IN6_ADDR	config.h	254;"	d
HAVE_STRUCT_SOCKADDR_IN6	config.h	257;"	d
HAVE_STRUCT_SOCKADDR_STORAGE	config.h	260;"	d
HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY	config.h	263;"	d
HAVE_STRUCT_UTMPX_UT_ADDR_V6	config.h	269;"	d
HAVE_STRUCT_UTMPX_UT_HOST	config.h	272;"	d
HAVE_STRUCT_UTMPX_UT_ID	config.h	275;"	d
HAVE_STRUCT_UTMPX_UT_TV	config.h	284;"	d
HAVE_STRUCT_UTMPX_UT_TYPE	config.h	287;"	d
HAVE_STRUCT_UTMP_UT_ADDR	config.h	290;"	d
HAVE_STRUCT_UTMP_UT_ADDR_V6	config.h	293;"	d
HAVE_STRUCT_UTMP_UT_EXIT	config.h	296;"	d
HAVE_STRUCT_UTMP_UT_HOST	config.h	299;"	d
HAVE_STRUCT_UTMP_UT_ID	config.h	302;"	d
HAVE_STRUCT_UTMP_UT_PID	config.h	305;"	d
HAVE_STRUCT_UTMP_UT_TIME	config.h	308;"	d
HAVE_STRUCT_UTMP_UT_TV	config.h	311;"	d
HAVE_STRUCT_UTMP_UT_TYPE	config.h	314;"	d
HAVE_SYS_SELECT_H	config.h	317;"	d
HAVE_SYS_SOCKET_H	config.h	320;"	d
HAVE_SYS_STAT_H	config.h	323;"	d
HAVE_SYS_TIME_H	config.h	326;"	d
HAVE_SYS_TYPES_H	config.h	329;"	d
HAVE_SYS_UIO_H	config.h	332;"	d
HAVE_SYS_WAIT_H	config.h	335;"	d
HAVE_TERMIOS_H	config.h	338;"	d
HAVE_UINT16_T	config.h	341;"	d
HAVE_UNISTD_H	config.h	344;"	d
HAVE_UPDWTMP	config.h	347;"	d
HAVE_UTMPNAME	config.h	353;"	d
HAVE_UTMPX_H	config.h	359;"	d
HAVE_UTMP_H	config.h	362;"	d
HAVE_U_INT16_T	config.h	365;"	d
HAVE_WRITEV	config.h	368;"	d
HEADERS	Makefile	/^HEADERS=options.h dbutil.h session.h packet.h algo.h ssh.h buffer.h kex.h \\$/;"	m
HEADERS	libtomcrypt/Makefile	/^HEADERS=src\/headers\/tomcrypt_cfg.h src\/headers\/tomcrypt_mac.h src\/headers\/tomcrypt_macros.h \\$/;"	m
HEADERS	libtommath/Makefile	/^HEADERS=tommath.h tommath_class.h tommath_superclass.h$/;"	m
HH	libtomcrypt/src/hashes/md4.c	70;"	d	file:
HH	libtomcrypt/src/hashes/md5.c	52;"	d	file:
HH	libtomcrypt/src/hashes/md5.c	91;"	d	file:
HH	libtomcrypt/src/hashes/rmd128.c	59;"	d	file:
HH	libtomcrypt/src/hashes/rmd160.c	62;"	d	file:
HH	libtomcrypt/src/hashes/rmd256.c	53;"	d	file:
HH	libtomcrypt/src/hashes/rmd320.c	56;"	d	file:
HHH	libtomcrypt/src/hashes/rmd128.c	75;"	d	file:
HHH	libtomcrypt/src/hashes/rmd160.c	87;"	d	file:
HHH	libtomcrypt/src/hashes/rmd256.c	69;"	d	file:
HHH	libtomcrypt/src/hashes/rmd320.c	81;"	d	file:
HMAC Acceleration	libtomcrypt/crypt.tex	/^\\subsection{HMAC Acceleration}$/;"	b
HMAC_BLOCKSIZE	libtomcrypt/src/mac/hmac/hmac_done.c	20;"	d	file:
HMAC_BLOCKSIZE	libtomcrypt/src/mac/hmac/hmac_init.c	20;"	d	file:
HMAC_BLOCKSIZE	libtomcrypt/src/mac/hmac/hmac_test.c	20;"	d	file:
Hash Registration	libtomcrypt/crypt.tex	/^\\subsection{Hash Registration}$/;"	b
Hash_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^typedef union Hash_state {$/;"	u
Hmac_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^typedef struct Hmac_state {$/;"	s
I	libtomcrypt/src/hashes/md5.c	42;"	d	file:
I	libtomcrypt/src/hashes/rmd128.c	48;"	d	file:
I	libtomcrypt/src/hashes/rmd160.c	48;"	d	file:
I	libtomcrypt/src/hashes/rmd256.c	42;"	d	file:
I	libtomcrypt/src/hashes/rmd320.c	42;"	d	file:
ID	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned char ID;$/;"	m	struct:ltc_cipher_descriptor
ID	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char ID;$/;"	m	struct:ltc_hash_descriptor
II	libtomcrypt/src/hashes/md5.c	55;"	d	file:
II	libtomcrypt/src/hashes/md5.c	94;"	d	file:
II	libtomcrypt/src/hashes/rmd128.c	63;"	d	file:
II	libtomcrypt/src/hashes/rmd160.c	67;"	d	file:
II	libtomcrypt/src/hashes/rmd256.c	57;"	d	file:
II	libtomcrypt/src/hashes/rmd320.c	61;"	d	file:
III	libtomcrypt/src/hashes/rmd128.c	79;"	d	file:
III	libtomcrypt/src/hashes/rmd160.c	92;"	d	file:
III	libtomcrypt/src/hashes/rmd256.c	73;"	d	file:
III	libtomcrypt/src/hashes/rmd320.c	86;"	d	file:
IN6_IS_ADDR_LOOPBACK	fake-rfc2553.h	65;"	d
INCPATH	libtomcrypt/Makefile	/^   INCPATH=\/usr\/include$/;"	m
INCPATH	libtommath/Makefile	/^INCPATH=\/usr\/include$/;"	m
INETD_MODE	options.h	41;"	d
INITKONST	libtomcrypt/src/prngs/sober128.c	39;"	d	file:
INIT_READBUF	packet.h	47;"	d
INIT_SEED_SIZE	random.c	39;"	d	file:
INLINE	libtomcrypt/src/ciphers/cast5.c	503;"	d	file:
INLINE	libtomcrypt/src/ciphers/cast5.c	505;"	d	file:
INLINE	libtomcrypt/src/hashes/tiger.c	559;"	d	file:
INLINE	libtomcrypt/src/hashes/tiger.c	561;"	d	file:
INSTALL	Makefile	/^INSTALL=install$/;"	m
IPHT	libtomcrypt/src/ciphers/safer/safer.c	95;"	d	file:
IS_DROPBEAR_CLIENT	sysoptions.h	214;"	d
IS_DROPBEAR_CLIENT	sysoptions.h	219;"	d
IS_DROPBEAR_CLIENT	sysoptions.h	224;"	d
IS_DROPBEAR_CLIENT	sysoptions.h	229;"	d
IS_DROPBEAR_SERVER	sysoptions.h	213;"	d
IS_DROPBEAR_SERVER	sysoptions.h	218;"	d
IS_DROPBEAR_SERVER	sysoptions.h	223;"	d
IS_DROPBEAR_SERVER	sysoptions.h	228;"	d
IV	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    unsigned char     IV[16],$/;"	m	struct:__anon25
IV	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned char       IV[MAXBLOCKSIZE], $/;"	m	struct:__anon21
IV	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned char       IV[MAXBLOCKSIZE],$/;"	m	struct:__anon26
IV	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned char       IV[MAXBLOCKSIZE];$/;"	m	struct:__anon22
IV	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned char       IV[MAXBLOCKSIZE];$/;"	m	struct:__anon23
IV	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 IV[MAXBLOCKSIZE];$/;"	m	struct:__anon18
IV	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 IV[MAXBLOCKSIZE];$/;"	m	struct:__anon19
IV	libtomcrypt/src/headers/tomcrypt_prng.h	/^                  IV[16];     \/* IV for CTR mode *\/$/;"	m	struct:fortuna_prng
Initial Vector	libtomcrypt/crypt.tex	/^\\subsubsection{Initial Vector}$/;"	b
Initialization	libtomcrypt/crypt.tex	/^\\subsection{Initialization}$/;"	b
Initialization	libtomcrypt/crypt.tex	/^\\subsubsection{Initialization}$/;"	b
Input and Output	libtommath/bn.tex	/^\\chapter{Input and Output}$/;"	c
Installation Directories	libtomcrypt/crypt.tex	/^\\subsection{Installation Directories}$/;"	b
Integer Division and Remainder	libtommath/bn.tex	/^\\section{Integer Division and Remainder}$/;"	s
Internal ID	libtomcrypt/crypt.tex	/^\\subsection{Internal ID}$/;"	b
Introduction	libtomcrypt/crypt.tex	/^\\chapter{Introduction}$/;"	c
J	libtomcrypt/src/hashes/rmd160.c	49;"	d	file:
J	libtomcrypt/src/hashes/rmd320.c	43;"	d	file:
JJ	libtomcrypt/src/hashes/rmd160.c	72;"	d	file:
JJ	libtomcrypt/src/hashes/rmd320.c	66;"	d	file:
JJJ	libtomcrypt/src/hashes/rmd160.c	97;"	d	file:
JJJ	libtomcrypt/src/hashes/rmd320.c	91;"	d	file:
Jacobi Symbol	libtommath/bn.tex	/^\\section{Jacobi Symbol}$/;"	s
K	libtomcrypt/src/hashes/sha2/sha256.c	/^static const ulong32 K[64] = {$/;"	v	file:
K	libtomcrypt/src/hashes/sha2/sha512.c	/^static const ulong64 K[80] = {$/;"	v	file:
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^      ulong32 K[40];$/;"	m	struct:twofish_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^      ulong32 S[4][256], K[40];$/;"	m	struct:twofish_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 K[32], dK[32];$/;"	m	struct:kseed_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 K[32], keylen;$/;"	m	struct:cast5_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 K[4], dK[4];$/;"	m	struct:noekeon_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 K[18];$/;"	m	struct:blowfish_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 K[44];$/;"	m	struct:rc6_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 K[50];$/;"	m	struct:rc5_key
K	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned char K[33][16];$/;"	m	struct:saferp_key
K	libtomcrypt/src/headers/tomcrypt_mac.h	/^    symmetric_key K;$/;"	m	struct:pelican_state
K	libtomcrypt/src/headers/tomcrypt_mac.h	/^   symmetric_key       K;$/;"	m	struct:__anon17
K	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char K[3][MAXBLOCKSIZE],$/;"	m	struct:__anon18
K	libtomcrypt/src/headers/tomcrypt_prng.h	/^    unsigned char K[32],      \/* the current key *\/$/;"	m	struct:fortuna_prng
KARATSUBA_MUL_CUTOFF	libtommath/bncore.c	/^int     KARATSUBA_MUL_CUTOFF = 80,      \/* Min. number of digits before Karatsuba multiplication is used. *\/$/;"	v
KARATSUBA_MUL_CUTOFF	libtommath/pre_gen/mpi.c	/^int     KARATSUBA_MUL_CUTOFF = 80,      \/* Min. number of digits before Karatsuba multiplication is used. *\/$/;"	v
KARATSUBA_SQR_CUTOFF	libtommath/bncore.c	/^        KARATSUBA_SQR_CUTOFF = 120,     \/* Min. number of digits before Karatsuba squaring is used. *\/$/;"	v
KARATSUBA_SQR_CUTOFF	libtommath/pre_gen/mpi.c	/^        KARATSUBA_SQR_CUTOFF = 120,     \/* Min. number of digits before Karatsuba squaring is used. *\/$/;"	v
KAT_key	libtomcrypt/src/headers/tomcrypt_pk.h	/^typedef struct KAT_key {$/;"	s
KCi	libtomcrypt/src/ciphers/kseed.c	/^static const ulong32 KCi[16] = {$/;"	v	file:
KEXDH_INIT_SENT	session.h	/^	KEXDH_INIT_SENT,$/;"	e	enum:__anon3
KEXDONE	session.h	/^	KEXDONE$/;"	e	enum:__anon3
KEXGUESS2_ALGO_ID	algo.h	93;"	d
KEXGUESS2_ALGO_NAME	algo.h	92;"	d
KEXGUESS2_LOOK	algo.h	/^	KEXGUESS2_LOOK,$/;"	e	enum:kexguess2_used
KEXGUESS2_NO	algo.h	/^	KEXGUESS2_NO,$/;"	e	enum:kexguess2_used
KEXGUESS2_YES	algo.h	/^	KEXGUESS2_YES,$/;"	e	enum:kexguess2_used
KEXHASHBUF_MAX_INTS	sysoptions.h	139;"	d
KEXINIT_RCVD	session.h	/^	KEXINIT_RCVD,$/;"	e	enum:__anon3
KEXState	kex.h	/^struct KEXState {$/;"	s
KEX_NOTHING	session.h	/^	KEX_NOTHING,$/;"	e	enum:__anon3
KEX_REKEY_DATA	sysoptions.h	19;"	d
KEX_REKEY_TIMEOUT	sysoptions.h	16;"	d
KEYFILE_DROPBEAR	keyimport.h	/^	KEYFILE_DROPBEAR,$/;"	e	enum:__anon7
KEYFILE_OPENSSH	keyimport.h	/^	KEYFILE_OPENSSH,$/;"	e	enum:__anon7
KEYFILE_SSHCOM	keyimport.h	/^	KEYFILE_SSHCOM$/;"	e	enum:__anon7
KEYOBJS	Makefile	/^KEYOBJS=dropbearkey.o gendss.o genrsa.o$/;"	m
KEYP	libtomcrypt/src/prngs/sober128.c	40;"	d	file:
KEYSIZE	libtomcrypt/src/ciphers/khazad.c	35;"	d	file:
KEYSIZEB	libtomcrypt/src/ciphers/khazad.c	36;"	d	file:
KIi1	libtomcrypt/src/headers/tomcrypt_cipher.h	/^            KIi1[8], KIi2[8], KIi3[8];$/;"	m	struct:kasumi_key
KIi2	libtomcrypt/src/headers/tomcrypt_cipher.h	/^            KIi1[8], KIi2[8], KIi3[8];$/;"	m	struct:kasumi_key
KIi3	libtomcrypt/src/headers/tomcrypt_cipher.h	/^            KIi1[8], KIi2[8], KIi3[8];$/;"	m	struct:kasumi_key
KLi1	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 KLi1[8], KLi2[8],$/;"	m	struct:kasumi_key
KLi2	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 KLi1[8], KLi2[8],$/;"	m	struct:kasumi_key
KOi1	libtomcrypt/src/headers/tomcrypt_cipher.h	/^            KOi1[8], KOi2[8], KOi3[8],$/;"	m	struct:kasumi_key
KOi2	libtomcrypt/src/headers/tomcrypt_cipher.h	/^            KOi1[8], KOi2[8], KOi3[8],$/;"	m	struct:kasumi_key
KOi3	libtomcrypt/src/headers/tomcrypt_cipher.h	/^            KOi1[8], KOi2[8], KOi3[8],$/;"	m	struct:kasumi_key
KTIMES	libtomcrypt/testprof/tomcrypt_test.h	41;"	d
Key Scheduling	libtomcrypt/crypt.tex	/^\\subsection{Key Scheduling}$/;"	b
Key Sizing	libtomcrypt/crypt.tex	/^\\subsection{Key Sizing}$/;"	b
Korder	libtomcrypt/src/hashes/md5.c	/^static const ulong32 Korder[64] = {$/;"	v	file:
L	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char     L[MAXBLOCKSIZE],         \/* L value *\/$/;"	m	struct:__anon16
LASTLOG_FILE	loginrec.h	60;"	d
LASTLOG_FILE	loginrec.h	63;"	d
LBL_T	libtommath/etc/tune.c	/^ulong64 LBL_T;$/;"	v
LDFLAGS	Makefile	/^LDFLAGS= -L\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/toolchains\/rsdk-1.5.6-5281-EB-2.6.30-0.9.30.3-110915\/usr\/lib -L\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/toolchains\/rsdk-1.5.6-5281-EB-2.6.30-0.9.30.3-110915\/lib -L\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/toolchains\/rsdk-1.5.6-5281-EB-2.6.30-0.9.30.3-110915\/usr\/lib -T\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/app\/rules\/shared.lds   -lifm -L\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/lwlib -lshared -L\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/..\/..\/app\/shared  -lcfg -L\/home\/wanghuanyu\/EPN\/9607\/trunk\/product\/access\/lwlib$/;"	m
LEFTOVERS	libtomcrypt/Makefile	/^LEFTOVERS=*.dvi *.log *.aux *.toc *.idx *.ilg *.ind *.out$/;"	m
LIBNAME	libtomcrypt/Makefile	/^   LIBNAME=libtomcrypt.a$/;"	m
LIBNAME	libtommath/Makefile	/^   LIBNAME=libtommath.a$/;"	m
LIBNAME	libtommath/etc/makefile	/^LIBNAME=..\/libtommath.a$/;"	m
LIBPATH	libtomcrypt/Makefile	/^   LIBPATH=\/usr\/lib$/;"	m
LIBPATH	libtommath/Makefile	/^LIBPATH=\/usr\/lib$/;"	m
LIBTEST	libtomcrypt/Makefile	/^   LIBTEST=libtomcrypt_prof.a$/;"	m
LIBTEST_S	libtomcrypt/Makefile	/^LIBTEST_S=$(LIBTEST)$/;"	m
LIBTEST_S	libtomcrypt/testprof/makefile	/^   LIBTEST_S=libtomcrypt_prof.a$/;"	m
LIBTOM_DEPS	Makefile	/^LIBTOM_DEPS=$(LTC) $(LTM)$/;"	m
LINFO_HOSTSIZE	loginrec.h	125;"	d
LINFO_LINESIZE	loginrec.h	123;"	d
LINFO_NAMESIZE	loginrec.h	124;"	d
LINFO_PROGSIZE	loginrec.h	122;"	d
LISTENER_EXTEND_SIZE	listener.h	29;"	d
LL_DIR	loginrec.c	1278;"	d	file:
LL_FILE	loginrec.c	1277;"	d	file:
LL_OTHER	loginrec.c	1279;"	d	file:
LOAD32H	libtomcrypt/src/headers/tomcrypt_macros.h	198;"	d
LOAD32H	libtomcrypt/src/headers/tomcrypt_macros.h	218;"	d
LOAD32H	libtomcrypt/src/headers/tomcrypt_macros.h	48;"	d
LOAD32H	libtomcrypt/src/headers/tomcrypt_macros.h	79;"	d
LOAD32H	libtomcrypt/src/headers/tomcrypt_macros.h	91;"	d
LOAD32L	libtomcrypt/src/headers/tomcrypt_macros.h	137;"	d
LOAD32L	libtomcrypt/src/headers/tomcrypt_macros.h	157;"	d
LOAD32L	libtomcrypt/src/headers/tomcrypt_macros.h	175;"	d
LOAD32L	libtomcrypt/src/headers/tomcrypt_macros.h	26;"	d
LOAD64H	libtomcrypt/src/headers/tomcrypt_macros.h	110;"	d
LOAD64H	libtomcrypt/src/headers/tomcrypt_macros.h	124;"	d
LOAD64H	libtomcrypt/src/headers/tomcrypt_macros.h	207;"	d
LOAD64H	libtomcrypt/src/headers/tomcrypt_macros.h	224;"	d
LOAD64H	libtomcrypt/src/headers/tomcrypt_macros.h	60;"	d
LOAD64L	libtomcrypt/src/headers/tomcrypt_macros.h	146;"	d
LOAD64L	libtomcrypt/src/headers/tomcrypt_macros.h	163;"	d
LOAD64L	libtomcrypt/src/headers/tomcrypt_macros.h	187;"	d
LOAD64L	libtomcrypt/src/headers/tomcrypt_macros.h	38;"	d
LOCAL_IDENT	sysoptions.h	10;"	d
LOG	libtomcrypt/src/ciphers/safer/safer.c	93;"	d	file:
LOG_AUTHPRIV	includes.h	147;"	d
LOG_V_2	libtommath/mtest/mpi.c	52;"	d	file:
LOG_V_2	libtommath/mtest/mpi.c	57;"	d	file:
LRW Mode	libtomcrypt/crypt.tex	/^\\subsection{LRW Mode}$/;"	b
LRW_DECRYPT	libtomcrypt/src/headers/tomcrypt_cipher.h	795;"	d
LRW_ENCRYPT	libtomcrypt/src/headers/tomcrypt_cipher.h	794;"	d
LT	libtomcrypt/src/ciphers/safer/saferp.c	124;"	d	file:
LT	libtomcrypt/src/ciphers/safer/saferp.c	165;"	d	file:
LT	libtomcrypt/src/ciphers/safer/saferp.c	166;"	d	file:
LTC	Makefile	/^LTC=libtomcrypt\/libtomcrypt.a$/;"	m
LTC _CLEAN _STACK	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_CLEAN\\_STACK}$/;"	b
LTC _EASY	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_EASY}$/;"	b
LTC _FAST	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_FAST}$/;"	b
LTC _NO _ASM	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_NO\\_ASM}$/;"	b
LTC _NO _FAST	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_NO\\_FAST}$/;"	b
LTC _NO _FILE	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_NO\\_FILE}$/;"	b
LTC _PTHREAD	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_PTHREAD}$/;"	b
LTC _SMALL _CODE	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_SMALL\\_CODE}$/;"	b
LTC _TEST	libtomcrypt/crypt.tex	/^\\subsection{LTC\\_TEST}$/;"	b
LTC_ARGCHK	libtomcrypt/src/headers/tomcrypt_argchk.h	15;"	d
LTC_ARGCHK	libtomcrypt/src/headers/tomcrypt_argchk.h	20;"	d
LTC_ARGCHK	libtomcrypt/src/headers/tomcrypt_argchk.h	25;"	d
LTC_ARGCHK	libtomcrypt/src/headers/tomcrypt_argchk.h	30;"	d
LTC_ARGCHK	libtomcrypt/src/headers/tomcrypt_argchk.h	9;"	d
LTC_ARGCHKVD	libtomcrypt/src/headers/tomcrypt_argchk.h	10;"	d
LTC_ARGCHKVD	libtomcrypt/src/headers/tomcrypt_argchk.h	16;"	d
LTC_ARGCHKVD	libtomcrypt/src/headers/tomcrypt_argchk.h	21;"	d
LTC_ARGCHKVD	libtomcrypt/src/headers/tomcrypt_argchk.h	26;"	d
LTC_ARGCHKVD	libtomcrypt/src/headers/tomcrypt_argchk.h	31;"	d
LTC_ASN1_BIT_STRING	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_BIT_STRING,$/;"	e	enum:__anon32
LTC_ASN1_BOOLEAN	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_BOOLEAN,$/;"	e	enum:__anon32
LTC_ASN1_CHOICE	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_CHOICE,$/;"	e	enum:__anon32
LTC_ASN1_EOL	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_EOL,$/;"	e	enum:__anon32
LTC_ASN1_IA5_STRING	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_IA5_STRING,$/;"	e	enum:__anon32
LTC_ASN1_INTEGER	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_INTEGER,$/;"	e	enum:__anon32
LTC_ASN1_NULL	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_NULL,$/;"	e	enum:__anon32
LTC_ASN1_OBJECT_IDENTIFIER	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_OBJECT_IDENTIFIER,$/;"	e	enum:__anon32
LTC_ASN1_OCTET_STRING	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_OCTET_STRING,$/;"	e	enum:__anon32
LTC_ASN1_PRINTABLE_STRING	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_PRINTABLE_STRING,$/;"	e	enum:__anon32
LTC_ASN1_SEQUENCE	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_SEQUENCE,$/;"	e	enum:__anon32
LTC_ASN1_SET	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_SET,$/;"	e	enum:__anon32
LTC_ASN1_SETOF	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_SETOF$/;"	e	enum:__anon32
LTC_ASN1_SHORT_INTEGER	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_SHORT_INTEGER,$/;"	e	enum:__anon32
LTC_ASN1_UTCTIME	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_UTCTIME,$/;"	e	enum:__anon32
LTC_ASN1_UTF8_STRING	libtomcrypt/src/headers/tomcrypt_pk.h	/^ LTC_ASN1_UTF8_STRING,$/;"	e	enum:__anon32
LTC_CALL	libtomcrypt/src/headers/tomcrypt_cfg.h	11;"	d
LTC_CALL	libtomcrypt/src/headers/tomcrypt_cfg.h	14;"	d
LTC_CBC_MODE	libtomcrypt/src/headers/tomcrypt_custom.h	115;"	d
LTC_CTR_MODE	libtomcrypt/src/headers/tomcrypt_custom.h	118;"	d
LTC_CTR_RFC3686	libtomcrypt/src/headers/tomcrypt_cipher.h	777;"	d
LTC_EXPORT	libtomcrypt/src/headers/tomcrypt_cfg.h	19;"	d
LTC_FAST	libtomcrypt/src/headers/tomcrypt_cfg.h	101;"	d
LTC_FAST	libtomcrypt/src/headers/tomcrypt_cfg.h	111;"	d
LTC_FAST	libtomcrypt/src/headers/tomcrypt_cfg.h	62;"	d
LTC_FAST	libtomcrypt/src/headers/tomcrypt_cfg.h	76;"	d
LTC_FAST	libtomcrypt/src/headers/tomcrypt_cfg.h	84;"	d
LTC_FAST_TYPE	libtomcrypt/src/headers/tomcrypt_cfg.h	112;"	d
LTC_FAST_TYPE	libtomcrypt/src/headers/tomcrypt_cfg.h	63;"	d
LTC_FAST_TYPE	libtomcrypt/src/headers/tomcrypt_cfg.h	77;"	d
LTC_FAST_TYPE	libtomcrypt/src/headers/tomcrypt_cfg.h	85;"	d
LTC_HMAC	libtomcrypt/src/headers/tomcrypt_custom.h	135;"	d
LTC_MP_EQ	libtomcrypt/src/headers/tomcrypt_math.h	4;"	d
LTC_MP_GT	libtomcrypt/src/headers/tomcrypt_math.h	5;"	d
LTC_MP_LT	libtomcrypt/src/headers/tomcrypt_math.h	3;"	d
LTC_MP_NO	libtomcrypt/src/headers/tomcrypt_math.h	7;"	d
LTC_MP_YES	libtomcrypt/src/headers/tomcrypt_math.h	8;"	d
LTC_MUTEX_GLOBAL	libtomcrypt/src/headers/tomcrypt_custom.h	141;"	d
LTC_MUTEX_INIT	libtomcrypt/src/headers/tomcrypt_custom.h	144;"	d
LTC_MUTEX_LOCK	libtomcrypt/src/headers/tomcrypt_custom.h	145;"	d
LTC_MUTEX_PROTO	libtomcrypt/src/headers/tomcrypt_custom.h	142;"	d
LTC_MUTEX_TYPE	libtomcrypt/src/headers/tomcrypt_custom.h	143;"	d
LTC_MUTEX_UNLOCK	libtomcrypt/src/headers/tomcrypt_custom.h	146;"	d
LTC_NO_BSWAP	libtomcrypt/src/headers/tomcrypt_cfg.h	114;"	d
LTC_NO_FILE	libtomcrypt/src/headers/tomcrypt_custom.h	81;"	d
LTC_NO_PK	libtomcrypt/src/headers/tomcrypt_custom.h	66;"	d
LTC_NO_PRNGS	libtomcrypt/src/headers/tomcrypt_custom.h	65;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	10;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	16;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	22;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	28;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	35;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	41;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	47;"	d
LTC_NO_PROTOTYPES	libtomcrypt/src/headers/tomcrypt_custom.h	53;"	d
LTC_NO_ROLC	libtomcrypt/src/headers/tomcrypt_cfg.h	113;"	d
LTC_NO_ROLC	libtomcrypt/src/headers/tomcrypt_custom.h	71;"	d
LTC_PKCS_1_EME	libtomcrypt/src/headers/tomcrypt_pkcs.h	/^  LTC_PKCS_1_EME    = 2         \/* Block type 2 (PKCS #1 v1.5 encryption padding) *\/$/;"	e	enum:ltc_pkcs_1_v1_5_blocks
LTC_PKCS_1_EMSA	libtomcrypt/src/headers/tomcrypt_pkcs.h	/^  LTC_PKCS_1_EMSA   = 1,        \/* Block type 1 (PKCS #1 v1.5 signature padding) *\/$/;"	e	enum:ltc_pkcs_1_v1_5_blocks
LTC_PKCS_1_OAEP	libtomcrypt/src/headers/tomcrypt_pkcs.h	/^  LTC_PKCS_1_OAEP   = 2,        \/* PKCS #1 v2.0 encryption padding *\/$/;"	e	enum:ltc_pkcs_1_paddings
LTC_PKCS_1_PSS	libtomcrypt/src/headers/tomcrypt_pkcs.h	/^  LTC_PKCS_1_PSS    = 3         \/* PKCS #1 v2.1 signature padding *\/$/;"	e	enum:ltc_pkcs_1_paddings
LTC_PKCS_1_V1_5	libtomcrypt/src/headers/tomcrypt_pkcs.h	/^  LTC_PKCS_1_V1_5   = 1,        \/* PKCS #1 v1.5 padding (\\sa ltc_pkcs_1_v1_5_blocks) *\/$/;"	e	enum:ltc_pkcs_1_paddings
LTC_SET_ASN1	libtomcrypt/src/headers/tomcrypt_pk.h	398;"	d
LTC_SMALL_CODE	libtomcrypt/src/headers/tomcrypt_custom.h	68;"	d
LTM	Makefile	/^LTM=libtommath\/libtommath.a$/;"	m
LTM1	libtommath/tommath_class.h	8;"	d
LTM2	libtommath/tommath_class.h	6;"	d
LTM3	libtommath/tommath_class.h	3;"	d
LTM_ALL	libtommath/tommath_superclass.h	4;"	d
LTM_LAST	libtommath/tommath_class.h	989;"	d
LTM_LAST	libtommath/tommath_class.h	994;"	d
LTM_PRIME_2MSB_ON	libtommath/tommath.h	153;"	d
LTM_PRIME_BBS	libtommath/tommath.h	151;"	d
LTM_PRIME_SAFE	libtommath/tommath.h	152;"	d
LTYPE_LOGIN	loginrec.h	118;"	d
LTYPE_LOGOUT	loginrec.h	119;"	d
LUT	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^             *LUT[1U<<FP_LUT]; \/* fixed point lookup *\/ $/;"	m	struct:__anon37	file:
Least Common Multiple	libtommath/bn.tex	/^\\section{Least Common Multiple}$/;"	s
Li	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     Li[MAXBLOCKSIZE],        \/* value of Li [current value, we calc from previous recall] *\/$/;"	m	struct:__anon14
Li	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     Li[MAXBLOCKSIZE],        \/* value of Li [current value, we calc from previous recall] *\/$/;"	m	struct:__anon16
Link	queue.h	/^struct Link {$/;"	s
Listener	listener.h	/^struct Listener {$/;"	s
Logical Operations	libtommath/bn.tex	/^\\section{Logical Operations}$/;"	s
Long Constants	libtommath/bn.tex	/^\\subsection{Long Constants}$/;"	b
Lr	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     Lr[MAXBLOCKSIZE],        \/* L * x^-1 *\/$/;"	m	struct:__anon14
Lr	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     Lr[MAXBLOCKSIZE],        \/* L * x^-1 *\/$/;"	m	struct:__anon16
Ls	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     Ls[32][MAXBLOCKSIZE],    \/* L shifted by i bits to the left *\/$/;"	m	struct:__anon16
Ls	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char     Ls[32][MAXBLOCKSIZE],    \/* L shifted by i bits to the left *\/$/;"	m	struct:__anon14
Lu	libtomcrypt/src/headers/tomcrypt_mac.h	/^                   Lu[2][MAXBLOCKSIZE];$/;"	m	struct:__anon13
M	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	106;"	d	file:
MAKE	libtommath/Makefile	/^	cd pics ; MAKE=${MAKE} ${MAKE} $/;"	m
MAKE	libtommath/Makefile	/^	cd pics ; MAKE=${MAKE} ${MAKE} clean$/;"	m
MAX	libtomcrypt/src/headers/tomcrypt_macros.h	408;"	d
MAX	libtommath/tommath.h	31;"	d
MAXBLOCKSIZE	libtomcrypt/src/headers/tomcrypt.h	23;"	d
MAX_AGENT_REPLY	agentfwd.h	38;"	d
MAX_AUTHKEYS_LINE	svr-authpubkey.c	71;"	d	file:
MAX_AUTH_TRIES	options.h	238;"	d
MAX_BANNER_LINES	sysoptions.h	44;"	d
MAX_BANNER_SIZE	sysoptions.h	43;"	d
MAX_CBUF_SIZE	circbuffer.c	29;"	d	file:
MAX_CHANNELS	sysoptions.h	126;"	d
MAX_CMD_LEN	sysoptions.h	50;"	d
MAX_COUNTER	random.c	34;"	d	file:
MAX_FMT	dbutil.c	57;"	d	file:
MAX_HOST_LEN	sysoptions.h	53;"	d
MAX_IP_LEN	sysoptions.h	54;"	d
MAX_IV_LEN	sysoptions.h	95;"	d
MAX_KAT_SIZE	libtomcrypt/src/headers/tomcrypt_pk.h	96;"	d
MAX_KEXHASHBUF	kex.h	70;"	d
MAX_KEYSIZEB	libtomcrypt/src/ciphers/anubis.c	40;"	d	file:
MAX_KEY_LEN	sysoptions.h	94;"	d
MAX_KNOWNHOSTS_LINE	cli-kex.c	42;"	d	file:
MAX_LISTENERS	listener.h	28;"	d
MAX_LISTEN_ADDR	sysoptions.h	60;"	d
MAX_MAC_LEN	sysoptions.h	101;"	d
MAX_MAC_LEN	sysoptions.h	103;"	d
MAX_MAC_LEN	sysoptions.h	99;"	d
MAX_N	libtomcrypt/src/ciphers/anubis.c	36;"	d	file:
MAX_NAME_LEN	sysoptions.h	106;"	d
MAX_PRIVKEY_SIZE	sysoptions.h	135;"	d
MAX_PROPOSED_ALGO	sysoptions.h	110;"	d
MAX_PUBKEY_SIZE	sysoptions.h	133;"	d
MAX_RADIX	libtommath/mtest/mpi.h	72;"	d
MAX_RECV_WINDOW	sysoptions.h	124;"	d
MAX_ROUNDS	libtomcrypt/src/ciphers/anubis.c	38;"	d	file:
MAX_RSA_SIZE	libtomcrypt/src/headers/tomcrypt_pk.h	15;"	d
MAX_STRING_LEN	sysoptions.h	129;"	d
MAX_TERMCODE	termcodes.h	35;"	d
MAX_TERM_LEN	sysoptions.h	51;"	d
MAX_UNAUTH_CLIENTS	options.h	233;"	d
MAX_UNAUTH_PACKET_TYPE	process-packet.c	38;"	d	file:
MAX_UNAUTH_PER_IP	options.h	227;"	d
MAX_USERNAME_LEN	auth.h	80;"	d
MAX_WINSIZE	progressmeter.c	34;"	d	file:
MD5	libtomcrypt/src/headers/tomcrypt_custom.h	124;"	d
MD5_HASH_SIZE	sysoptions.h	92;"	d
MDSA_DELTA	libtomcrypt/src/headers/tomcrypt_pk.h	296;"	d
MDSA_MAX_GROUP	libtomcrypt/src/headers/tomcrypt_pk.h	299;"	d
MDS_POLY	libtomcrypt/src/ciphers/twofish/twofish.c	42;"	d	file:
MIN	libtomcrypt/src/headers/tomcrypt_macros.h	412;"	d
MIN	libtommath/tommath.h	27;"	d
MIN_AUTHKEYS_LINE	svr-authpubkey.c	70;"	d	file:
MIN_DSS_KEYLEN	sysoptions.h	37;"	d
MIN_KAT_SIZE	libtomcrypt/src/headers/tomcrypt_pk.h	95;"	d
MIN_KEYSIZEB	libtomcrypt/src/ciphers/anubis.c	39;"	d	file:
MIN_N	libtomcrypt/src/ciphers/anubis.c	35;"	d	file:
MIN_PACKET_LEN	sysoptions.h	114;"	d
MIN_ROUNDS	libtomcrypt/src/ciphers/anubis.c	37;"	d	file:
MIN_RSA_KEYLEN	sysoptions.h	40;"	d
MIN_RSA_SIZE	libtomcrypt/src/headers/tomcrypt_pk.h	14;"	d
MIN_SIZEOF	loginrec.c	186;"	d	file:
MIV	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       MIV[MAXBLOCKSIZE];$/;"	m	struct:__anon26
MM	libtomcrypt/src/headers/tomcrypt_pk.h	/^            MM, \/* month *\/$/;"	m	struct:__anon33
MOTD_FILENAME	options.h	164;"	d
MPI	libtomcrypt/testprof/x86_prof.c	641;"	d	file:
MPI_CONFIG_H_	libtommath/mtest/mpi-config.h	5;"	d
MP_28BIT	libtommath/tommath.h	103;"	d
MP_64BIT	libtommath/tommath.h	51;"	d
MP_ARGCHK	libtommath/mtest/mpi-config.h	50;"	d
MP_BADARG	libtommath/mtest/mpi.h	45;"	d
MP_COMPAT_MACROS	libtommath/mtest/mpi-config.h	80;"	d
MP_CRYPTO	libtommath/mtest/mpi-config.h	41;"	d
MP_DEBUG	libtommath/mtest/mpi-config.h	54;"	d
MP_DEFPREC	libtommath/mtest/mpi-config.h	58;"	d
MP_DIGIT_BIT	libtomcrypt/src/headers/tomcrypt_math.h	441;"	d
MP_DIGIT_BIT	libtommath/mtest/mpi-types.h	8;"	d
MP_DIGIT_BIT	libtommath/tommath.h	130;"	d
MP_DIGIT_MAX	libtommath/mtest/mpi-types.h	9;"	d
MP_DIGIT_MAX	libtommath/tommath.h	132;"	d
MP_DIGIT_SIZE	libtommath/mtest/mpi-types.h	13;"	d
MP_EQ	libtommath/mtest/mpi.c	86;"	d	file:
MP_EQ	libtommath/mtest/mpi.h	18;"	d
MP_EQ	libtommath/tommath.h	136;"	d
MP_GT	libtommath/mtest/mpi.c	87;"	d	file:
MP_GT	libtommath/mtest/mpi.h	19;"	d
MP_GT	libtommath/tommath.h	137;"	d
MP_IOFUNC	libtommath/mtest/mpi-config.h	17;"	d
MP_IOFUNC	libtommath/mtest/mpi.h	22;"	d
MP_IOFUNC	libtommath/mtest/mpi.h	23;"	d
MP_LAST_CODE	libtommath/mtest/mpi.h	47;"	d
MP_LOGTAB	libtommath/mtest/mpi-config.h	29;"	d
MP_LT	libtommath/mtest/mpi.c	85;"	d	file:
MP_LT	libtommath/mtest/mpi.h	17;"	d
MP_LT	libtommath/tommath.h	135;"	d
MP_MACRO	libtommath/mtest/mpi-config.h	62;"	d
MP_MASK	libtommath/tommath.h	131;"	d
MP_MEM	libtommath/mtest/mpi.h	43;"	d
MP_MEM	libtommath/tommath.h	143;"	d
MP_MEMCPY	libtommath/mtest/mpi-config.h	37;"	d
MP_MEMSET	libtommath/mtest/mpi-config.h	33;"	d
MP_MODARITH	libtommath/mtest/mpi-config.h	21;"	d
MP_NEG	libtommath/mtest/mpi.h	33;"	d
MP_NEG	libtommath/tommath.h	140;"	d
MP_NO	libtommath/mtest/mpi.h	42;"	d
MP_NO	libtommath/tommath.h	148;"	d
MP_NUMTH	libtommath/mtest/mpi-config.h	25;"	d
MP_OKAY	libtommath/mtest/mpi.h	40;"	d
MP_OKAY	libtommath/tommath.h	142;"	d
MP_PREC	libtommath/tommath.h	169;"	d
MP_PREC	libtommath/tommath.h	171;"	d
MP_PTAB_SIZE	libtommath/mtest/mpi-config.h	76;"	d
MP_RANGE	libtommath/mtest/mpi.h	44;"	d
MP_RANGE	libtommath/tommath.h	145;"	d
MP_SQUARE	libtommath/mtest/mpi-config.h	66;"	d
MP_UNDEF	libtommath/mtest/mpi.h	46;"	d
MP_VAL	libtommath/tommath.h	144;"	d
MP_WARRAY	libtommath/tommath.h	176;"	d
MP_WORD_BIT	libtommath/mtest/mpi-types.h	10;"	d
MP_WORD_MAX	libtommath/mtest/mpi-types.h	11;"	d
MP_YES	libtommath/mtest/mpi.h	41;"	d
MP_YES	libtommath/tommath.h	147;"	d
MP_ZPOS	libtommath/mtest/mpi.h	34;"	d
MP_ZPOS	libtommath/tommath.h	139;"	d
MULTI	libtomcrypt/Makefile	/^MULTI=multi$/;"	m
MULTIOBJS	Makefile	/^	MULTIOBJS=dbmulti.o $(sort $(foreach prog, $(PROGRAMS), $($(prog)objs))) -lcrypt $/;"	m
MULTIOBJS	Makefile	/^MULTIOBJS=$/;"	m
MULTIS	libtomcrypt/Makefile	/^MULTIS=demos\/multi.o$/;"	m
Maintenance Functions	libtommath/bn.tex	/^\\section{Maintenance Functions}$/;"	s
Maj	libtomcrypt/src/hashes/sha2/sha256.c	59;"	d	file:
Maj	libtomcrypt/src/hashes/sha2/sha512.c	84;"	d	file:
Message Authentication Codes	libtomcrypt/crypt.tex	/^\\chapter{Message Authentication Codes}$/;"	c
Modular Exponentiation	libtommath/bn.tex	/^\\section{Modular Exponentiation}$/;"	s
Modular Inverse	libtommath/bn.tex	/^\\section{Modular Inverse}$/;"	s
Modular Reduction	libtommath/bn.tex	/^\\chapter{Modular Reduction}$/;"	c
Montgomery Reduction	libtommath/bn.tex	/^\\section{Montgomery Reduction}$/;"	s
Multab	libtomcrypt/src/prngs/sober128tab.c	/^static const ulong32 Multab[256] = {$/;"	v	file:
Multiplication	libtommath/bn.tex	/^\\section{Multiplication}$/;"	s
Multiplication and Squaring	libtommath/bn.tex	/^\\chapter{Multiplication and Squaring}$/;"	c
Multiplication by two	libtommath/bn.tex	/^\\subsection{Multiplication by two}$/;"	b
N	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char N[MAXBLOCKSIZE];$/;"	m	struct:__anon15
N	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *N; $/;"	m	struct:KAT_key
N	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *N; $/;"	m	struct:Rsa_key
N	libtomcrypt/src/prngs/sober128.c	37;"	d	file:
NEG	libtommath/mtest/mpi.h	37;"	d
NI_MAXHOST	fake-rfc2553.h	119;"	d
NI_MAXSERV	fake-rfc2553.h	116;"	d
NI_NAMEREQD	fake-rfc2553.h	99;"	d
NI_NUMERICHOST	fake-rfc2553.h	96;"	d
NI_NUMERICSERV	fake-rfc2553.h	102;"	d
NLFUNC	libtomcrypt/src/prngs/sober128.c	87;"	d	file:
NON_INETD_MODE	options.h	40;"	d
Name	libtomcrypt/crypt.tex	/^\\subsection{Name}$/;"	b
Negation	libtommath/bn.tex	/^\\subsection{Negation}$/;"	b
Notes	libtomcrypt/crypt.tex	/^\\subsection{Notes}$/;"	b
Nr	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int Nr;$/;"	m	struct:rijndael_key
OAEP Decoding	libtomcrypt/crypt.tex	/^\\subsection{OAEP Decoding}$/;"	b
OAEP Encoding	libtomcrypt/crypt.tex	/^\\subsection{OAEP Encoding}$/;"	b
OBJECTS	libtomcrypt/Makefile	/^OBJECTS=src\/ciphers\/aes\/aes_enc.o src\/ciphers\/aes\/aes.o src\/ciphers\/anubis.o src\/ciphers\/blowfish.o \\$/;"	m
OBJECTS	libtomcrypt/testprof/makefile	/^OBJECTS = base64_test.o cipher_hash_test.o der_tests.o                                   \\$/;"	m
OBJECTS	libtommath/Makefile	/^OBJECTS=bncore.o bn_mp_init.o bn_mp_clear.o bn_mp_exch.o bn_mp_grow.o bn_mp_shrink.o \\$/;"	m
OCB Mode	libtomcrypt/crypt.tex	/^\\subsection{OCB Mode}$/;"	b
OFB Mode	libtomcrypt/crypt.tex	/^\\subsubsection{OFB Mode}$/;"	b
OFF	libtomcrypt/src/prngs/sober128.c	65;"	d	file:
OID	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned long OID[16];$/;"	m	struct:ltc_hash_descriptor
OID Identifier	libtomcrypt/crypt.tex	/^\\subsection{OID Identifier}$/;"	b
OIDlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned long OIDlen;$/;"	m	struct:ltc_hash_descriptor
OPT_CAST	libtommath/tommath.h	38;"	d
OPT_CAST	libtommath/tommath.h	43;"	d
ORIG_P	libtomcrypt/src/ciphers/blowfish.c	/^static const ulong32 ORIG_P[16 + 2] = {$/;"	v	file:
ORIG_S	libtomcrypt/src/ciphers/blowfish.c	/^static const ulong32 ORIG_S[4][256] = {$/;"	v	file:
OSSH_DSA	keyimport.c	/^enum { OSSH_DSA, OSSH_RSA };$/;"	e	enum:__anon5	file:
OSSH_RSA	keyimport.c	/^enum { OSSH_DSA, OSSH_RSA };$/;"	e	enum:__anon5	file:
O_NOCTTY	sshpty.c	38;"	d	file:
One Way Cryptographic Hash Functions	libtomcrypt/crypt.tex	/^\\chapter{One-Way Cryptographic Hash Functions}$/;"	c
PACKAGE_BUGREPORT	config.h	374;"	d
PACKAGE_NAME	config.h	377;"	d
PACKAGE_STRING	config.h	380;"	d
PACKAGE_TARNAME	config.h	383;"	d
PACKAGE_URL	config.h	386;"	d
PACKAGE_VERSION	config.h	389;"	d
PACKET_PADDING_OFF	packet.h	44;"	d
PACKET_PAYLOAD_OFF	packet.h	45;"	d
PADDING	progressmeter.c	35;"	d	file:
PC	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    unsigned char     PC[16][256][16];$/;"	m	struct:__anon25
PC	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char       PC[16][256][16]  \/* 16 tables of 8x128 *\/$/;"	m	struct:__anon17
PELI_TAB	libtomcrypt/src/mac/pelican/pelican.c	21;"	d	file:
PHT	libtomcrypt/src/ciphers/safer/safer.c	94;"	d	file:
PHT	libtomcrypt/src/ciphers/safer/saferp.c	85;"	d	file:
PI1	libtomcrypt/src/ciphers/noekeon.c	61;"	d	file:
PI2	libtomcrypt/src/ciphers/noekeon.c	64;"	d	file:
PI_SUBST	libtomcrypt/src/hashes/md2.c	/^static const unsigned char PI_SUBST[256] = {$/;"	v	file:
PKCS #1 v1 5 Decoding	libtomcrypt/crypt.tex	/^\\subsection{PKCS \\#1 v1.5 Decoding}$/;"	b
PKCS #1 v1 5 Encoding	libtomcrypt/crypt.tex	/^\\subsection{PKCS \\#1 v1.5 Encoding}$/;"	b
PK_PRIVATE	libtomcrypt/src/headers/tomcrypt_pk.h	/^   PK_PRIVATE=1$/;"	e	enum:__anon27
PK_PUBLIC	libtomcrypt/src/headers/tomcrypt_pk.h	/^   PK_PUBLIC=0,$/;"	e	enum:__anon27
PRIME_SIZE	libtommath/tommath.h	450;"	d
PRIME_SIZE	libtommath/tommath.h	452;"	d
PRNGs Provided	libtomcrypt/crypt.tex	/^\\subsection{PRNGs Provided}$/;"	b
PROF	libtomcrypt/Makefile	/^PROF=x86_prof$/;"	m
PROGNAME	sysoptions.h	11;"	d
PROGRAMS	Makefile	/^	PROGRAMS=dropbear dbclient dropbearkey dropbearconvert$/;"	m
PSS Decoding	libtomcrypt/crypt.tex	/^\\subsection{PSS Decoding}$/;"	b
PSS Encoding	libtomcrypt/crypt.tex	/^\\subsection{PSS Encoding}$/;"	b
PUT_32BIT	keyimport.c	40;"	d	file:
Packet Functions	libtomcrypt/crypt.tex	/^\\subsubsection{Packet Functions}$/;"	b
PacketType	packet.h	/^typedef struct PacketType {$/;"	s
Plaintext Processing	libtomcrypt/crypt.tex	/^\\subsubsection{Plaintext Processing}$/;"	b
Polynomial Basis Operations	libtommath/bn.tex	/^\\subsection{Polynomial Basis Operations}$/;"	b
Prng_state	libtomcrypt/src/headers/tomcrypt_prng.h	/^typedef union Prng_state {$/;"	u
Process	libtomcrypt/crypt.tex	/^\\subsection{Process}$/;"	b
PubKeyOptions	auth.h	/^struct PubKeyOptions {$/;"	s
QSIZE	gendss.c	34;"	d	file:
Queue	queue.h	/^struct Queue {$/;"	s
R	libtomcrypt/notes/etc/whirlgen.c	/^unsigned R[16] =  { 7, 0xc, 0xb, 0xd, 0xe, 4, 9, 0xf, 6, 3, 8, 0xa, 2, 5, 1, 0 };$/;"	v
R	libtomcrypt/src/ciphers/khazad.c	34;"	d	file:
R	libtomcrypt/src/hashes/sha2/sha256.c	61;"	d	file:
R	libtomcrypt/src/hashes/sha2/sha512.c	86;"	d	file:
R	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int R; $/;"	m	struct:anubis_key
R	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     R[MAXBLOCKSIZE],         \/* R value *\/$/;"	m	struct:__anon16
R	libtomcrypt/src/headers/tomcrypt_prng.h	/^    ulong32      R[17],          \/* Working storage for the shift register *\/$/;"	m	struct:sober128_prng
RADIX	libtommath/mtest/mpi-types.h	15;"	d
RANLIB	Makefile	/^RANLIB=rsdk-linux-ranlib $/;"	m
RANLIB	libtomcrypt/testprof/makefile	/^   RANLIB=ranlib$/;"	m
RC	libtomcrypt/src/ciphers/noekeon.c	/^static const ulong32 RC[] = {$/;"	v	file:
RC4	libtomcrypt/crypt.tex	/^\\subsubsection{RC4}$/;"	b
RECV_MAX_PACKET_LEN	sysoptions.h	116;"	d
RECV_MAX_PAYLOAD_LEN	options.h	282;"	d
RECV_WINDOWEXTEND	sysoptions.h	122;"	d
RETSIGTYPE	config.h	392;"	d
RIJNDAEL	libtomcrypt/src/headers/tomcrypt_custom.h	98;"	d
RND	libtomcrypt/src/ciphers/rc6.c	139;"	d	file:
RND	libtomcrypt/src/ciphers/rc6.c	153;"	d	file:
RND	libtomcrypt/src/ciphers/rc6.c	193;"	d	file:
RND	libtomcrypt/src/ciphers/rc6.c	208;"	d	file:
RND	libtomcrypt/src/hashes/sha2/sha256.c	97;"	d	file:
ROL	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned ROL(unsigned word, int i)$/;"	f
ROL	libtomcrypt/src/headers/tomcrypt_macros.h	241;"	d
ROL	libtomcrypt/src/headers/tomcrypt_macros.h	335;"	d
ROL16	libtomcrypt/src/ciphers/kasumi.c	24;"	d	file:
ROL64	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned long ROL64(unsigned long word, int i)$/;"	f
ROL64	libtomcrypt/src/headers/tomcrypt_macros.h	389;"	d
ROL64c	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned long ROL64c(unsigned long word, const int i)$/;"	f
ROL64c	libtomcrypt/src/headers/tomcrypt_macros.h	382;"	d
ROL64c	libtomcrypt/src/headers/tomcrypt_macros.h	397;"	d
ROL8	libtomcrypt/src/ciphers/safer/safer.c	90;"	d	file:
ROLc	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned ROLc(unsigned word, const int i)$/;"	f
ROLc	libtomcrypt/src/headers/tomcrypt_macros.h	243;"	d
ROLc	libtomcrypt/src/headers/tomcrypt_macros.h	283;"	d
ROLc	libtomcrypt/src/headers/tomcrypt_macros.h	326;"	d
ROLc	libtomcrypt/src/headers/tomcrypt_macros.h	337;"	d
ROR	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned ROR(unsigned word, int i)$/;"	f
ROR	libtomcrypt/src/headers/tomcrypt_macros.h	240;"	d
ROR	libtomcrypt/src/headers/tomcrypt_macros.h	336;"	d
ROR64	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned long ROR64(unsigned long word, int i)$/;"	f
ROR64	libtomcrypt/src/headers/tomcrypt_macros.h	393;"	d
ROR64c	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned long ROR64c(unsigned long word, const int i)$/;"	f
ROR64c	libtomcrypt/src/headers/tomcrypt_macros.h	383;"	d
ROR64c	libtomcrypt/src/headers/tomcrypt_macros.h	401;"	d
RORc	libtomcrypt/src/headers/tomcrypt_macros.h	/^static inline unsigned RORc(unsigned word, const int i)$/;"	f
RORc	libtomcrypt/src/headers/tomcrypt_macros.h	242;"	d
RORc	libtomcrypt/src/headers/tomcrypt_macros.h	284;"	d
RORc	libtomcrypt/src/headers/tomcrypt_macros.h	327;"	d
RORc	libtomcrypt/src/headers/tomcrypt_macros.h	338;"	d
ROTATE_LEFT	libtomcrypt/src/hashes/md4.c	57;"	d	file:
ROUND	libtomcrypt/notes/etc/saferp_optimizer.c	20;"	d	file:
ROUND	libtomcrypt/src/ciphers/noekeon.c	128;"	d	file:
ROUND	libtomcrypt/src/ciphers/noekeon.c	139;"	d	file:
ROUND	libtomcrypt/src/ciphers/noekeon.c	183;"	d	file:
ROUND	libtomcrypt/src/ciphers/noekeon.c	194;"	d	file:
ROUND	libtomcrypt/src/ciphers/safer/saferp.c	159;"	d	file:
ROUND	libtomcrypt/src/ciphers/safer/saferp.c	160;"	d	file:
ROUND	libtomcrypt/src/ciphers/safer/saferp.c	47;"	d	file:
RS	libtomcrypt/src/ciphers/twofish/twofish.c	/^static const unsigned char RS[4][8] = {$/;"	v	file:
RSA Key Export	libtomcrypt/crypt.tex	/^\\subsection{RSA Key Export}$/;"	b
RSA Key Import	libtomcrypt/crypt.tex	/^\\subsection{RSA Key Import}$/;"	b
RSA Public Key Cryptography	libtomcrypt/crypt.tex	/^\\chapter{RSA Public Key Cryptography}$/;"	c
RSA_BLINDING	options.h	142;"	d
RSA_E	genrsa.c	32;"	d	file:
RSA_MSGSIZE	libtomcrypt/testprof/rsa_test.c	5;"	d	file:
RSA_PRIV_FILENAME	options.h	27;"	d
RSA_SIGNATURE_SIZE	rsa.h	33;"	d
RSA_SIZE	dropbearkey.c	57;"	d	file:
RS_POLY	libtomcrypt/src/ciphers/twofish/twofish.c	43;"	d	file:
RULE_A	libtomcrypt/src/ciphers/skipjack.c	90;"	d	file:
RULE_A1	libtomcrypt/src/ciphers/skipjack.c	102;"	d	file:
RULE_B	libtomcrypt/src/ciphers/skipjack.c	96;"	d	file:
RULE_B1	libtomcrypt/src/ciphers/skipjack.c	107;"	d	file:
Read	libtomcrypt/crypt.tex	/^\\subsection{Read}$/;"	b
Ready	libtomcrypt/crypt.tex	/^\\subsection{Ready}$/;"	b
Reducing Memory Usage	libtommath/bn.tex	/^\\subsection{Reducing Memory Usage}$/;"	b
Remarks	libtomcrypt/crypt.tex	/^\\subsection{Remarks}$/;"	b
Restricted Dimminished Radix	libtommath/bn.tex	/^\\section{Restricted Dimminished Radix}$/;"	s
Root Finding	libtommath/bn.tex	/^\\section{Root Finding}$/;"	s
Rorder	libtomcrypt/src/hashes/md5.c	/^static const unsigned char Rorder[64] = {$/;"	v	file:
Rsa_key	libtomcrypt/src/headers/tomcrypt_pk.h	/^typedef struct Rsa_key {$/;"	s
S	libtomcrypt/src/hashes/sha2/sha256.c	60;"	d	file:
S	libtomcrypt/src/hashes/sha2/sha512.c	85;"	d	file:
S	libtomcrypt/src/headers/tomcrypt_cipher.h	/^      ulong32 S[4][256], K[40];$/;"	m	struct:twofish_key
S	libtomcrypt/src/headers/tomcrypt_cipher.h	/^      unsigned char S[32], start;$/;"	m	struct:twofish_key
S	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 S[4][256];$/;"	m	struct:blowfish_key
S1	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S1[256] = {$/;"	v	file:
S1	libtomcrypt/src/ciphers/twofish/twofish.c	280;"	d	file:
S11	libtomcrypt/src/hashes/md4.c	38;"	d	file:
S12	libtomcrypt/src/hashes/md4.c	39;"	d	file:
S13	libtomcrypt/src/hashes/md4.c	40;"	d	file:
S14	libtomcrypt/src/hashes/md4.c	41;"	d	file:
S2	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S2[256] = {$/;"	v	file:
S2	libtomcrypt/src/ciphers/twofish/twofish.c	281;"	d	file:
S21	libtomcrypt/src/hashes/md4.c	42;"	d	file:
S22	libtomcrypt/src/hashes/md4.c	43;"	d	file:
S23	libtomcrypt/src/hashes/md4.c	44;"	d	file:
S24	libtomcrypt/src/hashes/md4.c	45;"	d	file:
S3	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S3[256] = {$/;"	v	file:
S3	libtomcrypt/src/ciphers/twofish/twofish.c	282;"	d	file:
S31	libtomcrypt/src/hashes/md4.c	46;"	d	file:
S32	libtomcrypt/src/hashes/md4.c	47;"	d	file:
S33	libtomcrypt/src/hashes/md4.c	48;"	d	file:
S34	libtomcrypt/src/hashes/md4.c	49;"	d	file:
S4	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S4[256] = {$/;"	v	file:
S4	libtomcrypt/src/ciphers/twofish/twofish.c	283;"	d	file:
S5	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S5[256] = {$/;"	v	file:
S6	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S6[256] = {$/;"	v	file:
S7	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S7[256] = {$/;"	v	file:
S8	libtomcrypt/src/ciphers/cast5.c	/^static const ulong32 S8[256] = {$/;"	v	file:
SAFER_BLOCK_LEN	libtomcrypt/src/headers/tomcrypt_cipher.h	79;"	d
SAFER_K128_DEFAULT_NOF_ROUNDS	libtomcrypt/src/headers/tomcrypt_cipher.h	75;"	d
SAFER_K64_DEFAULT_NOF_ROUNDS	libtomcrypt/src/headers/tomcrypt_cipher.h	74;"	d
SAFER_KEY_LEN	libtomcrypt/src/headers/tomcrypt_cipher.h	80;"	d
SAFER_MAX_NOF_ROUNDS	libtomcrypt/src/headers/tomcrypt_cipher.h	78;"	d
SAFER_SK128_DEFAULT_NOF_ROUNDS	libtomcrypt/src/headers/tomcrypt_cipher.h	77;"	d
SAFER_SK64_DEFAULT_NOF_ROUNDS	libtomcrypt/src/headers/tomcrypt_cipher.h	76;"	d
SB0	libtomcrypt/src/hashes/whirl/whirltab.c	74;"	d	file:
SB0	libtomcrypt/src/hashes/whirl/whirltab.c	85;"	d	file:
SB1	libtomcrypt/src/hashes/whirl/whirltab.c	75;"	d	file:
SB1	libtomcrypt/src/hashes/whirl/whirltab.c	86;"	d	file:
SB2	libtomcrypt/src/hashes/whirl/whirltab.c	76;"	d	file:
SB2	libtomcrypt/src/hashes/whirl/whirltab.c	87;"	d	file:
SB3	libtomcrypt/src/hashes/whirl/whirltab.c	77;"	d	file:
SB3	libtomcrypt/src/hashes/whirl/whirltab.c	88;"	d	file:
SB4	libtomcrypt/src/hashes/whirl/whirltab.c	78;"	d	file:
SB4	libtomcrypt/src/hashes/whirl/whirltab.c	89;"	d	file:
SB5	libtomcrypt/src/hashes/whirl/whirltab.c	79;"	d	file:
SB5	libtomcrypt/src/hashes/whirl/whirltab.c	90;"	d	file:
SB6	libtomcrypt/src/hashes/whirl/whirltab.c	80;"	d	file:
SB6	libtomcrypt/src/hashes/whirl/whirltab.c	91;"	d	file:
SB7	libtomcrypt/src/hashes/whirl/whirltab.c	81;"	d	file:
SB7	libtomcrypt/src/hashes/whirl/whirltab.c	92;"	d	file:
SBOX	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const unsigned char SBOX[2][256] = {$/;"	v	file:
SCPOBJS	Makefile	/^SCPOBJS=scp.o progressmeter.o atomicio.o scpmisc.o compat.o$/;"	m
SCREWUP	scp.c	845;"	d	file:
SCRYPT	libtomcrypt/src/headers/tomcrypt.h	20;"	d
SELECT_TYPE_ARG1	config.h	395;"	d
SELECT_TYPE_ARG234	config.h	398;"	d
SELECT_TYPE_ARG5	config.h	401;"	d
SEQUENCE Decoding	libtomcrypt/crypt.tex	/^\\subsubsection{SEQUENCE Decoding}$/;"	b
SEQUENCE Encoding	libtomcrypt/crypt.tex	/^\\subsubsection{SEQUENCE Encoding}$/;"	b
SEQUENCE Length	libtomcrypt/crypt.tex	/^\\subsubsection{SEQUENCE Length}$/;"	b
SEQUENCE Multiple Argument Lists	libtomcrypt/crypt.tex	/^\\subsubsection{SEQUENCE Multiple Argument Lists}$/;"	b
SEQUENCE Type	libtomcrypt/crypt.tex	/^\\subsection{SEQUENCE Type}$/;"	b
SESSION_RUNNING	session.h	/^	SESSION_RUNNING$/;"	e	enum:__anon4
SET Decoding	libtomcrypt/crypt.tex	/^\\subsubsection{SET Decoding}$/;"	b
SET Encoding	libtomcrypt/crypt.tex	/^\\subsubsection{SET Encoding}$/;"	b
SET Length	libtomcrypt/crypt.tex	/^\\subsubsection{SET Length}$/;"	b
SET OF Decoding	libtomcrypt/crypt.tex	/^\\subsubsection{SET OF Decoding}$/;"	b
SET OF Encoding	libtomcrypt/crypt.tex	/^\\subsubsection{SET OF Encoding}$/;"	b
SET OF Length	libtomcrypt/crypt.tex	/^\\subsubsection{SET OF Length}$/;"	b
SET and SET OF	libtomcrypt/crypt.tex	/^\\subsection{SET and SET OF}$/;"	b
SETUP	libtomcrypt/src/ciphers/aes/aes.c	/^int SETUP(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
SETUP	libtomcrypt/src/ciphers/aes/aes.c	39;"	d	file:
SETUP	libtomcrypt/src/ciphers/aes/aes.c	68;"	d	file:
SFTPSERVER_PATH	options.h	257;"	d
SHA1	libtomcrypt/src/headers/tomcrypt_custom.h	121;"	d
SHA1_HASH_SIZE	sysoptions.h	91;"	d
SHA256	libtomcrypt/src/headers/tomcrypt_custom.h	128;"	d
SHA512	libtomcrypt/src/headers/tomcrypt_custom.h	132;"	d
SHUF	libtomcrypt/notes/etc/saferp_optimizer.c	7;"	d	file:
SHUF	libtomcrypt/src/ciphers/safer/saferp.c	107;"	d	file:
SIGN	libtommath/mtest/mpi.h	56;"	d
SIGN	libtommath/tommath.h	190;"	d
SIGNKEY_SOURCE_AGENT	signkey.h	/^	SIGNKEY_SOURCE_AGENT,$/;"	e	enum:__anon47
SIGNKEY_SOURCE_INVALID	signkey.h	/^	SIGNKEY_SOURCE_INVALID,	$/;"	e	enum:__anon47
SIGNKEY_SOURCE_RAW_FILE	signkey.h	/^	SIGNKEY_SOURCE_RAW_FILE,$/;"	e	enum:__anon47
SIGN_key	signkey.h	/^struct SIGN_key {$/;"	s
SLEEP	libtommath/demo/demo.c	5;"	d	file:
SLEEP	libtommath/demo/demo.c	7;"	d	file:
SLEEP	libtommath/demo/timing.c	10;"	d	file:
SLEEP	libtommath/demo/timing.c	8;"	d	file:
SMALL	libtomcrypt/Makefile	/^SMALL=small$/;"	m
SMALLOBJECTS	libtomcrypt/Makefile	/^SMALLOBJECTS=demos\/small.o$/;"	m
SP1	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP1[64] =$/;"	v	file:
SP2	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP2[64] =$/;"	v	file:
SP3	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP3[64] =$/;"	v	file:
SP4	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP4[64] =$/;"	v	file:
SP5	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP5[64] =$/;"	v	file:
SP6	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP6[64] =$/;"	v	file:
SP7	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP7[64] =$/;"	v	file:
SP8	libtomcrypt/src/ciphers/des.c	/^static const ulong32 SP8[64] =$/;"	v	file:
SROUND	libtomcrypt/src/prngs/sober128.c	280;"	d	file:
SS0	libtomcrypt/src/ciphers/kseed.c	/^static const ulong32 SS0[256] = {$/;"	v	file:
SS1	libtomcrypt/src/ciphers/kseed.c	/^static const ulong32 SS1[256] = {$/;"	v	file:
SS2	libtomcrypt/src/ciphers/kseed.c	/^static const ulong32 SS2[256] = {$/;"	v	file:
SS3	libtomcrypt/src/ciphers/kseed.c	/^static const ulong32 SS3[256] = {$/;"	v	file:
SSH2_AGENTC_REQUEST_IDENTITIES	ssh.h	113;"	d
SSH2_AGENTC_SIGN_REQUEST	ssh.h	115;"	d
SSH2_AGENT_FAILURE	ssh.h	118;"	d
SSH2_AGENT_IDENTITIES_ANSWER	ssh.h	114;"	d
SSH2_AGENT_SIGN_RESPONSE	ssh.h	116;"	d
SSHPTY_H	sshpty.h	20;"	d
SSH_AGENT_FAILURE	ssh.h	111;"	d
SSH_AGENT_SUCCESS	ssh.h	112;"	d
SSH_DISCONNECT_AUTH_CANCELLED_BY_USER	ssh.h	93;"	d
SSH_DISCONNECT_BY_APPLICATION	ssh.h	91;"	d
SSH_DISCONNECT_COMPRESSION_ERROR	ssh.h	86;"	d
SSH_DISCONNECT_CONNECTION_LOST	ssh.h	90;"	d
SSH_DISCONNECT_HOST_KEY_NOT_VERIFIABLE	ssh.h	89;"	d
SSH_DISCONNECT_HOST_NOT_ALLOWED_TO_CONNECT	ssh.h	81;"	d
SSH_DISCONNECT_ILLEGAL_USER_NAME	ssh.h	95;"	d
SSH_DISCONNECT_KEY_EXCHANGE_FAILED	ssh.h	83;"	d
SSH_DISCONNECT_MAC_ERROR	ssh.h	85;"	d
SSH_DISCONNECT_NO_MORE_AUTH_METHODS_AVAILABLE	ssh.h	94;"	d
SSH_DISCONNECT_PROTOCOL_ERROR	ssh.h	82;"	d
SSH_DISCONNECT_PROTOCOL_VERSION_NOT_SUPPORTED	ssh.h	88;"	d
SSH_DISCONNECT_RESERVED	ssh.h	84;"	d
SSH_DISCONNECT_SERVICE_NOT_AVAILABLE	ssh.h	87;"	d
SSH_DISCONNECT_TOO_MANY_CONNECTIONS	ssh.h	92;"	d
SSH_EXTENDED_DATA_STDERR	ssh.h	78;"	d
SSH_MSG_CHANNEL_CLOSE	ssh.h	72;"	d
SSH_MSG_CHANNEL_DATA	ssh.h	69;"	d
SSH_MSG_CHANNEL_EOF	ssh.h	71;"	d
SSH_MSG_CHANNEL_EXTENDED_DATA	ssh.h	70;"	d
SSH_MSG_CHANNEL_FAILURE	ssh.h	75;"	d
SSH_MSG_CHANNEL_OPEN	ssh.h	65;"	d
SSH_MSG_CHANNEL_OPEN_CONFIRMATION	ssh.h	66;"	d
SSH_MSG_CHANNEL_OPEN_FAILURE	ssh.h	67;"	d
SSH_MSG_CHANNEL_REQUEST	ssh.h	73;"	d
SSH_MSG_CHANNEL_SUCCESS	ssh.h	74;"	d
SSH_MSG_CHANNEL_WINDOW_ADJUST	ssh.h	68;"	d
SSH_MSG_DEBUG	ssh.h	32;"	d
SSH_MSG_DISCONNECT	ssh.h	29;"	d
SSH_MSG_GLOBAL_REQUEST	ssh.h	62;"	d
SSH_MSG_IGNORE	ssh.h	30;"	d
SSH_MSG_KEXDH_INIT	ssh.h	37;"	d
SSH_MSG_KEXDH_REPLY	ssh.h	38;"	d
SSH_MSG_KEXINIT	ssh.h	35;"	d
SSH_MSG_NEWKEYS	ssh.h	36;"	d
SSH_MSG_REQUEST_FAILURE	ssh.h	64;"	d
SSH_MSG_REQUEST_SUCCESS	ssh.h	63;"	d
SSH_MSG_SERVICE_ACCEPT	ssh.h	34;"	d
SSH_MSG_SERVICE_REQUEST	ssh.h	33;"	d
SSH_MSG_UNIMPLEMENTED	ssh.h	31;"	d
SSH_MSG_USERAUTH_BANNER	ssh.h	44;"	d
SSH_MSG_USERAUTH_FAILURE	ssh.h	42;"	d
SSH_MSG_USERAUTH_INFO_REQUEST	ssh.h	54;"	d
SSH_MSG_USERAUTH_INFO_RESPONSE	ssh.h	55;"	d
SSH_MSG_USERAUTH_PASSWD_CHANGEREQ	ssh.h	49;"	d
SSH_MSG_USERAUTH_PK_OK	ssh.h	51;"	d
SSH_MSG_USERAUTH_REQUEST	ssh.h	41;"	d
SSH_MSG_USERAUTH_SPECIFIC_60	ssh.h	47;"	d
SSH_MSG_USERAUTH_SUCCESS	ssh.h	43;"	d
SSH_OPEN_ADMINISTRATIVELY_PROHIBITED	channel.h	40;"	d
SSH_OPEN_CONNECT_FAILED	channel.h	41;"	d
SSH_OPEN_IN_PROGRESS	channel.h	46;"	d
SSH_OPEN_RESOURCE_SHORTAGE	channel.h	43;"	d
SSH_OPEN_UNKNOWN_CHANNEL_TYPE	channel.h	42;"	d
SSH_SERVICE_CONNECTION	ssh.h	100;"	d
SSH_SERVICE_CONNECTION_LEN	ssh.h	101;"	d
SSH_SERVICE_USERAUTH	ssh.h	98;"	d
SSH_SERVICE_USERAUTH_LEN	ssh.h	99;"	d
SSH_SIGNKEY_DSS	ssh.h	104;"	d
SSH_SIGNKEY_DSS_LEN	ssh.h	105;"	d
SSH_SIGNKEY_RSA	ssh.h	106;"	d
SSH_SIGNKEY_RSA_LEN	ssh.h	107;"	d
STACK_DOWN	libtomcrypt/testprof/tomcrypt_test.h	11;"	d
STALL_TIME	progressmeter.c	37;"	d	file:
STATE_NOTHING	session.h	/^	STATE_NOTHING,$/;"	e	enum:__anon4
STDC_HEADERS	config.h	404;"	d
STEP	libtomcrypt/src/prngs/sober128.c	69;"	d	file:
STORE32H	libtomcrypt/src/headers/tomcrypt_macros.h	195;"	d
STORE32H	libtomcrypt/src/headers/tomcrypt_macros.h	215;"	d
STORE32H	libtomcrypt/src/headers/tomcrypt_macros.h	44;"	d
STORE32H	libtomcrypt/src/headers/tomcrypt_macros.h	72;"	d
STORE32H	libtomcrypt/src/headers/tomcrypt_macros.h	87;"	d
STORE32L	libtomcrypt/src/headers/tomcrypt_macros.h	134;"	d
STORE32L	libtomcrypt/src/headers/tomcrypt_macros.h	154;"	d
STORE32L	libtomcrypt/src/headers/tomcrypt_macros.h	171;"	d
STORE32L	libtomcrypt/src/headers/tomcrypt_macros.h	22;"	d
STORE64H	libtomcrypt/src/headers/tomcrypt_macros.h	103;"	d
STORE64H	libtomcrypt/src/headers/tomcrypt_macros.h	118;"	d
STORE64H	libtomcrypt/src/headers/tomcrypt_macros.h	201;"	d
STORE64H	libtomcrypt/src/headers/tomcrypt_macros.h	221;"	d
STORE64H	libtomcrypt/src/headers/tomcrypt_macros.h	54;"	d
STORE64L	libtomcrypt/src/headers/tomcrypt_macros.h	140;"	d
STORE64L	libtomcrypt/src/headers/tomcrypt_macros.h	160;"	d
STORE64L	libtomcrypt/src/headers/tomcrypt_macros.h	181;"	d
STORE64L	libtomcrypt/src/headers/tomcrypt_macros.h	32;"	d
STORE_V	libtomcrypt/src/pk/asn1/der/utctime/der_encode_utctime.c	22;"	d	file:
STRIP	Makefile	/^STRIP=rsdk-linux-strip $/;"	m
STRIP	debian/rules	/^  STRIP =: nostrip$/;"	m
STRIP	debian/rules	/^STRIP =strip$/;"	m
SVROBJS	Makefile	/^SVROBJS=svr-kex.o svr-auth.o sshpty.o \\$/;"	m
Safer_Expand_Userkey	libtomcrypt/src/ciphers/safer/safer.c	/^static void Safer_Expand_Userkey(const unsigned char *userkey_1,$/;"	f	file:
Sample Decoding	libtomcrypt/crypt.tex	/^\\subsubsection{Sample Decoding}$/;"	b
Sbox	libtomcrypt/src/prngs/sober128tab.c	/^static const ulong32 Sbox[256] = {$/;"	v	file:
Self Testing	libtomcrypt/crypt.tex	/^\\subsection{Self--Testing}$/;"	b
SigMap	chansession.h	/^struct SigMap {$/;"	s
Sigma0	libtomcrypt/src/hashes/sha2/sha256.c	62;"	d	file:
Sigma0	libtomcrypt/src/hashes/sha2/sha512.c	87;"	d	file:
Sigma1	libtomcrypt/src/hashes/sha2/sha256.c	63;"	d	file:
Sigma1	libtomcrypt/src/hashes/sha2/sha512.c	88;"	d	file:
Sign Manipulation	libtommath/bn.tex	/^\\section{Sign Manipulation}$/;"	s
Signature Format	libtomcrypt/crypt.tex	/^\\subsection{Signature Format}$/;"	b
Signature Generation	libtomcrypt/crypt.tex	/^\\subsection{Signature Generation}$/;"	b
Signature Verification	libtomcrypt/crypt.tex	/^\\subsection{Signature Verification}$/;"	b
Signed comparison	libtommath/bn.tex	/^\\subsection{Signed comparison}$/;"	b
Simple Encryption Demonstration	libtomcrypt/crypt.tex	/^\\subsection{Simple Encryption Demonstration}$/;"	b
Single Digit Exponentiation	libtommath/bn.tex	/^\\section{Single Digit Exponentiation}$/;"	s
Single Digit Functions	libtommath/bn.tex	/^\\section{Single Digit Functions}$/;"	s
Single Free	libtommath/bn.tex	/^\\subsection{Single Free}$/;"	b
Small Constants	libtommath/bn.tex	/^\\section{Small Constants}$/;"	s
Standards Support	libtomcrypt/crypt.tex	/^\\chapter{Standards Support}$/;"	c
Start	libtomcrypt/crypt.tex	/^\\subsection{Start}$/;"	b
State Reset	libtomcrypt/crypt.tex	/^\\subsubsection{State Reset}$/;"	b
State Termination	libtomcrypt/crypt.tex	/^\\subsubsection{State Termination}$/;"	b
Straight Division	libtommath/bn.tex	/^\\section{Straight Division}$/;"	s
Symmetric Block Ciphers	libtomcrypt/crypt.tex	/^\\chapter{Symmetric Block Ciphers}$/;"	c
Symmetric Ciphers One way Hashes PRNGS and Public Key Functions	libtomcrypt/crypt.tex	/^\\subsection{Symmetric Ciphers, One-way Hashes, PRNGS and Public Key Functions}$/;"	b
Symmetric_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^typedef union Symmetric_key {$/;"	u
T0	libtomcrypt/src/ciphers/anubis.c	/^static const ulong32 T0[256] = {$/;"	v	file:
T0	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T0[256] = {$/;"	v	file:
T1	libtomcrypt/src/ciphers/anubis.c	/^static const ulong32 T1[256] = {$/;"	v	file:
T1	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T1[256] = {$/;"	v	file:
T2	libtomcrypt/src/ciphers/anubis.c	/^static const ulong32 T2[256] = {$/;"	v	file:
T2	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T2[256] = {$/;"	v	file:
T3	libtomcrypt/src/ciphers/anubis.c	/^static const ulong32 T3[256] = {$/;"	v	file:
T3	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T3[256] = {$/;"	v	file:
T4	libtomcrypt/src/ciphers/anubis.c	/^static const ulong32 T4[256] = {$/;"	v	file:
T4	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T4[256] = {$/;"	v	file:
T5	libtomcrypt/src/ciphers/anubis.c	/^static const ulong32 T5[256] = {$/;"	v	file:
T5	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T5[256] = {$/;"	v	file:
T6	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T6[256] = {$/;"	v	file:
T7	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 T7[256] = {$/;"	v	file:
TAB_SIZE	libtomcrypt/src/headers/tomcrypt.h	27;"	d
TAB_SIZE	libtommath/bn_mp_exptmod_fast.c	27;"	d	file:
TAB_SIZE	libtommath/bn_mp_exptmod_fast.c	29;"	d	file:
TAB_SIZE	libtommath/bn_s_mp_exptmod.c	18;"	d	file:
TAB_SIZE	libtommath/bn_s_mp_exptmod.c	20;"	d	file:
TAB_SIZE	libtommath/pre_gen/mpi.c	2644;"	d	file:
TAB_SIZE	libtommath/pre_gen/mpi.c	2646;"	d	file:
TAB_SIZE	libtommath/pre_gen/mpi.c	8875;"	d	file:
TAB_SIZE	libtommath/pre_gen/mpi.c	8877;"	d	file:
TARGETS	Makefile	/^	TARGETS=$(PROGRAMS)$/;"	m
TARGETS	Makefile	/^	TARGETS=dropbearmulti$/;"	m
TCPFwdEntry	tcpfwd.h	/^struct TCPFwdEntry {$/;"	s
TCPListener	tcpfwd.h	/^struct TCPListener {$/;"	s
TD0	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TD0[256] = {$/;"	v	file:
TD1	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TD1[256] = {$/;"	v	file:
TD2	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TD2[256] = {$/;"	v	file:
TD3	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TD3[256] = {$/;"	v	file:
TE0	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TE0[256] = {$/;"	v	file:
TE1	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TE1[256] = {$/;"	v	file:
TE2	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TE2[256] = {$/;"	v	file:
TE3	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 TE3[256] = {$/;"	v	file:
TERMCODE_CONTROL	termcodes.h	29;"	d
TERMCODE_CONTROLCHAR	termcodes.h	33;"	d
TERMCODE_INPUT	termcodes.h	30;"	d
TERMCODE_LOCAL	termcodes.h	32;"	d
TERMCODE_NONE	termcodes.h	28;"	d
TERMCODE_OUTPUT	termcodes.h	31;"	d
TEST	libtomcrypt/Makefile	/^TEST=test$/;"	m
TESTOBJECTS	libtomcrypt/Makefile	/^TESTOBJECTS=demos\/test.o$/;"	m
TESTS	libtomcrypt/Makefile	/^TESTS=demos\/test.o$/;"	m
THETA	libtomcrypt/src/ciphers/noekeon.c	47;"	d	file:
THE_MASK	libtommath/mtest/mtest.c	32;"	d	file:
THE_MASK	libtommath/mtest/mtest.c	34;"	d	file:
TIMES	libtomcrypt/testprof/tomcrypt_test.h	42;"	d
TIMES	libtommath/etc/tune.c	11;"	d	file:
TIMEVAL_TO_TIMESPEC	scpmisc.h	64;"	d
TIME_WITH_SYS_TIME	config.h	407;"	d
TIMFUNC	libtommath/demo/timing.c	/^static ulong64 TIMFUNC(void)$/;"	f	file:
TIMFUNC	libtommath/etc/tune.c	/^static ulong64 TIMFUNC (void)$/;"	f	file:
TIMING	libtomcrypt/Makefile	/^TIMING=timing$/;"	m
TIMINGS	libtomcrypt/Makefile	/^TIMINGS=demos\/timing.o$/;"	m
TOMCRYPT_CFG_H	libtomcrypt/src/headers/tomcrypt_cfg.h	8;"	d
TOMCRYPT_CUSTOM_H_	libtomcrypt/src/headers/tomcrypt_custom.h	2;"	d
TOMCRYPT_H_	libtomcrypt/src/headers/tomcrypt.h	2;"	d
TOOM_MUL_CUTOFF	libtommath/bncore.c	/^        TOOM_MUL_CUTOFF      = 350,      \/* no optimal values of these are known yet so set em high *\/$/;"	v
TOOM_MUL_CUTOFF	libtommath/pre_gen/mpi.c	/^        TOOM_MUL_CUTOFF      = 350,      \/* no optimal values of these are known yet so set em high *\/$/;"	v
TOOM_SQR_CUTOFF	libtommath/bncore.c	/^        TOOM_SQR_CUTOFF      = 400; $/;"	v
TOOM_SQR_CUTOFF	libtommath/pre_gen/mpi.c	/^        TOOM_SQR_CUTOFF      = 400; $/;"	v
TRACE	debug.h	65;"	d
TRACE	debug.h	68;"	d
TRACE2	debug.h	66;"	d
TRACE2	debug.h	69;"	d
TRANS_MAX_PAYLOAD_LEN	options.h	287;"	d
TRANS_MAX_WINDOW	sysoptions.h	119;"	d
TRANS_MAX_WIN_INCR	sysoptions.h	120;"	d
TV	libtomcrypt/Makefile	/^TV=tv_gen$/;"	m
TVS	libtomcrypt/Makefile	/^TVS=demos\/tv_gen.o$/;"	m
TWOFISH	libtomcrypt/src/headers/tomcrypt_custom.h	102;"	d
TWOFISH _SMALL and TWOFISH _TABLES	libtomcrypt/crypt.tex	/^\\subsection{TWOFISH\\_SMALL and TWOFISH\\_TABLES}$/;"	b
TWOFISH_SMALL	libtomcrypt/src/headers/tomcrypt_custom.h	107;"	d
TWOFISH_TABLES	libtomcrypt/src/ciphers/twofish/twofish.c	23;"	d	file:
Td0	libtomcrypt/src/ciphers/aes/aes_tab.c	311;"	d	file:
Td0	libtomcrypt/src/ciphers/aes/aes_tab.c	328;"	d	file:
Td1	libtomcrypt/src/ciphers/aes/aes_tab.c	312;"	d	file:
Td1	libtomcrypt/src/ciphers/aes/aes_tab.c	329;"	d	file:
Td2	libtomcrypt/src/ciphers/aes/aes_tab.c	313;"	d	file:
Td2	libtomcrypt/src/ciphers/aes/aes_tab.c	330;"	d	file:
Td3	libtomcrypt/src/ciphers/aes/aes_tab.c	314;"	d	file:
Td3	libtomcrypt/src/ciphers/aes/aes_tab.c	331;"	d	file:
Td4	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Td4[256] = {$/;"	v	file:
Te0	libtomcrypt/src/ciphers/aes/aes_tab.c	306;"	d	file:
Te0	libtomcrypt/src/ciphers/aes/aes_tab.c	323;"	d	file:
Te1	libtomcrypt/src/ciphers/aes/aes_tab.c	307;"	d	file:
Te1	libtomcrypt/src/ciphers/aes/aes_tab.c	324;"	d	file:
Te2	libtomcrypt/src/ciphers/aes/aes_tab.c	308;"	d	file:
Te2	libtomcrypt/src/ciphers/aes/aes_tab.c	325;"	d	file:
Te3	libtomcrypt/src/ciphers/aes/aes_tab.c	309;"	d	file:
Te3	libtomcrypt/src/ciphers/aes/aes_tab.c	326;"	d	file:
Te4	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Te4[256] = {$/;"	v	file:
Te4_0	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Te4_0[] = {$/;"	v	file:
Te4_0	libtomcrypt/src/ciphers/aes/aes_tab.c	316;"	d	file:
Te4_1	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Te4_1[] = {$/;"	v	file:
Te4_1	libtomcrypt/src/ciphers/aes/aes_tab.c	317;"	d	file:
Te4_2	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Te4_2[] = {$/;"	v	file:
Te4_2	libtomcrypt/src/ciphers/aes/aes_tab.c	318;"	d	file:
Te4_3	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Te4_3[] = {$/;"	v	file:
Te4_3	libtomcrypt/src/ciphers/aes/aes_tab.c	319;"	d	file:
TermCode	termcodes.h	/^struct TermCode {$/;"	s
The Application Programming Interface API	libtomcrypt/crypt.tex	/^\\chapter{The Application Programming Interface (API)}$/;"	c
The Secure PRNG Interface	libtomcrypt/crypt.tex	/^\\subsection{The Secure PRNG Interface}$/;"	b
Tks0	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Tks0[] = {$/;"	v	file:
Tks1	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Tks1[] = {$/;"	v	file:
Tks2	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Tks2[] = {$/;"	v	file:
Tks3	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 Tks3[] = {$/;"	v	file:
To ASCII	libtommath/bn.tex	/^\\subsection{To ASCII}$/;"	b
Tuning Polynomial Basis Routines	libtommath/bn.tex	/^\\section{Tuning Polynomial Basis Routines}$/;"	s
UNDEFED_HASH	libtomcrypt/src/hashes/chc/chc.c	21;"	d	file:
UNDER_CE	libtomcrypt/src/prngs/rng_get_bytes.c	93;"	d	file:
UNUSED	includes.h	153;"	d
UNUSED	includes.h	155;"	d
UNUSED	includes.h	157;"	d
UPDATE_INTERVAL	progressmeter.c	36;"	d	file:
USED	libtommath/mtest/mpi.h	57;"	d
USED	libtommath/tommath.h	188;"	d
USER	libtomcrypt/Makefile	/^USER=$(INSTALL_USER)$/;"	m
USER	libtomcrypt/Makefile	/^USER=root$/;"	m
USER	libtommath/Makefile	/^   USER=$(INSTALL_USER)$/;"	m
USER	libtommath/Makefile	/^   USER=root$/;"	m
USERAUTH_FAIL_RCVD	session.h	/^	USERAUTH_FAIL_RCVD,$/;"	e	enum:__anon4
USERAUTH_REQ_SENT	session.h	/^	USERAUTH_REQ_SENT,$/;"	e	enum:__anon4
USERAUTH_SUCCESS_RCVD	session.h	/^	USERAUTH_SUCCESS_RCVD,$/;"	e	enum:__anon4
USE_BBS	libtomcrypt/src/math/rand_prime.c	18;"	d	file:
USE_KEXGUESS2	sysoptions.h	33;"	d
USE_KEX_FIRST_FOLLOWS	sysoptions.h	29;"	d
USE_LASTLOG	loginrec.h	93;"	d
USE_LOGIN	loginrec.h	71;"	d
USE_UTMP	loginrec.h	80;"	d
USE_UTMPX	loginrec.h	77;"	d
USE_VFORK	sysoptions.h	234;"	d
USE_WTMP	loginrec.h	86;"	d
USE_WTMPX	loginrec.h	83;"	d
USING_LISTENERS	sysoptions.h	186;"	d
UTMPX_USE_LIBRARY	loginrec.c	806;"	d	file:
UTMP_FILE	loginrec.h	41;"	d
UTMP_FILE	loginrec.h	44;"	d
UTMP_USE_LIBRARY	loginrec.c	656;"	d	file:
Unrestricted Dimminshed Radix	libtommath/bn.tex	/^\\section{Unrestricted Dimminshed Radix}$/;"	s
UserDataS	svr-authpam.c	/^struct UserDataS {$/;"	s	file:
VERSION	libtomcrypt/Makefile	/^VERSION=1.16$/;"	m
VERSION	libtommath/Makefile	/^VERSION=0.40$/;"	m
WINSIZE	libtomcrypt/src/pk/ecc/ltc_ecc_mulmod.c	216;"	d	file:
WINSIZE	libtomcrypt/src/pk/ecc/ltc_ecc_mulmod.c	28;"	d	file:
WORD2BYTE	libtomcrypt/src/prngs/sober128.c	52;"	d	file:
WPV	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	109;"	d	file:
WTMP_FILE	loginrec.h	50;"	d
WTMP_FILE	loginrec.h	53;"	d
What the library IS for	libtomcrypt/crypt.tex	/^\\subsection{What the library IS for?}$/;"	b
Worder	libtomcrypt/src/hashes/md5.c	/^static const unsigned char Worder[64] = {$/;"	v	file:
X	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char chksum[16], X[48], buf[16];$/;"	m	struct:md2_state
X	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       X[16],        \/* accumulator *\/$/;"	m	struct:__anon17
X clock routines	libtomcrypt/crypt.tex	/^\\subsection{X clock routines}$/;"	b
X memory routines	libtomcrypt/crypt.tex	/^\\subsection{X memory routines}$/;"	b
X11BASEPORT	svr-x11fwd.c	38;"	d	file:
X11BINDBASE	svr-x11fwd.c	39;"	d	file:
XAUTH_COMMAND	options.h	250;"	d
XCALLOC	libtomcrypt/src/headers/tomcrypt_custom.h	24;"	d
XCALLOC	libtommath/tommath.h	114;"	d
XCLOCK	libtomcrypt/src/headers/tomcrypt_custom.h	59;"	d
XCLOCKS_PER_SEC	libtomcrypt/src/headers/tomcrypt_custom.h	62;"	d
XFREE	libtomcrypt/src/headers/tomcrypt_custom.h	30;"	d
XFREE	libtommath/tommath.h	112;"	d
XMALLOC	libtomcrypt/src/headers/tomcrypt_custom.h	12;"	d
XMALLOC	libtommath/tommath.h	111;"	d
XMEMCMP	libtomcrypt/src/headers/tomcrypt_custom.h	49;"	d
XMEMCPY	libtomcrypt/src/headers/tomcrypt_custom.h	43;"	d
XMEMSET	libtomcrypt/src/headers/tomcrypt_custom.h	37;"	d
XORNL	libtomcrypt/src/prngs/sober128.c	172;"	d	file:
XORWORD	libtomcrypt/src/prngs/sober128.c	/^static void XORWORD(ulong32 w, unsigned char *b)$/;"	f	file:
XREALLOC	libtomcrypt/src/headers/tomcrypt_custom.h	18;"	d
XREALLOC	libtommath/tommath.h	113;"	d
XSTRCMP	libtomcrypt/src/headers/tomcrypt_custom.h	55;"	d
Y	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       Y[16],        \/* counter *\/$/;"	m	struct:__anon17
YY	libtomcrypt/src/headers/tomcrypt_pk.h	/^   unsigned YY, \/* year *\/$/;"	m	struct:__anon33
Y_0	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       Y_0[16],      \/* initial counter *\/$/;"	m	struct:__anon17
Yarrow	libtomcrypt/crypt.tex	/^\\subsubsection{Yarrow}$/;"	b
ZLIB_COMPRESS_INCR	packet.c	44;"	d	file:
ZLIB_DECOMPRESS_INCR	packet.c	45;"	d	file:
ZPOS	libtommath/mtest/mpi.h	38;"	d
_AGENTFWD_H_	agentfwd.h	25;"	d
_ALGO_H_	algo.h	27;"	d
_AUTH_H_	auth.h	26;"	d
_BIGNUM_H_	bignum.h	26;"	d
_BUFFER_H_	buffer.h	27;"	d
_CHANNEL_H_	channel.h	26;"	d
_CHANSESSION_H_	chansession.h	26;"	d
_CIRCBUFFER_H_	circbuffer.h	26;"	d
_COMPAT_H_	compat.h	26;"	d
_DARWIN_USE_64_BIT_INODE	config.h	414;"	d
_DBUTIL_H_	dbutil.h	27;"	d
_DEBUG_H_	debug.h	26;"	d
_DROPBEAR_LIST_H	list.h	2;"	d
_DSS_H_	dss.h	26;"	d
_FAKE_RFC2553_H	fake-rfc2553.h	43;"	d
_FILE_OFFSET_BITS	config.h	418;"	d
_GENDSS_H_	gendss.h	26;"	d
_GENRSA_H_	genrsa.h	26;"	d
_GNU_SOURCE	scpmisc.c	43;"	d	file:
_HAVE_LOGINREC_H_	loginrec.h	2;"	d
_H_MPI_	libtommath/mtest/mpi.h	13;"	d
_INCLUDES_H_	includes.h	26;"	d
_KEX_H_	kex.h	26;"	d
_KEYIMPORT_H_	keyimport.h	26;"	d
_LISTENER_H	listener.h	26;"	d
_OPTIONS_H_	options.h	6;"	d
_PACKET_H_	packet.h	27;"	d
_PATH_CP	sysoptions.h	64;"	d
_PATH_DEVNULL	compat.h	53;"	d
_PATH_SSH_PROGRAM	options.h	262;"	d
_PATH_TTY	sysoptions.h	62;"	d
_QUEUE_H_	queue.h	26;"	d
_RANDOM_H_	random.h	26;"	d
_RSA_H_	rsa.h	26;"	d
_RUNOPTS_H_	runopts.h	26;"	d
_SERVICE_H_	service.h	26;"	d
_SESSION_H_	session.h	26;"	d
_SIGNKEY_H_	signkey.h	26;"	d
_SS_MAXSIZE	fake-rfc2553.h	55;"	d
_SS_PADSIZE	fake-rfc2553.h	56;"	d
_Safer_Expand_Userkey	libtomcrypt/src/ciphers/safer/safer.c	/^static void _Safer_Expand_Userkey(const unsigned char *userkey_1,$/;"	f	file:
_TCPFWD_H	tcpfwd.h	25;"	d
_TERMCODES_H_	termcodes.h	26;"	d
_WIN32_WINNT	libtomcrypt/src/prngs/rng_get_bytes.c	91;"	d	file:
_X11FWD_H_	x11fwd.h	25;"	d
__TEST_H_	libtomcrypt/testprof/tomcrypt_test.h	3;"	d
__ss_pad2	fake-rfc2553.h	/^	char		__ss_pad2[_SS_PADSIZE];$/;"	m	struct:sockaddr_storage
_anubis_setup	libtomcrypt/src/ciphers/anubis.c	/^static int _anubis_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f	file:
_blowfish_ecb_decrypt	libtomcrypt/src/ciphers/blowfish.c	/^static int _blowfish_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f	file:
_blowfish_ecb_encrypt	libtomcrypt/src/ciphers/blowfish.c	/^static int _blowfish_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f	file:
_cast5_ecb_decrypt	libtomcrypt/src/ciphers/cast5.c	/^static int _cast5_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f	file:
_cast5_ecb_encrypt	libtomcrypt/src/ciphers/cast5.c	/^static int _cast5_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f	file:
_cast5_setup	libtomcrypt/src/ciphers/cast5.c	/^static int _cast5_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f	file:
_cookey	libtomcrypt/src/ciphers/des.c	/^static void _cookey(const ulong32 *raw1, ulong32 *keyout)$/;"	f	file:
_deskey	libtomcrypt/src/ciphers/des.c	/^static void _deskey(const unsigned char *key, short edf, ulong32 *keyout)$/;"	f	file:
_dropbear_log	dbutil.c	/^void (*_dropbear_log)(int priority, const char* format, va_list param)$/;"	v
_g_func	libtomcrypt/src/ciphers/twofish/twofish.c	/^static ulong32 _g_func(ulong32 x, symmetric_key *key)$/;"	f	file:
_ilt	libtomcrypt/src/ciphers/safer/saferp.c	/^static void _ilt(unsigned char *b, unsigned char *b2)$/;"	f	file:
_iround	libtomcrypt/src/ciphers/safer/saferp.c	/^static void _iround(unsigned char *b, int i, symmetric_key *skey)$/;"	f	file:
_lt	libtomcrypt/src/ciphers/safer/saferp.c	/^static void _lt(unsigned char *b, unsigned char *b2)$/;"	f	file:
_m_list	list.h	/^struct _m_list {$/;"	s
_m_list_elem	list.h	/^struct _m_list_elem {$/;"	s
_md4_compress	libtomcrypt/src/hashes/md4.c	/^static int _md4_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_md5_compress	libtomcrypt/src/hashes/md5.c	/^static int _md5_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_noekeon_ecb_decrypt	libtomcrypt/src/ciphers/noekeon.c	/^static int _noekeon_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f	file:
_noekeon_ecb_encrypt	libtomcrypt/src/ciphers/noekeon.c	/^static int _noekeon_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f	file:
_rc2_ecb_decrypt	libtomcrypt/src/ciphers/rc2.c	/^static int _rc2_ecb_decrypt( const unsigned char *ct,$/;"	f	file:
_rc2_ecb_encrypt	libtomcrypt/src/ciphers/rc2.c	/^static int _rc2_ecb_encrypt( const unsigned char *pt,$/;"	f	file:
_rc5_ecb_decrypt	libtomcrypt/src/ciphers/rc5.c	/^static int _rc5_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f	file:
_rc5_ecb_encrypt	libtomcrypt/src/ciphers/rc5.c	/^static int _rc5_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f	file:
_rc5_setup	libtomcrypt/src/ciphers/rc5.c	/^static int _rc5_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f	file:
_rc6_ecb_decrypt	libtomcrypt/src/ciphers/rc6.c	/^static int _rc6_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f	file:
_rc6_ecb_encrypt	libtomcrypt/src/ciphers/rc6.c	/^static int _rc6_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f	file:
_rc6_setup	libtomcrypt/src/ciphers/rc6.c	/^static int _rc6_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f	file:
_rijndael_ecb_decrypt	libtomcrypt/src/ciphers/aes/aes.c	/^static int _rijndael_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey) $/;"	f	file:
_rijndael_ecb_encrypt	libtomcrypt/src/ciphers/aes/aes.c	/^static int _rijndael_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey) $/;"	f	file:
_rmd128_compress	libtomcrypt/src/hashes/rmd128.c	/^static int _rmd128_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_rmd160_compress	libtomcrypt/src/hashes/rmd160.c	/^static int _rmd160_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_rmd256_compress	libtomcrypt/src/hashes/rmd256.c	/^static int _rmd256_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_rmd320_compress	libtomcrypt/src/hashes/rmd320.c	/^static int _rmd320_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_round	libtomcrypt/src/ciphers/safer/saferp.c	/^static void _round(unsigned char *b, int i, symmetric_key *skey) $/;"	f	file:
_safer_ecb_decrypt	libtomcrypt/src/ciphers/safer/safer.c	/^static int _safer_ecb_decrypt(const unsigned char *block_in,$/;"	f	file:
_safer_ecb_encrypt	libtomcrypt/src/ciphers/safer/safer.c	/^static int _safer_ecb_encrypt(const unsigned char *block_in,$/;"	f	file:
_sbox	libtomcrypt/src/ciphers/twofish/twofish.c	/^static ulong32 _sbox(int i, ulong32 x)$/;"	f	file:
_sha1_compress	libtomcrypt/src/hashes/sha1.c	/^static int _sha1_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_sha256_compress	libtomcrypt/src/hashes/sha2/sha256.c	/^static int _sha256_compress(hash_state * md, unsigned char *buf)$/;"	f	file:
_sha512_compress	libtomcrypt/src/hashes/sha2/sha512.c	/^static int _sha512_compress(hash_state * md, unsigned char *buf)$/;"	f	file:
_skipjack_ecb_decrypt	libtomcrypt/src/ciphers/skipjack.c	/^static int _skipjack_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f	file:
_skipjack_ecb_encrypt	libtomcrypt/src/ciphers/skipjack.c	/^static int _skipjack_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f	file:
_t_read	libtommath/etc/timer.asm	/^_t_read:$/;"	l
_t_start	libtommath/etc/timer.asm	/^_t_start:$/;"	l
_tiger_compress	libtomcrypt/src/hashes/tiger.c	/^static int _tiger_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
_tt	libtommath/demo/timing.c	/^ulong64 _tt;$/;"	v
_twofish_ecb_decrypt	libtomcrypt/src/ciphers/twofish/twofish.c	/^static int _twofish_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f	file:
_twofish_ecb_encrypt	libtomcrypt/src/ciphers/twofish/twofish.c	/^static int _twofish_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f	file:
_twofish_setup	libtomcrypt/src/ciphers/twofish/twofish.c	/^static int _twofish_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f	file:
_whirlpool_compress	libtomcrypt/src/hashes/whirl/whirl.c	/^static int _whirlpool_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
ac_fn_c_check_decl	configure	/^ac_fn_c_check_decl ()$/;"	f
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_member	configure	/^ac_fn_c_check_member ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
accel_cbc_decrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_cbc_decrypt)(const unsigned char *ct, unsigned char *pt, unsigned long blocks, unsigned char *IV, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
accel_cbc_encrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_cbc_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, unsigned char *IV, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
accel_ccm_memory	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_ccm_memory)($/;"	m	struct:ltc_cipher_descriptor
accel_ctr_encrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_ctr_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, unsigned char *IV, int mode, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
accel_ecb_decrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_ecb_decrypt)(const unsigned char *ct, unsigned char *pt, unsigned long blocks, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
accel_ecb_encrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_ecb_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
accel_fp_mul	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^static int accel_fp_mul(int idx, void *k, ecc_point *R, void *modulus, void *mp, int map)$/;"	f	file:
accel_fp_mul2add	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^static int accel_fp_mul2add(int idx1, int idx2, $/;"	f	file:
accel_gcm_memory	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_gcm_memory)($/;"	m	struct:ltc_cipher_descriptor
accel_lrw_decrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_lrw_decrypt)(const unsigned char *ct, unsigned char *pt, unsigned long blocks, unsigned char *IV, const unsigned char *tweak, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
accel_lrw_encrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*accel_lrw_encrypt)(const unsigned char *pt, unsigned char *ct, unsigned long blocks, unsigned char *IV, const unsigned char *tweak, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
acceptor	listener.h	/^	void (*acceptor)(struct Listener*, int sock);$/;"	m	struct:Listener
add	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*add)(void *a, void *b, void *c);$/;"	m	struct:__anon11
add	libtomcrypt/src/math/gmp_desc.c	/^static int add(void *a, void *b, void *c)$/;"	f	file:
add	libtomcrypt/src/math/ltm_desc.c	/^static int add(void *a, void *b, void *c)$/;"	f	file:
add	libtomcrypt/src/math/tfm_desc.c	/^static int add(void *a, void *b, void *c)$/;"	f	file:
add_entropy	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int (*add_entropy)(const unsigned char *in, unsigned long inlen, prng_state *prng);$/;"	m	struct:ltc_prng_descriptor
add_entry	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^static int add_entry(int idx, ecc_point *g)$/;"	f	file:
add_netcat	cli-runopts.c	/^static void add_netcat(const char* origstr) {$/;"	f	file:
addargs	scpmisc.c	/^addargs(arglist *args, char *fmt, ...)$/;"	f
addchildpid	svr-chansession.c	/^static void addchildpid(struct ChanSess *chansess, pid_t pid) {$/;"	f	file:
addforward	cli-runopts.c	/^static void addforward(const char* origstr, m_list *fwdlist) {$/;"	f	file:
addi	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*addi)(void *a, unsigned long b, void *c);$/;"	m	struct:__anon11
addi	libtomcrypt/src/math/gmp_desc.c	/^static int addi(void *a, unsigned long b, void *c)$/;"	f	file:
addi	libtomcrypt/src/math/ltm_desc.c	/^static int addi(void *a, unsigned long b, void *c)$/;"	f	file:
addi	libtomcrypt/src/math/tfm_desc.c	/^static int addi(void *a, unsigned long b, void *c)$/;"	f	file:
addnewvar	svr-chansession.c	/^void addnewvar(const char* param, const char* var) {$/;"	f
addportandaddress	svr-runopts.c	/^static void addportandaddress(char* spec) {$/;"	f	file:
addrandom	random.c	/^void addrandom(char * buf, unsigned int len)$/;"	f
addresses	runopts.h	/^	char *addresses[DROPBEAR_MAX_PORTS];$/;"	m	struct:svr_runopts
addrinfo	fake-rfc2553.h	/^struct addrinfo {$/;"	s
addrstring	session.h	/^	char * addrstring;$/;"	m	struct:serversession
aes_desc	libtomcrypt/src/ciphers/aes/aes.c	/^const struct ltc_cipher_descriptor aes_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
aes_done	libtomcrypt/src/headers/tomcrypt_cipher.h	608;"	d
aes_ecb_decrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	606;"	d
aes_ecb_encrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	605;"	d
aes_enc_desc	libtomcrypt/src/ciphers/aes/aes.c	/^const struct ltc_cipher_descriptor aes_enc_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
aes_enc_ecb_encrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	612;"	d
aes_enc_keysize	libtomcrypt/src/headers/tomcrypt_cipher.h	613;"	d
aes_enc_setup	libtomcrypt/src/headers/tomcrypt_cipher.h	611;"	d
aes_keysize	libtomcrypt/src/headers/tomcrypt_cipher.h	609;"	d
aes_setup	libtomcrypt/src/headers/tomcrypt_cipher.h	604;"	d
aes_test	libtomcrypt/src/headers/tomcrypt_cipher.h	607;"	d
agent_buf_sign	cli-agentfwd.c	/^void agent_buf_sign(buffer *sigblob, sign_key *key, $/;"	f
agent_fd	runopts.h	/^	int agent_fd; \/* The agent fd is only set during authentication. Forwarded$/;"	m	struct:cli_runopts
agent_fwd	runopts.h	/^	int agent_fwd;$/;"	m	struct:cli_runopts
agent_get_key_list	cli-agentfwd.c	/^static void agent_get_key_list(m_list * ret_list)$/;"	f	file:
agent_keys_loaded	runopts.h	/^	int agent_keys_loaded; \/* whether pubkeys has been populated with a $/;"	m	struct:cli_runopts
agent_request	cli-agentfwd.c	/^static buffer * agent_request(unsigned char type, buffer *data) {$/;"	f	file:
agentaccept	svr-agentfwd.c	/^static void agentaccept(struct Listener *UNUSED(listener), int sock) {$/;"	f	file:
agentdir	chansession.h	/^	char * agentdir;$/;"	m	struct:ChanSess
agentfile	chansession.h	/^	char * agentfile;$/;"	m	struct:ChanSess
agentlistener	chansession.h	/^	struct Listener * agentlistener;$/;"	m	struct:ChanSess	typeref:struct:ChanSess::Listener
ai_addr	fake-rfc2553.h	/^	struct sockaddr *ai_addr;	\/* binary address *\/$/;"	m	struct:addrinfo	typeref:struct:addrinfo::sockaddr
ai_addrlen	fake-rfc2553.h	/^	size_t	ai_addrlen;	\/* length of ai_addr *\/$/;"	m	struct:addrinfo
ai_canonname	fake-rfc2553.h	/^	char	*ai_canonname;	\/* canonical name for hostname *\/$/;"	m	struct:addrinfo
ai_family	fake-rfc2553.h	/^	int	ai_family;	\/* PF_xxx *\/$/;"	m	struct:addrinfo
ai_flags	fake-rfc2553.h	/^	int	ai_flags;	\/* AI_PASSIVE, AI_CANONNAME *\/$/;"	m	struct:addrinfo
ai_next	fake-rfc2553.h	/^	struct addrinfo *ai_next;	\/* next structure in linked list *\/$/;"	m	struct:addrinfo	typeref:struct:addrinfo::addrinfo
ai_protocol	fake-rfc2553.h	/^	int	ai_protocol;	\/* 0 or IPPROTO_xxx for IPv4 and IPv6 *\/$/;"	m	struct:addrinfo
ai_socktype	fake-rfc2553.h	/^	int	ai_socktype;	\/* SOCK_xxx *\/$/;"	m	struct:addrinfo
akey	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char akey[MAXBLOCKSIZE],$/;"	m	struct:__anon19
algo_comp	session.h	/^	char algo_comp; \/* compression *\/$/;"	m	struct:key_context_directional
algo_crypt	session.h	/^	const struct dropbear_cipher *algo_crypt;$/;"	m	struct:key_context_directional	typeref:struct:key_context_directional::dropbear_cipher
algo_hostkey	session.h	/^	char algo_hostkey;$/;"	m	struct:key_context
algo_kex	session.h	/^	char algo_kex;$/;"	m	struct:key_context
algo_mac	session.h	/^	const struct dropbear_hash *algo_mac;$/;"	m	struct:key_context_directional	typeref:struct:key_context_directional::dropbear_hash
algo_type	algo.h	/^typedef struct Algo_Type algo_type;$/;"	t	typeref:struct:Algo_Type
algolist_string	common-algo.c	/^algolist_string(algo_type algos[])$/;"	f
alloc	libtommath/mtest/mpi.h	/^  mp_size       alloc;   \/* how many digits allocated  *\/$/;"	m	struct:__anon42
alloc	libtommath/tommath.h	/^    int used, alloc, sign;$/;"	m	struct:__anon43
allocbuf	scp.c	/^allocbuf(BUF *bp, int fd, int blksize)$/;"	f
allow_compress	session.h	/^	int allow_compress; \/* whether compression has started (useful in $/;"	m	struct:key_context
allowblankpass	runopts.h	/^	int allowblankpass;$/;"	m	struct:svr_runopts
allowprivport	session.h	/^	int allowprivport;$/;"	m	struct:sshsession
always_accept_key	runopts.h	/^	int always_accept_key;$/;"	m	struct:cli_runopts
anubis	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct anubis_key   anubis;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::anubis_key
anubis_crypt	libtomcrypt/src/ciphers/anubis.c	/^static void anubis_crypt(const unsigned char *plaintext, unsigned char *ciphertext,$/;"	f	file:
anubis_desc	libtomcrypt/src/ciphers/anubis.c	/^const struct ltc_cipher_descriptor anubis_desc = {$/;"	v	typeref:struct:ltc_cipher_descriptor
anubis_done	libtomcrypt/src/ciphers/anubis.c	/^void anubis_done(symmetric_key *skey)$/;"	f
anubis_ecb_decrypt	libtomcrypt/src/ciphers/anubis.c	/^int anubis_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
anubis_ecb_encrypt	libtomcrypt/src/ciphers/anubis.c	/^int anubis_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
anubis_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct anubis_key { $/;"	s
anubis_keysize	libtomcrypt/src/ciphers/anubis.c	/^int anubis_keysize(int *keysize)$/;"	f
anubis_setup	libtomcrypt/src/ciphers/anubis.c	/^int  anubis_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
anubis_test	libtomcrypt/src/ciphers/anubis.c	/^int anubis_test(void)$/;"	f
arg_setup	scp.c	/^arg_setup(char *host, char *remuser, char *cmd)$/;"	f	file:
arglist	scpmisc.h	/^struct arglist {$/;"	s
arglist	scpmisc.h	/^typedef struct arglist arglist;$/;"	t	typeref:struct:arglist
args	scp.c	/^arglist args;$/;"	v
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
ask_to_confirm	cli-kex.c	/^static void ask_to_confirm(unsigned char* keyblob, unsigned int keybloblen) {$/;"	f	file:
atime	scp.c	843;"	d	file:
atomicio	atomicio.c	/^atomicio(f, fd, _s, n)$/;"	f
auth_interact_failed	session.h	/^	int auth_interact_failed; \/* flag whether interactive auth can still$/;"	m	struct:clientsession
authclear	svr-auth.c	/^static void authclear() {$/;"	f	file:
authdone	auth.h	/^	unsigned authdone : 1; \/* 0 if we haven't authed, 1 if we have. Applies for$/;"	m	struct:AuthState
authstate	session.h	/^	struct AuthState authstate; \/* Common amongst client and server, since most$/;"	m	struct:sshsession	typeref:struct:sshsession::AuthState
authtypes	auth.h	/^	unsigned char authtypes; \/* Flags indicating which auth types are still $/;"	m	struct:AuthState
avg	libtomcrypt/testprof/tomcrypt_test.h	/^    unsigned long spd1, spd2, avg;$/;"	m	struct:list
await_open	channel.h	/^	int await_open; \/* flag indicating whether we've sent an open request$/;"	m	struct:Channel
backgrounded	runopts.h	/^	int backgrounded;$/;"	m	struct:cli_runopts
banner	runopts.h	/^	buffer * banner;$/;"	m	struct:svr_runopts
bannerfile	runopts.h	/^	char * bannerfile;$/;"	m	struct:svr_runopts
base64_decode	libtomcrypt/src/misc/base64/base64_decode.c	/^int base64_decode(const unsigned char *in,  unsigned long inlen, $/;"	f
base64_encode	libtomcrypt/src/misc/base64/base64_encode.c	/^int base64_encode(const unsigned char *in,  unsigned long inlen, $/;"	f
base64_encode_fp	keyimport.c	/^static void base64_encode_fp(FILE * fp, unsigned char *data,$/;"	f	file:
base64_gen	libtomcrypt/demos/tv_gen.c	/^void base64_gen(void)$/;"	f
base64_test	libtomcrypt/testprof/base64_test.c	/^int base64_test(void)$/;"	f
basename	compat.c	/^char *basename(const char *path) {$/;"	f
baseten	libtomcrypt/src/pk/asn1/der/utctime/der_encode_utctime.c	/^static const char *baseten = "0123456789";$/;"	v	file:
ber_read_id_len	keyimport.c	/^static int ber_read_id_len(void *source, int sourcelen,$/;"	f	file:
ber_write_id_len	keyimport.c	/^static int ber_write_id_len(void *dest, int id, int length, int flags)$/;"	f	file:
bigbyte	libtomcrypt/src/ciphers/des.c	/^static const ulong32 bigbyte[24] =$/;"	v	file:
bindagent	svr-agentfwd.c	/^static int bindagent(int fd, struct ChanSess * chansess) {$/;"	f	file:
bindir	Makefile	/^bindir=${exec_prefix}\/bin$/;"	m
bindport	svr-x11fwd.c	/^static int bindport(int fd) {$/;"	f	file:
bits_per_digit	libtomcrypt/src/headers/tomcrypt_math.h	/^   int  bits_per_digit;$/;"	m	struct:__anon11
blklen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                   blklen;$/;"	m	struct:__anon13
block	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     block[MAXBLOCKSIZE],     \/* currently accumulated block *\/$/;"	m	struct:__anon14
block	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned char   block[MAXBLOCKSIZE],$/;"	m	struct:__anon13
block_index	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned long     block_index;             \/* index # for current block *\/$/;"	m	struct:__anon14
block_index	libtomcrypt/src/headers/tomcrypt_mac.h	/^   unsigned long     block_index;             \/* index # for current block *\/$/;"	m	struct:__anon16
block_len	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     block_len,               \/* length of block *\/$/;"	m	struct:__anon14
block_len	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     block_len;               \/* length of block *\/$/;"	m	struct:__anon16
block_length	libtomcrypt/src/headers/tomcrypt_cipher.h	/^        block_length, $/;"	m	struct:ltc_cipher_descriptor
blockcnt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32             blockcnt;$/;"	m	struct:__anon26
blocklen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       blocklen, $/;"	m	struct:__anon21
blocklen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       blocklen, $/;"	m	struct:__anon22
blocklen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       blocklen, $/;"	m	struct:__anon24
blocklen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       blocklen, $/;"	m	struct:__anon26
blocklen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       blocklen;$/;"	m	struct:__anon20
blocklen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       blocklen;$/;"	m	struct:__anon23
blocksize	algo.h	/^	unsigned char blocksize;$/;"	m	struct:dropbear_cipher
blocksize	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned long blocksize;$/;"	m	struct:ltc_hash_descriptor
blocksize	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 blocksize;$/;"	m	struct:__anon18
blocksize	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 blocksize;$/;"	m	struct:__anon19
blowfish	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct blowfish_key blowfish;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::blowfish_key
blowfish_desc	libtomcrypt/src/ciphers/blowfish.c	/^const struct ltc_cipher_descriptor blowfish_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
blowfish_done	libtomcrypt/src/ciphers/blowfish.c	/^void blowfish_done(symmetric_key *skey)$/;"	f
blowfish_ecb_decrypt	libtomcrypt/src/ciphers/blowfish.c	/^int blowfish_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
blowfish_ecb_encrypt	libtomcrypt/src/ciphers/blowfish.c	/^int blowfish_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
blowfish_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct blowfish_key {$/;"	s
blowfish_keysize	libtomcrypt/src/ciphers/blowfish.c	/^int blowfish_keysize(int *keysize)$/;"	f
blowfish_setup	libtomcrypt/src/ciphers/blowfish.c	/^int blowfish_setup(const unsigned char *key, int keylen, int num_rounds,$/;"	f
blowfish_test	libtomcrypt/src/ciphers/blowfish.c	/^int blowfish_test(void)$/;"	f
bn_reverse	libtommath/bn_reverse.c	/^bn_reverse (unsigned char *s, int len)$/;"	f
bn_reverse	libtommath/pre_gen/mpi.c	/^bn_reverse (unsigned char *s, int len)$/;"	f
buf	buffer.h	/^struct buf {$/;"	s
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[128];$/;"	m	struct:sha512_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:md4_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:md5_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:rmd128_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:rmd160_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:rmd256_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:rmd320_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:sha1_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:sha256_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:tiger_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char buf[64];$/;"	m	struct:whirlpool_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char chksum[16], X[48], buf[16];$/;"	m	struct:md2_state
buf	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char state[MAXBLOCKSIZE], buf[MAXBLOCKSIZE];$/;"	m	struct:chc_state
buf	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       buf[16];      \/* buffer for stuff *\/$/;"	m	struct:__anon17
buf	libtomcrypt/src/headers/tomcrypt_prng.h	/^    unsigned char buf[256];$/;"	m	struct:rc4_prng
buf	libtommath/demo/demo.c	/^char cmd[4096], buf[4096];$/;"	v
buf	scp.c	/^	char *buf;$/;"	m	struct:__anon1	file:
buf_burn	buffer.c	/^void buf_burn(buffer* buf) {$/;"	f
buf_compress	packet.c	/^static void buf_compress(buffer * dest, buffer * src, unsigned int len) {$/;"	f	file:
buf_decompress	packet.c	/^static buffer* buf_decompress(buffer* buf, unsigned int len) {$/;"	f	file:
buf_dss_verify	dss.c	/^int buf_dss_verify(buffer* buf, dropbear_dss_key *key, const unsigned char* data,$/;"	f
buf_eatstring	buffer.c	/^void buf_eatstring(buffer *buf) {$/;"	f
buf_free	buffer.c	/^void buf_free(buffer* buf) {$/;"	f
buf_get_dss_priv_key	dss.c	/^int buf_get_dss_priv_key(buffer* buf, dropbear_dss_key *key) {$/;"	f
buf_get_dss_pub_key	dss.c	/^int buf_get_dss_pub_key(buffer* buf, dropbear_dss_key *key) {$/;"	f
buf_get_priv_key	signkey.c	/^int buf_get_priv_key(buffer *buf, sign_key *key, int *type) {$/;"	f
buf_get_pub_key	signkey.c	/^int buf_get_pub_key(buffer *buf, sign_key *key, int *type) {$/;"	f
buf_get_rsa_priv_key	rsa.c	/^int buf_get_rsa_priv_key(buffer* buf, dropbear_rsa_key *key) {$/;"	f
buf_get_rsa_pub_key	rsa.c	/^int buf_get_rsa_pub_key(buffer* buf, dropbear_rsa_key *key) {$/;"	f
buf_getbool	buffer.c	/^unsigned char buf_getbool(buffer* buf) {$/;"	f
buf_getbyte	buffer.c	/^unsigned char buf_getbyte(buffer* buf) {$/;"	f
buf_getint	buffer.c	/^unsigned int buf_getint(buffer* buf) {$/;"	f
buf_getline	dbutil.c	/^int buf_getline(buffer * line, FILE * authfile) {$/;"	f
buf_getmpint	buffer.c	/^int buf_getmpint(buffer* buf, mp_int* mp) {$/;"	f
buf_getptr	buffer.c	/^unsigned char* buf_getptr(buffer* buf, unsigned int len) {$/;"	f
buf_getstring	buffer.c	/^unsigned char* buf_getstring(buffer* buf, unsigned int *retlen) {$/;"	f
buf_getstringbuf	buffer.c	/^buffer * buf_getstringbuf(buffer *buf) {$/;"	f
buf_getwriteptr	buffer.c	/^unsigned char* buf_getwriteptr(buffer* buf, unsigned int len) {$/;"	f
buf_incrlen	buffer.c	/^void buf_incrlen(buffer* buf, unsigned int incr) {$/;"	f
buf_incrpos	buffer.c	/^void buf_incrpos(buffer* buf,  int incr) {$/;"	f
buf_incrwritepos	buffer.c	/^void buf_incrwritepos(buffer* buf, unsigned int incr) {$/;"	f
buf_match_algo	common-algo.c	/^algo_type * buf_match_algo(buffer* buf, algo_type localalgos[],$/;"	f
buf_new	buffer.c	/^buffer* buf_new(unsigned int size) {$/;"	f
buf_newcopy	buffer.c	/^buffer* buf_newcopy(buffer* buf) {$/;"	f
buf_put_algolist	common-algo.c	/^void buf_put_algolist(buffer * buf, algo_type localalgos[]) {$/;"	f
buf_put_dss_priv_key	dss.c	/^void buf_put_dss_priv_key(buffer* buf, dropbear_dss_key *key) {$/;"	f
buf_put_dss_pub_key	dss.c	/^void buf_put_dss_pub_key(buffer* buf, dropbear_dss_key *key) {$/;"	f
buf_put_dss_sign	dss.c	/^void buf_put_dss_sign(buffer* buf, dropbear_dss_key *key, const unsigned char* data,$/;"	f
buf_put_priv_key	signkey.c	/^void buf_put_priv_key(buffer* buf, sign_key *key, int type) {$/;"	f
buf_put_pub_key	signkey.c	/^void buf_put_pub_key(buffer* buf, sign_key *key, int type) {$/;"	f
buf_put_rsa_priv_key	rsa.c	/^void buf_put_rsa_priv_key(buffer* buf, dropbear_rsa_key *key) {$/;"	f
buf_put_rsa_pub_key	rsa.c	/^void buf_put_rsa_pub_key(buffer* buf, dropbear_rsa_key *key) {$/;"	f
buf_put_rsa_sign	rsa.c	/^void buf_put_rsa_sign(buffer* buf, dropbear_rsa_key *key, const unsigned char* data,$/;"	f
buf_put_sign	signkey.c	/^void buf_put_sign(buffer* buf, sign_key *key, int type, $/;"	f
buf_putbyte	buffer.c	/^void buf_putbyte(buffer* buf, unsigned char val) {$/;"	f
buf_putbytes	buffer.c	/^void buf_putbytes(buffer *buf, const unsigned char *bytes, unsigned int len) {$/;"	f
buf_putint	buffer.c	/^void buf_putint(buffer* buf, int unsigned val) {$/;"	f
buf_putmpint	buffer.c	/^void buf_putmpint(buffer* buf, mp_int * mp) {$/;"	f
buf_putstring	buffer.c	/^void buf_putstring(buffer* buf, const unsigned char* str, unsigned int len) {$/;"	f
buf_readfile	dbutil.c	/^int buf_readfile(buffer* buf, const char* filename) {$/;"	f
buf_resize	buffer.c	/^void buf_resize(buffer *buf, unsigned int newsize) {$/;"	f
buf_rsa_verify	rsa.c	/^int buf_rsa_verify(buffer * buf, dropbear_rsa_key *key, const unsigned char* data,$/;"	f
buf_setlen	buffer.c	/^void buf_setlen(buffer* buf, unsigned int len) {$/;"	f
buf_setpos	buffer.c	/^void buf_setpos(buffer* buf, unsigned int pos) {$/;"	f
buf_verify	signkey.c	/^int buf_verify(buffer * buf, sign_key *key, const unsigned char *data,$/;"	f
buf_writefile	dropbearkey.c	/^static void buf_writefile(buffer * buf, const char * filename) {$/;"	f	file:
buffer	buffer.h	/^typedef struct buf buffer;$/;"	t	typeref:struct:buf
buflen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       buflen;       \/* length of data in buf *\/$/;"	m	struct:__anon17
buflen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     buflen;                  \/* number of bytes in the buffer *\/$/;"	m	struct:__anon14
buflen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                   buflen,$/;"	m	struct:__anon13
buflen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 buflen,$/;"	m	struct:__anon18
buflen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 buflen,$/;"	m	struct:__anon19
buflen	libtomcrypt/src/headers/tomcrypt_mac.h	/^    int           buflen;$/;"	m	struct:pelican_state
build_lut	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^static int build_lut(int idx, void *modulus, void *mp, void *mu)$/;"	f	file:
burn_stack	libtomcrypt/src/misc/burn_stack.c	/^void burn_stack(unsigned long len)$/;"	f
bwlimit	scp.c	/^bwlimit(int amount)$/;"	f
byte	libtomcrypt/src/headers/tomcrypt_macros.h	417;"	d
byte	libtomcrypt/src/headers/tomcrypt_macros.h	419;"	d
bytebit	libtomcrypt/src/ciphers/des.c	/^static const ulong32 bytebit[8] =$/;"	v	file:
bytes	keyimport.c	/^struct mpint_pos { void *start; int bytes; };$/;"	m	struct:mpint_pos	file:
bytes_per_second	progressmeter.c	/^static int bytes_per_second;	\/* current speed in bytes per second *\/$/;"	v	file:
bytes_to_mp	bignum.c	/^void bytes_to_mp(mp_int *mp, const unsigned char* bytes, unsigned int len) {$/;"	f
c	libtomcrypt/src/ciphers/khazad.c	/^static const ulong64 c[R + 1] = {$/;"	v	file:
can_output	progressmeter.c	/^can_output(void)$/;"	f	file:
cast5	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct cast5_key    cast5;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::cast5_key
cast5_desc	libtomcrypt/src/ciphers/cast5.c	/^const struct ltc_cipher_descriptor cast5_desc = {$/;"	v	typeref:struct:ltc_cipher_descriptor
cast5_done	libtomcrypt/src/ciphers/cast5.c	/^void cast5_done(symmetric_key *skey)$/;"	f
cast5_ecb_decrypt	libtomcrypt/src/ciphers/cast5.c	/^int cast5_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
cast5_ecb_encrypt	libtomcrypt/src/ciphers/cast5.c	/^int cast5_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
cast5_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct cast5_key {$/;"	s
cast5_keysize	libtomcrypt/src/ciphers/cast5.c	/^int cast5_keysize(int *keysize)$/;"	f
cast5_setup	libtomcrypt/src/ciphers/cast5.c	/^int cast5_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
cast5_test	libtomcrypt/src/ciphers/cast5.c	/^int cast5_test(void)$/;"	f
cbc	session.h	/^		symmetric_CBC cbc;$/;"	m	union:key_context_directional::__anon2
cbc_decrypt	libtomcrypt/src/modes/cbc/cbc_decrypt.c	/^int cbc_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_CBC *cbc)$/;"	f
cbc_done	libtomcrypt/src/modes/cbc/cbc_done.c	/^int cbc_done(symmetric_CBC *cbc)$/;"	f
cbc_encrypt	libtomcrypt/src/modes/cbc/cbc_encrypt.c	/^int cbc_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_CBC *cbc)$/;"	f
cbc_getiv	libtomcrypt/src/modes/cbc/cbc_getiv.c	/^int cbc_getiv(unsigned char *IV, unsigned long *len, symmetric_CBC *cbc)$/;"	f
cbc_setiv	libtomcrypt/src/modes/cbc/cbc_setiv.c	/^int cbc_setiv(const unsigned char *IV, unsigned long len, symmetric_CBC *cbc)$/;"	f
cbc_start	libtomcrypt/src/modes/cbc/cbc_start.c	/^int cbc_start(int cipher, const unsigned char *IV, const unsigned char *key, $/;"	f
cbuf_free	circbuffer.c	/^void cbuf_free(circbuffer * cbuf) {$/;"	f
cbuf_getavail	circbuffer.c	/^unsigned int cbuf_getavail(circbuffer * cbuf) {$/;"	f
cbuf_getused	circbuffer.c	/^unsigned int cbuf_getused(circbuffer * cbuf) {$/;"	f
cbuf_incrread	circbuffer.c	/^void cbuf_incrread(circbuffer *cbuf, unsigned int len) {$/;"	f
cbuf_incrwrite	circbuffer.c	/^void cbuf_incrwrite(circbuffer *cbuf, unsigned int len) {$/;"	f
cbuf_new	circbuffer.c	/^circbuffer * cbuf_new(unsigned int size) {$/;"	f
cbuf_readlen	circbuffer.c	/^unsigned int cbuf_readlen(circbuffer *cbuf) {$/;"	f
cbuf_readptr	circbuffer.c	/^unsigned char* cbuf_readptr(circbuffer *cbuf, unsigned int len) {$/;"	f
cbuf_writelen	circbuffer.c	/^unsigned int cbuf_writelen(circbuffer *cbuf) {$/;"	f
cbuf_writeptr	circbuffer.c	/^unsigned char* cbuf_writeptr(circbuffer *cbuf, unsigned int len) {$/;"	f
ccm_gen	libtomcrypt/demos/tv_gen.c	/^void ccm_gen(void)$/;"	f
ccm_memory	libtomcrypt/src/encauth/ccm/ccm_memory.c	/^int ccm_memory(int cipher,$/;"	f
ccm_test	libtomcrypt/src/encauth/ccm/ccm_test.c	/^int ccm_test(void)$/;"	f
cfb_decrypt	libtomcrypt/src/modes/cfb/cfb_decrypt.c	/^int cfb_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_CFB *cfb)$/;"	f
cfb_done	libtomcrypt/src/modes/cfb/cfb_done.c	/^int cfb_done(symmetric_CFB *cfb)$/;"	f
cfb_encrypt	libtomcrypt/src/modes/cfb/cfb_encrypt.c	/^int cfb_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_CFB *cfb)$/;"	f
cfb_getiv	libtomcrypt/src/modes/cfb/cfb_getiv.c	/^int cfb_getiv(unsigned char *IV, unsigned long *len, symmetric_CFB *cfb)$/;"	f
cfb_setiv	libtomcrypt/src/modes/cfb/cfb_setiv.c	/^int cfb_setiv(const unsigned char *IV, unsigned long len, symmetric_CFB *cfb)$/;"	f
cfb_start	libtomcrypt/src/modes/cfb/cfb_start.c	/^int cfb_start(int cipher, const unsigned char *IV, const unsigned char *key, $/;"	f
chan_initwritebuf	common-channel.c	/^chan_initwritebuf(struct Channel *channel)$/;"	f	file:
chan_svr_agent	svr-agentfwd.c	/^static const struct ChanType chan_svr_agent = {$/;"	v	typeref:struct:ChanType	file:
chan_x11	svr-x11fwd.c	/^static const struct ChanType chan_x11 = {$/;"	v	typeref:struct:ChanType	file:
chancleanup	common-channel.c	/^void chancleanup() {$/;"	f
chancount	session.h	/^	unsigned int chancount; \/* the number of Channel*s in use *\/$/;"	m	struct:sshsession
chaninitialise	common-channel.c	/^void chaninitialise(const struct ChanType *chantypes[]) {$/;"	f
channelio	common-channel.c	/^void channelio(fd_set *readfds, fd_set *writefds) {$/;"	f
channels	session.h	/^	struct Channel ** channels; \/* these pointers may be null *\/$/;"	m	struct:sshsession	typeref:struct:sshsession::Channel
chansess	chansession.h	/^	struct ChanSess * chansess;$/;"	m	struct:ChildPid	typeref:struct:ChildPid::ChanSess
chansess_login_alloc	svr-chansession.c	/^chansess_login_alloc(struct ChanSess *chansess) {$/;"	f	file:
chansessionrequest	svr-chansession.c	/^static void chansessionrequest(struct Channel *channel) {$/;"	f	file:
chansize	session.h	/^	unsigned int chansize; \/* the number of Channel*s allocated for channels *\/$/;"	m	struct:sshsession
chantype	tcpfwd.h	/^	const struct ChanType *chantype;$/;"	m	struct:TCPListener	typeref:struct:TCPListener::ChanType
chantypes	session.h	/^	const struct ChanType **chantypes; \/* The valid channel types *\/$/;"	m	struct:sshsession	typeref:struct:sshsession::ChanType
char_to_int	libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c	/^static int char_to_int(unsigned char x)$/;"	f	file:
chc	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct chc_state chc;$/;"	m	union:Hash_state	typeref:struct:Hash_state::chc_state
chc_compress	libtomcrypt/src/hashes/chc/chc.c	/^static int chc_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
chc_desc	libtomcrypt/src/hashes/chc/chc.c	/^const struct ltc_hash_descriptor chc_desc = {$/;"	v	typeref:struct:ltc_hash_descriptor
chc_done	libtomcrypt/src/hashes/chc/chc.c	/^int chc_done(hash_state *md, unsigned char *out)$/;"	f
chc_init	libtomcrypt/src/hashes/chc/chc.c	/^int chc_init(hash_state *md)$/;"	f
chc_process	libtomcrypt/src/hashes/chc/chc.c	/^int chc_process(hash_state * md, const unsigned char *in, unsigned long inlen)$/;"	f
chc_register	libtomcrypt/src/hashes/chc/chc.c	/^int chc_register(int cipher)$/;"	f
chc_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct chc_state {$/;"	s
chc_test	libtomcrypt/src/hashes/chc/chc.c	/^int chc_test(void)$/;"	f
check_algo	common-algo.c	/^check_algo(const char* algo_name, algo_type *algos)$/;"	f	file:
check_close	channel.h	/^	int (*check_close)(struct Channel*);$/;"	m	struct:ChanType
check_close	common-channel.c	/^static void check_close(struct Channel *channel) {$/;"	f	file:
check_in_progress	common-channel.c	/^static void check_in_progress(struct Channel *channel) {$/;"	f	file:
check_user_algos	common-algo.c	/^check_user_algos(const char* user_algo_list, algo_type * algos, $/;"	f
checkfileperm	svr-authpubkey.c	/^static int checkfileperm(char * filename) {$/;"	f	file:
checkhostkey	cli-kex.c	/^static void checkhostkey(unsigned char* keyblob, unsigned int keybloblen) {$/;"	f	file:
checkmac	packet.c	/^static int checkmac() {$/;"	f	file:
checkpubkey	svr-authpubkey.c	/^static int checkpubkey(unsigned char* algo, unsigned int algolen,$/;"	f	file:
checkpubkeyperms	svr-authpubkey.c	/^static int checkpubkeyperms() {$/;"	f	file:
checksum	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     checksum[MAXBLOCKSIZE];  \/* current checksum *\/$/;"	m	struct:__anon14
checksum	libtomcrypt/src/headers/tomcrypt_mac.h	/^                     checksum[MAXBLOCKSIZE];  \/* current checksum *\/$/;"	m	struct:__anon16
checktimeouts	common-session.c	/^static void checktimeouts() {$/;"	f	file:
checkusername	svr-auth.c	/^static int checkusername(unsigned char *username, unsigned int userlen) {$/;"	f	file:
child	libtomcrypt/src/headers/tomcrypt_pk.h	/^   struct ltc_asn1_list_ *prev, *next, *child, *parent;$/;"	m	struct:ltc_asn1_list_	typeref:struct:ltc_asn1_list_::
childpids	session.h	/^	struct ChildPid * childpids; \/* array of mappings childpid<->channel *\/$/;"	m	struct:serversession	typeref:struct:serversession::ChildPid
childpidsize	session.h	/^	unsigned int childpidsize;$/;"	m	struct:serversession
childpipe	session.h	/^	int childpipe; \/* kept open until we successfully authenticate *\/$/;"	m	struct:serversession
chksum	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char chksum[16], X[48], buf[16];$/;"	m	struct:md2_state
cipher	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    int               cipher;$/;"	m	struct:__anon25
cipher	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int                 cipher, $/;"	m	struct:__anon20
cipher	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int                 cipher, $/;"	m	struct:__anon21
cipher	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int                 cipher, $/;"	m	struct:__anon22
cipher	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int                 cipher, $/;"	m	struct:__anon23
cipher	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int                 cipher, $/;"	m	struct:__anon26
cipher	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int                 cipher,$/;"	m	struct:__anon24
cipher	libtomcrypt/src/headers/tomcrypt_mac.h	/^             int cipher,$/;"	m	struct:__anon18
cipher	libtomcrypt/src/headers/tomcrypt_mac.h	/^             int cipher,$/;"	m	struct:__anon19
cipher	libtomcrypt/src/headers/tomcrypt_mac.h	/^   int                 cipher,       \/* which cipher *\/$/;"	m	struct:__anon17
cipher	libtomcrypt/src/headers/tomcrypt_mac.h	/^   int               cipher,                  \/* cipher idx *\/$/;"	m	struct:__anon16
cipher	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int                   cipher, hash;$/;"	m	struct:yarrow_prng
cipher_blocksize	libtomcrypt/src/hashes/chc/chc.c	/^                      cipher_blocksize;               \/* blocksize of cipher *\/$/;"	v	file:
cipher_descriptor	libtomcrypt/src/misc/crypt/crypt_cipher_descriptor.c	/^struct ltc_cipher_descriptor cipher_descriptor[TAB_SIZE] = {$/;"	v	typeref:struct:ltc_cipher_descriptor
cipher_gen	libtomcrypt/demos/tv_gen.c	/^void cipher_gen(void)$/;"	f
cipher_hash_test	libtomcrypt/testprof/cipher_hash_test.c	/^int cipher_hash_test(void)$/;"	f
cipher_idx	libtomcrypt/src/hashes/chc/chc.c	/^static int            cipher_idx=UNDEFED_HASH,        \/* which cipher *\/$/;"	v	file:
cipher_idx	libtomcrypt/src/headers/tomcrypt_mac.h	/^   int               cipher_idx,              \/* cipher idx *\/$/;"	m	struct:__anon14
cipher_idx	libtomcrypt/src/headers/tomcrypt_mac.h	/^   int             cipher_idx, $/;"	m	struct:__anon13
cipher_is_valid	libtomcrypt/src/misc/crypt/crypt_cipher_is_valid.c	/^int cipher_is_valid(int idx)$/;"	f
cipher_list	runopts.h	/^	char *cipher_list;$/;"	m	struct:runopts
cipher_none_after_auth	session.h	/^	int cipher_none_after_auth; \/* Set to 1 if the user requested "none"$/;"	m	struct:clientsession
cipher_state	session.h	/^	} cipher_state;$/;"	m	struct:key_context_directional	typeref:union:key_context_directional::__anon2
cipherdesc	algo.h	/^	const struct ltc_cipher_descriptor *cipherdesc;$/;"	m	struct:dropbear_cipher	typeref:struct:dropbear_cipher::ltc_cipher_descriptor
cir	libtomcrypt/notes/etc/whirlgen.c	/^unsigned cir[8][8] = { $/;"	v
circbuf	circbuffer.h	/^struct circbuf {$/;"	s
circbuffer	circbuffer.h	/^typedef struct circbuf circbuffer;$/;"	t	typeref:struct:circbuf
cleanhostname	scpmisc.c	/^cleanhostname(char *host)$/;"	f
cleantext	cli-session.c	/^void cleantext(unsigned char* dirtytext) {$/;"	f
cleanup	listener.h	/^	void (*cleanup)(struct Listener*);$/;"	m	struct:Listener
cleanup_tcp	tcp-accept.c	/^static void cleanup_tcp(struct Listener *listener) {$/;"	f	file:
cli_auth_getmethods	cli-auth.c	/^void cli_auth_getmethods() {$/;"	f
cli_auth_interactive	cli-authinteract.c	/^void cli_auth_interactive() {$/;"	f
cli_auth_password	cli-authpasswd.c	/^void cli_auth_password() {$/;"	f
cli_auth_pubkey	cli-authpubkey.c	/^int cli_auth_pubkey() {$/;"	f
cli_auth_pubkey_cleanup	cli-authpubkey.c	/^void cli_auth_pubkey_cleanup() {$/;"	f
cli_auth_try	cli-auth.c	/^int cli_auth_try() {$/;"	f
cli_authinitialise	cli-auth.c	/^void cli_authinitialise() {$/;"	f
cli_buf_put_sign	cli-authpubkey.c	/^void cli_buf_put_sign(buffer* buf, sign_key *key, int type, $/;"	f
cli_chan_agent	cli-agentfwd.c	/^const struct ChanType cli_chan_agent = {$/;"	v	typeref:struct:ChanType
cli_chan_netcat	cli-chansession.c	/^static const struct ChanType cli_chan_netcat = {$/;"	v	typeref:struct:ChanType	file:
cli_chan_tcplocal	cli-tcpfwd.c	/^static const struct ChanType cli_chan_tcplocal = {$/;"	v	typeref:struct:ChanType	file:
cli_chan_tcpremote	cli-tcpfwd.c	/^const struct ChanType cli_chan_tcpremote = {$/;"	v	typeref:struct:ChanType
cli_chansess_winchange	cli-chansession.c	/^void cli_chansess_winchange() {$/;"	f
cli_chansessreq	cli-chansession.c	/^static void cli_chansessreq(struct Channel *channel) {$/;"	f	file:
cli_chantypes	cli-session.c	/^static const struct ChanType *cli_chantypes[] = {$/;"	v	typeref:struct:ChanType	file:
cli_closechansess	cli-chansession.c	/^static void cli_closechansess(struct Channel *UNUSED(channel)) {$/;"	f	file:
cli_dropbear_exit	cli-main.c	/^static void cli_dropbear_exit(int exitcode, const char* format, va_list param) {$/;"	f	file:
cli_dropbear_log	cli-main.c	/^static void cli_dropbear_log(int UNUSED(priority), $/;"	f	file:
cli_escape_handler	cli-chansession.c	/^void cli_escape_handler(struct Channel *channel, unsigned char* buf, int *len) {$/;"	f	file:
cli_finished	cli-session.c	/^static void cli_finished() {$/;"	f	file:
cli_getopts	cli-runopts.c	/^void cli_getopts(int argc, char ** argv) {$/;"	f
cli_init_stdpipe_sess	cli-chansession.c	/^static int cli_init_stdpipe_sess(struct Channel *channel) {$/;"	f	file:
cli_initchansess	cli-chansession.c	/^static int cli_initchansess(struct Channel *channel) {$/;"	f	file:
cli_kex_state	session.h	/^} cli_kex_state;$/;"	t	typeref:enum:__anon3
cli_load_agent_keys	cli-agentfwd.c	/^void cli_load_agent_keys(m_list *ret_list) {$/;"	f
cli_localtcp	cli-tcpfwd.c	/^static int cli_localtcp(const char* listenaddr, $/;"	f	file:
cli_main	cli-main.c	/^int cli_main(int argc, char ** argv) {$/;"	f
cli_opts	cli-runopts.c	/^cli_runopts cli_opts; \/* GLOBAL *\/$/;"	v
cli_packettypes	cli-session.c	/^static const packettype cli_packettypes[] = {$/;"	v	file:
cli_proxy_cmd	cli-main.c	/^static void cli_proxy_cmd(int *sock_in, int *sock_out) {$/;"	f	file:
cli_pubkeyfail	cli-authpubkey.c	/^void cli_pubkeyfail() {$/;"	f
cli_recv_msg_request_failure	cli-tcpfwd.c	/^void cli_recv_msg_request_failure() {$/;"	f
cli_recv_msg_request_success	cli-tcpfwd.c	/^void cli_recv_msg_request_success() {$/;"	f
cli_remoteclosed	cli-session.c	/^static void cli_remoteclosed() {$/;"	f	file:
cli_runopts	runopts.h	/^typedef struct cli_runopts {$/;"	s
cli_runopts	runopts.h	/^} cli_runopts;$/;"	t	typeref:struct:cli_runopts
cli_send_chansess_request	cli-chansession.c	/^void cli_send_chansess_request() {$/;"	f
cli_send_kex_first_guess	cli-session.c	/^static void cli_send_kex_first_guess() {$/;"	f	file:
cli_send_netcat_request	cli-chansession.c	/^void cli_send_netcat_request() {$/;"	f
cli_ses	cli-session.c	/^struct clientsession cli_ses; \/* GLOBAL *\/$/;"	v	typeref:struct:clientsession
cli_session	cli-session.c	/^void cli_session(int sock_in, int sock_out) {$/;"	f
cli_session_cleanup	cli-session.c	/^static void cli_session_cleanup(void) {$/;"	f	file:
cli_session_init	cli-session.c	/^static void cli_session_init() {$/;"	f	file:
cli_sessionloop	cli-session.c	/^static void cli_sessionloop() {$/;"	f	file:
cli_setup_agent	cli-agentfwd.c	/^void cli_setup_agent(struct Channel *channel) {$/;"	f
cli_start_send_channel_request	cli-chansession.c	/^void cli_start_send_channel_request(struct Channel *channel, $/;"	f
cli_state	session.h	/^} cli_state;$/;"	t	typeref:enum:__anon4
cli_tty_cleanup	cli-chansession.c	/^void cli_tty_cleanup() {$/;"	f
cli_tty_setup	cli-chansession.c	/^static void cli_tty_setup() {$/;"	f	file:
clichansess	cli-chansession.c	/^const struct ChanType clichansess = {$/;"	v	typeref:struct:ChanType
clientsession	session.h	/^struct clientsession {$/;"	s
close_chan_fd	common-channel.c	/^static void close_chan_fd(struct Channel *channel, int fd, int how) {$/;"	f	file:
close_handler_done	channel.h	/^	int close_handler_done;$/;"	m	struct:Channel
closechansess	svr-chansession.c	/^static void closechansess(struct Channel *channel) {$/;"	f	file:
closehandler	channel.h	/^	void (*closehandler)(struct Channel*);$/;"	m	struct:ChanType
cmd	chansession.h	/^	unsigned char * cmd; \/* command to exec *\/$/;"	m	struct:ChanSess
cmd	libtommath/demo/demo.c	/^char cmd[4096], buf[4096];$/;"	v
cmd	runopts.h	/^	char *cmd;$/;"	m	struct:cli_runopts
cmd	scp.c	/^char cmd[CMDNEEDS];		\/* must hold "rcp -r -p -d\\0" *\/$/;"	v
cmp_base64_key	signkey.c	/^int cmp_base64_key(const unsigned char* keyblob, unsigned int keybloblen, $/;"	f
cnt	scp.c	/^	size_t cnt;$/;"	m	struct:__anon1	file:
code	libtomcrypt/src/pk/asn1/der/ia5/der_length_ia5_string.c	/^   int code, value;$/;"	m	struct:__anon9	file:
code	libtomcrypt/src/pk/asn1/der/printable_string/der_length_printable_string.c	/^   int code, value;$/;"	m	struct:__anon10	file:
code	libtommath/bn_error.c	/^     int code;$/;"	m	struct:__anon45	file:
code	libtommath/pre_gen/mpi.c	/^     int code;$/;"	m	struct:__anon40	file:
codes	libtomcrypt/src/misc/base64/base64_encode.c	/^static const char *codes = $/;"	v	file:
colon	scpmisc.c	/^colon(char *cp)$/;"	f
common_recv_msg_channel_data	common-channel.c	/^void common_recv_msg_channel_data(struct Channel *channel, int fd, $/;"	f
common_session_init	common-session.c	/^void common_session_init(int sock_in, int sock_out) {$/;"	f
commonsetup	svr-main.c	/^static void commonsetup() {$/;"	f	file:
compare	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*compare)(void *a, void *b);$/;"	m	struct:__anon11
compare	libtomcrypt/src/math/gmp_desc.c	/^static int compare(void *a, void *b)$/;"	f	file:
compare	libtomcrypt/src/math/ltm_desc.c	/^static int compare(void *a, void *b)$/;"	f	file:
compare	libtomcrypt/src/math/tfm_desc.c	/^static int compare(void *a, void *b)$/;"	f	file:
compare_d	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*compare_d)(void *a, unsigned long n);$/;"	m	struct:__anon11
compare_d	libtomcrypt/src/math/gmp_desc.c	/^static int compare_d(void *a, unsigned long b)$/;"	f	file:
compare_d	libtomcrypt/src/math/ltm_desc.c	/^static int compare_d(void *a, unsigned long b)$/;"	f	file:
compare_d	libtomcrypt/src/math/tfm_desc.c	/^static int compare_d(void *a, unsigned long b)$/;"	f	file:
compress_algos	session.h	/^	algo_type *compress_algos;$/;"	m	struct:sshsession
connect_agent	cli-agentfwd.c	/^static int connect_agent() {$/;"	f	file:
connect_remote	dbutil.c	/^int connect_remote(const char* remotehost, const char* remoteport,$/;"	f
connect_time	session.h	/^	time_t connect_time; \/* time the connection was established$/;"	m	struct:sshsession
connect_unix	dbutil.c	/^int connect_unix(const char* path) {$/;"	f
connectaddr	tcpfwd.h	/^	const unsigned char* connectaddr;$/;"	m	struct:TCPFwdEntry
connection_string	chansession.h	/^	char *connection_string;$/;"	m	struct:ChanSess
connectport	tcpfwd.h	/^	unsigned int connectport;$/;"	m	struct:TCPFwdEntry
construct_utmp	loginrec.c	/^construct_utmp(struct logininfo *li,$/;"	f
construct_utmpx	loginrec.c	/^construct_utmpx(struct logininfo *li, struct utmpx *utx)$/;"	f
cont	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 cont[] = {$/;"	v	file:
cookey	libtomcrypt/src/ciphers/des.c	/^static void cookey(const ulong32 *raw1, ulong32 *keyout)$/;"	f	file:
copy	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*copy)(void *src, void *dst);$/;"	m	struct:__anon11
copy	libtomcrypt/src/math/gmp_desc.c	/^static int copy(void *a, void *b)$/;"	f	file:
copy	libtomcrypt/src/math/ltm_desc.c	/^static int copy(void *a, void *b)$/;"	f	file:
copy	libtomcrypt/src/math/tfm_desc.c	/^static int copy(void *a, void *b)$/;"	f	file:
count	queue.h	/^	unsigned int count;$/;"	m	struct:Queue
count_bits	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*count_bits)(void * a);$/;"	m	struct:__anon11
count_bits	libtomcrypt/src/math/gmp_desc.c	/^static int count_bits(void *a)$/;"	f	file:
count_bits	libtomcrypt/src/math/ltm_desc.c	/^static int count_bits(void *a)$/;"	f	file:
count_bits	libtomcrypt/src/math/tfm_desc.c	/^static int count_bits(void *a)$/;"	f	file:
count_lsb_bits	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*count_lsb_bits)(void *a);$/;"	m	struct:__anon11
count_lsb_bits	libtomcrypt/src/math/gmp_desc.c	/^static int count_lsb_bits(void *a)$/;"	f	file:
count_lsb_bits	libtomcrypt/src/math/ltm_desc.c	/^static int count_lsb_bits(void *a)$/;"	f	file:
count_lsb_bits	libtomcrypt/src/math/tfm_desc.c	/^static int count_lsb_bits(void *a)$/;"	f	file:
counter	progressmeter.c	/^static volatile off_t *counter;	\/* progress counter *\/$/;"	v	file:
counter	random.c	/^static uint32_t counter = 0;$/;"	v	file:
crypt_argchk	libtomcrypt/src/misc/crypt/crypt_argchk.c	/^void crypt_argchk(char *v, char *s, int d)$/;"	f
crypt_fsa	libtomcrypt/src/misc/crypt/crypt_fsa.c	/^int crypt_fsa(void *mp, ...)$/;"	f
crypt_mode	session.h	/^	const struct dropbear_cipher_mode *crypt_mode;$/;"	m	struct:key_context_directional	typeref:struct:key_context_directional::dropbear_cipher_mode
crypto_init	common-algo.c	/^void crypto_init() {$/;"	f
ctomac	libtomcrypt/src/headers/tomcrypt_mac.h	/^   omac_state    headeromac, ctomac;$/;"	m	struct:__anon15
ctr	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   unsigned char       ctr[MAXBLOCKSIZE], $/;"	m	struct:__anon24
ctr	libtomcrypt/src/headers/tomcrypt_mac.h	/^   symmetric_CTR ctr;$/;"	m	struct:__anon15
ctr	libtomcrypt/src/headers/tomcrypt_prng.h	/^    symmetric_CTR         ctr;$/;"	m	struct:yarrow_prng
ctr	session.h	/^		symmetric_CTR ctr;$/;"	m	union:key_context_directional::__anon2
ctr_decrypt	libtomcrypt/src/modes/ctr/ctr_decrypt.c	/^int ctr_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_CTR *ctr)$/;"	f
ctr_done	libtomcrypt/src/modes/ctr/ctr_done.c	/^int ctr_done(symmetric_CTR *ctr)$/;"	f
ctr_encrypt	libtomcrypt/src/modes/ctr/ctr_encrypt.c	/^int ctr_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_CTR *ctr)$/;"	f
ctr_getiv	libtomcrypt/src/modes/ctr/ctr_getiv.c	/^int ctr_getiv(unsigned char *IV, unsigned long *len, symmetric_CTR *ctr)$/;"	f
ctr_setiv	libtomcrypt/src/modes/ctr/ctr_setiv.c	/^int ctr_setiv(const unsigned char *IV, unsigned long len, symmetric_CTR *ctr)$/;"	f
ctr_start	libtomcrypt/src/modes/ctr/ctr_start.c	/^int ctr_start(               int   cipher, $/;"	f
ctr_test	libtomcrypt/src/modes/ctr/ctr_test.c	/^int ctr_test(void)$/;"	f
cur_pos	progressmeter.c	/^static off_t cur_pos;		\/* transfer position as of last refresh *\/$/;"	v	file:
curfile	scp.c	/^char *curfile;$/;"	v
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[10];$/;"	m	struct:rmd320_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[4];$/;"	m	struct:rmd128_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[5];$/;"	m	struct:rmd160_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[8];$/;"	m	struct:rmd256_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen;$/;"	m	struct:chc_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen;$/;"	m	struct:whirlpool_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[4], curlen;$/;"	m	struct:md4_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[4], curlen;$/;"	m	struct:md5_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[5], curlen;$/;"	m	struct:sha1_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[8], curlen;$/;"	m	struct:sha256_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned long curlen;$/;"	m	struct:md2_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned long curlen;$/;"	m	struct:sha512_state
curlen	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned long curlen;$/;"	m	struct:tiger_state
curshell	compat.c	/^static char **curshell, **shells, *strings;$/;"	v	file:
cycle	libtomcrypt/src/prngs/sober128.c	/^static void cycle(ulong32 *R)$/;"	f	file:
d	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *d; $/;"	m	struct:KAT_key
d	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *d; $/;"	m	struct:Rsa_key
d	rsa.h	/^	mp_int* d;$/;"	m	struct:__anon48
dK	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 K[32], dK[32];$/;"	m	struct:kseed_key
dK	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 K[4], dK[4];$/;"	m	struct:noekeon_key
dK	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 eK[60], dK[60];$/;"	m	struct:rijndael_key
dP	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *dP; $/;"	m	struct:KAT_key
dP	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *dP; $/;"	m	struct:Rsa_key
dQ	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *dQ;$/;"	m	struct:KAT_key
dQ	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *dQ;$/;"	m	struct:Rsa_key
daemon	compat.c	/^int daemon(int nochdir, int noclose) {$/;"	f
data	algo.h	/^	const void *data; \/* algorithm specific data *\/$/;"	m	struct:Algo_Type
data	buffer.h	/^	unsigned char * data;$/;"	m	struct:buf
data	circbuffer.h	/^	unsigned char* data;$/;"	m	struct:circbuf
data	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   void   *data;$/;"	m	union:Symmetric_key
data	libtomcrypt/src/headers/tomcrypt_hash.h	/^    void *data;$/;"	m	union:Hash_state
data	libtomcrypt/src/headers/tomcrypt_pk.h	/^   void         *data;$/;"	m	struct:ltc_asn1_list_
dataallowed	session.h	/^	unsigned dataallowed : 1; \/* whether we can send data packets or we are in$/;"	m	struct:sshsession
datarecv	kex.h	/^	unsigned int datarecv; \/* data received since last kex *\/$/;"	m	struct:KEXState
datatrans	kex.h	/^	unsigned int datatrans; \/* data transmitted since last kex *\/$/;"	m	struct:KEXState
dbclientobjs	Makefile	/^dbclientobjs=$(COMMONOBJS) $(CLISVROBJS) $(CLIOBJS)$/;"	m
debug_trace	dbutil.c	/^int debug_trace = 0;$/;"	v
decrypt	algo.h	/^	int (*decrypt)(const unsigned char *ct, unsigned char *pt, $/;"	m	struct:dropbear_cipher_mode
decrypt_packet	packet.c	/^void decrypt_packet() {$/;"	f
default_rounds	libtomcrypt/src/headers/tomcrypt_cipher.h	/^        default_rounds;$/;"	m	struct:ltc_cipher_descriptor
deinit	libtomcrypt/src/headers/tomcrypt_math.h	/^   void (*deinit)(void *a);$/;"	m	struct:__anon11
deinit	libtomcrypt/src/math/gmp_desc.c	/^static void deinit(void *a)$/;"	f	file:
deinit	libtomcrypt/src/math/ltm_desc.c	/^static void deinit(void *a)$/;"	f	file:
deinit	libtomcrypt/src/math/tfm_desc.c	/^static void deinit(void *a)$/;"	f	file:
dequeue	queue.c	/^void* dequeue(struct Queue* queue) {$/;"	f
der_choice_test	libtomcrypt/testprof/der_tests.c	/^static int der_choice_test(void)$/;"	f	file:
der_decode_bit_string	libtomcrypt/src/pk/asn1/der/bit/der_decode_bit_string.c	/^int der_decode_bit_string(const unsigned char *in,  unsigned long inlen,$/;"	f
der_decode_boolean	libtomcrypt/src/pk/asn1/der/boolean/der_decode_boolean.c	/^int der_decode_boolean(const unsigned char *in, unsigned long inlen,$/;"	f
der_decode_choice	libtomcrypt/src/pk/asn1/der/choice/der_decode_choice.c	/^int der_decode_choice(const unsigned char *in,   unsigned long *inlen,$/;"	f
der_decode_ia5_string	libtomcrypt/src/pk/asn1/der/ia5/der_decode_ia5_string.c	/^int der_decode_ia5_string(const unsigned char *in, unsigned long inlen,$/;"	f
der_decode_integer	libtomcrypt/src/pk/asn1/der/integer/der_decode_integer.c	/^int der_decode_integer(const unsigned char *in, unsigned long inlen, void *num)$/;"	f
der_decode_object_identifier	libtomcrypt/src/pk/asn1/der/object_identifier/der_decode_object_identifier.c	/^int der_decode_object_identifier(const unsigned char *in,    unsigned long  inlen,$/;"	f
der_decode_octet_string	libtomcrypt/src/pk/asn1/der/octet/der_decode_octet_string.c	/^int der_decode_octet_string(const unsigned char *in, unsigned long inlen,$/;"	f
der_decode_printable_string	libtomcrypt/src/pk/asn1/der/printable_string/der_decode_printable_string.c	/^int der_decode_printable_string(const unsigned char *in, unsigned long inlen,$/;"	f
der_decode_sequence	libtomcrypt/src/headers/tomcrypt_pk.h	417;"	d
der_decode_sequence_ex	libtomcrypt/src/pk/asn1/der/sequence/der_decode_sequence_ex.c	/^int der_decode_sequence_ex(const unsigned char *in, unsigned long  inlen,$/;"	f
der_decode_sequence_flexi	libtomcrypt/src/pk/asn1/der/sequence/der_decode_sequence_flexi.c	/^int der_decode_sequence_flexi(const unsigned char *in, unsigned long *inlen, ltc_asn1_list **out)$/;"	f
der_decode_sequence_multi	libtomcrypt/src/pk/asn1/der/sequence/der_decode_sequence_multi.c	/^int der_decode_sequence_multi(const unsigned char *in, unsigned long inlen, ...)$/;"	f
der_decode_set	libtomcrypt/src/headers/tomcrypt_pk.h	423;"	d
der_decode_short_integer	libtomcrypt/src/pk/asn1/der/short_integer/der_decode_short_integer.c	/^int der_decode_short_integer(const unsigned char *in, unsigned long inlen, unsigned long *num)$/;"	f
der_decode_utctime	libtomcrypt/src/pk/asn1/der/utctime/der_decode_utctime.c	/^int der_decode_utctime(const unsigned char *in, unsigned long *inlen,$/;"	f
der_decode_utf8_string	libtomcrypt/src/pk/asn1/der/utf8/der_decode_utf8_string.c	/^int der_decode_utf8_string(const unsigned char *in,  unsigned long inlen,$/;"	f
der_encode_bit_string	libtomcrypt/src/pk/asn1/der/bit/der_encode_bit_string.c	/^int der_encode_bit_string(const unsigned char *in, unsigned long inlen,$/;"	f
der_encode_boolean	libtomcrypt/src/pk/asn1/der/boolean/der_encode_boolean.c	/^int der_encode_boolean(int in, $/;"	f
der_encode_ia5_string	libtomcrypt/src/pk/asn1/der/ia5/der_encode_ia5_string.c	/^int der_encode_ia5_string(const unsigned char *in, unsigned long inlen,$/;"	f
der_encode_integer	libtomcrypt/src/pk/asn1/der/integer/der_encode_integer.c	/^int der_encode_integer(void *num, unsigned char *out, unsigned long *outlen)$/;"	f
der_encode_object_identifier	libtomcrypt/src/pk/asn1/der/object_identifier/der_encode_object_identifier.c	/^int der_encode_object_identifier(unsigned long *words, unsigned long  nwords,$/;"	f
der_encode_octet_string	libtomcrypt/src/pk/asn1/der/octet/der_encode_octet_string.c	/^int der_encode_octet_string(const unsigned char *in, unsigned long inlen,$/;"	f
der_encode_printable_string	libtomcrypt/src/pk/asn1/der/printable_string/der_encode_printable_string.c	/^int der_encode_printable_string(const unsigned char *in, unsigned long inlen,$/;"	f
der_encode_sequence	libtomcrypt/src/headers/tomcrypt_pk.h	412;"	d
der_encode_sequence_ex	libtomcrypt/src/pk/asn1/der/sequence/der_encode_sequence_ex.c	/^int der_encode_sequence_ex(ltc_asn1_list *list, unsigned long inlen,$/;"	f
der_encode_sequence_multi	libtomcrypt/src/pk/asn1/der/sequence/der_encode_sequence_multi.c	/^int der_encode_sequence_multi(unsigned char *out, unsigned long *outlen, ...)$/;"	f
der_encode_set	libtomcrypt/src/pk/asn1/der/set/der_encode_set.c	/^int der_encode_set(ltc_asn1_list *list, unsigned long inlen,$/;"	f
der_encode_setof	libtomcrypt/src/pk/asn1/der/set/der_encode_setof.c	/^int der_encode_setof(ltc_asn1_list *list, unsigned long inlen,$/;"	f
der_encode_short_integer	libtomcrypt/src/pk/asn1/der/short_integer/der_encode_short_integer.c	/^int der_encode_short_integer(unsigned long num, unsigned char *out, unsigned long *outlen)$/;"	f
der_encode_utctime	libtomcrypt/src/pk/asn1/der/utctime/der_encode_utctime.c	/^int der_encode_utctime(ltc_utctime *utctime, $/;"	f
der_encode_utf8_string	libtomcrypt/src/pk/asn1/der/utf8/der_encode_utf8_string.c	/^int der_encode_utf8_string(const wchar_t *in,  unsigned long inlen,$/;"	f
der_flexi_test	libtomcrypt/testprof/der_tests.c	/^static void der_flexi_test(void)$/;"	f	file:
der_ia5_char_encode	libtomcrypt/src/pk/asn1/der/ia5/der_length_ia5_string.c	/^int der_ia5_char_encode(int c)$/;"	f
der_ia5_value_decode	libtomcrypt/src/pk/asn1/der/ia5/der_length_ia5_string.c	/^int der_ia5_value_decode(int v)$/;"	f
der_length_bit_string	libtomcrypt/src/pk/asn1/der/bit/der_length_bit_string.c	/^int der_length_bit_string(unsigned long nbits, unsigned long *outlen)$/;"	f
der_length_boolean	libtomcrypt/src/pk/asn1/der/boolean/der_length_boolean.c	/^int der_length_boolean(unsigned long *outlen)$/;"	f
der_length_ia5_string	libtomcrypt/src/pk/asn1/der/ia5/der_length_ia5_string.c	/^int der_length_ia5_string(const unsigned char *octets, unsigned long noctets, unsigned long *outlen)$/;"	f
der_length_integer	libtomcrypt/src/pk/asn1/der/integer/der_length_integer.c	/^int der_length_integer(void *num, unsigned long *outlen)$/;"	f
der_length_object_identifier	libtomcrypt/src/pk/asn1/der/object_identifier/der_length_object_identifier.c	/^int der_length_object_identifier(unsigned long *words, unsigned long nwords, unsigned long *outlen)$/;"	f
der_length_octet_string	libtomcrypt/src/pk/asn1/der/octet/der_length_octet_string.c	/^int der_length_octet_string(unsigned long noctets, unsigned long *outlen)$/;"	f
der_length_printable_string	libtomcrypt/src/pk/asn1/der/printable_string/der_length_printable_string.c	/^int der_length_printable_string(const unsigned char *octets, unsigned long noctets, unsigned long *outlen)$/;"	f
der_length_sequence	libtomcrypt/src/pk/asn1/der/sequence/der_length_sequence.c	/^int der_length_sequence(ltc_asn1_list *list, unsigned long inlen,$/;"	f
der_length_set	libtomcrypt/src/headers/tomcrypt_pk.h	424;"	d
der_length_short_integer	libtomcrypt/src/pk/asn1/der/short_integer/der_length_short_integer.c	/^int der_length_short_integer(unsigned long num, unsigned long *outlen)$/;"	f
der_length_utctime	libtomcrypt/src/pk/asn1/der/utctime/der_length_utctime.c	/^int der_length_utctime(ltc_utctime *utctime, unsigned long *outlen)$/;"	f
der_length_utf8_string	libtomcrypt/src/pk/asn1/der/utf8/der_length_utf8_string.c	/^int der_length_utf8_string(const wchar_t *in, unsigned long noctets, unsigned long *outlen)$/;"	f
der_object_identifier_bits	libtomcrypt/src/pk/asn1/der/object_identifier/der_length_object_identifier.c	/^unsigned long der_object_identifier_bits(unsigned long x)$/;"	f
der_printable_char_encode	libtomcrypt/src/pk/asn1/der/printable_string/der_length_printable_string.c	/^int der_printable_char_encode(int c)$/;"	f
der_printable_value_decode	libtomcrypt/src/pk/asn1/der/printable_string/der_length_printable_string.c	/^int der_printable_value_decode(int v)$/;"	f
der_sequence_free	libtomcrypt/src/pk/asn1/der/sequence/der_sequence_free.c	/^void der_sequence_free(ltc_asn1_list *in)$/;"	f
der_set_test	libtomcrypt/testprof/der_tests.c	/^static void der_set_test(void)$/;"	f	file:
der_tests	libtomcrypt/testprof/der_tests.c	/^int der_tests(void)$/;"	f
der_utf8_charsize	libtomcrypt/src/pk/asn1/der/utf8/der_length_utf8_string.c	/^unsigned long der_utf8_charsize(const wchar_t c)$/;"	f
des	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct des_key des;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::des_key
des3	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct des3_key des3;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::des3_key
des3_desc	libtomcrypt/src/ciphers/des.c	/^const struct ltc_cipher_descriptor des3_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
des3_done	libtomcrypt/src/ciphers/des.c	/^void des3_done(symmetric_key *skey)$/;"	f
des3_ecb_decrypt	libtomcrypt/src/ciphers/des.c	/^int des3_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
des3_ecb_encrypt	libtomcrypt/src/ciphers/des.c	/^int des3_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
des3_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct des3_key {$/;"	s
des3_keysize	libtomcrypt/src/ciphers/des.c	/^int des3_keysize(int *keysize)$/;"	f
des3_setup	libtomcrypt/src/ciphers/des.c	/^int des3_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
des3_test	libtomcrypt/src/ciphers/des.c	/^int des3_test(void)$/;"	f
des_fp	libtomcrypt/src/ciphers/des.c	/^static const ulong64 des_fp[8][256] = {$/;"	v	file:
des_ip	libtomcrypt/src/ciphers/des.c	/^static const ulong64 des_ip[8][256] = {$/;"	v	file:
des_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct des_key {$/;"	s
desfunc	libtomcrypt/src/ciphers/des.c	/^static void desfunc(ulong32 *block, const ulong32 *keys)$/;"	f	file:
deskey	libtomcrypt/src/ciphers/des.c	/^static void deskey(const unsigned char *key, short edf, ulong32 *keyout)$/;"	f	file:
dh_K	session.h	/^	mp_int * dh_K; \/* SSH_MSG_KEXDH_REPLY and sending SSH_MSH_NEWKEYS *\/$/;"	m	struct:sshsession
dh_e	session.h	/^	mp_int *dh_e, *dh_x; \/* Used during KEX *\/$/;"	m	struct:clientsession
dh_p_1	common-kex.c	/^static const unsigned char dh_p_1[DH_P_1_LEN] = {$/;"	v	file:
dh_p_14	common-kex.c	/^static const unsigned char dh_p_14[DH_P_14_LEN] = {$/;"	v	file:
dh_val_algo	session.h	/^	int dh_val_algo; \/* KEX algorithm corresponding to current dh_e and dh_x *\/$/;"	m	struct:clientsession
dh_x	session.h	/^	mp_int *dh_e, *dh_x; \/* Used during KEX *\/$/;"	m	struct:clientsession
direct	tcpfwd.h	/^	enum {direct, forwarded} tcp_type;$/;"	e	enum:TCPListener::__anon46
disablekey	svr-runopts.c	/^static void disablekey(int type, const char* filename) {$/;"	f	file:
disallow_core	dbutil.c	/^void disallow_core() {$/;"	f
div_2	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*div_2)(void *a, void *b);$/;"	m	struct:__anon11
div_2	libtomcrypt/src/math/gmp_desc.c	/^static int div_2(void *a, void *b)$/;"	f	file:
div_2	libtomcrypt/src/math/ltm_desc.c	/^static int div_2(void *a, void *b)$/;"	f	file:
div_2	libtomcrypt/src/math/tfm_desc.c	/^static int div_2(void *a, void *b)$/;"	f	file:
divide	libtomcrypt/src/math/gmp_desc.c	/^static int divide(void *a, void *b, void *c, void *d)$/;"	f	file:
divide	libtomcrypt/src/math/ltm_desc.c	/^static int divide(void *a, void *b, void *c, void *d)$/;"	f	file:
divide	libtomcrypt/src/math/tfm_desc.c	/^static int divide(void *a, void *b, void *c, void *d)$/;"	f	file:
dk	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 ek[32], dk[32];$/;"	m	struct:des_key
dk	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 ek[3][32], dk[3][32];$/;"	m	struct:des3_key
do_cmd	scp.c	/^do_cmd(char *host, char *remuser, char *cmd, int *fdin, int *fdout, int argc)$/;"	f
do_cmd_pid	scp.c	/^pid_t do_cmd_pid = -1;$/;"	v
do_convert	dropbearconvert.c	/^static int do_convert(int intype, const char* infile, int outtype,$/;"	f	file:
do_escape	cli-chansession.c	/^do_escape(unsigned char c) {$/;"	f	file:
do_local_cmd	scp.c	/^do_local_cmd(arglist *a)$/;"	f	file:
domotd	runopts.h	/^	int domotd;$/;"	m	struct:svr_runopts
done	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   void (*done)(symmetric_key *skey);      $/;"	m	struct:ltc_cipher_descriptor
done	libtomcrypt/src/headers/tomcrypt_hash.h	/^    int (*done)(hash_state *hash, unsigned char *out);$/;"	m	struct:ltc_hash_descriptor
done	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int (*done)(prng_state *prng);$/;"	m	struct:ltc_prng_descriptor
donefirstkex	kex.h	/^	unsigned donefirstkex : 1; \/* Set to 1 after the first kex has completed,$/;"	m	struct:KEXState
donefirstkex	session.h	/^	unsigned donefirstkex : 1; \/* Set when we set sentnewkeys, never reset *\/$/;"	m	struct:clientsession
donerandinit	random.c	/^static int donerandinit = 0;$/;"	v	file:
dp	libtomcrypt/src/headers/tomcrypt_pk.h	/^	const ltc_ecc_set_type *dp;$/;"	m	struct:__anon30
dp	libtommath/mtest/mpi.h	/^  mp_digit     *dp;      \/* the digits themselves      *\/$/;"	m	struct:__anon42
dp	libtommath/tommath.h	/^    mp_digit *dp;$/;"	m	struct:__anon43
draw	libtommath/demo/demo.c	/^static void draw(mp_int * a)$/;"	f	file:
draw	libtommath/demo/timing.c	/^static void draw(mp_int * a)$/;"	f	file:
draw_func	libtommath/dep.pl	/^sub draw_func()$/;"	s
dropbear_3des	common-algo.c	/^static const struct dropbear_cipher dropbear_3des = $/;"	v	typeref:struct:dropbear_cipher	file:
dropbear_aes128	common-algo.c	/^static const struct dropbear_cipher dropbear_aes128 = $/;"	v	typeref:struct:dropbear_cipher	file:
dropbear_aes256	common-algo.c	/^static const struct dropbear_cipher dropbear_aes256 = $/;"	v	typeref:struct:dropbear_cipher	file:
dropbear_assert	dbutil.h	95;"	d
dropbear_big_endian_ctr_start	common-algo.c	/^static int dropbear_big_endian_ctr_start(int cipher, $/;"	f	file:
dropbear_blowfish	common-algo.c	/^static const struct dropbear_cipher dropbear_blowfish = $/;"	v	typeref:struct:dropbear_cipher	file:
dropbear_cipher	algo.h	/^struct dropbear_cipher {$/;"	s
dropbear_cipher_mode	algo.h	/^struct dropbear_cipher_mode {$/;"	s
dropbear_close	dbutil.c	/^void dropbear_close(const char* format, ...) {$/;"	f
dropbear_dss_key	dss.h	/^} dropbear_dss_key;$/;"	t	typeref:struct:__anon6
dropbear_exit	dbutil.c	/^void dropbear_exit(const char* format, ...) {$/;"	f
dropbear_hash	algo.h	/^struct dropbear_hash {$/;"	s
dropbear_listen	dbutil.c	/^int dropbear_listen(const char* address, const char* port,$/;"	f
dropbear_log	dbutil.c	/^void dropbear_log(int priority, const char* format, ...) {$/;"	f
dropbear_main	svr-main.c	/^int dropbear_main(int argc, char ** argv)$/;"	f
dropbear_md5	common-algo.c	/^static const struct dropbear_hash dropbear_md5 = $/;"	v	typeref:struct:dropbear_hash	file:
dropbear_mode_cbc	common-algo.c	/^const struct dropbear_cipher_mode dropbear_mode_cbc =$/;"	v	typeref:struct:dropbear_cipher_mode
dropbear_mode_ctr	common-algo.c	/^const struct dropbear_cipher_mode dropbear_mode_ctr =$/;"	v	typeref:struct:dropbear_cipher_mode
dropbear_mode_none	common-algo.c	/^const struct dropbear_cipher_mode dropbear_mode_none =$/;"	v	typeref:struct:dropbear_cipher_mode
dropbear_nocipher	common-algo.c	/^const struct dropbear_cipher dropbear_nocipher =$/;"	v	typeref:struct:dropbear_cipher
dropbear_nohash	common-algo.c	/^const struct dropbear_hash dropbear_nohash =$/;"	v	typeref:struct:dropbear_hash
dropbear_read	keyimport.c	/^static sign_key *dropbear_read(const char* filename) {$/;"	f	file:
dropbear_rsa_key	rsa.h	/^} dropbear_rsa_key;$/;"	t	typeref:struct:__anon48
dropbear_sha1	common-algo.c	/^static const struct dropbear_hash dropbear_sha1 = $/;"	v	typeref:struct:dropbear_hash	file:
dropbear_sha1_96	common-algo.c	/^static const struct dropbear_hash dropbear_sha1_96 = $/;"	v	typeref:struct:dropbear_hash	file:
dropbear_sha2_256	common-algo.c	/^static const struct dropbear_hash dropbear_sha2_256 = $/;"	v	typeref:struct:dropbear_hash	file:
dropbear_sha2_512	common-algo.c	/^static const struct dropbear_hash dropbear_sha2_512 =$/;"	v	typeref:struct:dropbear_hash	file:
dropbear_trace	dbutil.c	/^void dropbear_trace(const char* format, ...) {$/;"	f
dropbear_trace2	dbutil.c	/^void dropbear_trace2(const char* format, ...) {$/;"	f
dropbear_twofish128	common-algo.c	/^static const struct dropbear_cipher dropbear_twofish128 = $/;"	v	typeref:struct:dropbear_cipher	file:
dropbear_twofish256	common-algo.c	/^static const struct dropbear_cipher dropbear_twofish256 = $/;"	v	typeref:struct:dropbear_cipher	file:
dropbear_write	keyimport.c	/^static int dropbear_write(const char*filename, sign_key * key) {$/;"	f	file:
dropbearconvert_main	dropbearconvert.c	/^int dropbearconvert_main(int argc, char ** argv) {$/;"	f
dropbearconvertobjs	Makefile	/^dropbearconvertobjs=$(COMMONOBJS) $(CONVERTOBJS)$/;"	m
dropbearkey_main	dropbearkey.c	/^int dropbearkey_main(int argc, char ** argv) {$/;"	f
dropbearkeyobjs	Makefile	/^dropbearkeyobjs=$(COMMONOBJS) $(KEYOBJS)$/;"	m
dropbearobjs	Makefile	/^dropbearobjs=$(COMMONOBJS) $(CLISVROBJS) $(SVROBJS) -lcrypt $/;"	m
dsa_decrypt_key	libtomcrypt/src/pk/dsa/dsa_decrypt_key.c	/^int dsa_decrypt_key(const unsigned char *in,  unsigned long  inlen,$/;"	f
dsa_encrypt_key	libtomcrypt/src/pk/dsa/dsa_encrypt_key.c	/^int dsa_encrypt_key(const unsigned char *in,   unsigned long inlen,$/;"	f
dsa_export	libtomcrypt/src/pk/dsa/dsa_export.c	/^int dsa_export(unsigned char *out, unsigned long *outlen, int type, dsa_key *key)$/;"	f
dsa_free	libtomcrypt/src/pk/dsa/dsa_free.c	/^void dsa_free(dsa_key *key)$/;"	f
dsa_import	libtomcrypt/src/pk/dsa/dsa_import.c	/^int dsa_import(const unsigned char *in, unsigned long inlen, dsa_key *key)$/;"	f
dsa_key	libtomcrypt/src/headers/tomcrypt_pk.h	/^} dsa_key;$/;"	t	typeref:struct:__anon31
dsa_make_key	libtomcrypt/src/pk/dsa/dsa_make_key.c	/^int dsa_make_key(prng_state *prng, int wprng, int group_size, int modulus_size, dsa_key *key)$/;"	f
dsa_shared_secret	libtomcrypt/src/pk/dsa/dsa_shared_secret.c	/^int dsa_shared_secret(void          *private_key, void *base,$/;"	f
dsa_sign_hash	libtomcrypt/src/pk/dsa/dsa_sign_hash.c	/^int dsa_sign_hash(const unsigned char *in,  unsigned long inlen,$/;"	f
dsa_sign_hash_raw	libtomcrypt/src/pk/dsa/dsa_sign_hash.c	/^int dsa_sign_hash_raw(const unsigned char *in,  unsigned long inlen,$/;"	f
dsa_test	libtomcrypt/testprof/dsa_test.c	/^int dsa_test(void)$/;"	f
dsa_verify_hash	libtomcrypt/src/pk/dsa/dsa_verify_hash.c	/^int dsa_verify_hash(const unsigned char *sig, unsigned long siglen,$/;"	f
dsa_verify_hash_raw	libtomcrypt/src/pk/dsa/dsa_verify_hash.c	/^int dsa_verify_hash_raw(         void   *r,          void   *s,$/;"	f
dsa_verify_key	libtomcrypt/src/pk/dsa/dsa_verify_key.c	/^int dsa_verify_key(dsa_key *key, int *stat)$/;"	f
dss_key_free	dss.c	/^void dss_key_free(dropbear_dss_key *key) {$/;"	f
dsskey	signkey.h	/^	dropbear_dss_key * dsskey;$/;"	m	struct:SIGN_key
dsskeyfile	runopts.h	/^	char * dsskeyfile;$/;"	m	struct:svr_runopts
dummy	libtomcrypt/src/headers/tomcrypt_hash.h	/^    char dummy[1];$/;"	m	union:Hash_state
dummy	libtomcrypt/src/headers/tomcrypt_prng.h	/^    char dummy[1];$/;"	m	union:Prng_state
e	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *e; $/;"	m	struct:Rsa_key
e	rsa.h	/^	mp_int* e;$/;"	m	struct:__anon48
eK	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 eK[60], dK[60];$/;"	m	struct:rijndael_key
eax_addheader	libtomcrypt/src/encauth/eax/eax_addheader.c	/^int eax_addheader(eax_state *eax, const unsigned char *header, $/;"	f
eax_decrypt	libtomcrypt/src/encauth/eax/eax_decrypt.c	/^int eax_decrypt(eax_state *eax, const unsigned char *ct, unsigned char *pt, $/;"	f
eax_decrypt_verify_memory	libtomcrypt/src/encauth/eax/eax_decrypt_verify_memory.c	/^int eax_decrypt_verify_memory(int cipher,$/;"	f
eax_done	libtomcrypt/src/encauth/eax/eax_done.c	/^int eax_done(eax_state *eax, unsigned char *tag, unsigned long *taglen)$/;"	f
eax_encrypt	libtomcrypt/src/encauth/eax/eax_encrypt.c	/^int eax_encrypt(eax_state *eax, const unsigned char *pt, unsigned char *ct, $/;"	f
eax_encrypt_authenticate_memory	libtomcrypt/src/encauth/eax/eax_encrypt_authenticate_memory.c	/^int eax_encrypt_authenticate_memory(int cipher,$/;"	f
eax_gen	libtomcrypt/demos/tv_gen.c	/^void eax_gen(void)$/;"	f
eax_init	libtomcrypt/src/encauth/eax/eax_init.c	/^int eax_init(eax_state *eax, int cipher, $/;"	f
eax_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} eax_state;$/;"	t	typeref:struct:__anon15
eax_test	libtomcrypt/src/encauth/eax/eax_test.c	/^int eax_test(void)$/;"	f
ecb_decrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*ecb_decrypt)(const unsigned char *ct, unsigned char *pt, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
ecb_decrypt	libtomcrypt/src/modes/ecb/ecb_decrypt.c	/^int ecb_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_ECB *ecb)$/;"	f
ecb_done	libtomcrypt/src/modes/ecb/ecb_done.c	/^int ecb_done(symmetric_ECB *ecb)$/;"	f
ecb_encrypt	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*ecb_encrypt)(const unsigned char *pt, unsigned char *ct, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
ecb_encrypt	libtomcrypt/src/modes/ecb/ecb_encrypt.c	/^int ecb_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_ECB *ecb)$/;"	f
ecb_start	libtomcrypt/src/modes/ecb/ecb_start.c	/^int ecb_start(int cipher, const unsigned char *key, int keylen, int num_rounds, symmetric_ECB *ecb)$/;"	f
ecc_ansi_x963_export	libtomcrypt/src/pk/ecc/ecc_ansi_x963_export.c	/^int ecc_ansi_x963_export(ecc_key *key, unsigned char *out, unsigned long *outlen)$/;"	f
ecc_ansi_x963_import	libtomcrypt/src/pk/ecc/ecc_ansi_x963_import.c	/^int ecc_ansi_x963_import(const unsigned char *in, unsigned long inlen, ecc_key *key)$/;"	f
ecc_ansi_x963_import_ex	libtomcrypt/src/pk/ecc/ecc_ansi_x963_import.c	/^int ecc_ansi_x963_import_ex(const unsigned char *in, unsigned long inlen, ecc_key *key, ltc_ecc_set_type *dp)$/;"	f
ecc_decrypt_key	libtomcrypt/src/pk/ecc/ecc_decrypt_key.c	/^int ecc_decrypt_key(const unsigned char *in,  unsigned long  inlen,$/;"	f
ecc_encrypt_key	libtomcrypt/src/pk/ecc/ecc_encrypt_key.c	/^int ecc_encrypt_key(const unsigned char *in,   unsigned long inlen,$/;"	f
ecc_export	libtomcrypt/src/pk/ecc/ecc_export.c	/^int ecc_export(unsigned char *out, unsigned long *outlen, int type, ecc_key *key)$/;"	f
ecc_free	libtomcrypt/src/pk/ecc/ecc_free.c	/^void ecc_free(ecc_key *key)$/;"	f
ecc_gen	libtomcrypt/demos/tv_gen.c	/^void ecc_gen(void)$/;"	f
ecc_get_size	libtomcrypt/src/pk/ecc/ecc_get_size.c	/^int ecc_get_size(ecc_key *key)$/;"	f
ecc_import	libtomcrypt/src/pk/ecc/ecc_import.c	/^int ecc_import(const unsigned char *in, unsigned long inlen, ecc_key *key)$/;"	f
ecc_import_ex	libtomcrypt/src/pk/ecc/ecc_import.c	/^int ecc_import_ex(const unsigned char *in, unsigned long inlen, ecc_key *key, const ltc_ecc_set_type *dp)$/;"	f
ecc_key	libtomcrypt/src/headers/tomcrypt_pk.h	/^} ecc_key;$/;"	t	typeref:struct:__anon30
ecc_make_key	libtomcrypt/src/pk/ecc/ecc_make_key.c	/^int ecc_make_key(prng_state *prng, int wprng, int keysize, ecc_key *key)$/;"	f
ecc_make_key_ex	libtomcrypt/src/pk/ecc/ecc_make_key.c	/^int ecc_make_key_ex(prng_state *prng, int wprng, ecc_key *key, const ltc_ecc_set_type *dp)$/;"	f
ecc_map	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*ecc_map)(ecc_point *P, void *modulus, void *mp);$/;"	m	struct:__anon11
ecc_mul2add	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*ecc_mul2add)(ecc_point *A, void *kA,$/;"	m	struct:__anon11
ecc_point	libtomcrypt/src/headers/tomcrypt_math.h	/^   typedef void ecc_point;$/;"	t
ecc_point	libtomcrypt/src/headers/tomcrypt_pk.h	/^} ecc_point;$/;"	t	typeref:struct:__anon29
ecc_ptadd	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*ecc_ptadd)(ecc_point *P, ecc_point *Q, ecc_point *R, void *modulus, void *mp);$/;"	m	struct:__anon11
ecc_ptdbl	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*ecc_ptdbl)(ecc_point *P, ecc_point *R, void *modulus, void *mp);$/;"	m	struct:__anon11
ecc_ptmul	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*ecc_ptmul)(void *k, ecc_point *G, ecc_point *R, void *modulus, int map);$/;"	m	struct:__anon11
ecc_shared_secret	libtomcrypt/src/pk/ecc/ecc_shared_secret.c	/^int ecc_shared_secret(ecc_key *private_key, ecc_key *public_key,$/;"	f
ecc_sign_hash	libtomcrypt/src/pk/ecc/ecc_sign_hash.c	/^int ecc_sign_hash(const unsigned char *in,  unsigned long inlen, $/;"	f
ecc_sizes	libtomcrypt/src/pk/ecc/ecc_sizes.c	/^void ecc_sizes(int *low, int *high)$/;"	f
ecc_test	libtomcrypt/src/pk/ecc/ecc_test.c	/^int ecc_test(void)$/;"	f
ecc_test_shamir	libtomcrypt/testprof/ecc_test.c	/^int ecc_test_shamir(void)$/;"	f
ecc_tests	libtomcrypt/testprof/ecc_test.c	/^int ecc_tests (void)$/;"	f
ecc_tests	libtomcrypt/testprof/ecc_test.c	/^int ecc_tests(void)$/;"	f
ecc_verify_hash	libtomcrypt/src/pk/ecc/ecc_verify_hash.c	/^int ecc_verify_hash(const unsigned char *sig,  unsigned long siglen,$/;"	f
edge	libtomcrypt/src/pk/asn1/der/set/der_encode_setof.c	/^struct edge {$/;"	s	file:
ek	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 ek[32], dk[32];$/;"	m	struct:des_key
ek	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 ek[3][32], dk[3][32];$/;"	m	struct:des3_key
enable_compress	runopts.h	/^	int enable_compress;$/;"	m	struct:runopts
encrypt	algo.h	/^	int (*encrypt)(const unsigned char *pt, unsigned char *ct, $/;"	m	struct:dropbear_cipher_mode
encrypt_packet	packet.c	/^void encrypt_packet() {$/;"	f
encrypted	keyimport.c	/^	int encrypted;$/;"	m	struct:openssh_key	file:
end_pos	progressmeter.c	/^static off_t end_pos;		\/* ending position of transfer *\/$/;"	v	file:
endusershell	compat.c	/^void endusershell() {$/;"	f
enqueue	queue.c	/^void enqueue(struct Queue* queue, void* item) {$/;"	f
enqueue_reply_packet	packet.c	/^static void enqueue_reply_packet() {$/;"	f	file:
entry	libtomcrypt/testprof/tomcrypt_test.h	/^    int  (*entry)(void);$/;"	m	struct:__anon8
err_2_str	libtomcrypt/src/misc/error_to_string.c	/^static const char *err_2_str[] =$/;"	v	file:
errfd	channel.h	/^	int errfd; \/* used like writefd or readfd, depending if it's client or server.$/;"	m	struct:Channel
errno	libtomcrypt/demos/encrypt.c	/^int errno;$/;"	v
errno	libtomcrypt/demos/hashsum.c	/^int errno;$/;"	v
error_to_string	libtomcrypt/src/misc/error_to_string.c	/^const char *error_to_string(int err)$/;"	f
errs	scp.c	/^int errs, remin, remout;$/;"	v
examine	queue.c	/^void *examine(struct Queue* queue) {$/;"	f
exec_prefix	Makefile	/^exec_prefix=${prefix}$/;"	m
exec_proxy_cmd	cli-main.c	/^static void exec_proxy_cmd(void *user_data_cmd) {$/;"	f	file:
execchild	svr-chansession.c	/^static void execchild(void *user_data) {$/;"	f	file:
exit	chansession.h	/^	struct exitinfo exit;$/;"	m	struct:ChanSess	typeref:struct:ChanSess::exitinfo
exit	loginrec.h	/^	int        exit;                        \/* process exit status *\/$/;"	m	struct:logininfo
exitcore	chansession.h	/^	int exitcore;$/;"	m	struct:exitinfo
exitflag	common-session.c	/^int exitflag = 0; \/* GLOBAL *\/$/;"	v
exitinfo	chansession.h	/^struct exitinfo {$/;"	s
exitpid	chansession.h	/^	int exitpid; \/* -1 if not exited *\/$/;"	m	struct:exitinfo
exitsignal	chansession.h	/^	int exitsignal;$/;"	m	struct:exitinfo
exitstatus	chansession.h	/^	int exitstatus;$/;"	m	struct:exitinfo
export_size	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int  export_size;$/;"	m	struct:ltc_prng_descriptor
exptmod	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*exptmod)(void *a, void *b, void *c, void *d);$/;"	m	struct:__anon11
exptmod	libtomcrypt/src/math/gmp_desc.c	/^static int exptmod(void *a, void *b, void *c, void *d)$/;"	f	file:
exptmod	libtomcrypt/src/math/ltm_desc.c	/^static int exptmod(void *a, void *b, void *c, void *d)$/;"	f	file:
exptmod	libtomcrypt/src/math/tfm_desc.c	/^static int exptmod(void *a, void *b, void *c, void *d)$/;"	f	file:
extra_session_cleanup	session.h	/^	void(*extra_session_cleanup)(); \/* client or server specific cleanup *\/$/;"	m	struct:sshsession
extrabuf	channel.h	/^	circbuffer *extrabuf; \/* extended-data for the program - used like writebuf$/;"	m	struct:Channel
f8_decrypt	libtomcrypt/src/modes/f8/f8_decrypt.c	/^int f8_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_F8 *f8)$/;"	f
f8_done	libtomcrypt/src/modes/f8/f8_done.c	/^int f8_done(symmetric_F8 *f8)$/;"	f
f8_encrypt	libtomcrypt/src/modes/f8/f8_encrypt.c	/^int f8_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_F8 *f8)$/;"	f
f8_getiv	libtomcrypt/src/modes/f8/f8_getiv.c	/^int f8_getiv(unsigned char *IV, unsigned long *len, symmetric_F8 *f8)$/;"	f
f8_setiv	libtomcrypt/src/modes/f8/f8_setiv.c	/^int f8_setiv(const unsigned char *IV, unsigned long len, symmetric_F8 *f8)$/;"	f
f8_start	libtomcrypt/src/modes/f8/f8_start.c	/^int f8_start(                int  cipher, const unsigned char *IV, $/;"	f
f8_test_mode	libtomcrypt/src/modes/f8/f8_test_mode.c	/^int f8_test_mode(void)$/;"	f
f9_done	libtomcrypt/src/mac/f9/f9_done.c	/^int f9_done(f9_state *f9, unsigned char *out, unsigned long *outlen)$/;"	f
f9_file	libtomcrypt/src/mac/f9/f9_file.c	/^int f9_file(int cipher,$/;"	f
f9_init	libtomcrypt/src/mac/f9/f9_init.c	/^int f9_init(f9_state *f9, int cipher, const unsigned char *key, unsigned long keylen)$/;"	f
f9_memory	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*f9_memory)($/;"	m	struct:ltc_cipher_descriptor
f9_memory	libtomcrypt/src/mac/f9/f9_memory.c	/^int f9_memory(int cipher, $/;"	f
f9_memory_multi	libtomcrypt/src/mac/f9/f9_memory_multi.c	/^int f9_memory_multi(int cipher, $/;"	f
f9_process	libtomcrypt/src/mac/f9/f9_process.c	/^int f9_process(f9_state *f9, const unsigned char *in, unsigned long inlen)$/;"	f
f9_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} f9_state;$/;"	t	typeref:struct:__anon19
f9_test	libtomcrypt/src/mac/f9/f9_test.c	/^int f9_test(void)$/;"	f
fail_assert	dbutil.c	/^void fail_assert(const char* expr, const char* file, int line) {$/;"	f
failcount	auth.h	/^	unsigned int failcount; \/* Number of (failed) authentication attempts.*\/$/;"	m	struct:AuthState
fast_mp_invmod	libtommath/bn_fast_mp_invmod.c	/^int fast_mp_invmod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
fast_mp_invmod	libtommath/pre_gen/mpi.c	/^int fast_mp_invmod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
fast_mp_montgomery_reduce	libtommath/bn_fast_mp_montgomery_reduce.c	/^int fast_mp_montgomery_reduce (mp_int * x, mp_int * n, mp_digit rho)$/;"	f
fast_mp_montgomery_reduce	libtommath/pre_gen/mpi.c	/^int fast_mp_montgomery_reduce (mp_int * x, mp_int * n, mp_digit rho)$/;"	f
fast_s_mp_mul_digs	libtommath/bn_fast_s_mp_mul_digs.c	/^int fast_s_mp_mul_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
fast_s_mp_mul_digs	libtommath/pre_gen/mpi.c	/^int fast_s_mp_mul_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
fast_s_mp_mul_high_digs	libtommath/bn_fast_s_mp_mul_high_digs.c	/^int fast_s_mp_mul_high_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
fast_s_mp_mul_high_digs	libtommath/pre_gen/mpi.c	/^int fast_s_mp_mul_high_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
fast_s_mp_sqr	libtommath/bn_fast_s_mp_sqr.c	/^int fast_s_mp_sqr (mp_int * a, mp_int * b)$/;"	f
fast_s_mp_sqr	libtommath/pre_gen/mpi.c	/^int fast_s_mp_sqr (mp_int * a, mp_int * b)$/;"	f
fatal	scpmisc.c	/^void fatal(char* fmt,...)$/;"	f
fetch_length	libtomcrypt/src/pk/asn1/der/sequence/der_decode_sequence_flexi.c	/^static unsigned long fetch_length(const unsigned char *in, unsigned long inlen)$/;"	f	file:
file	progressmeter.c	/^static char *file;		\/* name of the file being transferred *\/$/;"	v	file:
filename	signkey.h	/^	char *filename;$/;"	m	struct:SIGN_key
fill_own_user	cli-runopts.c	/^static void fill_own_user() {$/;"	f	file:
fill_passwd	common-session.c	/^void fill_passwd(const char* username) {$/;"	f
find_base	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^static int find_base(ecc_point *g)$/;"	f	file:
find_cipher	libtomcrypt/src/misc/crypt/crypt_find_cipher.c	/^int find_cipher(const char *name)$/;"	f
find_cipher_any	libtomcrypt/src/misc/crypt/crypt_find_cipher_any.c	/^int find_cipher_any(const char *name, int blocklen, int keylen)$/;"	f
find_cipher_id	libtomcrypt/src/misc/crypt/crypt_find_cipher_id.c	/^int find_cipher_id(unsigned char ID)$/;"	f
find_hash	libtomcrypt/src/misc/crypt/crypt_find_hash.c	/^int find_hash(const char *name)$/;"	f
find_hash_any	libtomcrypt/src/misc/crypt/crypt_find_hash_any.c	/^*\/int find_hash_any(const char *name, int digestlen)$/;"	f
find_hash_id	libtomcrypt/src/misc/crypt/crypt_find_hash_id.c	/^int find_hash_id(unsigned char ID)$/;"	f
find_hash_oid	libtomcrypt/src/misc/crypt/crypt_find_hash_oid.c	/^int find_hash_oid(const unsigned long *ID, unsigned long IDlen)$/;"	f
find_hole	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^static int find_hole(void)$/;"	f	file:
find_prng	libtomcrypt/src/misc/crypt/crypt_find_prng.c	/^int find_prng(const char *name)$/;"	f
first	list.h	/^    m_list_elem *first;$/;"	m	struct:_m_list
flag	libtomcrypt/src/headers/tomcrypt_prng.h	/^                 flag,           \/* first add_entropy call or not? *\/$/;"	m	struct:sober128_prng
flushing	channel.h	/^	int flushing;$/;"	m	struct:Channel
forced_command	auth.h	/^	unsigned char * forced_command;$/;"	m	struct:PubKeyOptions
forkbg	runopts.h	/^	int forkbg;$/;"	m	struct:svr_runopts
format_rate	progressmeter.c	/^format_rate(char *buf, int size, off_t bytes)$/;"	f	file:
format_size	progressmeter.c	/^format_size(char *buf, int size, off_t bytes)$/;"	f	file:
fortuna	libtomcrypt/src/headers/tomcrypt_prng.h	/^    struct fortuna_prng   fortuna;$/;"	m	union:Prng_state	typeref:struct:Prng_state::fortuna_prng
fortuna_add_entropy	libtomcrypt/src/prngs/fortuna.c	/^int fortuna_add_entropy(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
fortuna_desc	libtomcrypt/src/prngs/fortuna.c	/^const struct ltc_prng_descriptor fortuna_desc = {$/;"	v	typeref:struct:ltc_prng_descriptor
fortuna_done	libtomcrypt/src/prngs/fortuna.c	/^int fortuna_done(prng_state *prng)$/;"	f
fortuna_export	libtomcrypt/src/prngs/fortuna.c	/^int fortuna_export(unsigned char *out, unsigned long *outlen, prng_state *prng)$/;"	f
fortuna_import	libtomcrypt/src/prngs/fortuna.c	/^int fortuna_import(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
fortuna_prng	libtomcrypt/src/headers/tomcrypt_prng.h	/^struct fortuna_prng {$/;"	s
fortuna_read	libtomcrypt/src/prngs/fortuna.c	/^unsigned long fortuna_read(unsigned char *out, unsigned long outlen, prng_state *prng)$/;"	f
fortuna_ready	libtomcrypt/src/prngs/fortuna.c	/^int fortuna_ready(prng_state *prng)$/;"	f
fortuna_reseed	libtomcrypt/src/prngs/fortuna.c	/^static int fortuna_reseed(prng_state *prng)$/;"	f	file:
fortuna_start	libtomcrypt/src/prngs/fortuna.c	/^int fortuna_start(prng_state *prng)$/;"	f
fortuna_test	libtomcrypt/src/prngs/fortuna.c	/^int fortuna_test(void)$/;"	f
fortuna_update_iv	libtomcrypt/src/prngs/fortuna.c	/^static void fortuna_update_iv(prng_state *prng)$/;"	f	file:
forwarded	tcpfwd.h	/^	enum {direct, forwarded} tcp_type;$/;"	e	enum:TCPListener::__anon46
four_rounds	libtomcrypt/src/mac/pelican/pelican.c	/^static void four_rounds(pelican_state *pelmac)$/;"	f	file:
fp_cache	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^} fp_cache[FP_ENTRIES];$/;"	v	typeref:struct:__anon37	file:
freeaddrinfo	fake-rfc2553.c	/^freeaddrinfo(struct addrinfo *ai)$/;"	f
freeaddrinfo	fake-rfc2553.h	166;"	d
freeargs	scpmisc.c	/^freeargs(arglist *args)$/;"	f
g	dss.h	/^	mp_int* g;$/;"	m	struct:__anon6
g	libtomcrypt/src/headers/tomcrypt_pk.h	/^   void *g;$/;"	m	struct:__anon31
g	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^   ecc_point *g,              \/* cached COPY of base point *\/$/;"	m	struct:__anon37	file:
g1_func	libtomcrypt/src/ciphers/twofish/twofish.c	288;"	d	file:
g1_func	libtomcrypt/src/ciphers/twofish/twofish.c	323;"	d	file:
g_func	libtomcrypt/src/ciphers/skipjack.c	/^static unsigned g_func(unsigned w, int *kp, unsigned char *key)$/;"	f	file:
g_func	libtomcrypt/src/ciphers/twofish/twofish.c	/^static ulong32 g_func(ulong32 x, symmetric_key *key)$/;"	f	file:
g_func	libtomcrypt/src/ciphers/twofish/twofish.c	287;"	d	file:
gai_strerror	fake-rfc2553.c	/^gai_strerror(int err)$/;"	f
gai_strerror	fake-rfc2553.h	161;"	d
gcd	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*gcd)(void *a, void *b, void *c);$/;"	m	struct:__anon11
gcd	libtomcrypt/src/math/gmp_desc.c	/^static int gcd(void *a, void *b, void *c)$/;"	f	file:
gcd	libtomcrypt/src/math/ltm_desc.c	/^static int gcd(void *a, void *b, void *c)$/;"	f	file:
gcd	libtomcrypt/src/math/tfm_desc.c	/^static int gcd(void *a, void *b, void *c)$/;"	f	file:
gcm_add_aad	libtomcrypt/src/encauth/gcm/gcm_add_aad.c	/^int gcm_add_aad(gcm_state *gcm,$/;"	f
gcm_add_iv	libtomcrypt/src/encauth/gcm/gcm_add_iv.c	/^int gcm_add_iv(gcm_state *gcm, $/;"	f
gcm_done	libtomcrypt/src/encauth/gcm/gcm_done.c	/^int gcm_done(gcm_state *gcm, $/;"	f
gcm_gen	libtomcrypt/demos/tv_gen.c	/^void gcm_gen(void)$/;"	f
gcm_gf_mult	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	/^void gcm_gf_mult(const unsigned char *a, const unsigned char *b, unsigned char *c)$/;"	f
gcm_init	libtomcrypt/src/encauth/gcm/gcm_init.c	/^int gcm_init(gcm_state *gcm, int cipher, $/;"	f
gcm_memory	libtomcrypt/src/encauth/gcm/gcm_memory.c	/^int gcm_memory(      int           cipher,$/;"	f
gcm_mult_h	libtomcrypt/src/encauth/gcm/gcm_mult_h.c	/^void gcm_mult_h(gcm_state *gcm, unsigned char *I)$/;"	f
gcm_process	libtomcrypt/src/encauth/gcm/gcm_process.c	/^int gcm_process(gcm_state *gcm,$/;"	f
gcm_reset	libtomcrypt/src/encauth/gcm/gcm_reset.c	/^int gcm_reset(gcm_state *gcm)$/;"	f
gcm_rightshift	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	/^static void gcm_rightshift(unsigned char *a)$/;"	f	file:
gcm_shift_table	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	/^const unsigned char gcm_shift_table[256*2] = {$/;"	v
gcm_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} gcm_state;$/;"	t	typeref:struct:__anon17
gcm_test	libtomcrypt/src/encauth/gcm/gcm_test.c	/^int gcm_test(void)$/;"	f
gen_dss_priv_key	gendss.c	/^dropbear_dss_key * gen_dss_priv_key(unsigned int size) {$/;"	f
gen_kexdh_vals	common-kex.c	/^void gen_kexdh_vals(mp_int *dh_pub, mp_int *dh_priv) {$/;"	f
gen_new_keys	common-kex.c	/^static void gen_new_keys() {$/;"	f	file:
gen_new_zstream_recv	common-kex.c	/^static void gen_new_zstream_recv() {$/;"	f	file:
gen_new_zstream_trans	common-kex.c	/^static void gen_new_zstream_trans() {$/;"	f	file:
gen_prime	libtommath/etc/pprime.c	/^static void gen_prime (void)$/;"	f	file:
gen_random_mpint	random.c	/^void gen_random_mpint(mp_int *max, mp_int *rand) {$/;"	f
gen_rsa_priv_key	genrsa.c	/^dropbear_rsa_key * gen_rsa_priv_key(unsigned int size) {$/;"	f
generic_dropbear_exit	dbutil.c	/^static void generic_dropbear_exit(int exitcode, const char* format, $/;"	f	file:
generic_dropbear_log	dbutil.c	/^static void generic_dropbear_log(int UNUSED(priority), const char* format, $/;"	f	file:
genrandom	random.c	/^void genrandom(unsigned char* buf, unsigned int len) {$/;"	f
get_algo_usable	common-algo.c	/^get_algo_usable(algo_type algos[], const char * algo_name)$/;"	f
get_digit	libtomcrypt/src/headers/tomcrypt_math.h	/^   unsigned long (*get_digit)(void *a, int n);$/;"	m	struct:__anon11
get_digit	libtomcrypt/src/math/gmp_desc.c	/^static unsigned long get_digit(void *a, int n)$/;"	f	file:
get_digit	libtomcrypt/src/math/ltm_desc.c	/^static unsigned long get_digit(void *a, int n)$/;"	f	file:
get_digit	libtomcrypt/src/math/tfm_desc.c	/^static unsigned long get_digit(void *a, int n)$/;"	f	file:
get_digit_count	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*get_digit_count)(void *a);$/;"	m	struct:__anon11
get_digit_count	libtomcrypt/src/math/gmp_desc.c	/^static int get_digit_count(void *a)$/;"	f	file:
get_digit_count	libtomcrypt/src/math/ltm_desc.c	/^static int get_digit_count(void *a)$/;"	f	file:
get_digit_count	libtomcrypt/src/math/tfm_desc.c	/^static int get_digit_count(void *a)$/;"	f	file:
get_int	libtomcrypt/src/headers/tomcrypt_math.h	/^   unsigned long (*get_int)(void *a);$/;"	m	struct:__anon11
get_int	libtomcrypt/src/math/gmp_desc.c	/^static unsigned long get_int(void *a)$/;"	f	file:
get_int	libtomcrypt/src/math/ltm_desc.c	/^static unsigned long get_int(void *a)$/;"	f	file:
get_int	libtomcrypt/src/math/tfm_desc.c	/^static unsigned long get_int(void *a)$/;"	f	file:
get_listener	listener.c	/^struct Listener * get_listener(int type, void* typedata,$/;"	f
get_response	cli-authinteract.c	/^static unsigned char* get_response(unsigned char* prompt)$/;"	f	file:
get_socket_address	dbutil.c	/^void get_socket_address(int fd, char **local_host, char **local_port,$/;"	f
get_termmodes	svr-chansession.c	/^static void get_termmodes(struct ChanSess *chansess) {$/;"	f	file:
get_user_shell	common-session.c	/^const char* get_user_shell() {$/;"	f
getaddrinfo	fake-rfc2553.c	/^getaddrinfo(const char *hostname, const char *servname, $/;"	f
getaddrinfo	fake-rfc2553.h	153;"	d
getaddrinfo	fake-rfc2553.h	155;"	d
getaddrstring	dbutil.c	/^void getaddrstring(struct sockaddr_storage* addr, $/;"	f
getchannel	common-channel.c	/^struct Channel* getchannel() {$/;"	f
getchannel_msg	common-channel.c	/^static struct Channel* getchannel_msg(const char* kind) {$/;"	f	file:
getg	gendss.c	/^static void getg(dropbear_dss_key * key) {$/;"	f	file:
getnameinfo	fake-rfc2553.c	/^int getnameinfo(const struct sockaddr *sa, size_t salen, char *host, $/;"	f
getnameinfo	fake-rfc2553.h	171;"	d
getp	gendss.c	/^static void getp(dropbear_dss_key *key, unsigned int size) {$/;"	f	file:
getpass_or_cancel	cli-auth.c	/^char* getpass_or_cancel(char* prompt)$/;"	f
getq	gendss.c	/^static void getq(dropbear_dss_key *key) {$/;"	f	file:
getrsaprime	genrsa.c	/^static void getrsaprime(mp_int* prime, mp_int *primeminus, $/;"	f	file:
getusershell	compat.c	/^char * getusershell() {$/;"	f
getx	gendss.c	/^static void getx(dropbear_dss_key *key) {$/;"	f	file:
gety	gendss.c	/^static void gety(dropbear_dss_key *key) {$/;"	f	file:
gf_mul	libtomcrypt/notes/etc/whirlgen.c	/^unsigned gf_mul(unsigned a, unsigned b)$/;"	f
gf_mult	libtomcrypt/src/ciphers/twofish/twofish.c	/^static ulong32 gf_mult(ulong32 a, ulong32 b, ulong32 p)$/;"	f	file:
gmp_desc	libtomcrypt/src/math/gmp_desc.c	/^const ltc_math_descriptor gmp_desc = {$/;"	v
gui_getpass	cli-authpasswd.c	/^static char *gui_getpass(const char *prompt) {$/;"	f	file:
h_func	libtomcrypt/src/ciphers/twofish/twofish.c	/^static void h_func(const unsigned char *in, unsigned char *out, unsigned char *M, int k, int offset)$/;"	f	file:
ham	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^   int ham, terma, termb;$/;"	m	struct:__anon38	file:
handle_listeners	listener.c	/^void handle_listeners(fd_set * readfds) {$/;"	f
handler	packet.h	/^	void (*handler)();$/;"	m	struct:PacketType
hash	libtomcrypt/src/headers/tomcrypt_mac.h	/^     int            hash;$/;"	m	struct:Hmac_state
hash	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int                   cipher, hash;$/;"	m	struct:yarrow_prng
hash	session.h	/^	unsigned char hash[SHA1_HASH_SIZE]; \/* the hash*\/$/;"	m	struct:sshsession
hash_descriptor	libtomcrypt/src/misc/crypt/crypt_hash_descriptor.c	/^struct ltc_hash_descriptor hash_descriptor[TAB_SIZE] = {$/;"	v	typeref:struct:ltc_hash_descriptor
hash_file	libtomcrypt/src/hashes/helper/hash_file.c	/^int hash_file(int hash, const char *fname, unsigned char *out, unsigned long *outlen)$/;"	f
hash_filehandle	libtomcrypt/src/hashes/helper/hash_filehandle.c	/^int hash_filehandle(int hash, FILE *in, unsigned char *out, unsigned long *outlen)$/;"	f
hash_gen	libtomcrypt/demos/tv_gen.c	/^void hash_gen(void)$/;"	f
hash_index	session.h	/^	int hash_index; \/* lookup for libtomcrypt *\/$/;"	m	struct:key_context_directional
hash_is_valid	libtomcrypt/src/misc/crypt/crypt_hash_is_valid.c	/^int hash_is_valid(int idx)$/;"	f
hash_memory	libtomcrypt/src/hashes/helper/hash_memory.c	/^int hash_memory(int hash, const unsigned char *in, unsigned long inlen, unsigned char *out, unsigned long *outlen)$/;"	f
hash_memory_multi	libtomcrypt/src/hashes/helper/hash_memory_multi.c	/^int hash_memory_multi(int hash, unsigned char *out, unsigned long *outlen,$/;"	f
hash_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^} hash_state;$/;"	t	typeref:union:Hash_state
hashdesc	algo.h	/^	const struct ltc_hash_descriptor *hashdesc;$/;"	m	struct:dropbear_hash	typeref:struct:dropbear_hash::ltc_hash_descriptor
hashkeys	common-kex.c	/^static void hashkeys(unsigned char *out, int outlen, $/;"	f	file:
hashpool	random.c	/^static unsigned char hashpool[SHA1_HASH_SIZE] = {0};$/;"	v	file:
hashsize	algo.h	/^	unsigned char hashsize;$/;"	m	struct:dropbear_hash
hashsize	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned long hashsize;$/;"	m	struct:ltc_hash_descriptor
hashstate	libtomcrypt/src/headers/tomcrypt_mac.h	/^     hash_state     hashstate;$/;"	m	struct:Hmac_state
have_algo	common-algo.c	/^int have_algo(char* algo, size_t algolen, algo_type algos[]) {$/;"	f
have_reply	tcpfwd.h	/^	unsigned int have_reply; \/* is set to 1 after a reply has been received$/;"	m	struct:TCPFwdEntry
head	queue.h	/^	struct Link* head;$/;"	m	struct:Queue	typeref:struct:Queue::Link
headeromac	libtomcrypt/src/headers/tomcrypt_mac.h	/^   omac_state    headeromac, ctomac;$/;"	m	struct:__anon15
hexdig	signkey.c	/^static char hexdig(unsigned char x) {$/;"	f	file:
hh	libtomcrypt/src/headers/tomcrypt_pk.h	/^            hh, \/* hour *\/$/;"	m	struct:__anon33
hmac_block	libtomcrypt/src/headers/tomcrypt_hash.h	/^    int  (*hmac_block)(const unsigned char *key, unsigned long  keylen,$/;"	m	struct:ltc_hash_descriptor
hmac_done	libtomcrypt/src/mac/hmac/hmac_done.c	/^int hmac_done(hmac_state *hmac, unsigned char *out, unsigned long *outlen)$/;"	f
hmac_file	libtomcrypt/src/mac/hmac/hmac_file.c	/^int hmac_file(int hash, const char *fname, $/;"	f
hmac_gen	libtomcrypt/demos/tv_gen.c	/^void hmac_gen(void)$/;"	f
hmac_init	libtomcrypt/src/mac/hmac/hmac_init.c	/^int hmac_init(hmac_state *hmac, int hash, const unsigned char *key, unsigned long keylen)$/;"	f
hmac_memory	libtomcrypt/src/mac/hmac/hmac_memory.c	/^int hmac_memory(int hash, $/;"	f
hmac_memory_multi	libtomcrypt/src/mac/hmac/hmac_memory_multi.c	/^int hmac_memory_multi(int hash, $/;"	f
hmac_process	libtomcrypt/src/mac/hmac/hmac_process.c	/^int hmac_process(hmac_state *hmac, const unsigned char *in, unsigned long inlen)$/;"	f
hmac_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} hmac_state;$/;"	t	typeref:struct:Hmac_state
hmac_test	libtomcrypt/src/mac/hmac/hmac_test.c	/^int hmac_test(void)$/;"	f
hostaddr	loginrec.h	/^	union login_netinfo hostaddr;       \/* caller's host address(es) *\/$/;"	m	struct:logininfo	typeref:union:logininfo::login_netinfo
hostkey	runopts.h	/^	sign_key *hostkey;$/;"	m	struct:svr_runopts
hostname	loginrec.h	/^	char       hostname[LINFO_HOSTSIZE];     \/* remote hostname *\/$/;"	m	struct:logininfo
iLT	libtomcrypt/src/ciphers/safer/saferp.c	131;"	d	file:
iLT	libtomcrypt/src/ciphers/safer/saferp.c	168;"	d	file:
iLT	libtomcrypt/src/ciphers/safer/saferp.c	169;"	d	file:
iPHT	libtomcrypt/src/ciphers/safer/saferp.c	96;"	d	file:
iROUND	libtomcrypt/src/ciphers/safer/saferp.c	162;"	d	file:
iROUND	libtomcrypt/src/ciphers/safer/saferp.c	163;"	d	file:
iROUND	libtomcrypt/src/ciphers/safer/saferp.c	66;"	d	file:
iSHUF	libtomcrypt/notes/etc/saferp_optimizer.c	14;"	d	file:
iSHUF	libtomcrypt/src/ciphers/safer/saferp.c	114;"	d	file:
i_sqrt	libtommath/etc/mersenne.c	/^i_sqrt (long x)$/;"	f
i_sqrt	libtommath/etc/pprime.c	/^i_sqrt (mp_word x)$/;"	f	file:
ia5_table	libtomcrypt/src/pk/asn1/der/ia5/der_length_ia5_string.c	/^} ia5_table[] = {$/;"	v	typeref:struct:__anon9	file:
iamrecursive	scp.c	/^int pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v
iamremote	scp.c	/^int pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v
id	libtomcrypt/testprof/tomcrypt_test.h	/^    int id;$/;"	m	struct:list
ident_readln	common-session.c	/^static int ident_readln(int fd, char* buf, int count) {$/;"	f	file:
idle_timeout_secs	runopts.h	/^	time_t idle_timeout_secs;$/;"	m	struct:runopts
idx	libtomcrypt/src/headers/tomcrypt_pk.h	/^    int idx;$/;"	m	struct:__anon30
ig_func	libtomcrypt/src/ciphers/skipjack.c	/^static unsigned ig_func(unsigned w, int *kp, unsigned char *key)$/;"	f	file:
ignorenext	session.h	/^	unsigned char ignorenext; \/* whether to ignore the next packet,$/;"	m	struct:sshsession
ikeystep	libtomcrypt/src/ciphers/skipjack.c	/^static const int ikeystep[] = { 9, 0, 1, 2, 3, 4, 5, 6, 7, 8 };$/;"	v	file:
import_encrypted	keyimport.c	/^int import_encrypted(const char* filename, int filetype) {$/;"	f
import_read	keyimport.c	/^sign_key *import_read(const char *filename, char *passphrase, int filetype) {$/;"	f
import_write	keyimport.c	/^int import_write(const char *filename, sign_key *key, char *passphrase,$/;"	f
in6_addr	fake-rfc2553.h	/^struct in6_addr {$/;"	s
index	channel.h	/^	unsigned int index; \/* the local channel index *\/$/;"	m	struct:Channel
index	listener.h	/^	int index; \/* index in the array of listeners *\/$/;"	m	struct:Listener
inetdmode	runopts.h	/^	int inetdmode;$/;"	m	struct:svr_runopts
init	libtomcrypt/src/headers/tomcrypt_hash.h	/^    int (*init)(hash_state *hash);$/;"	m	struct:ltc_hash_descriptor
init	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*init)(void **a);$/;"	m	struct:__anon11
init	libtomcrypt/src/math/gmp_desc.c	/^static int init(void **a)$/;"	f	file:
init	libtomcrypt/src/math/ltm_desc.c	/^static int init(void **a)$/;"	f	file:
init	libtomcrypt/src/math/tfm_desc.c	/^static int init(void **a)$/;"	f	file:
initR	libtomcrypt/src/headers/tomcrypt_prng.h	/^                 initR[17],      \/* saved register contents *\/ $/;"	m	struct:sober128_prng
init_copy	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*init_copy)(void **dst, void *src);$/;"	m	struct:__anon11
init_copy	libtomcrypt/src/math/gmp_desc.c	/^static int init_copy(void **a, void *b)$/;"	f	file:
init_copy	libtomcrypt/src/math/ltm_desc.c	/^static int init_copy(void **a, void *b)$/;"	f	file:
init_copy	libtomcrypt/src/math/tfm_desc.c	/^static int init_copy(void **a, void *b)$/;"	f	file:
init_timer	libtomcrypt/testprof/x86_prof.c	/^void init_timer(void)$/;"	f
initconn	channel.h	/^	int initconn; \/* used for TCP forwarding, whether the channel has been$/;"	m	struct:Channel
inithandler	channel.h	/^	int (*inithandler)(struct Channel*);$/;"	m	struct:ChanType
initqueue	queue.c	/^void initqueue(struct Queue* queue) {$/;"	f
initshells	compat.c	/^static char **initshells() {$/;"	f	file:
interact_request_received	session.h	/^	int interact_request_received; \/* flag whether we've received an $/;"	m	struct:clientsession
invmod	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*invmod)(void *, void *, void *);$/;"	m	struct:__anon11
invmod	libtomcrypt/src/math/gmp_desc.c	/^static int invmod(void *a, void *b, void *c)$/;"	f	file:
invmod	libtomcrypt/src/math/ltm_desc.c	/^static int invmod(void *a, void *b, void *c)$/;"	f	file:
invmod	libtomcrypt/src/math/tfm_desc.c	/^static int invmod(void *a, void *b, void *c)$/;"	f	file:
is_compress_recv	common-kex.c	/^int is_compress_recv() {$/;"	f
is_compress_trans	common-kex.c	/^int is_compress_trans() {$/;"	f
is_mersenne	libtommath/etc/mersenne.c	/^is_mersenne (long s, int *pp)$/;"	f
is_point	libtomcrypt/src/pk/ecc/ecc_import.c	/^static int is_point(ecc_key *key)$/;"	f	file:
is_subsystem	runopts.h	/^	int is_subsystem;$/;"	m	struct:cli_runopts
isbase64	keyimport.c	193;"	d	file:
isempty	queue.c	/^int isempty(struct Queue* queue) {$/;"	f
isprime	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*isprime)(void *a, int *b);$/;"	m	struct:__anon11
isprime	libtomcrypt/src/math/gmp_desc.c	/^static int isprime(void *a, int *b)$/;"	f	file:
isprime	libtomcrypt/src/math/ltm_desc.c	/^static int isprime(void *a, int *b)$/;"	f	file:
isprime	libtomcrypt/src/math/tfm_desc.c	/^static int isprime(void *a, int *b)$/;"	f	file:
isprime	libtommath/etc/mersenne.c	/^isprime (long k)$/;"	f
isserver	session.h	/^	unsigned char isserver;$/;"	m	struct:sshsession
item	list.h	/^    void *item;$/;"	m	struct:_m_list_elem
item	queue.h	/^	void* item;$/;"	m	struct:Link
iv	keyimport.c	/^	char iv[32];$/;"	m	struct:openssh_key	file:
ivmode	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       ivmode,       \/* Which mode is the IV in? *\/$/;"	m	struct:__anon17
justprintpub	dropbearkey.c	/^static void justprintpub(const char* filename) {$/;"	f	file:
k	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *k;$/;"	m	struct:__anon30
k	libtommath/bn_mp_prime_rabin_miller_trials.c	/^   int k, t;$/;"	m	struct:__anon44	file:
k	libtommath/pre_gen/mpi.c	/^   int k, t;$/;"	m	struct:__anon41	file:
kTHETA	libtomcrypt/src/ciphers/noekeon.c	41;"	d	file:
kasumi	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct kasumi_key   kasumi;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::kasumi_key
kasumi_desc	libtomcrypt/src/ciphers/kasumi.c	/^const struct ltc_cipher_descriptor kasumi_desc = {$/;"	v	typeref:struct:ltc_cipher_descriptor
kasumi_done	libtomcrypt/src/ciphers/kasumi.c	/^void kasumi_done(symmetric_key *skey)$/;"	f
kasumi_ecb_decrypt	libtomcrypt/src/ciphers/kasumi.c	/^int kasumi_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
kasumi_ecb_encrypt	libtomcrypt/src/ciphers/kasumi.c	/^int kasumi_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
kasumi_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct kasumi_key {$/;"	s
kasumi_keysize	libtomcrypt/src/ciphers/kasumi.c	/^int kasumi_keysize(int *keysize)$/;"	f
kasumi_setup	libtomcrypt/src/ciphers/kasumi.c	/^int kasumi_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
kasumi_test	libtomcrypt/src/ciphers/kasumi.c	/^int kasumi_test(void)$/;"	f
katja_decrypt_key	libtomcrypt/src/pk/katja/katja_decrypt_key.c	/^int katja_decrypt_key(const unsigned char *in,       unsigned long  inlen,$/;"	f
katja_encrypt_key	libtomcrypt/src/pk/katja/katja_encrypt_key.c	/^int katja_encrypt_key(const unsigned char *in,     unsigned long inlen,$/;"	f
katja_export	libtomcrypt/src/pk/katja/katja_export.c	/^int katja_export(unsigned char *out, unsigned long *outlen, int type, katja_key *key)$/;"	f
katja_exptmod	libtomcrypt/src/pk/katja/katja_exptmod.c	/^int katja_exptmod(const unsigned char *in,   unsigned long inlen,$/;"	f
katja_free	libtomcrypt/src/pk/katja/katja_free.c	/^void katja_free(katja_key *key)$/;"	f
katja_import	libtomcrypt/src/pk/katja/katja_import.c	/^int katja_import(const unsigned char *in, unsigned long inlen, katja_key *key)$/;"	f
katja_key	libtomcrypt/src/headers/tomcrypt_pk.h	/^} katja_key;$/;"	t	typeref:struct:KAT_key
katja_make_key	libtomcrypt/src/pk/katja/katja_make_key.c	/^int katja_make_key(prng_state *prng, int wprng, int size, katja_key *key)$/;"	f
katja_test	libtomcrypt/testprof/katja_test.c	/^int katja_test(void)$/;"	f
keepalive_secs	runopts.h	/^	time_t keepalive_secs;$/;"	m	struct:runopts
kex_state	session.h	/^	cli_kex_state kex_state; \/* Used for progressing KEX *\/$/;"	m	struct:clientsession
kexdh_comb_key	common-kex.c	/^void kexdh_comb_key(mp_int *dh_pub_us, mp_int *dh_priv, mp_int *dh_pub_them,$/;"	f
kexfirstinitialise	common-kex.c	/^void kexfirstinitialise() {$/;"	f
kexguess2_used	algo.h	/^enum kexguess2_used {$/;"	g
kexhashbuf	session.h	/^	buffer* kexhashbuf; \/* session hash buffer calculated from various packets*\/$/;"	m	struct:sshsession
kexinitialise	common-kex.c	/^static void kexinitialise() {$/;"	f	file:
kexstate	session.h	/^	struct KEXState kexstate;$/;"	m	struct:sshsession	typeref:struct:sshsession::KEXState
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    symmetric_key     key;$/;"	m	struct:__anon25
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    unsigned char key[10];$/;"	m	struct:skipjack_key
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   symmetric_key       key;$/;"	m	struct:__anon20
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   symmetric_key       key;$/;"	m	struct:__anon21
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   symmetric_key       key;$/;"	m	struct:__anon22
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   symmetric_key       key;$/;"	m	struct:__anon23
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   symmetric_key       key;$/;"	m	struct:__anon24
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   symmetric_key       key;$/;"	m	struct:__anon26
key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct safer_key { safer_key_t key; };$/;"	m	struct:safer_key
key	libtomcrypt/src/headers/tomcrypt_mac.h	/^     unsigned char  *key;$/;"	m	struct:Hmac_state
key	libtomcrypt/src/headers/tomcrypt_mac.h	/^   symmetric_key     key;                     \/* scheduled key for cipher *\/$/;"	m	struct:__anon14
key	libtomcrypt/src/headers/tomcrypt_mac.h	/^   symmetric_key     key;                     \/* scheduled key for cipher *\/$/;"	m	struct:__anon16
key	libtomcrypt/src/headers/tomcrypt_mac.h	/^   symmetric_key   key;$/;"	m	struct:__anon13
key	libtomcrypt/src/headers/tomcrypt_mac.h	/^   symmetric_key key;$/;"	m	struct:__anon18
key	libtomcrypt/src/headers/tomcrypt_mac.h	/^   symmetric_key key;$/;"	m	struct:__anon19
keyBits	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int keyBits; $/;"	m	struct:anubis_key
key_context	session.h	/^struct key_context {$/;"	s
key_context_directional	session.h	/^struct key_context_directional {$/;"	s
key_schedule	libtomcrypt/src/hashes/tiger.c	/^static void key_schedule(ulong64 *x) $/;"	f	file:
keyblob	keyimport.c	/^	unsigned char *keyblob;$/;"	m	struct:openssh_key	file:
keyblob_len	keyimport.c	/^	unsigned int keyblob_len, keyblob_size;$/;"	m	struct:openssh_key	file:
keyblob_size	keyimport.c	/^	unsigned int keyblob_len, keyblob_size;$/;"	m	struct:openssh_key	file:
keylen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^    ulong32 K[32], keylen;$/;"	m	struct:cast5_key
keylen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                 keylen,$/;"	m	struct:__anon19
keys	session.h	/^	struct key_context *keys;$/;"	m	struct:sshsession	typeref:struct:sshsession::key_context
keysize	algo.h	/^	unsigned long keysize;$/;"	m	struct:dropbear_cipher
keysize	algo.h	/^	unsigned long keysize;$/;"	m	struct:dropbear_hash
keysize	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int  (*keysize)(int *keysize);$/;"	m	struct:ltc_cipher_descriptor
keystep	libtomcrypt/src/ciphers/skipjack.c	/^static const int keystep[] =  { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };$/;"	v	file:
khazad	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct khazad_key   khazad;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::khazad_key
khazad_crypt	libtomcrypt/src/ciphers/khazad.c	/^static void khazad_crypt(const unsigned char *plaintext, unsigned char *ciphertext,$/;"	f	file:
khazad_desc	libtomcrypt/src/ciphers/khazad.c	/^const struct ltc_cipher_descriptor khazad_desc = {$/;"	v	typeref:struct:ltc_cipher_descriptor
khazad_done	libtomcrypt/src/ciphers/khazad.c	/^void khazad_done(symmetric_key *skey)$/;"	f
khazad_ecb_decrypt	libtomcrypt/src/ciphers/khazad.c	/^int khazad_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
khazad_ecb_encrypt	libtomcrypt/src/ciphers/khazad.c	/^int khazad_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
khazad_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct khazad_key {$/;"	s
khazad_keysize	libtomcrypt/src/ciphers/khazad.c	/^int khazad_keysize(int *keysize)$/;"	f
khazad_setup	libtomcrypt/src/ciphers/khazad.c	/^int khazad_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
khazad_test	libtomcrypt/src/ciphers/khazad.c	/^int khazad_test(void)$/;"	f
killchild	scp.c	/^killchild(int signo)$/;"	f	file:
konst	libtomcrypt/src/headers/tomcrypt_prng.h	/^                 konst,          \/* key dependent constant *\/$/;"	m	struct:sober128_prng
kseed	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct kseed_key    kseed;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::kseed_key
kseed_desc	libtomcrypt/src/ciphers/kseed.c	/^const struct ltc_cipher_descriptor kseed_desc = {$/;"	v	typeref:struct:ltc_cipher_descriptor
kseed_done	libtomcrypt/src/ciphers/kseed.c	/^void kseed_done(symmetric_key *skey)$/;"	f
kseed_ecb_decrypt	libtomcrypt/src/ciphers/kseed.c	/^int kseed_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
kseed_ecb_encrypt	libtomcrypt/src/ciphers/kseed.c	/^int kseed_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
kseed_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct kseed_key {$/;"	s
kseed_keysize	libtomcrypt/src/ciphers/kseed.c	/^int kseed_keysize(int *keysize)$/;"	f
kseed_setup	libtomcrypt/src/ciphers/kseed.c	/^int kseed_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
kseed_test	libtomcrypt/src/ciphers/kseed.c	/^int kseed_test(void)$/;"	f
last	list.h	/^    m_list_elem *last;$/;"	m	struct:_m_list
last_char	session.h	/^	int last_char;$/;"	m	struct:clientsession
last_packet_time	session.h	/^	time_t last_packet_time; \/* time of the last packet transmission or receive, for$/;"	m	struct:sshsession
last_trx_packet_time	session.h	/^	time_t last_trx_packet_time; \/* time of the last packet transmission, for$/;"	m	struct:sshsession
last_update	progressmeter.c	/^static time_t last_update;	\/* last progress update *\/$/;"	v	file:
lastauthtype	session.h	/^	int lastauthtype; \/* either AUTH_TYPE_PUBKEY or AUTH_TYPE_PASSWORD,$/;"	m	struct:clientsession
lastexit	session.h	/^	struct exitinfo lastexit;$/;"	m	struct:serversession	typeref:struct:serversession::exitinfo
lastkextime	kex.h	/^	time_t lastkextime; \/* time of the last kex *\/$/;"	m	struct:KEXState
lastlog_construct	loginrec.c	/^lastlog_construct(struct logininfo *li, struct lastlog *last)$/;"	f	file:
lastlog_filetype	loginrec.c	/^lastlog_filetype(char *filename)$/;"	f	file:
lastlog_openseek	loginrec.c	/^lastlog_openseek(struct logininfo *li, int *fd, int filemode)$/;"	f	file:
lastlog_perform_login	loginrec.c	/^lastlog_perform_login(struct logininfo *li)$/;"	f	file:
lastlog_write_entry	loginrec.c	/^lastlog_write_entry(struct logininfo *li)$/;"	f
lastpacket	session.h	/^	unsigned char lastpacket; \/* What the last received packet type was *\/$/;"	m	struct:sshsession
lastprivkey	session.h	/^	sign_key *lastprivkey;$/;"	m	struct:clientsession
lbit	libtommath/demo/demo.c	/^int lbit(void)$/;"	f
lbit	libtommath/demo/timing.c	/^int lbit(void)$/;"	f
lcm	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*lcm)(void *a, void *b, void *c);$/;"	m	struct:__anon11
lcm	libtomcrypt/src/math/gmp_desc.c	/^static int lcm(void *a, void *b, void *c)$/;"	f	file:
lcm	libtomcrypt/src/math/ltm_desc.c	/^static int lcm(void *a, void *b, void *c)$/;"	f	file:
lcm	libtomcrypt/src/math/tfm_desc.c	/^static int lcm(void *a, void *b, void *c)$/;"	f	file:
len	buffer.h	/^	unsigned int len; \/* the used size *\/$/;"	m	struct:buf
len	libtomcrypt/src/encauth/ocb/ocb_init.c	/^    int           len;$/;"	m	struct:__anon35	file:
len	libtomcrypt/src/mac/pmac/pmac_init.c	/^    int           len;$/;"	m	struct:__anon34	file:
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64  length, state[8];$/;"	m	struct:sha512_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length, state[8];$/;"	m	struct:whirlpool_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:chc_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:md4_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:md5_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:rmd128_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:rmd160_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:rmd256_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:rmd320_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:sha1_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length;$/;"	m	struct:sha256_state
length	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 state[3], length;$/;"	m	struct:tiger_state
lfsr	libtommath/demo/demo.c	/^unsigned long lfsr = 0xAAAAAAAAUL;$/;"	v
lfsr	libtommath/demo/timing.c	/^unsigned long lfsr = 0xAAAAAAAAUL;$/;"	v
limit_rate	scp.c	/^off_t limit_rate = 0;$/;"	v
line	loginrec.h	/^	char       line[LINFO_LINESIZE];         \/* tty\/pty name *\/$/;"	m	struct:logininfo
line_abbrevname	loginrec.c	/^line_abbrevname(char *dst, const char *src, size_t dstsize)$/;"	f
line_fullname	loginrec.c	/^line_fullname(char *dst, const char *src, size_t dstsize)$/;"	f
line_stripname	loginrec.c	/^line_stripname(char *dst, const char *src, size_t dstsize)$/;"	f
link	queue.h	/^	struct Link* link;$/;"	m	struct:Link	typeref:struct:Link::Link
list	libtomcrypt/testprof/tomcrypt_test.h	/^extern struct list {$/;"	s
list	list.h	/^    struct _m_list *list;$/;"	m	struct:_m_list_elem	typeref:struct:_m_list_elem::_m_list
list	scpmisc.h	/^	char    **list;$/;"	m	struct:arglist
list_append	list.c	/^void list_append(m_list *list, void *item) {$/;"	f
list_new	list.c	/^m_list * list_new() {$/;"	f
list_remove	list.c	/^void * list_remove(m_list_elem *elem) {$/;"	f
listen_fwd_all	runopts.h	/^	int listen_fwd_all;$/;"	m	struct:runopts
listen_tcpfwd	tcp-accept.c	/^int listen_tcpfwd(struct TCPListener* tcpinfo) {$/;"	f
listenaddr	tcpfwd.h	/^	const unsigned char* listenaddr;$/;"	m	struct:TCPFwdEntry
listenaddr	tcpfwd.h	/^	unsigned char *listenaddr;$/;"	m	struct:TCPListener
listeners	session.h	/^	struct Listener ** listeners;$/;"	m	struct:sshsession	typeref:struct:sshsession::Listener
listeners_initialise	listener.c	/^void listeners_initialise() {$/;"	f
listenport	tcpfwd.h	/^	unsigned int listenport;$/;"	m	struct:TCPFwdEntry
listenport	tcpfwd.h	/^	unsigned int listenport;$/;"	m	struct:TCPListener
listensize	session.h	/^	unsigned int listensize;$/;"	m	struct:sshsession
listensockets	svr-main.c	/^static size_t listensockets(int *sock, size_t sockcount, int *maxfd) {$/;"	f	file:
lnz	libtommath/bn_mp_cnt_lsb.c	/^static const int lnz[16] = { $/;"	v	file:
lnz	libtommath/pre_gen/mpi.c	/^static const int lnz[16] = { $/;"	v	file:
load_dh_p	common-kex.c	/^static void load_dh_p(mp_int * dh_p)$/;"	f	file:
load_openssh_key	keyimport.c	/^static struct openssh_key *load_openssh_key(const char *filename)$/;"	f	file:
load_tab	libtommath/etc/pprime.c	/^void load_tab(void)$/;"	f
loadhostkeys	svr-runopts.c	/^void loadhostkeys() {$/;"	f
loadidentityfile	cli-runopts.c	/^static void loadidentityfile(const char* filename) {$/;"	f	file:
localfwds	runopts.h	/^	m_list * localfwds;$/;"	m	struct:cli_runopts
login_alloc_entry	loginrec.c	/^logininfo *login_alloc_entry(int pid, const char *username,$/;"	f
login_free_entry	loginrec.c	/^login_free_entry(struct logininfo *li)$/;"	f
login_init_entry	loginrec.c	/^login_init_entry(struct logininfo *li, int pid, const char *username,$/;"	f
login_login	loginrec.c	/^login_login (struct logininfo *li)$/;"	f
login_logout	loginrec.c	/^login_logout(struct logininfo *li)$/;"	f
login_netinfo	loginrec.h	/^union login_netinfo {$/;"	u
login_set_addr	loginrec.c	/^login_set_addr(struct logininfo *li, const struct sockaddr *sa,$/;"	f
login_set_current_time	loginrec.c	/^login_set_current_time(struct logininfo *li)$/;"	f
login_utmp_only	loginrec.c	/^login_utmp_only(struct logininfo *li)$/;"	f
login_write	loginrec.c	/^login_write (struct logininfo *li)$/;"	f
logininfo	loginrec.h	/^struct logininfo {$/;"	s
long64	libtommath/tommath.h	/^      typedef signed __int64     long64;$/;"	t
long64	libtommath/tommath.h	/^      typedef signed long long   long64;$/;"	t
long64	libtommath/tommath.h	/^   typedef signed long long   long64;$/;"	t
lostconn	scp.c	/^lostconn(int signo)$/;"	f
lru_count	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^   int        lru_count;      \/* amount of times this entry has been used *\/$/;"	m	struct:__anon37	file:
lrw_decrypt	libtomcrypt/src/modes/lrw/lrw_decrypt.c	/^int lrw_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_LRW *lrw)$/;"	f
lrw_done	libtomcrypt/src/modes/lrw/lrw_done.c	/^int lrw_done(symmetric_LRW *lrw) $/;"	f
lrw_encrypt	libtomcrypt/src/modes/lrw/lrw_encrypt.c	/^int lrw_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_LRW *lrw)$/;"	f
lrw_gen	libtomcrypt/demos/tv_gen.c	/^void lrw_gen(void)$/;"	f
lrw_getiv	libtomcrypt/src/modes/lrw/lrw_getiv.c	/^int lrw_getiv(unsigned char *IV, unsigned long *len, symmetric_LRW *lrw)$/;"	f
lrw_process	libtomcrypt/src/modes/lrw/lrw_process.c	/^int lrw_process(const unsigned char *pt, unsigned char *ct, unsigned long len, int mode, symmetric_LRW *lrw)$/;"	f
lrw_setiv	libtomcrypt/src/modes/lrw/lrw_setiv.c	/^int lrw_setiv(const unsigned char *IV, unsigned long len, symmetric_LRW *lrw)$/;"	f
lrw_start	libtomcrypt/src/modes/lrw/lrw_start.c	/^int lrw_start(               int   cipher,$/;"	f
lrw_test	libtomcrypt/src/modes/lrw/lrw_test.c	/^int lrw_test(void)$/;"	f
ltc_asn1_list	libtomcrypt/src/headers/tomcrypt_pk.h	/^} ltc_asn1_list;$/;"	t	typeref:struct:ltc_asn1_list_
ltc_asn1_list_	libtomcrypt/src/headers/tomcrypt_pk.h	/^typedef struct ltc_asn1_list_ {$/;"	s
ltc_cipher_descriptor	libtomcrypt/src/headers/tomcrypt_cipher.h	/^extern struct ltc_cipher_descriptor {$/;"	s
ltc_code	libtomcrypt/src/math/ltm_desc.c	/^    int mpi_code, ltc_code;$/;"	m	struct:__anon39	file:
ltc_code	libtomcrypt/src/math/tfm_desc.c	/^    int tfm_code, ltc_code;$/;"	m	struct:__anon36	file:
ltc_deinit_multi	libtomcrypt/src/math/multi.c	/^void ltc_deinit_multi(void *a, ...)$/;"	f
ltc_ecc_del_point	libtomcrypt/src/pk/ecc/ltc_ecc_points.c	/^void ltc_ecc_del_point(ecc_point *p)$/;"	f
ltc_ecc_fp_free	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^void ltc_ecc_fp_free(void)$/;"	f
ltc_ecc_fp_mul2add	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^int ltc_ecc_fp_mul2add(ecc_point *A, void *kA,$/;"	f
ltc_ecc_fp_mulmod	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^int ltc_ecc_fp_mulmod(void *k, ecc_point *G, ecc_point *R, void *modulus, int map)$/;"	f
ltc_ecc_is_valid_idx	libtomcrypt/src/pk/ecc/ltc_ecc_is_valid_idx.c	/^int ltc_ecc_is_valid_idx(int n)$/;"	f
ltc_ecc_map	libtomcrypt/src/pk/ecc/ltc_ecc_map.c	/^int ltc_ecc_map(ecc_point *P, void *modulus, void *mp)$/;"	f
ltc_ecc_mul2add	libtomcrypt/src/pk/ecc/ltc_ecc_mul2add.c	/^int ltc_ecc_mul2add(ecc_point *A, void *kA,$/;"	f
ltc_ecc_mulmod	libtomcrypt/src/pk/ecc/ltc_ecc_mulmod.c	/^int ltc_ecc_mulmod(void *k, ecc_point *G, ecc_point *R, void *modulus, int map)$/;"	f
ltc_ecc_mulmod	libtomcrypt/src/pk/ecc/ltc_ecc_mulmod_timing.c	/^int ltc_ecc_mulmod(void *k, ecc_point *G, ecc_point *R, void *modulus, int map)$/;"	f
ltc_ecc_new_point	libtomcrypt/src/pk/ecc/ltc_ecc_points.c	/^ecc_point *ltc_ecc_new_point(void)$/;"	f
ltc_ecc_projective_add_point	libtomcrypt/src/pk/ecc/ltc_ecc_projective_add_point.c	/^int ltc_ecc_projective_add_point(ecc_point *P, ecc_point *Q, ecc_point *R, void *modulus, void *mp)$/;"	f
ltc_ecc_projective_dbl_point	libtomcrypt/src/pk/ecc/ltc_ecc_projective_dbl_point.c	/^int ltc_ecc_projective_dbl_point(ecc_point *P, ecc_point *R, void *modulus, void *mp)$/;"	f
ltc_ecc_set_type	libtomcrypt/src/headers/tomcrypt_pk.h	/^} ltc_ecc_set_type;$/;"	t	typeref:struct:__anon28
ltc_ecc_sets	libtomcrypt/src/pk/ecc/ecc.c	/^const ltc_ecc_set_type ltc_ecc_sets[] = {$/;"	v
ltc_hash_descriptor	libtomcrypt/src/headers/tomcrypt_hash.h	/^extern  struct ltc_hash_descriptor {$/;"	s
ltc_init_multi	libtomcrypt/src/math/multi.c	/^int ltc_init_multi(void **a, ...)$/;"	f
ltc_math_descriptor	libtomcrypt/src/headers/tomcrypt_math.h	/^} ltc_math_descriptor;$/;"	t	typeref:struct:__anon11
ltc_mp	libtomcrypt/src/misc/crypt/crypt_ltc_mp_descriptor.c	/^ltc_math_descriptor ltc_mp;$/;"	v
ltc_pkcs_1_paddings	libtomcrypt/src/headers/tomcrypt_pkcs.h	/^enum ltc_pkcs_1_paddings$/;"	g
ltc_pkcs_1_v1_5_blocks	libtomcrypt/src/headers/tomcrypt_pkcs.h	/^enum ltc_pkcs_1_v1_5_blocks$/;"	g
ltc_prng_descriptor	libtomcrypt/src/headers/tomcrypt_prng.h	/^extern struct ltc_prng_descriptor {$/;"	s
ltc_to_asn1	libtomcrypt/src/pk/asn1/der/set/der_encode_set.c	/^static int ltc_to_asn1(int v)$/;"	f	file:
ltc_utctime	libtomcrypt/src/headers/tomcrypt_pk.h	/^} ltc_utctime;$/;"	t	typeref:struct:__anon33
ltm_desc	libtomcrypt/src/math/ltm_desc.c	/^const ltc_math_descriptor ltm_desc = {$/;"	v
ltm_prime_callback	libtommath/tommath.h	/^typedef int ltm_prime_callback(unsigned char *dst, int len, void *dat);$/;"	t
ltm_prime_tab	libtommath/bn_prime_tab.c	/^const mp_digit ltm_prime_tab[] = {$/;"	v
ltm_prime_tab	libtommath/pre_gen/mpi.c	/^const mp_digit ltm_prime_tab[] = {$/;"	v
lut_orders	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^} lut_orders[] = {$/;"	v	typeref:struct:__anon38	file:
m_burn	dbutil.c	/^void m_burn(void *data, unsigned int len) {$/;"	f
m_close	dbutil.c	/^void m_close(int fd) {$/;"	f
m_free	dbutil.h	85;"	d
m_list	list.h	/^typedef struct _m_list m_list;$/;"	t	typeref:struct:_m_list
m_list_elem	list.h	/^typedef struct _m_list_elem m_list_elem;$/;"	t	typeref:struct:_m_list_elem
m_malloc	dbutil.c	/^void * m_malloc(size_t size) {$/;"	f
m_mp_init	bignum.c	/^void m_mp_init(mp_int *mp) {$/;"	f
m_mp_init_multi	bignum.c	/^void m_mp_init_multi(mp_int *mp, ...) $/;"	f
m_realloc	dbutil.c	/^void * m_realloc(void* ptr, size_t size) {$/;"	f
m_str_to_uint	dbutil.c	/^int m_str_to_uint(const char* str, unsigned int *val) {$/;"	f
m_strdup	dbutil.c	/^void * m_strdup(const char * str) {$/;"	f
mac_list	runopts.h	/^	char *mac_list;$/;"	m	struct:runopts
mac_test	libtomcrypt/testprof/mac_test.c	/^int mac_test(void)$/;"	f
mackey	session.h	/^	unsigned char mackey[MAX_MAC_LEN];$/;"	m	struct:key_context_directional
main	dbmulti.c	/^int main(int argc, char ** argv) {$/;"	f
main	libtomcrypt/demos/encrypt.c	/^int main(int argc, char *argv[]) $/;"	f
main	libtomcrypt/demos/hashsum.c	/^int main(int argc, char **argv)$/;"	f
main	libtomcrypt/demos/multi.c	/^int main(void)$/;"	f
main	libtomcrypt/demos/small.c	/^int main(void)$/;"	f
main	libtomcrypt/demos/test.c	/^int main(void)$/;"	f
main	libtomcrypt/demos/timing.c	/^int main(void)$/;"	f
main	libtomcrypt/demos/tv_gen.c	/^int main(void)$/;"	f
main	libtomcrypt/notes/etc/saferp_optimizer.c	/^int main(void)$/;"	f
main	libtomcrypt/notes/etc/whirlgen.c	/^int main(void)$/;"	f
main	libtomcrypt/notes/etc/whirltest.c	/^int main(void)$/;"	f
main	libtommath/demo/demo.c	/^int main(void)$/;"	f
main	libtommath/demo/timing.c	/^int main(void)$/;"	f
main	libtommath/etc/2kprime.c	/^int main(void)$/;"	f
main	libtommath/etc/drprime.c	/^int main(void)$/;"	f
main	libtommath/etc/mersenne.c	/^main (void)$/;"	f
main	libtommath/etc/mont.c	/^int main(void)$/;"	f
main	libtommath/etc/pprime.c	/^main (void)$/;"	f
main	libtommath/etc/tune.c	/^main (void)$/;"	f
main	libtommath/mtest/mtest.c	/^int main(void)$/;"	f
main_inetd	svr-main.c	/^static void main_inetd() {$/;"	f	file:
main_noinetd	svr-main.c	/^void main_noinetd() {$/;"	f
make_connection_string	svr-chansession.c	/^static char* make_connection_string() {$/;"	f	file:
make_mac	packet.c	/^static void make_mac(unsigned int seqno, const struct key_context_directional * key_state,$/;"	f	file:
malloc_ai	fake-rfc2553.c	/^addrinfo *malloc_ai(int port, u_long addr, const struct addrinfo *hints)$/;"	f	file:
map	libtomcrypt/src/misc/base64/base64_decode.c	/^static const unsigned char map[256] = {$/;"	v	file:
mapcode	termcodes.h	/^	unsigned int mapcode;$/;"	m	struct:TermCode
mask	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	/^static const unsigned char mask[] = { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01 };$/;"	v	file:
master	chansession.h	/^	int master; \/* the master terminal fd*\/$/;"	m	struct:ChanSess
match_option	svr-authpubkeyoptions.c	/^static int match_option(buffer *options_buf, const char *opt_name) {$/;"	f	file:
matchtcp	svr-tcpfwd.c	/^static int matchtcp(void* typedata1, void* typedata2) {$/;"	f	file:
math_gen	libtomcrypt/demos/tv_gen.c	/^void math_gen(void)$/;"	f
max_key_length	libtomcrypt/src/headers/tomcrypt_cipher.h	/^        max_key_length, $/;"	m	struct:ltc_cipher_descriptor
maxfd	session.h	/^	int maxfd; \/* the maximum file descriptor to check with select() *\/$/;"	m	struct:sshsession
maybe_flush_reply_queue	packet.c	/^void maybe_flush_reply_queue() {$/;"	f
md	libtomcrypt/src/headers/tomcrypt_mac.h	/^     hash_state     md;$/;"	m	struct:Hmac_state
md2	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct md2_state    md2;$/;"	m	union:Hash_state	typeref:struct:Hash_state::md2_state
md2_compress	libtomcrypt/src/hashes/md2.c	/^static void md2_compress(hash_state *md)$/;"	f	file:
md2_desc	libtomcrypt/src/hashes/md2.c	/^const struct ltc_hash_descriptor md2_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
md2_done	libtomcrypt/src/hashes/md2.c	/^int md2_done(hash_state * md, unsigned char *out)$/;"	f
md2_init	libtomcrypt/src/hashes/md2.c	/^int md2_init(hash_state *md)$/;"	f
md2_process	libtomcrypt/src/hashes/md2.c	/^int md2_process(hash_state *md, const unsigned char *in, unsigned long inlen)$/;"	f
md2_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct md2_state {$/;"	s
md2_test	libtomcrypt/src/hashes/md2.c	/^int md2_test(void)$/;"	f
md2_update_chksum	libtomcrypt/src/hashes/md2.c	/^static void md2_update_chksum(hash_state *md)$/;"	f	file:
md4	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct md4_state    md4;$/;"	m	union:Hash_state	typeref:struct:Hash_state::md4_state
md4_compress	libtomcrypt/src/hashes/md4.c	/^static int md4_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
md4_desc	libtomcrypt/src/hashes/md4.c	/^const struct ltc_hash_descriptor md4_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
md4_done	libtomcrypt/src/hashes/md4.c	/^int md4_done(hash_state * md, unsigned char *out)$/;"	f
md4_init	libtomcrypt/src/hashes/md4.c	/^int md4_init(hash_state * md)$/;"	f
md4_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct md4_state {$/;"	s
md4_test	libtomcrypt/src/hashes/md4.c	/^int md4_test(void)$/;"	f
md5	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct md5_state    md5;$/;"	m	union:Hash_state	typeref:struct:Hash_state::md5_state
md5_compress	libtomcrypt/src/hashes/md5.c	/^static int md5_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
md5_desc	libtomcrypt/src/hashes/md5.c	/^const struct ltc_hash_descriptor md5_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
md5_done	libtomcrypt/src/hashes/md5.c	/^int md5_done(hash_state * md, unsigned char *out)$/;"	f
md5_init	libtomcrypt/src/hashes/md5.c	/^int md5_init(hash_state * md)$/;"	f
md5_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct md5_state {$/;"	s
md5_test	libtomcrypt/src/hashes/md5.c	/^int  md5_test(void)$/;"	f
mds_column_mult	libtomcrypt/src/ciphers/twofish/twofish.c	/^static ulong32 mds_column_mult(unsigned char in, int col)$/;"	f	file:
mds_column_mult	libtomcrypt/src/ciphers/twofish/twofish.c	207;"	d	file:
mds_mult	libtomcrypt/src/ciphers/twofish/twofish.c	/^static void mds_mult(const unsigned char *in, unsigned char *out)$/;"	f	file:
mds_tab	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 mds_tab[4][256] = {$/;"	v	file:
min_key_length	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int  min_key_length, $/;"	m	struct:ltc_cipher_descriptor
mm	libtomcrypt/src/headers/tomcrypt_pk.h	/^            mm, \/* minute *\/$/;"	m	struct:__anon33
mode	algo.h	/^	const void *mode; \/* the mode, currently only used for ciphers,$/;"	m	struct:Algo_Type
mode	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       mode;$/;"	m	struct:__anon24
mode	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       mode,         \/* mode the GCM code is in *\/$/;"	m	struct:__anon17
modes_test	libtomcrypt/testprof/modes_test.c	/^int modes_test(void)$/;"	f
modi	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*modi)(void *a, unsigned long b, unsigned long *c);$/;"	m	struct:__anon11
modi	libtomcrypt/src/math/gmp_desc.c	/^static int modi(void *a, unsigned long b, unsigned long *c)$/;"	f	file:
modi	libtomcrypt/src/math/ltm_desc.c	/^static int modi(void *a, unsigned long b, unsigned long *c)$/;"	f	file:
modi	libtomcrypt/src/math/tfm_desc.c	/^static int modi(void *a, unsigned long b, unsigned long *c)$/;"	f	file:
montgomery_deinit	libtomcrypt/src/headers/tomcrypt_math.h	/^   void (*montgomery_deinit)(void *a);$/;"	m	struct:__anon11
montgomery_deinit	libtomcrypt/src/math/gmp_desc.c	/^static void montgomery_deinit(void *a)$/;"	f	file:
montgomery_deinit	libtomcrypt/src/math/ltm_desc.c	/^static void montgomery_deinit(void *a)$/;"	f	file:
montgomery_deinit	libtomcrypt/src/math/tfm_desc.c	/^static void montgomery_deinit(void *a)$/;"	f	file:
montgomery_normalization	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*montgomery_normalization)(void *a, void *b);$/;"	m	struct:__anon11
montgomery_normalization	libtomcrypt/src/math/gmp_desc.c	/^static int montgomery_normalization(void *a, void *b)$/;"	f	file:
montgomery_normalization	libtomcrypt/src/math/ltm_desc.c	/^static int montgomery_normalization(void *a, void *b)$/;"	f	file:
montgomery_normalization	libtomcrypt/src/math/tfm_desc.c	/^static int montgomery_normalization(void *a, void *b)$/;"	f	file:
montgomery_reduce	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*montgomery_reduce)(void *a, void *b, void *c);$/;"	m	struct:__anon11
montgomery_reduce	libtomcrypt/src/math/gmp_desc.c	/^static int montgomery_reduce(void *a, void *b, void *c)$/;"	f	file:
montgomery_reduce	libtomcrypt/src/math/ltm_desc.c	/^static int montgomery_reduce(void *a, void *b, void *c)$/;"	f	file:
montgomery_reduce	libtomcrypt/src/math/tfm_desc.c	/^static int montgomery_reduce(void *a, void *b, void *c)$/;"	f	file:
montgomery_setup	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*montgomery_setup)(void *a, void **b);$/;"	m	struct:__anon11
montgomery_setup	libtomcrypt/src/math/gmp_desc.c	/^static int montgomery_setup(void *a, void **b)$/;"	f	file:
montgomery_setup	libtomcrypt/src/math/ltm_desc.c	/^static int montgomery_setup(void *a, void **b)$/;"	f	file:
montgomery_setup	libtomcrypt/src/math/tfm_desc.c	/^static int montgomery_setup(void *a, void **b)$/;"	f	file:
mp_2expt	libtomcrypt/src/headers/tomcrypt_math.h	462;"	d
mp_2expt	libtommath/bn_mp_2expt.c	/^mp_2expt (mp_int * a, int b)$/;"	f
mp_2expt	libtommath/mtest/mpi.c	/^mp_err mp_2expt(mp_int *a, mp_digit k)$/;"	f
mp_2expt	libtommath/pre_gen/mpi.c	/^mp_2expt (mp_int * a, int b)$/;"	f
mp_abs	libtommath/bn_mp_abs.c	/^mp_abs (mp_int * a, mp_int * b)$/;"	f
mp_abs	libtommath/mtest/mpi.c	/^mp_err mp_abs(mp_int *a, mp_int *b)$/;"	f
mp_abs	libtommath/pre_gen/mpi.c	/^mp_abs (mp_int * a, mp_int * b)$/;"	f
mp_add	libtomcrypt/src/headers/tomcrypt_math.h	470;"	d
mp_add	libtommath/bn_mp_add.c	/^int mp_add (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_add	libtommath/mtest/mpi.c	/^mp_err mp_add(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_add	libtommath/pre_gen/mpi.c	/^int mp_add (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_add_d	libtomcrypt/src/headers/tomcrypt_math.h	471;"	d
mp_add_d	libtommath/bn_mp_add_d.c	/^mp_add_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_add_d	libtommath/mtest/mpi.c	/^mp_err mp_add_d(mp_int *a, mp_digit d, mp_int *b)$/;"	f
mp_add_d	libtommath/pre_gen/mpi.c	/^mp_add_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_addmod	libtommath/bn_mp_addmod.c	/^mp_addmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_addmod	libtommath/mtest/mpi.c	/^mp_err mp_addmod(mp_int *a, mp_int *b, mp_int *m, mp_int *c)$/;"	f
mp_addmod	libtommath/pre_gen/mpi.c	/^mp_addmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_and	libtommath/bn_mp_and.c	/^mp_and (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_and	libtommath/pre_gen/mpi.c	/^mp_and (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_char2value	libtommath/mtest/mpi.c	/^int    mp_char2value(char ch, int r)$/;"	f
mp_clamp	libtommath/bn_mp_clamp.c	/^mp_clamp (mp_int * a)$/;"	f
mp_clamp	libtommath/pre_gen/mpi.c	/^mp_clamp (mp_int * a)$/;"	f
mp_clear	libtomcrypt/src/headers/tomcrypt_math.h	446;"	d
mp_clear	libtommath/bn_mp_clear.c	/^mp_clear (mp_int * a)$/;"	f
mp_clear	libtommath/mtest/mpi.c	/^void   mp_clear(mp_int *mp)$/;"	f
mp_clear	libtommath/pre_gen/mpi.c	/^mp_clear (mp_int * a)$/;"	f
mp_clear_array	libtommath/mtest/mpi.c	/^void   mp_clear_array(mp_int mp[], int count)$/;"	f
mp_clear_multi	libtomcrypt/src/headers/tomcrypt_math.h	447;"	d
mp_clear_multi	libtommath/bn_mp_clear_multi.c	/^void mp_clear_multi(mp_int *mp, ...) $/;"	f
mp_clear_multi	libtommath/pre_gen/mpi.c	/^void mp_clear_multi(mp_int *mp, ...) $/;"	f
mp_cmp	libtomcrypt/src/headers/tomcrypt_math.h	458;"	d
mp_cmp	libtommath/bn_mp_cmp.c	/^mp_cmp (mp_int * a, mp_int * b)$/;"	f
mp_cmp	libtommath/mtest/mpi.c	/^int    mp_cmp(mp_int *a, mp_int *b)$/;"	f
mp_cmp	libtommath/pre_gen/mpi.c	/^mp_cmp (mp_int * a, mp_int * b)$/;"	f
mp_cmp_d	libtomcrypt/src/headers/tomcrypt_math.h	459;"	d
mp_cmp_d	libtommath/bn_mp_cmp_d.c	/^int mp_cmp_d(mp_int * a, mp_digit b)$/;"	f
mp_cmp_d	libtommath/mtest/mpi.c	/^int    mp_cmp_d(mp_int *a, mp_digit d)$/;"	f
mp_cmp_d	libtommath/pre_gen/mpi.c	/^int mp_cmp_d(mp_int * a, mp_digit b)$/;"	f
mp_cmp_int	libtommath/mtest/mpi.c	/^int    mp_cmp_int(mp_int *a, long z)$/;"	f
mp_cmp_mag	libtommath/bn_mp_cmp_mag.c	/^int mp_cmp_mag (mp_int * a, mp_int * b)$/;"	f
mp_cmp_mag	libtommath/mtest/mpi.c	/^int    mp_cmp_mag(mp_int *a, mp_int *b)$/;"	f
mp_cmp_mag	libtommath/pre_gen/mpi.c	/^int mp_cmp_mag (mp_int * a, mp_int * b)$/;"	f
mp_cmp_z	libtommath/mtest/mpi.c	/^int    mp_cmp_z(mp_int *a)$/;"	f
mp_cnt_lsb	libtomcrypt/src/headers/tomcrypt_math.h	461;"	d
mp_cnt_lsb	libtommath/bn_mp_cnt_lsb.c	/^int mp_cnt_lsb(mp_int *a)$/;"	f
mp_cnt_lsb	libtommath/pre_gen/mpi.c	/^int mp_cnt_lsb(mp_int *a)$/;"	f
mp_copy	libtomcrypt/src/headers/tomcrypt_math.h	451;"	d
mp_copy	libtommath/bn_mp_copy.c	/^mp_copy (mp_int * a, mp_int * b)$/;"	f
mp_copy	libtommath/mtest/mpi.c	/^mp_err mp_copy(mp_int *from, mp_int *to)$/;"	f
mp_copy	libtommath/pre_gen/mpi.c	/^mp_copy (mp_int * a, mp_int * b)$/;"	f
mp_count_bits	libtomcrypt/src/headers/tomcrypt_math.h	460;"	d
mp_count_bits	libtommath/bn_mp_count_bits.c	/^mp_count_bits (mp_int * a)$/;"	f
mp_count_bits	libtommath/mtest/mpi.c	/^int    mp_count_bits(mp_int *mp)$/;"	f
mp_count_bits	libtommath/pre_gen/mpi.c	/^mp_count_bits (mp_int * a)$/;"	f
mp_digit	libtommath/mtest/mpi-types.h	/^typedef unsigned short     mp_digit;  \/* 2 byte type *\/$/;"	t
mp_digit	libtommath/tommath.h	/^   typedef unsigned char      mp_digit;$/;"	t
mp_digit	libtommath/tommath.h	/^   typedef unsigned long      mp_digit;$/;"	t
mp_digit	libtommath/tommath.h	/^   typedef unsigned short     mp_digit;$/;"	t
mp_div	libtomcrypt/src/headers/tomcrypt_math.h	477;"	d
mp_div	libtommath/bn_mp_div.c	/^int mp_div (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_div	libtommath/bn_mp_div.c	/^int mp_div(mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_div	libtommath/mtest/mpi.c	/^mp_err mp_div(mp_int *a, mp_int *b, mp_int *q, mp_int *r)$/;"	f
mp_div	libtommath/pre_gen/mpi.c	/^int mp_div (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_div	libtommath/pre_gen/mpi.c	/^int mp_div(mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_div_2	libtomcrypt/src/headers/tomcrypt_math.h	478;"	d
mp_div_2	libtommath/bn_mp_div_2.c	/^int mp_div_2(mp_int * a, mp_int * b)$/;"	f
mp_div_2	libtommath/mtest/mpi.c	/^mp_err mp_div_2(mp_int *a, mp_int *c)$/;"	f
mp_div_2	libtommath/pre_gen/mpi.c	/^int mp_div_2(mp_int * a, mp_int * b)$/;"	f
mp_div_2d	libtommath/bn_mp_div_2d.c	/^int mp_div_2d (mp_int * a, int b, mp_int * c, mp_int * d)$/;"	f
mp_div_2d	libtommath/mtest/mpi.c	/^mp_err mp_div_2d(mp_int *a, mp_digit d, mp_int *q, mp_int *r)$/;"	f
mp_div_2d	libtommath/pre_gen/mpi.c	/^int mp_div_2d (mp_int * a, int b, mp_int * c, mp_int * d)$/;"	f
mp_div_3	libtommath/bn_mp_div_3.c	/^mp_div_3 (mp_int * a, mp_int *c, mp_digit * d)$/;"	f
mp_div_3	libtommath/pre_gen/mpi.c	/^mp_div_3 (mp_int * a, mp_int *c, mp_digit * d)$/;"	f
mp_div_d	libtommath/bn_mp_div_d.c	/^int mp_div_d (mp_int * a, mp_digit b, mp_int * c, mp_digit * d)$/;"	f
mp_div_d	libtommath/mtest/mpi.c	/^mp_err mp_div_d(mp_int *a, mp_digit d, mp_int *q, mp_digit *r)$/;"	f
mp_div_d	libtommath/pre_gen/mpi.c	/^int mp_div_d (mp_int * a, mp_digit b, mp_int * c, mp_digit * d)$/;"	f
mp_dr_is_modulus	libtommath/bn_mp_dr_is_modulus.c	/^int mp_dr_is_modulus(mp_int *a)$/;"	f
mp_dr_is_modulus	libtommath/pre_gen/mpi.c	/^int mp_dr_is_modulus(mp_int *a)$/;"	f
mp_dr_reduce	libtommath/bn_mp_dr_reduce.c	/^mp_dr_reduce (mp_int * x, mp_int * n, mp_digit k)$/;"	f
mp_dr_reduce	libtommath/pre_gen/mpi.c	/^mp_dr_reduce (mp_int * x, mp_int * n, mp_digit k)$/;"	f
mp_dr_setup	libtommath/bn_mp_dr_setup.c	/^void mp_dr_setup(mp_int *a, mp_digit *d)$/;"	f
mp_dr_setup	libtommath/pre_gen/mpi.c	/^void mp_dr_setup(mp_int *a, mp_digit *d)$/;"	f
mp_err	libtommath/mtest/mpi-types.h	/^typedef int                mp_err;$/;"	t
mp_err	libtommath/tommath.h	/^typedef int           mp_err;$/;"	t
mp_err_string	libtommath/mtest/mpi.c	/^static const char *mp_err_string[] = {$/;"	v	file:
mp_error_to_string	libtommath/bn_error.c	/^char *mp_error_to_string(int code)$/;"	f
mp_error_to_string	libtommath/pre_gen/mpi.c	/^char *mp_error_to_string(int code)$/;"	f
mp_exch	libtomcrypt/src/headers/tomcrypt_math.h	498;"	d
mp_exch	libtommath/bn_mp_exch.c	/^mp_exch (mp_int * a, mp_int * b)$/;"	f
mp_exch	libtommath/mtest/mpi.c	/^void mp_exch(mp_int *mp1, mp_int *mp2)$/;"	f
mp_exch	libtommath/pre_gen/mpi.c	/^mp_exch (mp_int * a, mp_int * b)$/;"	f
mp_expt	libtommath/mtest/mpi.c	/^mp_err mp_expt(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_expt_d	libtommath/bn_mp_expt_d.c	/^int mp_expt_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_expt_d	libtommath/mtest/mpi.c	/^mp_err mp_expt_d(mp_int *a, mp_digit d, mp_int *c)$/;"	f
mp_expt_d	libtommath/pre_gen/mpi.c	/^int mp_expt_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_exptmod	libtomcrypt/src/headers/tomcrypt_math.h	493;"	d
mp_exptmod	libtommath/bn_mp_exptmod.c	/^int mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)$/;"	f
mp_exptmod	libtommath/mtest/mpi.c	/^mp_err mp_exptmod(mp_int *a, mp_int *b, mp_int *m, mp_int *c)$/;"	f
mp_exptmod	libtommath/pre_gen/mpi.c	/^int mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y)$/;"	f
mp_exptmod_d	libtommath/mtest/mpi.c	/^mp_err mp_exptmod_d(mp_int *a, mp_digit d, mp_int *m, mp_int *c)$/;"	f
mp_exptmod_fast	libtommath/bn_mp_exptmod_fast.c	/^int mp_exptmod_fast (mp_int * G, mp_int * X, mp_int * P, mp_int * Y, int redmode)$/;"	f
mp_exptmod_fast	libtommath/pre_gen/mpi.c	/^int mp_exptmod_fast (mp_int * G, mp_int * X, mp_int * P, mp_int * Y, int redmode)$/;"	f
mp_exteuclid	libtommath/bn_mp_exteuclid.c	/^int mp_exteuclid(mp_int *a, mp_int *b, mp_int *U1, mp_int *U2, mp_int *U3)$/;"	f
mp_exteuclid	libtommath/pre_gen/mpi.c	/^int mp_exteuclid(mp_int *a, mp_int *b, mp_int *U1, mp_int *U2, mp_int *U3)$/;"	f
mp_fread	libtommath/bn_mp_fread.c	/^int mp_fread(mp_int *a, int radix, FILE *stream)$/;"	f
mp_fread	libtommath/pre_gen/mpi.c	/^int mp_fread(mp_int *a, int radix, FILE *stream)$/;"	f
mp_fwrite	libtommath/bn_mp_fwrite.c	/^int mp_fwrite(mp_int *a, int radix, FILE *stream)$/;"	f
mp_fwrite	libtommath/pre_gen/mpi.c	/^int mp_fwrite(mp_int *a, int radix, FILE *stream)$/;"	f
mp_gcd	libtomcrypt/src/headers/tomcrypt_math.h	481;"	d
mp_gcd	libtommath/bn_mp_gcd.c	/^int mp_gcd (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_gcd	libtommath/mtest/mpi.c	/^mp_err mp_gcd(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_gcd	libtommath/pre_gen/mpi.c	/^int mp_gcd (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_get_digit	libtomcrypt/src/headers/tomcrypt_math.h	456;"	d
mp_get_digit_count	libtomcrypt/src/headers/tomcrypt_math.h	457;"	d
mp_get_int	libtomcrypt/src/headers/tomcrypt_math.h	455;"	d
mp_get_int	libtommath/bn_mp_get_int.c	/^unsigned long mp_get_int(mp_int * a) $/;"	f
mp_get_int	libtommath/pre_gen/mpi.c	/^unsigned long mp_get_int(mp_int * a) $/;"	f
mp_get_prec	libtommath/mtest/mpi.c	/^unsigned int mp_get_prec(void)$/;"	f
mp_grow	libtommath/bn_mp_grow.c	/^int mp_grow (mp_int * a, int size)$/;"	f
mp_grow	libtommath/pre_gen/mpi.c	/^int mp_grow (mp_int * a, int size)$/;"	f
mp_init	libtomcrypt/src/headers/tomcrypt_math.h	444;"	d
mp_init	libtommath/bn_mp_init.c	/^int mp_init (mp_int * a)$/;"	f
mp_init	libtommath/mtest/mpi.c	/^mp_err mp_init(mp_int *mp)$/;"	f
mp_init	libtommath/pre_gen/mpi.c	/^int mp_init (mp_int * a)$/;"	f
mp_init_array	libtommath/mtest/mpi.c	/^mp_err mp_init_array(mp_int mp[], int count)$/;"	f
mp_init_copy	libtomcrypt/src/headers/tomcrypt_math.h	448;"	d
mp_init_copy	libtommath/bn_mp_init_copy.c	/^int mp_init_copy (mp_int * a, mp_int * b)$/;"	f
mp_init_copy	libtommath/mtest/mpi.c	/^mp_err mp_init_copy(mp_int *mp, mp_int *from)$/;"	f
mp_init_copy	libtommath/pre_gen/mpi.c	/^int mp_init_copy (mp_int * a, mp_int * b)$/;"	f
mp_init_multi	libtomcrypt/src/headers/tomcrypt_math.h	445;"	d
mp_init_multi	libtommath/bn_mp_init_multi.c	/^int mp_init_multi(mp_int *mp, ...) $/;"	f
mp_init_multi	libtommath/pre_gen/mpi.c	/^int mp_init_multi(mp_int *mp, ...) $/;"	f
mp_init_set	libtommath/bn_mp_init_set.c	/^int mp_init_set (mp_int * a, mp_digit b)$/;"	f
mp_init_set	libtommath/pre_gen/mpi.c	/^int mp_init_set (mp_int * a, mp_digit b)$/;"	f
mp_init_set_int	libtommath/bn_mp_init_set_int.c	/^int mp_init_set_int (mp_int * a, unsigned long b)$/;"	f
mp_init_set_int	libtommath/pre_gen/mpi.c	/^int mp_init_set_int (mp_int * a, unsigned long b)$/;"	f
mp_init_size	libtommath/bn_mp_init_size.c	/^int mp_init_size (mp_int * a, int size)$/;"	f
mp_init_size	libtommath/mtest/mpi.c	/^mp_err mp_init_size(mp_int *mp, mp_size prec)$/;"	f
mp_init_size	libtommath/pre_gen/mpi.c	/^int mp_init_size (mp_int * a, int size)$/;"	f
mp_int	libtommath/mtest/mpi.h	/^} mp_int;$/;"	t	typeref:struct:__anon42
mp_int	libtommath/tommath.h	/^} mp_int;$/;"	t	typeref:struct:__anon43
mp_invmod	libtomcrypt/src/headers/tomcrypt_math.h	486;"	d
mp_invmod	libtommath/bn_mp_invmod.c	/^int mp_invmod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_invmod	libtommath/mtest/mpi.c	/^mp_err mp_invmod(mp_int *a, mp_int *m, mp_int *c)$/;"	f
mp_invmod	libtommath/pre_gen/mpi.c	/^int mp_invmod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_invmod_slow	libtommath/bn_mp_invmod_slow.c	/^int mp_invmod_slow (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_invmod_slow	libtommath/pre_gen/mpi.c	/^int mp_invmod_slow (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_is_square	libtommath/bn_mp_is_square.c	/^int mp_is_square(mp_int *arg,int *ret) $/;"	f
mp_is_square	libtommath/pre_gen/mpi.c	/^int mp_is_square(mp_int *arg,int *ret) $/;"	f
mp_iseven	libtommath/mtest/mpi.c	/^int    mp_iseven(mp_int *a)$/;"	f
mp_iseven	libtommath/tommath.h	222;"	d
mp_isodd	libtomcrypt/src/headers/tomcrypt_math.h	497;"	d
mp_isodd	libtommath/mtest/mpi.c	/^int    mp_isodd(mp_int *a)$/;"	f
mp_isodd	libtommath/tommath.h	223;"	d
mp_iszero	libtomcrypt/src/headers/tomcrypt_math.h	496;"	d
mp_iszero	libtommath/tommath.h	221;"	d
mp_jacobi	libtommath/bn_mp_jacobi.c	/^int mp_jacobi (mp_int * a, mp_int * p, int *c)$/;"	f
mp_jacobi	libtommath/pre_gen/mpi.c	/^int mp_jacobi (mp_int * a, mp_int * p, int *c)$/;"	f
mp_karatsuba_mul	libtommath/bn_mp_karatsuba_mul.c	/^int mp_karatsuba_mul (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_karatsuba_mul	libtommath/pre_gen/mpi.c	/^int mp_karatsuba_mul (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_karatsuba_sqr	libtommath/bn_mp_karatsuba_sqr.c	/^int mp_karatsuba_sqr (mp_int * a, mp_int * b)$/;"	f
mp_karatsuba_sqr	libtommath/pre_gen/mpi.c	/^int mp_karatsuba_sqr (mp_int * a, mp_int * b)$/;"	f
mp_lcm	libtomcrypt/src/headers/tomcrypt_math.h	482;"	d
mp_lcm	libtommath/bn_mp_lcm.c	/^int mp_lcm (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_lcm	libtommath/mtest/mpi.c	/^mp_err mp_lcm(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_lcm	libtommath/pre_gen/mpi.c	/^int mp_lcm (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_lshd	libtommath/bn_mp_lshd.c	/^int mp_lshd (mp_int * a, int b)$/;"	f
mp_lshd	libtommath/pre_gen/mpi.c	/^int mp_lshd (mp_int * a, int b)$/;"	f
mp_mag_size	libtommath/mtest/mpi.h	206;"	d
mp_mag_size	libtommath/tommath.h	544;"	d
mp_mod	libtomcrypt/src/headers/tomcrypt_math.h	479;"	d
mp_mod	libtommath/bn_mp_mod.c	/^mp_mod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_mod	libtommath/mtest/mpi.c	/^mp_err mp_mod(mp_int *a, mp_int *m, mp_int *c)$/;"	f
mp_mod	libtommath/pre_gen/mpi.c	/^mp_mod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_mod_2d	libtommath/bn_mp_mod_2d.c	/^mp_mod_2d (mp_int * a, int b, mp_int * c)$/;"	f
mp_mod_2d	libtommath/pre_gen/mpi.c	/^mp_mod_2d (mp_int * a, int b, mp_int * c)$/;"	f
mp_mod_d	libtomcrypt/src/headers/tomcrypt_math.h	480;"	d
mp_mod_d	libtommath/bn_mp_mod_d.c	/^mp_mod_d (mp_int * a, mp_digit b, mp_digit * c)$/;"	f
mp_mod_d	libtommath/mtest/mpi.c	/^mp_err mp_mod_d(mp_int *a, mp_digit d, mp_digit *c)$/;"	f
mp_mod_d	libtommath/pre_gen/mpi.c	/^mp_mod_d (mp_int * a, mp_digit b, mp_digit * c)$/;"	f
mp_montgomery_calc_normalization	libtommath/bn_mp_montgomery_calc_normalization.c	/^int mp_montgomery_calc_normalization (mp_int * a, mp_int * b)$/;"	f
mp_montgomery_calc_normalization	libtommath/pre_gen/mpi.c	/^int mp_montgomery_calc_normalization (mp_int * a, mp_int * b)$/;"	f
mp_montgomery_free	libtomcrypt/src/headers/tomcrypt_math.h	491;"	d
mp_montgomery_normalization	libtomcrypt/src/headers/tomcrypt_math.h	489;"	d
mp_montgomery_reduce	libtomcrypt/src/headers/tomcrypt_math.h	490;"	d
mp_montgomery_reduce	libtommath/bn_mp_montgomery_reduce.c	/^mp_montgomery_reduce (mp_int * x, mp_int * n, mp_digit rho)$/;"	f
mp_montgomery_reduce	libtommath/pre_gen/mpi.c	/^mp_montgomery_reduce (mp_int * x, mp_int * n, mp_digit rho)$/;"	f
mp_montgomery_setup	libtomcrypt/src/headers/tomcrypt_math.h	488;"	d
mp_montgomery_setup	libtommath/bn_mp_montgomery_setup.c	/^mp_montgomery_setup (mp_int * n, mp_digit * rho)$/;"	f
mp_montgomery_setup	libtommath/pre_gen/mpi.c	/^mp_montgomery_setup (mp_int * n, mp_digit * rho)$/;"	f
mp_mul	libtomcrypt/src/headers/tomcrypt_math.h	474;"	d
mp_mul	libtommath/bn_mp_mul.c	/^int mp_mul (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_mul	libtommath/mtest/mpi.c	/^mp_err mp_mul(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_mul	libtommath/pre_gen/mpi.c	/^int mp_mul (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_mul_2	libtommath/bn_mp_mul_2.c	/^int mp_mul_2(mp_int * a, mp_int * b)$/;"	f
mp_mul_2	libtommath/mtest/mpi.c	/^mp_err mp_mul_2(mp_int *a, mp_int *c)$/;"	f
mp_mul_2	libtommath/pre_gen/mpi.c	/^int mp_mul_2(mp_int * a, mp_int * b)$/;"	f
mp_mul_2d	libtommath/bn_mp_mul_2d.c	/^int mp_mul_2d (mp_int * a, int b, mp_int * c)$/;"	f
mp_mul_2d	libtommath/mtest/mpi.c	/^mp_err mp_mul_2d(mp_int *a, mp_digit d, mp_int *c)$/;"	f
mp_mul_2d	libtommath/pre_gen/mpi.c	/^int mp_mul_2d (mp_int * a, int b, mp_int * c)$/;"	f
mp_mul_d	libtomcrypt/src/headers/tomcrypt_math.h	475;"	d
mp_mul_d	libtommath/bn_mp_mul_d.c	/^mp_mul_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_mul_d	libtommath/mtest/mpi.c	/^mp_err mp_mul_d(mp_int *a, mp_digit d, mp_int *b)$/;"	f
mp_mul_d	libtommath/pre_gen/mpi.c	/^mp_mul_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_mulmod	libtomcrypt/src/headers/tomcrypt_math.h	484;"	d
mp_mulmod	libtommath/bn_mp_mulmod.c	/^int mp_mulmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_mulmod	libtommath/mtest/mpi.c	/^mp_err mp_mulmod(mp_int *a, mp_int *b, mp_int *m, mp_int *c)$/;"	f
mp_mulmod	libtommath/pre_gen/mpi.c	/^int mp_mulmod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_n_root	libtommath/bn_mp_n_root.c	/^int mp_n_root (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_n_root	libtommath/pre_gen/mpi.c	/^int mp_n_root (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_neg	libtomcrypt/src/headers/tomcrypt_math.h	450;"	d
mp_neg	libtommath/bn_mp_neg.c	/^int mp_neg (mp_int * a, mp_int * b)$/;"	f
mp_neg	libtommath/mtest/mpi.c	/^mp_err mp_neg(mp_int *a, mp_int *b)$/;"	f
mp_neg	libtommath/pre_gen/mpi.c	/^int mp_neg (mp_int * a, mp_int * b)$/;"	f
mp_or	libtommath/bn_mp_or.c	/^int mp_or (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_or	libtommath/pre_gen/mpi.c	/^int mp_or (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_prime_fermat	libtommath/bn_mp_prime_fermat.c	/^int mp_prime_fermat (mp_int * a, mp_int * b, int *result)$/;"	f
mp_prime_fermat	libtommath/pre_gen/mpi.c	/^int mp_prime_fermat (mp_int * a, mp_int * b, int *result)$/;"	f
mp_prime_is_divisible	libtommath/bn_mp_prime_is_divisible.c	/^int mp_prime_is_divisible (mp_int * a, int *result)$/;"	f
mp_prime_is_divisible	libtommath/pre_gen/mpi.c	/^int mp_prime_is_divisible (mp_int * a, int *result)$/;"	f
mp_prime_is_prime	libtomcrypt/src/headers/tomcrypt_math.h	494;"	d
mp_prime_is_prime	libtommath/bn_mp_prime_is_prime.c	/^int mp_prime_is_prime (mp_int * a, int t, int *result)$/;"	f
mp_prime_is_prime	libtommath/pre_gen/mpi.c	/^int mp_prime_is_prime (mp_int * a, int t, int *result)$/;"	f
mp_prime_miller_rabin	libtommath/bn_mp_prime_miller_rabin.c	/^int mp_prime_miller_rabin (mp_int * a, mp_int * b, int *result)$/;"	f
mp_prime_miller_rabin	libtommath/pre_gen/mpi.c	/^int mp_prime_miller_rabin (mp_int * a, mp_int * b, int *result)$/;"	f
mp_prime_next_prime	libtommath/bn_mp_prime_next_prime.c	/^int mp_prime_next_prime(mp_int *a, int t, int bbs_style)$/;"	f
mp_prime_next_prime	libtommath/pre_gen/mpi.c	/^int mp_prime_next_prime(mp_int *a, int t, int bbs_style)$/;"	f
mp_prime_rabin_miller_trials	libtommath/bn_mp_prime_rabin_miller_trials.c	/^int mp_prime_rabin_miller_trials(int size)$/;"	f
mp_prime_rabin_miller_trials	libtommath/pre_gen/mpi.c	/^int mp_prime_rabin_miller_trials(int size)$/;"	f
mp_prime_random	libtommath/tommath.h	501;"	d
mp_prime_random_ex	libtommath/bn_mp_prime_random_ex.c	/^int mp_prime_random_ex(mp_int *a, int t, int size, int flags, ltm_prime_callback cb, void *dat)$/;"	f
mp_prime_random_ex	libtommath/pre_gen/mpi.c	/^int mp_prime_random_ex(mp_int *a, int t, int size, int flags, ltm_prime_callback cb, void *dat)$/;"	f
mp_print	libtommath/mtest/mpi.c	/^void   mp_print(mp_int *mp, FILE *ofp)$/;"	f
mp_radix_size	libtommath/bn_mp_radix_size.c	/^int mp_radix_size (mp_int * a, int radix, int *size)$/;"	f
mp_radix_size	libtommath/mtest/mpi.c	/^int    mp_radix_size(mp_int *mp, int radix)$/;"	f
mp_radix_size	libtommath/pre_gen/mpi.c	/^int mp_radix_size (mp_int * a, int radix, int *size)$/;"	f
mp_rand	libtommath/bn_mp_rand.c	/^mp_rand (mp_int * a, int digits)$/;"	f
mp_rand	libtommath/pre_gen/mpi.c	/^mp_rand (mp_int * a, int digits)$/;"	f
mp_raw_size	libtommath/mtest/mpi.h	203;"	d
mp_raw_size	libtommath/tommath.h	541;"	d
mp_read_mag	libtommath/mtest/mpi.h	205;"	d
mp_read_mag	libtommath/tommath.h	543;"	d
mp_read_radix	libtomcrypt/src/headers/tomcrypt_math.h	464;"	d
mp_read_radix	libtommath/bn_mp_read_radix.c	/^int mp_read_radix (mp_int * a, const char *str, int radix)$/;"	f
mp_read_radix	libtommath/mtest/mpi.c	/^mp_err  mp_read_radix(mp_int *mp, unsigned char *str, int radix)$/;"	f
mp_read_radix	libtommath/pre_gen/mpi.c	/^int mp_read_radix (mp_int * a, const char *str, int radix)$/;"	f
mp_read_raw	libtommath/mtest/mpi.h	202;"	d
mp_read_raw	libtommath/tommath.h	540;"	d
mp_read_signed_bin	libtommath/bn_mp_read_signed_bin.c	/^int mp_read_signed_bin (mp_int * a, const unsigned char *b, int c)$/;"	f
mp_read_signed_bin	libtommath/mtest/mpi.c	/^mp_err  mp_read_signed_bin(mp_int *mp, unsigned char *str, int len)$/;"	f
mp_read_signed_bin	libtommath/pre_gen/mpi.c	/^int mp_read_signed_bin (mp_int * a, const unsigned char *b, int c)$/;"	f
mp_read_unsigned_bin	libtomcrypt/src/headers/tomcrypt_math.h	468;"	d
mp_read_unsigned_bin	libtommath/bn_mp_read_unsigned_bin.c	/^int mp_read_unsigned_bin (mp_int * a, const unsigned char *b, int c)$/;"	f
mp_read_unsigned_bin	libtommath/mtest/mpi.c	/^mp_err  mp_read_unsigned_bin(mp_int *mp, unsigned char *str, int len)$/;"	f
mp_read_unsigned_bin	libtommath/pre_gen/mpi.c	/^int mp_read_unsigned_bin (mp_int * a, const unsigned char *b, int c)$/;"	f
mp_reduce	libtommath/bn_mp_reduce.c	/^int mp_reduce (mp_int * x, mp_int * m, mp_int * mu)$/;"	f
mp_reduce	libtommath/pre_gen/mpi.c	/^int mp_reduce (mp_int * x, mp_int * m, mp_int * mu)$/;"	f
mp_reduce_2k	libtommath/bn_mp_reduce_2k.c	/^int mp_reduce_2k(mp_int *a, mp_int *n, mp_digit d)$/;"	f
mp_reduce_2k	libtommath/pre_gen/mpi.c	/^int mp_reduce_2k(mp_int *a, mp_int *n, mp_digit d)$/;"	f
mp_reduce_2k_l	libtommath/bn_mp_reduce_2k_l.c	/^int mp_reduce_2k_l(mp_int *a, mp_int *n, mp_int *d)$/;"	f
mp_reduce_2k_l	libtommath/pre_gen/mpi.c	/^int mp_reduce_2k_l(mp_int *a, mp_int *n, mp_int *d)$/;"	f
mp_reduce_2k_setup	libtommath/bn_mp_reduce_2k_setup.c	/^int mp_reduce_2k_setup(mp_int *a, mp_digit *d)$/;"	f
mp_reduce_2k_setup	libtommath/pre_gen/mpi.c	/^int mp_reduce_2k_setup(mp_int *a, mp_digit *d)$/;"	f
mp_reduce_2k_setup_l	libtommath/bn_mp_reduce_2k_setup_l.c	/^int mp_reduce_2k_setup_l(mp_int *a, mp_int *d)$/;"	f
mp_reduce_2k_setup_l	libtommath/pre_gen/mpi.c	/^int mp_reduce_2k_setup_l(mp_int *a, mp_int *d)$/;"	f
mp_reduce_is_2k	libtommath/bn_mp_reduce_is_2k.c	/^int mp_reduce_is_2k(mp_int *a)$/;"	f
mp_reduce_is_2k	libtommath/pre_gen/mpi.c	/^int mp_reduce_is_2k(mp_int *a)$/;"	f
mp_reduce_is_2k_l	libtommath/bn_mp_reduce_is_2k_l.c	/^int mp_reduce_is_2k_l(mp_int *a)$/;"	f
mp_reduce_is_2k_l	libtommath/pre_gen/mpi.c	/^int mp_reduce_is_2k_l(mp_int *a)$/;"	f
mp_reduce_setup	libtommath/bn_mp_reduce_setup.c	/^int mp_reduce_setup (mp_int * a, mp_int * b)$/;"	f
mp_reduce_setup	libtommath/pre_gen/mpi.c	/^int mp_reduce_setup (mp_int * a, mp_int * b)$/;"	f
mp_rshd	libtommath/bn_mp_rshd.c	/^void mp_rshd (mp_int * a, int b)$/;"	f
mp_rshd	libtommath/pre_gen/mpi.c	/^void mp_rshd (mp_int * a, int b)$/;"	f
mp_s_rmap	libtommath/bn_mp_radix_smap.c	/^const char *mp_s_rmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+\/";$/;"	v
mp_s_rmap	libtommath/pre_gen/mpi.c	/^const char *mp_s_rmap = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz+\/";$/;"	v
mp_set	libtomcrypt/src/headers/tomcrypt_math.h	453;"	d
mp_set	libtommath/bn_mp_set.c	/^void mp_set (mp_int * a, mp_digit b)$/;"	f
mp_set	libtommath/mtest/mpi.c	/^void   mp_set(mp_int *mp, mp_digit d)$/;"	f
mp_set	libtommath/pre_gen/mpi.c	/^void mp_set (mp_int * a, mp_digit b)$/;"	f
mp_set_int	libtomcrypt/src/headers/tomcrypt_math.h	454;"	d
mp_set_int	libtommath/bn_mp_set_int.c	/^int mp_set_int (mp_int * a, unsigned long b)$/;"	f
mp_set_int	libtommath/mtest/mpi.c	/^mp_err mp_set_int(mp_int *mp, long z)$/;"	f
mp_set_int	libtommath/pre_gen/mpi.c	/^int mp_set_int (mp_int * a, unsigned long b)$/;"	f
mp_set_prec	libtommath/mtest/mpi.c	/^void         mp_set_prec(unsigned int prec)$/;"	f
mp_shrink	libtommath/bn_mp_shrink.c	/^int mp_shrink (mp_int * a)$/;"	f
mp_shrink	libtommath/pre_gen/mpi.c	/^int mp_shrink (mp_int * a)$/;"	f
mp_sign	libtommath/mtest/mpi-types.h	/^typedef char               mp_sign;$/;"	t
mp_signed_bin_size	libtommath/bn_mp_signed_bin_size.c	/^int mp_signed_bin_size (mp_int * a)$/;"	f
mp_signed_bin_size	libtommath/mtest/mpi.c	/^int    mp_signed_bin_size(mp_int *mp)$/;"	f
mp_signed_bin_size	libtommath/pre_gen/mpi.c	/^int mp_signed_bin_size (mp_int * a)$/;"	f
mp_size	libtommath/mtest/mpi-types.h	/^typedef unsigned int       mp_size;$/;"	t
mp_sqr	libtomcrypt/src/headers/tomcrypt_math.h	476;"	d
mp_sqr	libtommath/bn_mp_sqr.c	/^mp_sqr (mp_int * a, mp_int * b)$/;"	f
mp_sqr	libtommath/mtest/mpi.c	/^mp_err mp_sqr(mp_int *a, mp_int *b)$/;"	f
mp_sqr	libtommath/mtest/mpi.h	131;"	d
mp_sqr	libtommath/pre_gen/mpi.c	/^mp_sqr (mp_int * a, mp_int * b)$/;"	f
mp_sqrmod	libtomcrypt/src/headers/tomcrypt_math.h	485;"	d
mp_sqrmod	libtommath/bn_mp_sqrmod.c	/^mp_sqrmod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_sqrmod	libtommath/mtest/mpi.c	/^mp_err mp_sqrmod(mp_int *a, mp_int *m, mp_int *c)$/;"	f
mp_sqrmod	libtommath/mtest/mpi.h	151;"	d
mp_sqrmod	libtommath/pre_gen/mpi.c	/^mp_sqrmod (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_sqrt	libtommath/bn_mp_sqrt.c	/^int mp_sqrt(mp_int *arg, mp_int *ret) $/;"	f
mp_sqrt	libtommath/mtest/mpi.c	/^mp_err mp_sqrt(mp_int *a, mp_int *b)$/;"	f
mp_sqrt	libtommath/pre_gen/mpi.c	/^int mp_sqrt(mp_int *arg, mp_int *ret) $/;"	f
mp_strerror	libtommath/mtest/mpi.c	/^const char  *mp_strerror(mp_err ec)$/;"	f
mp_sub	libtomcrypt/src/headers/tomcrypt_math.h	472;"	d
mp_sub	libtommath/bn_mp_sub.c	/^mp_sub (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_sub	libtommath/mtest/mpi.c	/^mp_err mp_sub(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_sub	libtommath/pre_gen/mpi.c	/^mp_sub (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_sub_d	libtomcrypt/src/headers/tomcrypt_math.h	473;"	d
mp_sub_d	libtommath/bn_mp_sub_d.c	/^mp_sub_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_sub_d	libtommath/mtest/mpi.c	/^mp_err mp_sub_d(mp_int *a, mp_digit d, mp_int *b)$/;"	f
mp_sub_d	libtommath/pre_gen/mpi.c	/^mp_sub_d (mp_int * a, mp_digit b, mp_int * c)$/;"	f
mp_submod	libtommath/bn_mp_submod.c	/^mp_submod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_submod	libtommath/mtest/mpi.c	/^mp_err mp_submod(mp_int *a, mp_int *b, mp_int *m, mp_int *c)$/;"	f
mp_submod	libtommath/pre_gen/mpi.c	/^mp_submod (mp_int * a, mp_int * b, mp_int * c, mp_int * d)$/;"	f
mp_to64	libtommath/mtest/mtest.c	68;"	d	file:
mp_to_signed_bin	libtommath/bn_mp_to_signed_bin.c	/^int mp_to_signed_bin (mp_int * a, unsigned char *b)$/;"	f
mp_to_signed_bin	libtommath/mtest/mpi.c	/^mp_err mp_to_signed_bin(mp_int *mp, unsigned char *str)$/;"	f
mp_to_signed_bin	libtommath/pre_gen/mpi.c	/^int mp_to_signed_bin (mp_int * a, unsigned char *b)$/;"	f
mp_to_signed_bin_n	libtommath/bn_mp_to_signed_bin_n.c	/^int mp_to_signed_bin_n (mp_int * a, unsigned char *b, unsigned long *outlen)$/;"	f
mp_to_signed_bin_n	libtommath/pre_gen/mpi.c	/^int mp_to_signed_bin_n (mp_int * a, unsigned char *b, unsigned long *outlen)$/;"	f
mp_to_unsigned_bin	libtomcrypt/src/headers/tomcrypt_math.h	467;"	d
mp_to_unsigned_bin	libtommath/bn_mp_to_unsigned_bin.c	/^int mp_to_unsigned_bin (mp_int * a, unsigned char *b)$/;"	f
mp_to_unsigned_bin	libtommath/mtest/mpi.c	/^mp_err mp_to_unsigned_bin(mp_int *mp, unsigned char *str)$/;"	f
mp_to_unsigned_bin	libtommath/pre_gen/mpi.c	/^int mp_to_unsigned_bin (mp_int * a, unsigned char *b)$/;"	f
mp_to_unsigned_bin_n	libtommath/bn_mp_to_unsigned_bin_n.c	/^int mp_to_unsigned_bin_n (mp_int * a, unsigned char *b, unsigned long *outlen)$/;"	f
mp_to_unsigned_bin_n	libtommath/pre_gen/mpi.c	/^int mp_to_unsigned_bin_n (mp_int * a, unsigned char *b, unsigned long *outlen)$/;"	f
mp_tobinary	libtommath/mtest/mpi.h	217;"	d
mp_tobinary	libtommath/tommath.h	547;"	d
mp_todecimal	libtommath/mtest/mpi.h	219;"	d
mp_todecimal	libtommath/tommath.h	549;"	d
mp_tohex	libtomcrypt/src/headers/tomcrypt_math.h	500;"	d
mp_tohex	libtommath/mtest/mpi.h	220;"	d
mp_tohex	libtommath/tommath.h	550;"	d
mp_tomag	libtommath/mtest/mpi.h	207;"	d
mp_tomag	libtommath/tommath.h	545;"	d
mp_tooctal	libtommath/mtest/mpi.h	218;"	d
mp_tooctal	libtommath/tommath.h	548;"	d
mp_toom_mul	libtommath/bn_mp_toom_mul.c	/^int mp_toom_mul(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_toom_mul	libtommath/pre_gen/mpi.c	/^int mp_toom_mul(mp_int *a, mp_int *b, mp_int *c)$/;"	f
mp_toom_sqr	libtommath/bn_mp_toom_sqr.c	/^mp_toom_sqr(mp_int *a, mp_int *b)$/;"	f
mp_toom_sqr	libtommath/pre_gen/mpi.c	/^mp_toom_sqr(mp_int *a, mp_int *b)$/;"	f
mp_toradix	libtomcrypt/src/headers/tomcrypt_math.h	465;"	d
mp_toradix	libtommath/bn_mp_toradix.c	/^int mp_toradix (mp_int * a, char *str, int radix)$/;"	f
mp_toradix	libtommath/mtest/mpi.c	/^mp_err mp_toradix(mp_int *mp, unsigned char *str, int radix)$/;"	f
mp_toradix	libtommath/pre_gen/mpi.c	/^int mp_toradix (mp_int * a, char *str, int radix)$/;"	f
mp_toradix_n	libtommath/bn_mp_toradix_n.c	/^int mp_toradix_n(mp_int * a, char *str, int radix, int maxlen)$/;"	f
mp_toradix_n	libtommath/pre_gen/mpi.c	/^int mp_toradix_n(mp_int * a, char *str, int radix, int maxlen)$/;"	f
mp_toraw	libtommath/mtest/mpi.h	204;"	d
mp_toraw	libtommath/tommath.h	542;"	d
mp_unsigned_bin_size	libtomcrypt/src/headers/tomcrypt_math.h	466;"	d
mp_unsigned_bin_size	libtommath/bn_mp_unsigned_bin_size.c	/^int mp_unsigned_bin_size (mp_int * a)$/;"	f
mp_unsigned_bin_size	libtommath/mtest/mpi.c	/^int     mp_unsigned_bin_size(mp_int *mp) $/;"	f
mp_unsigned_bin_size	libtommath/pre_gen/mpi.c	/^int mp_unsigned_bin_size (mp_int * a)$/;"	f
mp_value_radix_size	libtommath/mtest/mpi.c	/^int    mp_value_radix_size(int num, int qty, int radix)$/;"	f
mp_word	libtommath/mtest/mpi-types.h	/^typedef unsigned int       mp_word;   \/* 4 byte type *\/$/;"	t
mp_word	libtommath/tommath.h	/^   typedef ulong64            mp_word;$/;"	t
mp_word	libtommath/tommath.h	/^   typedef unsigned long      mp_word __attribute__ ((mode(TI)));$/;"	t
mp_word	libtommath/tommath.h	/^   typedef unsigned long      mp_word;$/;"	t
mp_word	libtommath/tommath.h	/^   typedef unsigned short     mp_word;$/;"	t
mp_xgcd	libtommath/mtest/mpi.c	/^mp_err mp_xgcd(mp_int *a, mp_int *b, mp_int *g, mp_int *x, mp_int *y)$/;"	f
mp_xor	libtommath/bn_mp_xor.c	/^mp_xor (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_xor	libtommath/pre_gen/mpi.c	/^mp_xor (mp_int * a, mp_int * b, mp_int * c)$/;"	f
mp_zero	libtommath/bn_mp_zero.c	/^void mp_zero (mp_int * a)$/;"	f
mp_zero	libtommath/mtest/mpi.c	/^void   mp_zero(mp_int *mp)$/;"	f
mp_zero	libtommath/pre_gen/mpi.c	/^void mp_zero (mp_int * a)$/;"	f
mpdiv	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*mpdiv)(void *a, void *b, void *c, void *d);$/;"	m	struct:__anon11
mpi_code	libtomcrypt/src/math/ltm_desc.c	/^    int mpi_code, ltc_code;$/;"	m	struct:__anon39	file:
mpi_to_ltc_codes	libtomcrypt/src/math/ltm_desc.c	/^} mpi_to_ltc_codes[] = {$/;"	v	typeref:struct:__anon39	file:
mpi_to_ltc_error	libtomcrypt/src/math/ltm_desc.c	/^static int mpi_to_ltc_error(int err)$/;"	f	file:
mpint_pos	keyimport.c	/^struct mpint_pos { void *start; int bytes; };$/;"	s	file:
msg	libtommath/bn_error.c	/^     char *msg;$/;"	m	struct:__anon45	file:
msg	libtommath/pre_gen/mpi.c	/^     char *msg;$/;"	m	struct:__anon40	file:
msgs	libtommath/bn_error.c	/^} msgs[] = {$/;"	v	typeref:struct:__anon45	file:
msgs	libtommath/pre_gen/mpi.c	/^} msgs[] = {$/;"	v	typeref:struct:__anon40	file:
mtime	scp.c	844;"	d	file:
mu	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^   void      *mu;             \/* copy of the montgomery constant *\/$/;"	m	struct:__anon37	file:
mul	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*mul)(void *a, void *b, void *c);$/;"	m	struct:__anon11
mul	libtomcrypt/src/math/gmp_desc.c	/^static int mul(void *a, void *b, void *c)$/;"	f	file:
mul	libtomcrypt/src/math/ltm_desc.c	/^static int mul(void *a, void *b, void *c)$/;"	f	file:
mul	libtomcrypt/src/math/tfm_desc.c	/^static int mul(void *a, void *b, void *c)$/;"	f	file:
muli	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*muli)(void *a, unsigned long b, void *c);$/;"	m	struct:__anon11
muli	libtomcrypt/src/math/gmp_desc.c	/^static int muli(void *a, unsigned long b, void *c)$/;"	f	file:
muli	libtomcrypt/src/math/ltm_desc.c	/^static int muli(void *a, unsigned long b, void *c)$/;"	f	file:
muli	libtomcrypt/src/math/tfm_desc.c	/^static int muli(void *a, unsigned long b, void *c)$/;"	f	file:
mulmod	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*mulmod)(void *a, void *b, void *c, void *d);$/;"	m	struct:__anon11
mulmod	libtomcrypt/src/math/gmp_desc.c	/^static int mulmod(void *a, void *b, void *c, void *d)$/;"	f	file:
mulmod	libtomcrypt/src/math/ltm_desc.c	/^static int mulmod(void *a, void *b, void *c, void *d)$/;"	f	file:
mulmod	libtomcrypt/src/math/tfm_desc.c	/^static int mulmod(void *a, void *b, void *c, void *d)$/;"	f	file:
multihop_passthrough_args	cli-runopts.c	/^multihop_passthrough_args() {$/;"	f	file:
myrng	libtommath/demo/demo.c	/^int myrng(unsigned char *dst, int len, void *dat)$/;"	f
n	rsa.h	/^	mp_int* n;$/;"	m	struct:__anon48
n_prime	libtommath/etc/pprime.c	/^int   n_prime;$/;"	v
nalloc	scpmisc.h	/^	int     nalloc;$/;"	m	struct:arglist
name	algo.h	/^	unsigned char *name; \/* identifying name *\/$/;"	m	struct:Algo_Type
name	channel.h	/^	char *name;$/;"	m	struct:ChanType
name	chansession.h	/^	char* name;$/;"	m	struct:SigMap
name	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   char *name;$/;"	m	struct:ltc_cipher_descriptor
name	libtomcrypt/src/headers/tomcrypt_hash.h	/^    char *name;$/;"	m	struct:ltc_hash_descriptor
name	libtomcrypt/src/headers/tomcrypt_math.h	/^   char *name;$/;"	m	struct:__anon11
name	libtomcrypt/src/headers/tomcrypt_pk.h	/^   char *name; $/;"	m	struct:__anon28
name	libtomcrypt/src/headers/tomcrypt_prng.h	/^    char *name;$/;"	m	struct:ltc_prng_descriptor
name	libtomcrypt/testprof/tomcrypt_test.h	/^    char *name, *prov, *req;$/;"	m	struct:__anon8
nbuf	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int          nbuf,           \/* number of part-word stream bits buffered *\/$/;"	m	struct:sober128_prng
ndraw	libtommath/demo/demo.c	/^void ndraw(mp_int * a, char *name)$/;"	f
ndraw	libtommath/demo/timing.c	/^void ndraw(mp_int * a, char *name)$/;"	f
neg	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*neg)(void *src, void *dst);$/;"	m	struct:__anon11
neg	libtomcrypt/src/math/gmp_desc.c	/^static int neg(void *a, void *b)$/;"	f	file:
neg	libtomcrypt/src/math/ltm_desc.c	/^static int neg(void *a, void *b)$/;"	f	file:
neg	libtomcrypt/src/math/tfm_desc.c	/^static int neg(void *a, void *b)$/;"	f	file:
netcat_host	runopts.h	/^	char *netcat_host;$/;"	m	struct:cli_runopts
netcat_port	runopts.h	/^	unsigned int netcat_port;$/;"	m	struct:cli_runopts
new_agent_chan	cli-agentfwd.c	/^static int new_agent_chan(struct Channel * channel) {$/;"	f	file:
new_listener	listener.c	/^struct Listener* new_listener(int socks[], unsigned int nsocks,$/;"	f
new_sign_key	signkey.c	/^sign_key * new_sign_key() {$/;"	f
newchannel	common-channel.c	/^static struct Channel* newchannel(unsigned int remotechan, $/;"	f	file:
newchansess	svr-chansession.c	/^static int newchansess(struct Channel *channel) {$/;"	f	file:
newkeys	session.h	/^	struct key_context *newkeys;$/;"	m	struct:sshsession	typeref:struct:sshsession::key_context
newtcpdirect	svr-tcpfwd.c	/^static int newtcpdirect(struct Channel * channel) {$/;"	f	file:
newtcpforwarded	cli-tcpfwd.c	/^static int newtcpforwarded(struct Channel * channel) {$/;"	f	file:
next	libtomcrypt/src/headers/tomcrypt_pk.h	/^   struct ltc_asn1_list_ *prev, *next, *child, *parent;$/;"	m	struct:ltc_asn1_list_	typeref:struct:ltc_asn1_list_::
next	list.h	/^	struct _m_list_elem *next;$/;"	m	struct:_m_list_elem	typeref:struct:_m_list_elem::_m_list_elem
next	session.h	/^	struct packetlist *next;$/;"	m	struct:packetlist	typeref:struct:packetlist::packetlist
nltap	libtomcrypt/src/prngs/sober128.c	/^static ulong32 nltap(struct sober128_prng *c)$/;"	f	file:
no_agent_forwarding_flag	auth.h	/^	int no_agent_forwarding_flag;$/;"	m	struct:PubKeyOptions
no_cmd	runopts.h	/^	int no_cmd;$/;"	m	struct:cli_runopts
no_hostkey_check	runopts.h	/^	int no_hostkey_check;$/;"	m	struct:cli_runopts
no_port_forwarding_flag	auth.h	/^	int no_port_forwarding_flag;$/;"	m	struct:PubKeyOptions
no_pty_flag	auth.h	/^	int no_pty_flag;$/;"	m	struct:PubKeyOptions
no_results	libtomcrypt/testprof/x86_prof.c	/^int no_results;$/;"	v
no_x11_forwarding_flag	auth.h	/^	int no_x11_forwarding_flag;$/;"	m	struct:PubKeyOptions
noauthpass	runopts.h	/^	int noauthpass;$/;"	m	struct:svr_runopts
noekeon	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct noekeon_key  noekeon;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::noekeon_key
noekeon_desc	libtomcrypt/src/ciphers/noekeon.c	/^const struct ltc_cipher_descriptor noekeon_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
noekeon_done	libtomcrypt/src/ciphers/noekeon.c	/^void noekeon_done(symmetric_key *skey)$/;"	f
noekeon_ecb_decrypt	libtomcrypt/src/ciphers/noekeon.c	/^int noekeon_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
noekeon_ecb_encrypt	libtomcrypt/src/ciphers/noekeon.c	/^int noekeon_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
noekeon_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct noekeon_key {$/;"	s
noekeon_keysize	libtomcrypt/src/ciphers/noekeon.c	/^int noekeon_keysize(int *keysize)$/;"	f
noekeon_setup	libtomcrypt/src/ciphers/noekeon.c	/^int noekeon_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
noekeon_test	libtomcrypt/src/ciphers/noekeon.c	/^int noekeon_test(void)$/;"	f
nolocaltcp	runopts.h	/^	int nolocaltcp;$/;"	m	struct:svr_runopts
noptycommand	svr-chansession.c	/^static int noptycommand(struct Channel *channel, struct ChanSess *chansess) {$/;"	f	file:
noremotetcp	runopts.h	/^	int noremotetcp;$/;"	m	struct:svr_runopts
norootlogin	runopts.h	/^	int norootlogin;$/;"	m	struct:svr_runopts
norootpass	runopts.h	/^	int norootpass;$/;"	m	struct:svr_runopts
nsocks	listener.h	/^	unsigned int nsocks;$/;"	m	struct:Listener
num	scpmisc.h	/^	int     num;$/;"	m	struct:arglist
ocb_decrypt	libtomcrypt/src/encauth/ocb/ocb_decrypt.c	/^int ocb_decrypt(ocb_state *ocb, const unsigned char *ct, unsigned char *pt)$/;"	f
ocb_decrypt_verify_memory	libtomcrypt/src/encauth/ocb/ocb_decrypt_verify_memory.c	/^int ocb_decrypt_verify_memory(int cipher,$/;"	f
ocb_done_decrypt	libtomcrypt/src/encauth/ocb/ocb_done_decrypt.c	/^int ocb_done_decrypt(ocb_state *ocb, $/;"	f
ocb_done_encrypt	libtomcrypt/src/encauth/ocb/ocb_done_encrypt.c	/^int ocb_done_encrypt(ocb_state *ocb, const unsigned char *pt, unsigned long ptlen,$/;"	f
ocb_encrypt	libtomcrypt/src/encauth/ocb/ocb_encrypt.c	/^int ocb_encrypt(ocb_state *ocb, const unsigned char *pt, unsigned char *ct)$/;"	f
ocb_encrypt_authenticate_memory	libtomcrypt/src/encauth/ocb/ocb_encrypt_authenticate_memory.c	/^int ocb_encrypt_authenticate_memory(int cipher,$/;"	f
ocb_gen	libtomcrypt/demos/tv_gen.c	/^void ocb_gen(void)$/;"	f
ocb_init	libtomcrypt/src/encauth/ocb/ocb_init.c	/^int ocb_init(ocb_state *ocb, int cipher, $/;"	f
ocb_ntz	libtomcrypt/src/encauth/ocb/ocb_ntz.c	/^int ocb_ntz(unsigned long x)$/;"	f
ocb_shift_xor	libtomcrypt/src/encauth/ocb/ocb_shift_xor.c	/^void ocb_shift_xor(ocb_state *ocb, unsigned char *Z)$/;"	f
ocb_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} ocb_state;$/;"	t	typeref:struct:__anon16
ocb_test	libtomcrypt/src/encauth/ocb/ocb_test.c	/^int ocb_test(void)$/;"	f
ofb_decrypt	libtomcrypt/src/modes/ofb/ofb_decrypt.c	/^int ofb_decrypt(const unsigned char *ct, unsigned char *pt, unsigned long len, symmetric_OFB *ofb)$/;"	f
ofb_done	libtomcrypt/src/modes/ofb/ofb_done.c	/^int ofb_done(symmetric_OFB *ofb)$/;"	f
ofb_encrypt	libtomcrypt/src/modes/ofb/ofb_encrypt.c	/^int ofb_encrypt(const unsigned char *pt, unsigned char *ct, unsigned long len, symmetric_OFB *ofb)$/;"	f
ofb_getiv	libtomcrypt/src/modes/ofb/ofb_getiv.c	/^int ofb_getiv(unsigned char *IV, unsigned long *len, symmetric_OFB *ofb)$/;"	f
ofb_setiv	libtomcrypt/src/modes/ofb/ofb_setiv.c	/^int ofb_setiv(const unsigned char *IV, unsigned long len, symmetric_OFB *ofb)$/;"	f
ofb_start	libtomcrypt/src/modes/ofb/ofb_start.c	/^int ofb_start(int cipher, const unsigned char *IV, const unsigned char *key, $/;"	f
off_dir	libtomcrypt/src/headers/tomcrypt_pk.h	/^            off_dir, \/* timezone offset direction 0 == +, 1 == - *\/$/;"	m	struct:__anon33
off_hh	libtomcrypt/src/headers/tomcrypt_pk.h	/^            off_hh, \/* timezone offset hours *\/$/;"	m	struct:__anon33
off_mm	libtomcrypt/src/headers/tomcrypt_pk.h	/^            off_mm; \/* timezone offset minutes *\/$/;"	m	struct:__anon33
okname	scp.c	/^okname(char *cp0)$/;"	f
omac_done	libtomcrypt/src/mac/omac/omac_done.c	/^int omac_done(omac_state *omac, unsigned char *out, unsigned long *outlen)$/;"	f
omac_file	libtomcrypt/src/mac/omac/omac_file.c	/^int omac_file(int cipher, $/;"	f
omac_gen	libtomcrypt/demos/tv_gen.c	/^void omac_gen(void)$/;"	f
omac_init	libtomcrypt/src/mac/omac/omac_init.c	/^int omac_init(omac_state *omac, int cipher, const unsigned char *key, unsigned long keylen)$/;"	f
omac_memory	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*omac_memory)($/;"	m	struct:ltc_cipher_descriptor
omac_memory	libtomcrypt/src/mac/omac/omac_memory.c	/^int omac_memory(int cipher, $/;"	f
omac_memory_multi	libtomcrypt/src/mac/omac/omac_memory_multi.c	/^int omac_memory_multi(int cipher, $/;"	f
omac_process	libtomcrypt/src/mac/omac/omac_process.c	/^int omac_process(omac_state *omac, const unsigned char *in, unsigned long inlen)$/;"	f
omac_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} omac_state;$/;"	t	typeref:struct:__anon13
omac_test	libtomcrypt/src/mac/omac/omac_test.c	/^int omac_test(void)$/;"	f
open_known_hosts_file	cli-kex.c	/^static FILE* open_known_hosts_file(int * readonly)$/;"	f	file:
openssh_encrypted	keyimport.c	/^static int openssh_encrypted(const char *filename)$/;"	f	file:
openssh_key	keyimport.c	/^struct openssh_key {$/;"	s	file:
openssh_read	keyimport.c	/^static sign_key *openssh_read(const char *filename, char *passphrase)$/;"	f	file:
openssh_write	keyimport.c	/^static int openssh_write(const char *filename, sign_key *key,$/;"	f	file:
openssl_private_rsa	libtomcrypt/testprof/rsa_test.c	/^static const unsigned char openssl_private_rsa[] = {$/;"	v	file:
openssl_public_rsa	libtomcrypt/testprof/rsa_test.c	/^static const unsigned char openssl_public_rsa[] = {$/;"	v	file:
openssl_public_rsa_stripped	libtomcrypt/testprof/rsa_test.c	/^static const unsigned char openssl_public_rsa_stripped[] = {$/;"	v	file:
opts	common-runopts.c	/^runopts opts; \/* GLOBAL *\/$/;"	v
order	libtomcrypt/src/headers/tomcrypt_pk.h	/^   char *order;$/;"	m	struct:__anon28
original_command	chansession.h	/^	char *original_command;$/;"	m	struct:ChanSess
our_first_follows_matches	kex.h	/^	unsigned our_first_follows_matches : 1;$/;"	m	struct:KEXState
own_user	runopts.h	/^	char *own_user;$/;"	m	struct:cli_runopts
p	dss.h	/^	mp_int* p;$/;"	m	struct:__anon6
p	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *p; $/;"	m	struct:KAT_key
p	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *p; $/;"	m	struct:Rsa_key
p	libtomcrypt/src/headers/tomcrypt_pk.h	/^   void *p;$/;"	m	struct:__anon31
p	rsa.h	/^	mp_int* p;$/;"	m	struct:__anon48
packet_is_okay_kex	packet.c	/^static int packet_is_okay_kex(unsigned char type) {$/;"	f	file:
packetlist	session.h	/^struct packetlist {$/;"	s
packettype	packet.h	/^} packettype;$/;"	t	typeref:struct:PacketType
packettypes	session.h	/^	const packettype * packettypes; \/* Packet handler mappings for this$/;"	m	struct:sshsession
pad	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       pad[MAXBLOCKSIZE];$/;"	m	struct:__anon21
pad	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       pad[MAXBLOCKSIZE];$/;"	m	struct:__anon24
pad	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                      pad[16];$/;"	m	struct:__anon25
padlen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       padlen, $/;"	m	struct:__anon24
padlen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       padlen;$/;"	m	struct:__anon21
padlen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       padlen;$/;"	m	struct:__anon22
padlen	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                       padlen;$/;"	m	struct:__anon26
pamConvFunc	svr-authpam.c	/^pamConvFunc(int num_msg, $/;"	f
parent	libtomcrypt/src/headers/tomcrypt_pk.h	/^   struct ltc_asn1_list_ *prev, *next, *child, *parent;$/;"	m	struct:ltc_asn1_list_	typeref:struct:ltc_asn1_list_::
parse_ciphers_macs	common-runopts.c	/^parse_ciphers_macs()$/;"	f
parse_hostname	cli-runopts.c	/^static void parse_hostname(const char* orighostarg) {$/;"	f	file:
parse_multihop_hostname	cli-runopts.c	/^static void parse_multihop_hostname(const char* orighostarg, const char* argv0) {$/;"	f	file:
pass	libtomcrypt/src/hashes/tiger.c	/^static void pass(ulong64 *a, ulong64 *b, ulong64 *c, ulong64 *x, int mul)$/;"	f	file:
passwd	svr-authpam.c	/^	char* passwd;$/;"	m	struct:UserDataS	file:
payload	session.h	/^	buffer * payload;$/;"	m	struct:packetlist
payload	session.h	/^	buffer *payload; \/* Post-decompression, the actual SSH packet *\/$/;"	m	struct:sshsession
pc1	libtomcrypt/src/ciphers/des.c	/^static const unsigned char pc1[56] = {$/;"	v	file:
pc2	libtomcrypt/src/ciphers/des.c	/^static const unsigned char pc2[48] = {$/;"	v	file:
pelican_done	libtomcrypt/src/mac/pelican/pelican.c	/^int pelican_done(pelican_state *pelmac, unsigned char *out)$/;"	f
pelican_init	libtomcrypt/src/mac/pelican/pelican.c	/^int pelican_init(pelican_state *pelmac, const unsigned char *key, unsigned long keylen)$/;"	f
pelican_memory	libtomcrypt/src/mac/pelican/pelican_memory.c	/^int pelican_memory(const unsigned char *key, unsigned long keylen,$/;"	f
pelican_process	libtomcrypt/src/mac/pelican/pelican.c	/^int pelican_process(pelican_state *pelmac, const unsigned char *in, unsigned long inlen)$/;"	f
pelican_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^typedef struct pelican_state$/;"	s
pelican_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} pelican_state;$/;"	t	typeref:struct:pelican_state
pelican_test	libtomcrypt/src/mac/pelican/pelican_test.c	/^int pelican_test(void)$/;"	f
perm_warn	auth.h	/^	unsigned perm_warn : 1; \/* Server only, set if bad permissions on $/;"	m	struct:AuthState
permute	libtomcrypt/src/ciphers/rc2.c	/^static const unsigned char permute[256] = {$/;"	v	file:
pexport	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int (*pexport)(unsigned char *out, unsigned long *outlen, prng_state *prng);$/;"	m	struct:ltc_prng_descriptor
pflag	scp.c	/^int pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v
pid	chansession.h	/^	pid_t pid; \/* child process pid *\/$/;"	m	struct:ChanSess
pid	chansession.h	/^	pid_t pid;$/;"	m	struct:ChildPid
pid	loginrec.h	/^	int        pid;                          \/* PID of login process *\/$/;"	m	struct:logininfo
pidfile	runopts.h	/^	char * pidfile;$/;"	m	struct:svr_runopts
pimport	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int (*pimport)(const unsigned char *in, unsigned long inlen, prng_state *prng);$/;"	m	struct:ltc_prng_descriptor
pkcs_1_i2osp	libtomcrypt/src/pk/pkcs1/pkcs_1_i2osp.c	/^int pkcs_1_i2osp(void *n, unsigned long modulus_len, unsigned char *out)$/;"	f
pkcs_1_mgf1	libtomcrypt/src/pk/pkcs1/pkcs_1_mgf1.c	/^int pkcs_1_mgf1(int                  hash_idx,$/;"	f
pkcs_1_oaep_decode	libtomcrypt/src/pk/pkcs1/pkcs_1_oaep_decode.c	/^int pkcs_1_oaep_decode(const unsigned char *msg,    unsigned long msglen,$/;"	f
pkcs_1_oaep_encode	libtomcrypt/src/pk/pkcs1/pkcs_1_oaep_encode.c	/^int pkcs_1_oaep_encode(const unsigned char *msg,    unsigned long msglen,$/;"	f
pkcs_1_os2ip	libtomcrypt/src/pk/pkcs1/pkcs_1_os2ip.c	/^int pkcs_1_os2ip(void *n, unsigned char *in, unsigned long inlen)$/;"	f
pkcs_1_pss_decode	libtomcrypt/src/pk/pkcs1/pkcs_1_pss_decode.c	/^int pkcs_1_pss_decode(const unsigned char *msghash, unsigned long msghashlen,$/;"	f
pkcs_1_pss_encode	libtomcrypt/src/pk/pkcs1/pkcs_1_pss_encode.c	/^int pkcs_1_pss_encode(const unsigned char *msghash, unsigned long msghashlen,$/;"	f
pkcs_1_test	libtomcrypt/testprof/pkcs_1_test.c	/^int pkcs_1_test(void)$/;"	f
pkcs_1_v1_5_decode	libtomcrypt/src/pk/pkcs1/pkcs_1_v1_5_decode.c	/^int pkcs_1_v1_5_decode(const unsigned char *msg, $/;"	f
pkcs_1_v1_5_encode	libtomcrypt/src/pk/pkcs1/pkcs_1_v1_5_encode.c	/^int pkcs_1_v1_5_encode(const unsigned char *msg, $/;"	f
pkcs_5_alg1	libtomcrypt/src/misc/pkcs5/pkcs_5_1.c	/^int pkcs_5_alg1(const unsigned char *password, unsigned long password_len, $/;"	f
pkcs_5_alg2	libtomcrypt/src/misc/pkcs5/pkcs_5_2.c	/^int pkcs_5_alg2(const unsigned char *password, unsigned long password_len, $/;"	f
pmac_done	libtomcrypt/src/mac/pmac/pmac_done.c	/^int pmac_done(pmac_state *state, unsigned char *out, unsigned long *outlen)$/;"	f
pmac_file	libtomcrypt/src/mac/pmac/pmac_file.c	/^int pmac_file(int cipher, $/;"	f
pmac_gen	libtomcrypt/demos/tv_gen.c	/^void pmac_gen(void)$/;"	f
pmac_init	libtomcrypt/src/mac/pmac/pmac_init.c	/^int pmac_init(pmac_state *pmac, int cipher, const unsigned char *key, unsigned long keylen)$/;"	f
pmac_memory	libtomcrypt/src/mac/pmac/pmac_memory.c	/^int pmac_memory(int cipher, $/;"	f
pmac_memory_multi	libtomcrypt/src/mac/pmac/pmac_memory_multi.c	/^int pmac_memory_multi(int cipher, $/;"	f
pmac_ntz	libtomcrypt/src/mac/pmac/pmac_ntz.c	/^int pmac_ntz(unsigned long x)$/;"	f
pmac_process	libtomcrypt/src/mac/pmac/pmac_process.c	/^int pmac_process(pmac_state *pmac, const unsigned char *in, unsigned long inlen)$/;"	f
pmac_shift_xor	libtomcrypt/src/mac/pmac/pmac_shift_xor.c	/^void pmac_shift_xor(pmac_state *pmac)$/;"	f
pmac_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} pmac_state;$/;"	t	typeref:struct:__anon14
pmac_test	libtomcrypt/src/mac/pmac/pmac_test.c	/^int pmac_test(void)$/;"	f
poly	libtomcrypt/src/encauth/gcm/gcm_gf_mult.c	/^static const unsigned char poly[] = { 0x00, 0xE1 };$/;"	v	file:
poly_div	libtomcrypt/src/encauth/ocb/ocb_init.c	/^    unsigned char poly_div[MAXBLOCKSIZE], $/;"	m	struct:__anon35	file:
poly_div	libtomcrypt/src/mac/pmac/pmac_init.c	/^    unsigned char poly_div[MAXBLOCKSIZE], $/;"	m	struct:__anon34	file:
poly_mul	libtomcrypt/src/encauth/ocb/ocb_init.c	/^                  poly_mul[MAXBLOCKSIZE];$/;"	m	struct:__anon35	file:
poly_mul	libtomcrypt/src/mac/pmac/pmac_init.c	/^                  poly_mul[MAXBLOCKSIZE];$/;"	m	struct:__anon34	file:
polys	libtomcrypt/src/encauth/ocb/ocb_init.c	/^} polys[] = {$/;"	v	typeref:struct:__anon35	file:
polys	libtomcrypt/src/mac/pmac/pmac_init.c	/^} polys[] = {$/;"	v	typeref:struct:__anon34	file:
pool	libtomcrypt/src/headers/tomcrypt_prng.h	/^    hash_state pool[FORTUNA_POOLS];     \/* the  pools *\/$/;"	m	struct:fortuna_prng
pool	libtomcrypt/src/headers/tomcrypt_prng.h	/^    unsigned char         pool[MAXBLOCKSIZE];$/;"	m	struct:yarrow_prng
pool0_len	libtomcrypt/src/headers/tomcrypt_prng.h	/^                  pool0_len,  \/* length of 0'th pool *\/$/;"	m	struct:fortuna_prng
pool_idx	libtomcrypt/src/headers/tomcrypt_prng.h	/^    unsigned long pool_idx,   \/* current pool we will add to *\/$/;"	m	struct:fortuna_prng
portcount	runopts.h	/^	unsigned int portcount;$/;"	m	struct:svr_runopts
ports	runopts.h	/^	char *ports[DROPBEAR_MAX_PORTS];$/;"	m	struct:svr_runopts
pos	buffer.h	/^	unsigned int pos;$/;"	m	struct:buf
pprime	libtommath/etc/pprime.c	/^pprime (int k, int li, mp_int * p, mp_int * q)$/;"	f
pq	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *pq;$/;"	m	struct:KAT_key
prefix	Makefile	/^prefix=\/usr\/local$/;"	m
prev	libtomcrypt/src/headers/tomcrypt_mac.h	/^                   prev[MAXBLOCKSIZE],$/;"	m	struct:__anon13
prev	libtomcrypt/src/headers/tomcrypt_pk.h	/^   struct ltc_asn1_list_ *prev, *next, *child, *parent;$/;"	m	struct:ltc_asn1_list_	typeref:struct:ltc_asn1_list_::ltc_asn1_list_
prev	list.h	/^	struct _m_list_elem *prev;$/;"	m	struct:_m_list_elem	typeref:struct:_m_list_elem::_m_list_elem
prime	libtomcrypt/src/headers/tomcrypt_pk.h	/^   char *prime;$/;"	m	struct:__anon28
prime_digit	libtommath/etc/pprime.c	/^mp_digit prime_digit(void)$/;"	f
primes	libtommath/etc/pprime.c	/^FILE *primes;$/;"	v
printable_table	libtomcrypt/src/pk/asn1/der/printable_string/der_length_printable_string.c	/^} printable_table[] = {$/;"	v	typeref:struct:__anon10	file:
printhelp	cli-runopts.c	/^static void printhelp() {$/;"	f	file:
printhelp	dropbearconvert.c	/^static void printhelp(char * progname) {$/;"	f	file:
printhelp	dropbearkey.c	/^static void printhelp(char * progname) {$/;"	f	file:
printhelp	svr-runopts.c	/^static void printhelp(const char * progname) {$/;"	f	file:
printhex	dbutil.c	/^void printhex(const char * label, const unsigned char * buf, int len) {$/;"	f
printpubkey	dropbearkey.c	/^static void printpubkey(sign_key * key, int keytype) {$/;"	f	file:
privkeys	runopts.h	/^	m_list *privkeys; \/* Keys to use for public-key auth *\/$/;"	m	struct:cli_runopts
prng_descriptor	libtomcrypt/src/misc/crypt/crypt_prng_descriptor.c	/^struct ltc_prng_descriptor prng_descriptor[TAB_SIZE] = {$/;"	v	typeref:struct:ltc_prng_descriptor
prng_is_valid	libtomcrypt/src/misc/crypt/crypt_prng_is_valid.c	/^int prng_is_valid(int idx)$/;"	f
prng_state	libtomcrypt/src/headers/tomcrypt_prng.h	/^} prng_state;$/;"	t	typeref:union:Prng_state
process	libtomcrypt/src/headers/tomcrypt_hash.h	/^    int (*process)(hash_state *hash, const unsigned char *in, unsigned long inlen);$/;"	m	struct:ltc_hash_descriptor
process_file	random.c	/^process_file(hash_state *hs, const char *filename,$/;"	f	file:
process_packet	process-packet.c	/^void process_packet() {$/;"	f
progname	loginrec.h	/^	char       progname[LINFO_PROGSIZE];     \/* name of program (for PAM) *\/$/;"	m	struct:logininfo
progname	runopts.h	/^	char *progname;$/;"	m	struct:cli_runopts
progname_null	loginrec.h	/^	int        progname_null;$/;"	m	struct:logininfo
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
prov	libtomcrypt/testprof/tomcrypt_test.h	/^    char *name, *prov, *req;$/;"	m	struct:__anon8
proxycmd	runopts.h	/^	char *proxycmd;$/;"	m	struct:cli_runopts
pttotlen	libtomcrypt/src/headers/tomcrypt_mac.h	/^                       pttotlen;     \/* 64-bit counter for the PT *\/$/;"	m	struct:__anon17
pty_allocate	sshpty.c	/^pty_allocate(int *ptyfd, int *ttyfd, char *namebuf, int namebuflen)$/;"	f
pty_change_window_size	sshpty.c	/^pty_change_window_size(int ptyfd, int row, int col,$/;"	f
pty_make_controlling_tty	sshpty.c	/^pty_make_controlling_tty(int *ttyfd, const char *tty_name)$/;"	f
pty_release	sshpty.c	/^pty_release(const char *tty_name)$/;"	f
pty_setowner	sshpty.c	/^pty_setowner(struct passwd *pw, const char *tty_name)$/;"	f
ptycommand	svr-chansession.c	/^static int ptycommand(struct Channel *channel, struct ChanSess *chansess) {$/;"	f	file:
pubkey	libtomcrypt/src/headers/tomcrypt_pk.h	/^    ecc_point pubkey;$/;"	m	struct:__anon30
pubkey_options	auth.h	/^	struct PubKeyOptions* pubkey_options;$/;"	m	struct:AuthState	typeref:struct:AuthState::PubKeyOptions
put_termcodes	cli-chansession.c	/^static void put_termcodes() {$/;"	f	file:
put_winsize	cli-chansession.c	/^static void put_winsize() {$/;"	f	file:
pw_dir	auth.h	/^	char *pw_dir;$/;"	m	struct:AuthState
pw_gid	auth.h	/^	gid_t pw_gid;$/;"	m	struct:AuthState
pw_name	auth.h	/^	char *pw_name;$/;"	m	struct:AuthState
pw_passwd	auth.h	/^	char *pw_passwd;$/;"	m	struct:AuthState
pw_shell	auth.h	/^	char *pw_shell;$/;"	m	struct:AuthState
pw_uid	auth.h	/^	uid_t pw_uid;$/;"	m	struct:AuthState
pwd	scp.c	/^struct passwd *pwd;$/;"	v	typeref:struct:passwd
q	dss.h	/^	mp_int* q;$/;"	m	struct:__anon6
q	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *q; $/;"	m	struct:KAT_key
q	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *q; $/;"	m	struct:Rsa_key
q	libtomcrypt/src/headers/tomcrypt_pk.h	/^   void *q;$/;"	m	struct:__anon31
q	rsa.h	/^	mp_int* q;$/;"	m	struct:__anon48
qP	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *qP; $/;"	m	struct:KAT_key
qP	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *qP; $/;"	m	struct:Rsa_key
qbox	libtomcrypt/src/ciphers/twofish/twofish.c	/^static const unsigned char qbox[2][4][16] = {$/;"	v	file:
qord	libtomcrypt/src/ciphers/twofish/twofish.c	/^static const unsigned char qord[4][5] = {$/;"	v	file:
qord	libtomcrypt/src/headers/tomcrypt_pk.h	/^   int qord;$/;"	m	struct:__anon31
qsort_helper	libtomcrypt/src/pk/asn1/der/set/der_encode_set.c	/^static int qsort_helper(const void *a, const void *b)$/;"	f	file:
qsort_helper	libtomcrypt/src/pk/asn1/der/set/der_encode_setof.c	/^static int qsort_helper(const void *a, const void *b)$/;"	f	file:
rand_num	libtommath/mtest/mtest.c	/^void rand_num(mp_int *a)$/;"	f
rand_num2	libtommath/mtest/mtest.c	/^void rand_num2(mp_int *a)$/;"	f
rand_prime	libtomcrypt/src/math/rand_prime.c	/^int rand_prime(void *N, long len, prng_state *prng, int wprng)$/;"	f
rc	libtomcrypt/src/ciphers/anubis.c	/^static const ulong32 rc[] = {$/;"	v	file:
rc2	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct rc2_key rc2;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::rc2_key
rc2_desc	libtomcrypt/src/ciphers/rc2.c	/^const struct ltc_cipher_descriptor rc2_desc = {$/;"	v	typeref:struct:ltc_cipher_descriptor
rc2_done	libtomcrypt/src/ciphers/rc2.c	/^void rc2_done(symmetric_key *skey)$/;"	f
rc2_ecb_decrypt	libtomcrypt/src/ciphers/rc2.c	/^int rc2_ecb_decrypt( const unsigned char *ct,$/;"	f
rc2_ecb_encrypt	libtomcrypt/src/ciphers/rc2.c	/^int rc2_ecb_encrypt( const unsigned char *pt,$/;"	f
rc2_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct rc2_key { unsigned xkey[64]; };$/;"	s
rc2_keysize	libtomcrypt/src/ciphers/rc2.c	/^int rc2_keysize(int *keysize)$/;"	f
rc2_setup	libtomcrypt/src/ciphers/rc2.c	/^int rc2_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
rc2_test	libtomcrypt/src/ciphers/rc2.c	/^int rc2_test(void)$/;"	f
rc4	libtomcrypt/src/headers/tomcrypt_prng.h	/^    struct rc4_prng       rc4;$/;"	m	union:Prng_state	typeref:struct:Prng_state::rc4_prng
rc4_add_entropy	libtomcrypt/src/prngs/rc4.c	/^int rc4_add_entropy(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
rc4_desc	libtomcrypt/src/prngs/rc4.c	/^const struct ltc_prng_descriptor rc4_desc = $/;"	v	typeref:struct:ltc_prng_descriptor
rc4_done	libtomcrypt/src/prngs/rc4.c	/^int rc4_done(prng_state *prng)$/;"	f
rc4_export	libtomcrypt/src/prngs/rc4.c	/^int rc4_export(unsigned char *out, unsigned long *outlen, prng_state *prng)$/;"	f
rc4_import	libtomcrypt/src/prngs/rc4.c	/^int rc4_import(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
rc4_prng	libtomcrypt/src/headers/tomcrypt_prng.h	/^struct rc4_prng {$/;"	s
rc4_read	libtomcrypt/src/prngs/rc4.c	/^unsigned long rc4_read(unsigned char *out, unsigned long outlen, prng_state *prng)$/;"	f
rc4_ready	libtomcrypt/src/prngs/rc4.c	/^int rc4_ready(prng_state *prng)$/;"	f
rc4_start	libtomcrypt/src/prngs/rc4.c	/^int rc4_start(prng_state *prng)$/;"	f
rc4_test	libtomcrypt/src/prngs/rc4.c	/^int rc4_test(void)$/;"	f
rc5	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct rc5_key      rc5;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::rc5_key
rc5_desc	libtomcrypt/src/ciphers/rc5.c	/^const struct ltc_cipher_descriptor rc5_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
rc5_done	libtomcrypt/src/ciphers/rc5.c	/^void rc5_done(symmetric_key *skey)$/;"	f
rc5_ecb_decrypt	libtomcrypt/src/ciphers/rc5.c	/^int rc5_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
rc5_ecb_encrypt	libtomcrypt/src/ciphers/rc5.c	/^int rc5_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
rc5_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct rc5_key {$/;"	s
rc5_keysize	libtomcrypt/src/ciphers/rc5.c	/^int rc5_keysize(int *keysize)$/;"	f
rc5_setup	libtomcrypt/src/ciphers/rc5.c	/^int rc5_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
rc5_test	libtomcrypt/src/ciphers/rc5.c	/^int rc5_test(void)$/;"	f
rc6	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct rc6_key      rc6;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::rc6_key
rc6_desc	libtomcrypt/src/ciphers/rc6.c	/^const struct ltc_cipher_descriptor rc6_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
rc6_done	libtomcrypt/src/ciphers/rc6.c	/^void rc6_done(symmetric_key *skey)$/;"	f
rc6_ecb_decrypt	libtomcrypt/src/ciphers/rc6.c	/^int rc6_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
rc6_ecb_encrypt	libtomcrypt/src/ciphers/rc6.c	/^int rc6_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
rc6_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct rc6_key {$/;"	s
rc6_keysize	libtomcrypt/src/ciphers/rc6.c	/^int rc6_keysize(int *keysize)$/;"	f
rc6_setup	libtomcrypt/src/ciphers/rc6.c	/^int rc6_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
rc6_test	libtomcrypt/src/ciphers/rc6.c	/^int rc6_test(void)$/;"	f
rcon	libtomcrypt/src/ciphers/aes/aes_tab.c	/^static const ulong32 rcon[] = {$/;"	v	file:
rdtsc	libtomcrypt/testprof/x86_prof.c	/^ulong64 rdtsc (void)$/;"	f
read	libtomcrypt/src/headers/tomcrypt_prng.h	/^    unsigned long (*read)(unsigned char *out, unsigned long outlen, prng_state *prng);$/;"	m	struct:ltc_prng_descriptor
read_kex_algos	common-kex.c	/^static void read_kex_algos() {$/;"	f	file:
read_mangler	channel.h	/^	void (*read_mangler)(struct Channel*, unsigned char* bytes, int *len);$/;"	m	struct:Channel
read_packet	packet.c	/^void read_packet() {$/;"	f
read_packet_init	packet.c	/^static int read_packet_init() {$/;"	f	file:
read_radix	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*read_radix)(void *a, const char *str, int radix);$/;"	m	struct:__anon11
read_radix	libtomcrypt/src/math/gmp_desc.c	/^static int read_radix(void *a, const char *b, int radix)$/;"	f	file:
read_radix	libtomcrypt/src/math/ltm_desc.c	/^static int read_radix(void *a, const char *b, int radix)$/;"	f	file:
read_radix	libtomcrypt/src/math/tfm_desc.c	/^static int read_radix(void *a, const char *b, int radix)$/;"	f	file:
read_session_identification	common-session.c	/^static void read_session_identification() {$/;"	f	file:
readbuf	session.h	/^	buffer *readbuf; \/* From the wire, decrypted in-place *\/$/;"	m	struct:sshsession
readfd	channel.h	/^	int readfd; \/* read from insecure side, written to wire *\/$/;"	m	struct:Channel
readhostkey	common-runopts.c	/^int readhostkey(const char * filename, sign_key * hostkey, int *type) {$/;"	f
readpos	circbuffer.h	/^	unsigned int readpos;$/;"	m	struct:circbuf
ready	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int (*ready)(prng_state *prng);$/;"	m	struct:ltc_prng_descriptor
recv	session.h	/^	struct key_context_directional recv;$/;"	m	struct:key_context	typeref:struct:key_context::key_context_directional
recv_close	channel.h	/^	int sent_close, recv_close;$/;"	m	struct:Channel
recv_eof	channel.h	/^	int recv_eof, sent_eof;$/;"	m	struct:Channel
recv_msg_channel_close	common-channel.c	/^void recv_msg_channel_close() {$/;"	f
recv_msg_channel_data	common-channel.c	/^void recv_msg_channel_data() {$/;"	f
recv_msg_channel_eof	common-channel.c	/^void recv_msg_channel_eof() {$/;"	f
recv_msg_channel_extended_data	cli-channel.c	/^void recv_msg_channel_extended_data() {$/;"	f
recv_msg_channel_open	common-channel.c	/^void recv_msg_channel_open() {$/;"	f
recv_msg_channel_open_confirmation	common-channel.c	/^void recv_msg_channel_open_confirmation() {$/;"	f
recv_msg_channel_open_failure	common-channel.c	/^void recv_msg_channel_open_failure() {$/;"	f
recv_msg_channel_request	common-channel.c	/^void recv_msg_channel_request() {$/;"	f
recv_msg_channel_window_adjust	common-channel.c	/^void recv_msg_channel_window_adjust() {$/;"	f
recv_msg_global_request_remotetcp	svr-tcpfwd.c	/^void recv_msg_global_request_remotetcp() {$/;"	f
recv_msg_kexdh_init	svr-kex.c	/^void recv_msg_kexdh_init() {$/;"	f
recv_msg_kexdh_reply	cli-kex.c	/^void recv_msg_kexdh_reply() {$/;"	f
recv_msg_kexinit	common-kex.c	/^void recv_msg_kexinit() {$/;"	f
recv_msg_newkeys	common-kex.c	/^void recv_msg_newkeys() {$/;"	f
recv_msg_service_accept	cli-session.c	/^static void recv_msg_service_accept(void) {$/;"	f	file:
recv_msg_service_request	svr-service.c	/^void recv_msg_service_request() {$/;"	f
recv_msg_userauth_banner	cli-auth.c	/^void recv_msg_userauth_banner() {$/;"	f
recv_msg_userauth_failure	cli-auth.c	/^void recv_msg_userauth_failure() {$/;"	f
recv_msg_userauth_info_request	cli-authinteract.c	/^void recv_msg_userauth_info_request() {$/;"	f
recv_msg_userauth_pk_ok	cli-authpubkey.c	/^void recv_msg_userauth_pk_ok() {$/;"	f
recv_msg_userauth_request	svr-auth.c	/^void recv_msg_userauth_request() {$/;"	f
recv_msg_userauth_specific_60	cli-auth.c	/^void recv_msg_userauth_specific_60() {$/;"	f
recv_msg_userauth_success	cli-auth.c	/^void recv_msg_userauth_success() {$/;"	f
recv_unimplemented	process-packet.c	/^static void recv_unimplemented() {$/;"	f	file:
recv_window	runopts.h	/^	unsigned int recv_window;$/;"	m	struct:runopts
recvdonelen	channel.h	/^	unsigned int recvdonelen;$/;"	m	struct:Channel
recvkexinit	kex.h	/^	unsigned recvkexinit : 1;$/;"	m	struct:KEXState
recvmaxpacket	channel.h	/^	unsigned int recvmaxpacket, transmaxpacket;$/;"	m	struct:Channel
recvnewkeys	kex.h	/^	unsigned recvnewkeys : 1; \/* set once we've received MSG_NEWKEYS (cleared once we have also sent *\/$/;"	m	struct:KEXState
recvseq	session.h	/^	unsigned int transseq, recvseq; \/* Sequence IDs *\/$/;"	m	struct:sshsession
recvwindow	channel.h	/^	unsigned int recvwindow, transwindow;$/;"	m	struct:Channel
refresh_progress_meter	progressmeter.c	/^refresh_progress_meter(void)$/;"	f
reg_algs	libtomcrypt/demos/tv_gen.c	/^void reg_algs(void)$/;"	f
reg_algs	libtomcrypt/testprof/x86_prof.c	/^void reg_algs(void)$/;"	f
register_algs	libtomcrypt/demos/encrypt.c	/^void register_algs(void)$/;"	f
register_algs	libtomcrypt/demos/hashsum.c	/^void register_algs(void)$/;"	f
register_cipher	libtomcrypt/src/misc/crypt/crypt_register_cipher.c	/^int register_cipher(const struct ltc_cipher_descriptor *cipher)$/;"	f
register_hash	libtomcrypt/src/misc/crypt/crypt_register_hash.c	/^int register_hash(const struct ltc_hash_descriptor *hash)$/;"	f
register_prng	libtomcrypt/src/misc/crypt/crypt_register_prng.c	/^int register_prng(const struct ltc_prng_descriptor *prng)$/;"	f
rem_105	libtommath/bn_mp_is_square.c	/^static const char rem_105[105] = {$/;"	v	file:
rem_105	libtommath/pre_gen/mpi.c	/^static const char rem_105[105] = {$/;"	v	file:
rem_128	libtommath/bn_mp_is_square.c	/^static const char rem_128[128] = {$/;"	v	file:
rem_128	libtommath/pre_gen/mpi.c	/^static const char rem_128[128] = {$/;"	v	file:
remin	scp.c	/^int errs, remin, remout;$/;"	v
remotechan	channel.h	/^	unsigned int remotechan;$/;"	m	struct:Channel
remoteclosed	session.h	/^	void(*remoteclosed)(); \/* A callback to handle closure of the$/;"	m	struct:sshsession
remotefwds	runopts.h	/^	m_list * remotefwds;$/;"	m	struct:cli_runopts
remotehost	runopts.h	/^	char *remotehost;$/;"	m	struct:cli_runopts
remotehost	session.h	/^	char *remotehost;$/;"	m	struct:serversession
remoteident	session.h	/^	unsigned char *remoteident; $/;"	m	struct:sshsession
remoteport	runopts.h	/^	char *remoteport;$/;"	m	struct:cli_runopts
remout	scp.c	/^int errs, remin, remout;$/;"	v
remove_channel	common-channel.c	/^static void remove_channel(struct Channel * channel) {$/;"	f	file:
remove_listener	listener.c	/^void remove_listener(struct Listener* listener) {$/;"	f
replacearg	scpmisc.c	/^replacearg(arglist *args, u_int which, char *fmt, ...)$/;"	f
reply_queue_head	session.h	/^	struct packetlist *reply_queue_head, *reply_queue_tail;$/;"	m	struct:sshsession	typeref:struct:sshsession::packetlist
reply_queue_tail	session.h	/^	struct packetlist *reply_queue_head, *reply_queue_tail;$/;"	m	struct:sshsession	typeref:struct:sshsession::
req	libtomcrypt/testprof/tomcrypt_test.h	/^    char *name, *prov, *req;$/;"	m	struct:__anon8
reqhandler	channel.h	/^	void (*reqhandler)(struct Channel*);$/;"	m	struct:ChanType
request_listenaddr	tcpfwd.h	/^	unsigned char *request_listenaddr;;$/;"	m	struct:TCPListener
requirenext	session.h	/^	unsigned char requirenext[2]; \/* bytes indicating what packets we require next, $/;"	m	struct:sshsession
reset_cnt	libtomcrypt/src/headers/tomcrypt_prng.h	/^    ulong64       reset_cnt;  \/* number of times we have reset *\/$/;"	m	struct:fortuna_prng
response	scp.c	/^response(void)$/;"	f
results	libtomcrypt/testprof/x86_prof.c	/^struct list results[100];$/;"	v	typeref:struct:list
retval	session.h	/^	int retval; \/* What the command exit status was - we emulate it *\/$/;"	m	struct:clientsession
rijndael	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct rijndael_key rijndael;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::rijndael_key
rijndael_enc_desc	libtomcrypt/src/ciphers/aes/aes.c	/^const struct ltc_cipher_descriptor rijndael_enc_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
rijndael_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct rijndael_key {$/;"	s
rmd128	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct rmd128_state rmd128;$/;"	m	union:Hash_state	typeref:struct:Hash_state::rmd128_state
rmd128_compress	libtomcrypt/src/hashes/rmd128.c	/^static int rmd128_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
rmd128_desc	libtomcrypt/src/hashes/rmd128.c	/^const struct ltc_hash_descriptor rmd128_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
rmd128_done	libtomcrypt/src/hashes/rmd128.c	/^int rmd128_done(hash_state * md, unsigned char *out)$/;"	f
rmd128_init	libtomcrypt/src/hashes/rmd128.c	/^int rmd128_init(hash_state * md)$/;"	f
rmd128_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct rmd128_state {$/;"	s
rmd128_test	libtomcrypt/src/hashes/rmd128.c	/^int rmd128_test(void)$/;"	f
rmd160	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct rmd160_state rmd160;$/;"	m	union:Hash_state	typeref:struct:Hash_state::rmd160_state
rmd160_compress	libtomcrypt/src/hashes/rmd160.c	/^static int rmd160_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
rmd160_desc	libtomcrypt/src/hashes/rmd160.c	/^const struct ltc_hash_descriptor rmd160_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
rmd160_done	libtomcrypt/src/hashes/rmd160.c	/^int rmd160_done(hash_state * md, unsigned char *out)$/;"	f
rmd160_init	libtomcrypt/src/hashes/rmd160.c	/^int rmd160_init(hash_state * md)$/;"	f
rmd160_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct rmd160_state {$/;"	s
rmd160_test	libtomcrypt/src/hashes/rmd160.c	/^int rmd160_test(void)$/;"	f
rmd256	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct rmd256_state rmd256;$/;"	m	union:Hash_state	typeref:struct:Hash_state::rmd256_state
rmd256_compress	libtomcrypt/src/hashes/rmd256.c	/^static int rmd256_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
rmd256_desc	libtomcrypt/src/hashes/rmd256.c	/^const struct ltc_hash_descriptor rmd256_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
rmd256_done	libtomcrypt/src/hashes/rmd256.c	/^int rmd256_done(hash_state * md, unsigned char *out)$/;"	f
rmd256_init	libtomcrypt/src/hashes/rmd256.c	/^int rmd256_init(hash_state * md)$/;"	f
rmd256_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct rmd256_state {$/;"	s
rmd256_test	libtomcrypt/src/hashes/rmd256.c	/^int rmd256_test(void)$/;"	f
rmd320	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct rmd320_state rmd320;$/;"	m	union:Hash_state	typeref:struct:Hash_state::rmd320_state
rmd320_compress	libtomcrypt/src/hashes/rmd320.c	/^static int rmd320_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
rmd320_desc	libtomcrypt/src/hashes/rmd320.c	/^const struct ltc_hash_descriptor rmd320_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
rmd320_done	libtomcrypt/src/hashes/rmd320.c	/^int rmd320_done(hash_state * md, unsigned char *out)$/;"	f
rmd320_init	libtomcrypt/src/hashes/rmd320.c	/^int rmd320_init(hash_state * md)$/;"	f
rmd320_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct rmd320_state {$/;"	s
rmd320_test	libtomcrypt/src/hashes/rmd320.c	/^int rmd320_test(void)$/;"	f
rng	libtommath/mtest/mtest.c	/^FILE *rng;$/;"	v
rng_ansic	libtomcrypt/src/prngs/rng_get_bytes.c	/^static unsigned long rng_ansic(unsigned char *buf, unsigned long len, $/;"	f	file:
rng_get_bytes	libtomcrypt/src/prngs/rng_get_bytes.c	/^unsigned long rng_get_bytes(unsigned char *out, unsigned long outlen, $/;"	f
rng_make_prng	libtomcrypt/src/prngs/rng_make_prng.c	/^int rng_make_prng(int bits, int wprng, prng_state *prng, $/;"	f
rng_nix	libtomcrypt/src/prngs/rng_get_bytes.c	/^static unsigned long rng_nix(unsigned char *buf, unsigned long len, $/;"	f	file:
rng_win32	libtomcrypt/src/prngs/rng_get_bytes.c	/^static unsigned long rng_win32(unsigned char *buf, unsigned long len, $/;"	f	file:
roundKeyDec	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 roundKeyDec[18 + 1][4]; $/;"	m	struct:anubis_key
roundKeyDec	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong64 roundKeyDec[8 + 1]; $/;"	m	struct:khazad_key
roundKeyEnc	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong32 roundKeyEnc[18 + 1][4]; $/;"	m	struct:anubis_key
roundKeyEnc	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   ulong64 roundKeyEnc[8 + 1]; $/;"	m	struct:khazad_key
rounds	libtomcrypt/src/ciphers/kseed.c	/^static void rounds(ulong32 *P, ulong32 *K)$/;"	f	file:
rounds	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int rounds;$/;"	m	struct:rc5_key
rounds	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   long rounds;$/;"	m	struct:saferp_key
rs_mult	libtomcrypt/src/ciphers/twofish/twofish.c	/^static void rs_mult(const unsigned char *in, unsigned char *out)$/;"	f	file:
rs_tab0	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab0[256] = {$/;"	v	file:
rs_tab1	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab1[256] = {$/;"	v	file:
rs_tab2	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab2[256] = {$/;"	v	file:
rs_tab3	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab3[256] = {$/;"	v	file:
rs_tab4	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab4[256] = {$/;"	v	file:
rs_tab5	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab5[256] = {$/;"	v	file:
rs_tab6	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab6[256] = {$/;"	v	file:
rs_tab7	libtomcrypt/src/ciphers/twofish/twofish_tab.c	/^static const ulong32 rs_tab7[256] = {$/;"	v	file:
rsa_compat_test	libtomcrypt/testprof/rsa_test.c	/^static int rsa_compat_test(void)$/;"	f	file:
rsa_decrypt_key	libtomcrypt/src/headers/tomcrypt_pk.h	51;"	d
rsa_decrypt_key_ex	libtomcrypt/src/pk/rsa/rsa_decrypt_key.c	/^int rsa_decrypt_key_ex(const unsigned char *in,       unsigned long  inlen,$/;"	f
rsa_encrypt_key	libtomcrypt/src/headers/tomcrypt_pk.h	48;"	d
rsa_encrypt_key_ex	libtomcrypt/src/pk/rsa/rsa_encrypt_key.c	/^int rsa_encrypt_key_ex(const unsigned char *in,     unsigned long inlen,$/;"	f
rsa_export	libtomcrypt/src/pk/rsa/rsa_export.c	/^int rsa_export(unsigned char *out, unsigned long *outlen, int type, rsa_key *key)$/;"	f
rsa_exptmod	libtomcrypt/src/pk/rsa/rsa_exptmod.c	/^int rsa_exptmod(const unsigned char *in,   unsigned long inlen,$/;"	f
rsa_free	libtomcrypt/src/pk/rsa/rsa_free.c	/^void rsa_free(rsa_key *key)$/;"	f
rsa_import	libtomcrypt/src/pk/rsa/rsa_import.c	/^int rsa_import(const unsigned char *in, unsigned long inlen, rsa_key *key)$/;"	f
rsa_key	libtomcrypt/src/headers/tomcrypt_pk.h	/^} rsa_key;$/;"	t	typeref:struct:Rsa_key
rsa_key_free	rsa.c	/^void rsa_key_free(dropbear_rsa_key *key) {$/;"	f
rsa_make_key	libtomcrypt/src/pk/rsa/rsa_make_key.c	/^int rsa_make_key(prng_state *prng, int wprng, int size, long e, rsa_key *key)$/;"	f
rsa_pad_em	rsa.c	/^static void rsa_pad_em(dropbear_rsa_key * key,$/;"	f	file:
rsa_sign_hash	libtomcrypt/src/headers/tomcrypt_pk.h	54;"	d
rsa_sign_hash_ex	libtomcrypt/src/pk/rsa/rsa_sign_hash.c	/^int rsa_sign_hash_ex(const unsigned char *in,       unsigned long  inlen,$/;"	f
rsa_test	libtomcrypt/testprof/rsa_test.c	/^int rsa_test(void)$/;"	f
rsa_verify_hash	libtomcrypt/src/headers/tomcrypt_pk.h	57;"	d
rsa_verify_hash_ex	libtomcrypt/src/pk/rsa/rsa_verify_hash.c	/^int rsa_verify_hash_ex(const unsigned char *sig,      unsigned long siglen,$/;"	f
rsakey	signkey.h	/^	dropbear_rsa_key * rsakey;$/;"	m	struct:SIGN_key
rsakeyfile	runopts.h	/^	char * rsakeyfile;$/;"	m	struct:svr_runopts
rsource	scp.c	/^rsource(char *name, struct stat *statp)$/;"	f
run_cmd	libtomcrypt/testprof/test_driver.c	/^void run_cmd(int res, int line, char *file, char *cmd)$/;"	f
run_err	scp.c	/^run_err(const char *fmt,...)$/;"	f
run_shell_command	dbutil.c	/^void run_shell_command(const char* cmd, unsigned int maxfd, char* usershell) {$/;"	f
runopts	runopts.h	/^typedef struct runopts {$/;"	s
runopts	runopts.h	/^} runopts;$/;"	t	typeref:struct:runopts
s128_diffuse	libtomcrypt/src/prngs/sober128.c	/^static void s128_diffuse(struct sober128_prng *c)$/;"	f	file:
s128_genkonst	libtomcrypt/src/prngs/sober128.c	/^static void s128_genkonst(struct sober128_prng *c)$/;"	f	file:
s128_reloadstate	libtomcrypt/src/prngs/sober128.c	/^static void s128_reloadstate(struct sober128_prng *c)$/;"	f	file:
s128_savestate	libtomcrypt/src/prngs/sober128.c	/^static void s128_savestate(struct sober128_prng *c)$/;"	f	file:
s6_addr	fake-rfc2553.h	/^	u_int8_t	s6_addr[16];$/;"	m	struct:in6_addr
s_dmap_1	libtommath/mtest/mpi.c	/^static const char *s_dmap_1 = $/;"	v	file:
s_is_power_of_two	libtommath/bn_mp_div_d.c	/^static int s_is_power_of_two(mp_digit b, int *p)$/;"	f	file:
s_is_power_of_two	libtommath/pre_gen/mpi.c	/^static int s_is_power_of_two(mp_digit b, int *p)$/;"	f	file:
s_logv_2	libtommath/mtest/logtab.h	/^const float s_logv_2[] = {$/;"	v
s_mp_2expt	libtommath/mtest/mpi.c	/^mp_err   s_mp_2expt(mp_int *a, mp_digit k)$/;"	f
s_mp_add	libtommath/bn_s_mp_add.c	/^s_mp_add (mp_int * a, mp_int * b, mp_int * c)$/;"	f
s_mp_add	libtommath/mtest/mpi.c	/^mp_err   s_mp_add(mp_int *a, mp_int *b)        \/* magnitude addition      *\/$/;"	f
s_mp_add	libtommath/pre_gen/mpi.c	/^s_mp_add (mp_int * a, mp_int * b, mp_int * c)$/;"	f
s_mp_add_d	libtommath/mtest/mpi.c	/^mp_err   s_mp_add_d(mp_int *mp, mp_digit d)    \/* unsigned digit addition *\/$/;"	f
s_mp_alloc	libtommath/mtest/mpi.c	/^void    *s_mp_alloc(size_t nb, size_t ni)$/;"	f
s_mp_alloc	libtommath/mtest/mpi.c	156;"	d	file:
s_mp_clamp	libtommath/mtest/mpi.c	/^void     s_mp_clamp(mp_int *mp)$/;"	f
s_mp_cmp	libtommath/mtest/mpi.c	/^int      s_mp_cmp(mp_int *a, mp_int *b)$/;"	f
s_mp_cmp_d	libtommath/mtest/mpi.c	/^int      s_mp_cmp_d(mp_int *a, mp_digit d)$/;"	f
s_mp_copy	libtommath/mtest/mpi.c	/^void s_mp_copy(mp_digit *sp, mp_digit *dp, mp_size count)$/;"	f
s_mp_copy	libtommath/mtest/mpi.c	150;"	d	file:
s_mp_copy	libtommath/mtest/mpi.c	153;"	d	file:
s_mp_defprec	libtommath/mtest/mpi.c	/^static unsigned int s_mp_defprec = MP_DEFPREC;$/;"	v	file:
s_mp_div	libtommath/mtest/mpi.c	/^mp_err   s_mp_div(mp_int *a, mp_int *b)$/;"	f
s_mp_div_2	libtommath/mtest/mpi.c	/^void     s_mp_div_2(mp_int *mp)$/;"	f
s_mp_div_2d	libtommath/mtest/mpi.c	/^void     s_mp_div_2d(mp_int *mp, mp_digit d)$/;"	f
s_mp_div_d	libtommath/mtest/mpi.c	/^mp_err   s_mp_div_d(mp_int *mp, mp_digit d, mp_digit *r)$/;"	f
s_mp_exch	libtommath/mtest/mpi.c	/^void     s_mp_exch(mp_int *a, mp_int *b)$/;"	f
s_mp_exptmod	libtommath/bn_s_mp_exptmod.c	/^int s_mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y, int redmode)$/;"	f
s_mp_exptmod	libtommath/pre_gen/mpi.c	/^int s_mp_exptmod (mp_int * G, mp_int * X, mp_int * P, mp_int * Y, int redmode)$/;"	f
s_mp_free	libtommath/mtest/mpi.c	/^void     s_mp_free(void *ptr)$/;"	f
s_mp_free	libtommath/mtest/mpi.c	157;"	d	file:
s_mp_grow	libtommath/mtest/mpi.c	/^mp_err   s_mp_grow(mp_int *mp, mp_size min)$/;"	f
s_mp_ispow2	libtommath/mtest/mpi.c	/^int      s_mp_ispow2(mp_int *v)$/;"	f
s_mp_ispow2d	libtommath/mtest/mpi.c	/^int      s_mp_ispow2d(mp_digit d)$/;"	f
s_mp_lshd	libtommath/mtest/mpi.c	/^mp_err   s_mp_lshd(mp_int *mp, mp_size p)$/;"	f
s_mp_mod_2d	libtommath/mtest/mpi.c	/^void     s_mp_mod_2d(mp_int *mp, mp_digit d)$/;"	f
s_mp_mul	libtommath/mtest/mpi.c	/^mp_err   s_mp_mul(mp_int *a, mp_int *b)$/;"	f
s_mp_mul	libtommath/tommath.h	555;"	d
s_mp_mul_2	libtommath/mtest/mpi.c	/^mp_err s_mp_mul_2(mp_int *mp)$/;"	f
s_mp_mul_2d	libtommath/mtest/mpi.c	/^mp_err    s_mp_mul_2d(mp_int *mp, mp_digit d)$/;"	f
s_mp_mul_d	libtommath/mtest/mpi.c	/^mp_err   s_mp_mul_d(mp_int *a, mp_digit d)$/;"	f
s_mp_mul_digs	libtommath/bn_s_mp_mul_digs.c	/^int s_mp_mul_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
s_mp_mul_digs	libtommath/pre_gen/mpi.c	/^int s_mp_mul_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
s_mp_mul_high_digs	libtommath/bn_s_mp_mul_high_digs.c	/^s_mp_mul_high_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
s_mp_mul_high_digs	libtommath/pre_gen/mpi.c	/^s_mp_mul_high_digs (mp_int * a, mp_int * b, mp_int * c, int digs)$/;"	f
s_mp_norm	libtommath/mtest/mpi.c	/^mp_digit s_mp_norm(mp_int *a, mp_int *b)$/;"	f
s_mp_outlen	libtommath/mtest/mpi.c	/^int      s_mp_outlen(int bits, int r)$/;"	f
s_mp_pad	libtommath/mtest/mpi.c	/^mp_err   s_mp_pad(mp_int *mp, mp_size min)$/;"	f
s_mp_reduce	libtommath/mtest/mpi.c	/^mp_err   s_mp_reduce(mp_int *x, mp_int *m, mp_int *mu)$/;"	f
s_mp_rshd	libtommath/mtest/mpi.c	/^void     s_mp_rshd(mp_int *mp, mp_size p)$/;"	f
s_mp_setz	libtommath/mtest/mpi.c	/^void s_mp_setz(mp_digit *dp, mp_size count)$/;"	f
s_mp_setz	libtommath/mtest/mpi.c	143;"	d	file:
s_mp_setz	libtommath/mtest/mpi.c	146;"	d	file:
s_mp_sqr	libtommath/bn_s_mp_sqr.c	/^int s_mp_sqr (mp_int * a, mp_int * b)$/;"	f
s_mp_sqr	libtommath/mtest/mpi.c	/^mp_err   s_mp_sqr(mp_int *a)$/;"	f
s_mp_sqr	libtommath/mtest/mpi.c	192;"	d	file:
s_mp_sqr	libtommath/pre_gen/mpi.c	/^int s_mp_sqr (mp_int * a, mp_int * b)$/;"	f
s_mp_sub	libtommath/bn_s_mp_sub.c	/^s_mp_sub (mp_int * a, mp_int * b, mp_int * c)$/;"	f
s_mp_sub	libtommath/mtest/mpi.c	/^mp_err   s_mp_sub(mp_int *a, mp_int *b)        \/* magnitude subtract      *\/$/;"	f
s_mp_sub	libtommath/pre_gen/mpi.c	/^s_mp_sub (mp_int * a, mp_int * b, mp_int * c)$/;"	f
s_mp_sub_d	libtommath/mtest/mpi.c	/^mp_err   s_mp_sub_d(mp_int *mp, mp_digit d)    \/* unsigned digit subtract *\/$/;"	f
s_mp_todigit	libtommath/mtest/mpi.c	/^char     s_mp_todigit(int val, int r, int low)$/;"	f
s_mp_tovalue	libtommath/mtest/mpi.c	/^int      s_mp_tovalue(char ch, int r)$/;"	f
s_ocb_done	libtomcrypt/src/encauth/ocb/s_ocb_done.c	/^int s_ocb_done(ocb_state *ocb, const unsigned char *pt, unsigned long ptlen,$/;"	f
sa	loginrec.h	/^	struct sockaddr sa;$/;"	m	union:login_netinfo	typeref:struct:login_netinfo::sockaddr
sa_in	loginrec.h	/^	struct sockaddr_in sa_in;$/;"	m	union:login_netinfo	typeref:struct:login_netinfo::sockaddr_in
sa_storage	loginrec.h	/^	struct sockaddr_storage sa_storage;$/;"	m	union:login_netinfo	typeref:struct:login_netinfo::sockaddr_storage
safer	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct safer_key safer;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::safer_key
safer_128_keysize	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_128_keysize(int *keysize)$/;"	f
safer_64_keysize	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_64_keysize(int *keysize)$/;"	f
safer_bias	libtomcrypt/src/ciphers/safer/saferp.c	/^static const unsigned char safer_bias[33][16] = {$/;"	v	file:
safer_block_t	libtomcrypt/src/headers/tomcrypt_cipher.h	/^typedef unsigned char safer_block_t[SAFER_BLOCK_LEN];$/;"	t
safer_done	libtomcrypt/src/ciphers/safer/safer.c	/^void safer_done(symmetric_key *skey)$/;"	f
safer_ebox	libtomcrypt/src/ciphers/safer/safer_tab.c	/^const unsigned char safer_ebox[256] = {$/;"	v
safer_ecb_decrypt	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_ecb_decrypt(const unsigned char *block_in,$/;"	f
safer_ecb_encrypt	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_ecb_encrypt(const unsigned char *block_in,$/;"	f
safer_k128_desc	libtomcrypt/src/ciphers/safer/safer.c	/^   safer_k128_desc = {$/;"	v	typeref:struct:
safer_k128_setup	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_k128_setup(const unsigned char *key, int keylen, int numrounds, symmetric_key *skey)$/;"	f
safer_k64_desc	libtomcrypt/src/ciphers/safer/safer.c	/^   safer_k64_desc = {$/;"	v	typeref:struct:ltc_cipher_descriptor
safer_k64_setup	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_k64_setup(const unsigned char *key, int keylen, int numrounds, symmetric_key *skey)$/;"	f
safer_k64_test	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_k64_test(void)$/;"	f
safer_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct safer_key { safer_key_t key; };$/;"	s
safer_key_t	libtomcrypt/src/headers/tomcrypt_cipher.h	/^typedef unsigned char safer_key_t[SAFER_KEY_LEN];$/;"	t
safer_lbox	libtomcrypt/src/ciphers/safer/safer_tab.c	/^const unsigned char safer_lbox[256] = {$/;"	v
safer_sk128_desc	libtomcrypt/src/ciphers/safer/safer.c	/^   safer_sk128_desc = {$/;"	v	typeref:struct:
safer_sk128_setup	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_sk128_setup(const unsigned char *key, int keylen, int numrounds, symmetric_key *skey)$/;"	f
safer_sk128_test	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_sk128_test(void)$/;"	f
safer_sk64_desc	libtomcrypt/src/ciphers/safer/safer.c	/^   safer_sk64_desc = {$/;"	v	typeref:struct:
safer_sk64_setup	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_sk64_setup(const unsigned char *key, int keylen, int numrounds, symmetric_key *skey)$/;"	f
safer_sk64_test	libtomcrypt/src/ciphers/safer/safer.c	/^int safer_sk64_test(void)$/;"	f
saferp	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct saferp_key   saferp;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::saferp_key
saferp_desc	libtomcrypt/src/ciphers/safer/saferp.c	/^const struct ltc_cipher_descriptor saferp_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
saferp_done	libtomcrypt/src/ciphers/safer/saferp.c	/^void saferp_done(symmetric_key *skey)$/;"	f
saferp_ecb_decrypt	libtomcrypt/src/ciphers/safer/saferp.c	/^int saferp_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
saferp_ecb_encrypt	libtomcrypt/src/ciphers/safer/saferp.c	/^int saferp_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
saferp_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct saferp_key {$/;"	s
saferp_keysize	libtomcrypt/src/ciphers/safer/saferp.c	/^int saferp_keysize(int *keysize)$/;"	f
saferp_setup	libtomcrypt/src/ciphers/safer/saferp.c	/^int saferp_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
saferp_test	libtomcrypt/src/ciphers/safer/saferp.c	/^int saferp_test(void)$/;"	f
sanitise_stdfd	scpmisc.c	/^sanitise_stdfd(void)$/;"	f
saved_tio	session.h	/^	struct termios saved_tio;$/;"	m	struct:clientsession	typeref:struct:clientsession::termios
sbindir	Makefile	/^sbindir=${exec_prefix}\/sbin$/;"	m
sbox	libtomcrypt/notes/etc/whirlgen.c	/^unsigned sbox(unsigned x)$/;"	f
sbox	libtomcrypt/src/ciphers/skipjack.c	/^static const unsigned char sbox[256] = {$/;"	v	file:
sbox	libtomcrypt/src/ciphers/twofish/twofish.c	/^static ulong32 sbox(int i, ulong32 x)$/;"	f	file:
sbox	libtomcrypt/src/ciphers/twofish/twofish.c	75;"	d	file:
sbox0	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox0[] = {$/;"	v	file:
sbox1	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox1[] = {$/;"	v	file:
sbox2	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox2[] = {$/;"	v	file:
sbox3	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox3[] = {$/;"	v	file:
sbox4	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox4[] = {$/;"	v	file:
sbox5	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox5[] = {$/;"	v	file:
sbox6	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox6[] = {$/;"	v	file:
sbox7	libtomcrypt/src/hashes/whirl/whirltab.c	/^static const ulong64 sbox7[] = {$/;"	v	file:
sbuf	libtomcrypt/src/headers/tomcrypt_prng.h	/^                 sbuf;           \/* partial word encryption buffer *\/$/;"	m	struct:sober128_prng
scp_main	scp.c	/^int scp_main(int argc, char **argv)$/;"	f
scpobjs	Makefile	/^scpobjs=$(SCPOBJS)$/;"	m
seedrandom	random.c	/^void seedrandom() {$/;"	f
select_timeout	common-session.c	/^static long select_timeout() {$/;"	f	file:
send_chansess_pty_req	cli-chansession.c	/^static void send_chansess_pty_req(struct Channel *channel) {$/;"	f	file:
send_chansess_shell_req	cli-chansession.c	/^static void send_chansess_shell_req(struct Channel *channel) {$/;"	f	file:
send_exitsignalstatus	svr-chansession.c	/^static void send_exitsignalstatus(struct Channel *channel) {$/;"	f	file:
send_kex_first_guess	session.h	/^	void(*send_kex_first_guess)();$/;"	m	struct:sshsession
send_msg_channel_close	common-channel.c	/^static void send_msg_channel_close(struct Channel *channel) {$/;"	f	file:
send_msg_channel_data	common-channel.c	/^static void send_msg_channel_data(struct Channel *channel, int isextended) {$/;"	f	file:
send_msg_channel_eof	common-channel.c	/^static void send_msg_channel_eof(struct Channel *channel) {$/;"	f	file:
send_msg_channel_failure	common-channel.c	/^void send_msg_channel_failure(struct Channel *channel) {$/;"	f
send_msg_channel_open_agent	svr-agentfwd.c	/^static int send_msg_channel_open_agent(int fd) {$/;"	f	file:
send_msg_channel_open_confirmation	common-channel.c	/^static void send_msg_channel_open_confirmation(struct Channel* channel,$/;"	f	file:
send_msg_channel_open_failure	common-channel.c	/^static void send_msg_channel_open_failure(unsigned int remotechan, $/;"	f	file:
send_msg_channel_open_init	common-channel.c	/^int send_msg_channel_open_init(int fd, const struct ChanType *type) {$/;"	f
send_msg_channel_open_x11	svr-x11fwd.c	/^static int send_msg_channel_open_x11(int fd, struct sockaddr_in* addr) {$/;"	f	file:
send_msg_channel_success	common-channel.c	/^void send_msg_channel_success(struct Channel *channel) {$/;"	f
send_msg_channel_window_adjust	common-channel.c	/^static void send_msg_channel_window_adjust(struct Channel* channel, $/;"	f	file:
send_msg_chansess_exitsignal	svr-chansession.c	/^static void send_msg_chansess_exitsignal(struct Channel * channel,$/;"	f	file:
send_msg_chansess_exitstatus	svr-chansession.c	/^static void send_msg_chansess_exitstatus(struct Channel * channel,$/;"	f	file:
send_msg_global_request_remotetcp	cli-tcpfwd.c	/^static void send_msg_global_request_remotetcp(const char *addr, int port) {$/;"	f	file:
send_msg_ignore	common-session.c	/^void send_msg_ignore() {$/;"	f
send_msg_kexdh_init	cli-kex.c	/^void send_msg_kexdh_init() {$/;"	f
send_msg_kexdh_reply	svr-kex.c	/^static void send_msg_kexdh_reply(mp_int *dh_e) {$/;"	f	file:
send_msg_kexinit	common-kex.c	/^void send_msg_kexinit() {$/;"	f
send_msg_newkeys	common-kex.c	/^void send_msg_newkeys() {$/;"	f
send_msg_request_failure	svr-tcpfwd.c	/^static void send_msg_request_failure() {$/;"	f	file:
send_msg_request_success	svr-tcpfwd.c	/^static void send_msg_request_success() {$/;"	f	file:
send_msg_service_accept	svr-service.c	/^static void send_msg_service_accept(unsigned char *name, int len) {$/;"	f	file:
send_msg_service_request	cli-session.c	/^static void send_msg_service_request(char* servicename) {$/;"	f	file:
send_msg_userauth_banner	svr-auth.c	/^static void send_msg_userauth_banner() {$/;"	f	file:
send_msg_userauth_failure	svr-auth.c	/^void send_msg_userauth_failure(int partial, int incrfail) {$/;"	f
send_msg_userauth_pk_ok	svr-authpubkey.c	/^static void send_msg_userauth_pk_ok(unsigned char* algo, unsigned int algolen,$/;"	f	file:
send_msg_userauth_pubkey	cli-authpubkey.c	/^static void send_msg_userauth_pubkey(sign_key *key, int type, int realsign) {$/;"	f	file:
send_msg_userauth_success	svr-auth.c	/^void send_msg_userauth_success() {$/;"	f
send_session_identification	common-session.c	/^void send_session_identification() {$/;"	f
sendaddr	tcpfwd.h	/^	unsigned char *sendaddr;$/;"	m	struct:TCPListener
sendport	tcpfwd.h	/^	unsigned int sendport;$/;"	m	struct:TCPListener
sent_close	channel.h	/^	int sent_close, recv_close;$/;"	m	struct:Channel
sent_eof	channel.h	/^	int recv_eof, sent_eof;$/;"	m	struct:Channel
sentkexinit	kex.h	/^	unsigned sentkexinit : 1; \/*set when we've sent\/recv kexinit packet *\/$/;"	m	struct:KEXState
sentnewkeys	kex.h	/^	unsigned sentnewkeys : 1; \/* set once we've send MSG_NEWKEYS (will be cleared once we have also received *\/$/;"	m	struct:KEXState
sepfds	channel.h	/^	int sepfds; \/* Whether this channel has seperate pipes for in\/out or not *\/$/;"	m	struct:ChanType
server_pid	session.h	/^	pid_t server_pid;$/;"	m	struct:serversession
serversession	session.h	/^struct serversession {$/;"	s
ses	common-session.c	/^struct sshsession ses; \/* GLOBAL *\/$/;"	v	typeref:struct:sshsession
sesscheckclose	svr-chansession.c	/^static int sesscheckclose(struct Channel *channel) {$/;"	f	file:
sessinitdone	common-session.c	/^int sessinitdone = 0; \/* GLOBAL *\/$/;"	v
session_cleanup	common-session.c	/^void session_cleanup() {$/;"	f
session_id	session.h	/^	unsigned char *session_id; \/* this is the hash from the first kex *\/$/;"	m	struct:sshsession
session_loop	common-session.c	/^void session_loop(void(*loophandler)()) {$/;"	f
sessioncommand	svr-chansession.c	/^static int sessioncommand(struct Channel *channel, struct ChanSess *chansess,$/;"	f	file:
sessionpty	svr-chansession.c	/^static int sessionpty(struct ChanSess * chansess) {$/;"	f	file:
sessionsignal	svr-chansession.c	/^static int sessionsignal(struct ChanSess *chansess) {$/;"	f	file:
sessionwinchange	svr-chansession.c	/^static int sessionwinchange(struct ChanSess *chansess) {$/;"	f	file:
sesssigchild_handler	svr-chansession.c	/^static void sesssigchild_handler(int UNUSED(dummy)) {$/;"	f	file:
set	libtomcrypt/src/headers/tomcrypt_prng.h	/^                 set;            \/* did we call add_entropy to set key? *\/$/;"	m	struct:sober128_prng
set_algo_usable	common-algo.c	/^set_algo_usable(algo_type algos[], const char * algo_name, int usable)$/;"	f
set_int	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*set_int)(void *a, unsigned long n);$/;"	m	struct:__anon11
set_int	libtomcrypt/src/math/gmp_desc.c	/^static int set_int(void *a, unsigned long b)$/;"	f	file:
set_int	libtomcrypt/src/math/ltm_desc.c	/^static int set_int(void *a, unsigned long b)$/;"	f	file:
set_int	libtomcrypt/src/math/tfm_desc.c	/^static int set_int(void *a, unsigned long b)$/;"	f	file:
set_listener_fds	listener.c	/^void set_listener_fds(fd_set * readfds) {$/;"	f
set_sock_priority	dbutil.c	/^static void set_sock_priority(int sock) {$/;"	f	file:
set_utmp_time	loginrec.c	/^set_utmp_time(struct logininfo *li, struct utmp *ut)$/;"	f
set_utmpx_time	loginrec.c	/^set_utmpx_time(struct logininfo *li, struct utmpx *utx)$/;"	f
setchannelfds	common-channel.c	/^void setchannelfds(fd_set *readfds, fd_set *writefds) {$/;"	f
setegid	agentfwd.h	48;"	d
seteuid	agentfwd.h	47;"	d
setnonblocking	dbutil.c	/^void setnonblocking(int fd) {$/;"	f
setscreensize	progressmeter.c	/^setscreensize(void)$/;"	f	file:
setup	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int  (*setup)(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey);$/;"	m	struct:ltc_cipher_descriptor
setup_localtcp	cli-tcpfwd.c	/^void setup_localtcp() {$/;"	f
setup_mix	libtomcrypt/src/ciphers/aes/aes.c	/^static ulong32 setup_mix(ulong32 temp)$/;"	f	file:
setup_mix2	libtomcrypt/src/ciphers/aes/aes.c	/^static ulong32 setup_mix2(ulong32 temp)$/;"	f	file:
setup_remotetcp	cli-tcpfwd.c	/^void setup_remotetcp() {$/;"	f
setusershell	compat.c	/^void setusershell() {$/;"	f
sha1	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct sha1_state   sha1;$/;"	m	union:Hash_state	typeref:struct:Hash_state::sha1_state
sha1_compress	libtomcrypt/src/hashes/sha1.c	/^static int sha1_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
sha1_desc	libtomcrypt/src/hashes/sha1.c	/^const struct ltc_hash_descriptor sha1_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
sha1_done	libtomcrypt/src/hashes/sha1.c	/^int sha1_done(hash_state * md, unsigned char *out)$/;"	f
sha1_init	libtomcrypt/src/hashes/sha1.c	/^int sha1_init(hash_state * md)$/;"	f
sha1_process_mp	bignum.c	/^void sha1_process_mp(hash_state *hs, mp_int *mp) {$/;"	f
sha1_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct sha1_state {$/;"	s
sha1_test	libtomcrypt/src/hashes/sha1.c	/^int  sha1_test(void)$/;"	f
sha224_desc	libtomcrypt/src/hashes/sha2/sha224.c	/^const struct ltc_hash_descriptor sha224_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
sha224_done	libtomcrypt/src/hashes/sha2/sha224.c	/^int sha224_done(hash_state * md, unsigned char *out)$/;"	f
sha224_init	libtomcrypt/src/hashes/sha2/sha224.c	/^int sha224_init(hash_state * md)$/;"	f
sha224_process	libtomcrypt/src/headers/tomcrypt_hash.h	242;"	d
sha224_test	libtomcrypt/src/hashes/sha2/sha224.c	/^int  sha224_test(void)$/;"	f
sha256	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct sha256_state sha256;$/;"	m	union:Hash_state	typeref:struct:Hash_state::sha256_state
sha256_compress	libtomcrypt/src/hashes/sha2/sha256.c	/^static int sha256_compress(hash_state * md, unsigned char *buf)$/;"	f	file:
sha256_desc	libtomcrypt/src/hashes/sha2/sha256.c	/^const struct ltc_hash_descriptor sha256_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
sha256_done	libtomcrypt/src/hashes/sha2/sha256.c	/^int sha256_done(hash_state * md, unsigned char *out)$/;"	f
sha256_init	libtomcrypt/src/hashes/sha2/sha256.c	/^int sha256_init(hash_state * md)$/;"	f
sha256_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct sha256_state {$/;"	s
sha256_test	libtomcrypt/src/hashes/sha2/sha256.c	/^int  sha256_test(void)$/;"	f
sha384_desc	libtomcrypt/src/hashes/sha2/sha384.c	/^const struct ltc_hash_descriptor sha384_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
sha384_done	libtomcrypt/src/hashes/sha2/sha384.c	/^int sha384_done(hash_state * md, unsigned char *out)$/;"	f
sha384_init	libtomcrypt/src/hashes/sha2/sha384.c	/^int sha384_init(hash_state * md)$/;"	f
sha384_process	libtomcrypt/src/headers/tomcrypt_hash.h	224;"	d
sha384_test	libtomcrypt/src/hashes/sha2/sha384.c	/^int  sha384_test(void)$/;"	f
sha512	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct sha512_state sha512;$/;"	m	union:Hash_state	typeref:struct:Hash_state::sha512_state
sha512_compress	libtomcrypt/src/hashes/sha2/sha512.c	/^static int sha512_compress(hash_state * md, unsigned char *buf)$/;"	f	file:
sha512_desc	libtomcrypt/src/hashes/sha2/sha512.c	/^const struct ltc_hash_descriptor sha512_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
sha512_done	libtomcrypt/src/hashes/sha2/sha512.c	/^int sha512_done(hash_state * md, unsigned char *out)$/;"	f
sha512_init	libtomcrypt/src/hashes/sha2/sha512.c	/^int sha512_init(hash_state * md)$/;"	f
sha512_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct sha512_state {$/;"	s
sha512_test	libtomcrypt/src/hashes/sha2/sha512.c	/^int  sha512_test(void)$/;"	f
shells	compat.c	/^static char **curshell, **shells, *strings;$/;"	v	file:
showprogress	scp.c	/^int showprogress = 1;$/;"	v
sig_winch	progressmeter.c	/^sig_winch(int sig)$/;"	f	file:
sigchld_handler	svr-main.c	/^static void sigchld_handler(int UNUSED(unused)) {$/;"	f	file:
sigintterm_handler	svr-main.c	/^static void sigintterm_handler(int UNUSED(unused)) {$/;"	f	file:
sign	libtommath/mtest/mpi.h	/^  mp_sign       sign;    \/* sign of this quantity      *\/$/;"	m	struct:__anon42
sign	libtommath/tommath.h	/^    int used, alloc, sign;$/;"	m	struct:__anon43
sign_key	signkey.h	/^typedef struct SIGN_key sign_key;$/;"	t	typeref:struct:SIGN_key
sign_key_fingerprint	signkey.c	/^char * sign_key_fingerprint(unsigned char* keyblob, unsigned int keybloblen) {$/;"	f
sign_key_free	signkey.c	/^void sign_key_free(sign_key *key) {$/;"	f
sign_key_md5_fingerprint	signkey.c	/^static char * sign_key_md5_fingerprint(unsigned char* keyblob,$/;"	f	file:
sign_key_sha1_fingerprint	signkey.c	/^static char * sign_key_sha1_fingerprint(unsigned char* keyblob, $/;"	f	file:
signal	chansession.h	/^	int signal;$/;"	m	struct:SigMap
signal_pipe	session.h	/^	int signal_pipe[2]; \/* stores endpoints of a self-pipe used for$/;"	m	struct:sshsession
signames	common-chansession.c	/^const struct SigMap signames[] = {$/;"	v	typeref:struct:SigMap
signkey_name_from_type	signkey.c	/^const char* signkey_name_from_type(int type, int *namelen) {$/;"	f
signkey_source	signkey.h	/^} signkey_source;$/;"	t	typeref:enum:__anon47
signkey_type_from_name	signkey.c	/^int signkey_type_from_name(const char* name, int namelen) {$/;"	f
sigsegv_handler	svr-main.c	/^static void sigsegv_handler(int UNUSED(unused)) {$/;"	f	file:
sigwinch_handler	cli-chansession.c	/^static void sigwinch_handler(int UNUSED(unused)) {$/;"	f	file:
sin6_addr	fake-rfc2553.h	/^	struct in6_addr	sin6_addr;$/;"	m	struct:sockaddr_in6	typeref:struct:sockaddr_in6::in6_addr
sin6_family	fake-rfc2553.h	/^	unsigned short	sin6_family;$/;"	m	struct:sockaddr_in6
sin6_flowinfo	fake-rfc2553.h	/^	u_int32_t	sin6_flowinfo;$/;"	m	struct:sockaddr_in6
sin6_port	fake-rfc2553.h	/^	u_int16_t	sin6_port;$/;"	m	struct:sockaddr_in6
sin6_scope_id	fake-rfc2553.h	/^	u_int32_t	sin6_scope_id;$/;"	m	struct:sockaddr_in6
sink	scp.c	/^sink(int argc, char **argv)$/;"	f
size	buffer.h	/^	unsigned int size; \/* the memory size *\/$/;"	m	struct:buf
size	circbuffer.h	/^	unsigned int size;$/;"	m	struct:circbuf
size	libtomcrypt/src/headers/tomcrypt_pk.h	/^   int size;$/;"	m	struct:__anon28
size	libtomcrypt/src/headers/tomcrypt_pk.h	/^   unsigned long size;$/;"	m	struct:ltc_asn1_list_
size	libtomcrypt/src/pk/asn1/der/set/der_encode_setof.c	/^   unsigned long  size;$/;"	m	struct:edge	file:
sizes	libtomcrypt/testprof/ecc_test.c	/^static int sizes[] = {$/;"	v	file:
sizes	libtommath/bn_mp_prime_rabin_miller_trials.c	/^} sizes[] = {$/;"	v	typeref:struct:__anon44	file:
sizes	libtommath/etc/2kprime.c	/^int sizes[] = {256, 512, 768, 1024, 1536, 2048, 3072, 4096};$/;"	v
sizes	libtommath/etc/drprime.c	/^int sizes[] = { 1+256\/DIGIT_BIT, 1+512\/DIGIT_BIT, 1+768\/DIGIT_BIT, 1+1024\/DIGIT_BIT, 1+2048\/DIGIT_BIT, 1+4096\/DIGIT_BIT };$/;"	v
sizes	libtommath/pre_gen/mpi.c	/^} sizes[] = {$/;"	v	typeref:struct:__anon41	file:
skew	libtomcrypt/testprof/x86_prof.c	/^static ulong64 timer, skew = 0;$/;"	v	file:
skey	libtomcrypt/src/headers/tomcrypt_prng.h	/^    symmetric_key skey;$/;"	m	struct:fortuna_prng
skipjack	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct skipjack_key skipjack;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::skipjack_key
skipjack_desc	libtomcrypt/src/ciphers/skipjack.c	/^const struct ltc_cipher_descriptor skipjack_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
skipjack_done	libtomcrypt/src/ciphers/skipjack.c	/^void skipjack_done(symmetric_key *skey)$/;"	f
skipjack_ecb_decrypt	libtomcrypt/src/ciphers/skipjack.c	/^int skipjack_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
skipjack_ecb_encrypt	libtomcrypt/src/ciphers/skipjack.c	/^int skipjack_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
skipjack_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct skipjack_key {$/;"	s
skipjack_keysize	libtomcrypt/src/ciphers/skipjack.c	/^int skipjack_keysize(int *keysize)$/;"	f
skipjack_setup	libtomcrypt/src/ciphers/skipjack.c	/^int skipjack_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
skipjack_test	libtomcrypt/src/ciphers/skipjack.c	/^int skipjack_test(void)$/;"	f
slave	chansession.h	/^	int slave;$/;"	m	struct:ChanSess
sober128	libtomcrypt/src/headers/tomcrypt_prng.h	/^    struct sober128_prng  sober128;$/;"	m	union:Prng_state	typeref:struct:Prng_state::sober128_prng
sober128_add_entropy	libtomcrypt/src/prngs/sober128.c	/^int sober128_add_entropy(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
sober128_desc	libtomcrypt/src/prngs/sober128.c	/^const struct ltc_prng_descriptor sober128_desc = $/;"	v	typeref:struct:ltc_prng_descriptor
sober128_done	libtomcrypt/src/prngs/sober128.c	/^int sober128_done(prng_state *prng)$/;"	f
sober128_export	libtomcrypt/src/prngs/sober128.c	/^int sober128_export(unsigned char *out, unsigned long *outlen, prng_state *prng)$/;"	f
sober128_import	libtomcrypt/src/prngs/sober128.c	/^int sober128_import(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
sober128_prng	libtomcrypt/src/headers/tomcrypt_prng.h	/^struct sober128_prng {$/;"	s
sober128_read	libtomcrypt/src/prngs/sober128.c	/^unsigned long sober128_read(unsigned char *out, unsigned long outlen, prng_state *prng)$/;"	f
sober128_ready	libtomcrypt/src/prngs/sober128.c	/^int sober128_ready(prng_state *prng)$/;"	f
sober128_start	libtomcrypt/src/prngs/sober128.c	/^int sober128_start(prng_state *prng)$/;"	f
sober128_test	libtomcrypt/src/prngs/sober128.c	/^int sober128_test(void)$/;"	f
sock_in	session.h	/^	int sock_in;$/;"	m	struct:sshsession
sock_out	session.h	/^	int sock_out;$/;"	m	struct:sshsession
sockaddr_in6	fake-rfc2553.h	/^struct sockaddr_in6 {$/;"	s
sockaddr_storage	fake-rfc2553.h	/^struct sockaddr_storage {$/;"	s
socks	listener.h	/^	int socks[DROPBEAR_MAX_SOCKS];$/;"	m	struct:Listener
sorter	libtomcrypt/testprof/x86_prof.c	/^int sorter(const void *a, const void *b)$/;"	f
source	scp.c	/^source(int argc, char **argv)$/;"	f
source	signkey.h	/^	signkey_source source;$/;"	m	struct:SIGN_key
space	Makefile	/^space:= $(empty) $(empty)$/;"	m
spawn_command	dbutil.c	/^int spawn_command(void(*exec_fn)(void *user_data), void *exec_data,$/;"	f
spd1	libtomcrypt/testprof/tomcrypt_test.h	/^    unsigned long spd1, spd2, avg;$/;"	m	struct:list
spd2	libtomcrypt/testprof/tomcrypt_test.h	/^    unsigned long spd1, spd2, avg;$/;"	m	struct:list
sprng_add_entropy	libtomcrypt/src/prngs/sprng.c	/^int sprng_add_entropy(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
sprng_desc	libtomcrypt/src/prngs/sprng.c	/^const struct ltc_prng_descriptor sprng_desc =$/;"	v	typeref:struct:ltc_prng_descriptor
sprng_done	libtomcrypt/src/prngs/sprng.c	/^int sprng_done(prng_state *prng)$/;"	f
sprng_export	libtomcrypt/src/prngs/sprng.c	/^int sprng_export(unsigned char *out, unsigned long *outlen, prng_state *prng)$/;"	f
sprng_import	libtomcrypt/src/prngs/sprng.c	/^int sprng_import(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
sprng_read	libtomcrypt/src/prngs/sprng.c	/^unsigned long sprng_read(unsigned char *out, unsigned long outlen, prng_state *prng)$/;"	f
sprng_ready	libtomcrypt/src/prngs/sprng.c	/^int sprng_ready(prng_state *prng)$/;"	f
sprng_start	libtomcrypt/src/prngs/sprng.c	/^int sprng_start(prng_state *prng)$/;"	f
sprng_test	libtomcrypt/src/prngs/sprng.c	/^int sprng_test(void)$/;"	f
sqr	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*sqr)(void *a, void *b);$/;"	m	struct:__anon11
sqr	libtomcrypt/src/math/gmp_desc.c	/^static int sqr(void *a, void *b)$/;"	f	file:
sqr	libtomcrypt/src/math/ltm_desc.c	/^static int sqr(void *a, void *b)$/;"	f	file:
sqr	libtomcrypt/src/math/tfm_desc.c	/^static int sqr(void *a, void *b)$/;"	f	file:
sqrmod	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*sqrmod)(void *a, void *b, void *c);$/;"	m	struct:__anon11
sqrmod	libtomcrypt/src/math/gmp_desc.c	/^static int sqrmod(void *a, void *b, void *c)$/;"	f	file:
sqrmod	libtomcrypt/src/math/ltm_desc.c	/^static int sqrmod(void *a, void *b, void *c)$/;"	f	file:
sqrmod	libtomcrypt/src/math/tfm_desc.c	/^static int sqrmod(void *a, void *b, void *c)$/;"	f	file:
srcdir	Makefile	/^srcdir=.$/;"	m
srcdir	libtomcrypt/Makefile	/^srcdir=.$/;"	m
srcdir	libtommath/Makefile	/^srcdir=.$/;"	m
ss	libtomcrypt/src/headers/tomcrypt_pk.h	/^            ss, \/* second *\/$/;"	m	struct:__anon33
ss_family	fake-rfc2553.h	61;"	d
ss_sa	fake-rfc2553.h	/^	struct sockaddr	ss_sa;$/;"	m	struct:sockaddr_storage	typeref:struct:sockaddr_storage::sockaddr
ssh_compress	common-algo.c	/^algo_type ssh_compress[] = {$/;"	v
ssh_get_progname	scpmisc.c	/^char *ssh_get_progname(char *argv0)$/;"	f
ssh_nocompress	common-algo.c	/^algo_type ssh_nocompress[] = {$/;"	v
ssh_program	scp.c	/^char *ssh_program = _PATH_SSH_PROGRAM;$/;"	v
sshciphers	common-algo.c	/^algo_type sshciphers[] = {$/;"	v
sshhashes	common-algo.c	/^algo_type sshhashes[] = {$/;"	v
sshhostkey	common-algo.c	/^algo_type sshhostkey[] = {$/;"	v
sshkex	common-algo.c	/^algo_type sshkex[] = {$/;"	v
sshsession	session.h	/^struct sshsession {$/;"	s
stab	libtomcrypt/src/ciphers/rc5.c	/^static const ulong32 stab[50] = {$/;"	v	file:
stab	libtomcrypt/src/ciphers/rc6.c	/^static const ulong32 stab[44] = {$/;"	v	file:
stalled	progressmeter.c	/^static long stalled;		\/* how long we have been stalled *\/$/;"	v	file:
start	algo.h	/^	int (*start)(int cipher, const unsigned char *IV, $/;"	m	struct:dropbear_cipher_mode
start	keyimport.c	/^struct mpint_pos { void *start; int bytes; };$/;"	m	struct:mpint_pos	file:
start	libtomcrypt/src/headers/tomcrypt_cipher.h	/^      unsigned char S[32], start;$/;"	m	struct:twofish_key
start	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int (*start)(prng_state *prng);$/;"	m	struct:ltc_prng_descriptor
start	libtomcrypt/src/pk/asn1/der/set/der_encode_setof.c	/^   unsigned char *start;$/;"	m	struct:edge	file:
start	progressmeter.c	/^static time_t start;		\/* start progress *\/$/;"	v	file:
start_progress_meter	progressmeter.c	/^start_progress_meter(char *f, off_t filesize, off_t *ctr)$/;"	f
startsyslog	dbutil.c	/^void startsyslog() {$/;"	f
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[10];$/;"	m	struct:rmd320_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[4];$/;"	m	struct:rmd128_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[5];$/;"	m	struct:rmd160_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 curlen, state[8];$/;"	m	struct:rmd256_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[4], curlen;$/;"	m	struct:md4_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[4], curlen;$/;"	m	struct:md5_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[5], curlen;$/;"	m	struct:sha1_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong32 state[8], curlen;$/;"	m	struct:sha256_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64  length, state[8];$/;"	m	struct:sha512_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 length, state[8];$/;"	m	struct:whirlpool_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    ulong64 state[3], length;$/;"	m	struct:tiger_state
state	libtomcrypt/src/headers/tomcrypt_hash.h	/^    unsigned char state[MAXBLOCKSIZE], buf[MAXBLOCKSIZE];$/;"	m	struct:chc_state
state	libtomcrypt/src/headers/tomcrypt_mac.h	/^    unsigned char state[16];$/;"	m	struct:pelican_state
state	session.h	/^	cli_state state; \/* Used to progress auth\/channelsession etc *\/$/;"	m	struct:clientsession
stderrcopy	session.h	/^	int stderrcopy;$/;"	m	struct:clientsession
stderrflags	session.h	/^	int stderrflags;$/;"	m	struct:clientsession
stdincopy	session.h	/^	int stdincopy;$/;"	m	struct:clientsession
stdinflags	session.h	/^	int stdinflags;$/;"	m	struct:clientsession
stdoutcopy	session.h	/^	int stdoutcopy;$/;"	m	struct:clientsession
stdoutflags	session.h	/^	int stdoutflags;$/;"	m	struct:clientsession
stop_progress_meter	progressmeter.c	/^stop_progress_meter(void)$/;"	f
store_test	libtomcrypt/testprof/store_test.c	/^int store_test(void)$/;"	f
strings	compat.c	/^static char **curshell, **shells, *strings;$/;"	v	file:
stripcontrol	dbutil.c	/^char * stripcontrol(const char * text) {$/;"	f
strlcat	compat.c	/^strlcat(dst, src, siz)$/;"	f
strlcpy	compat.c	/^size_t strlcpy(char *dst, const char *src, size_t size) {$/;"	f
sub	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*sub)(void *a, void *b, void *c);$/;"	m	struct:__anon11
sub	libtomcrypt/src/math/gmp_desc.c	/^static int sub(void *a, void *b, void *c)$/;"	f	file:
sub	libtomcrypt/src/math/ltm_desc.c	/^static int sub(void *a, void *b, void *c)$/;"	f	file:
sub	libtomcrypt/src/math/tfm_desc.c	/^static int sub(void *a, void *b, void *c)$/;"	f	file:
subi	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*subi)(void *a, unsigned long b, void *c);$/;"	m	struct:__anon11
subi	libtomcrypt/src/math/gmp_desc.c	/^static int subi(void *a, unsigned long b, void *c)$/;"	f	file:
subi	libtomcrypt/src/math/ltm_desc.c	/^static int subi(void *a, unsigned long b, void *c)$/;"	f	file:
subi	libtomcrypt/src/math/tfm_desc.c	/^static int subi(void *a, unsigned long b, void *c)$/;"	f	file:
svr_add_pubkey_options	auth.h	59;"	d
svr_add_pubkey_options	svr-authpubkeyoptions.c	/^int svr_add_pubkey_options(buffer *options_buf, int line_num, const char* filename) {$/;"	f
svr_agentcleanup	svr-agentfwd.c	/^void svr_agentcleanup(struct ChanSess * chansess) {$/;"	f
svr_agentreq	svr-agentfwd.c	/^int svr_agentreq(struct ChanSess * chansess) {$/;"	f
svr_agentset	svr-agentfwd.c	/^void svr_agentset(struct ChanSess * chansess) {$/;"	f
svr_auth_pam	svr-authpam.c	/^void svr_auth_pam() {$/;"	f
svr_auth_password	svr-authpasswd.c	/^void svr_auth_password() {$/;"	f
svr_auth_pubkey	svr-authpubkey.c	/^void svr_auth_pubkey() {$/;"	f
svr_authinitialise	svr-auth.c	/^void svr_authinitialise() {$/;"	f
svr_cancelremotetcp	svr-tcpfwd.c	/^static int svr_cancelremotetcp() {$/;"	f	file:
svr_chan_tcpdirect	svr-tcpfwd.c	/^const struct ChanType svr_chan_tcpdirect = {$/;"	v	typeref:struct:ChanType
svr_chan_tcpremote	svr-tcpfwd.c	/^static const struct ChanType svr_chan_tcpremote = {$/;"	v	typeref:struct:ChanType	file:
svr_chansessinitialise	svr-chansession.c	/^void svr_chansessinitialise() {$/;"	f
svr_chantypes	svr-session.c	/^static const struct ChanType *svr_chantypes[] = {$/;"	v	typeref:struct:ChanType	file:
svr_dropbear_exit	svr-session.c	/^void svr_dropbear_exit(int exitcode, const char* format, va_list param) {$/;"	f
svr_dropbear_log	svr-session.c	/^void svr_dropbear_log(int priority, const char* format, va_list param) {$/;"	f
svr_getopts	svr-runopts.c	/^void svr_getopts(int argc, char ** argv) {$/;"	f
svr_opts	svr-runopts.c	/^svr_runopts svr_opts; \/* GLOBAL *\/$/;"	v
svr_packettypes	svr-session.c	/^static const packettype svr_packettypes[] = {$/;"	v	file:
svr_pubkey_allows_agentfwd	auth.h	53;"	d
svr_pubkey_allows_agentfwd	svr-authpubkeyoptions.c	/^int svr_pubkey_allows_agentfwd() {$/;"	f
svr_pubkey_allows_pty	auth.h	56;"	d
svr_pubkey_allows_pty	svr-authpubkeyoptions.c	/^int svr_pubkey_allows_pty() {$/;"	f
svr_pubkey_allows_tcpfwd	auth.h	54;"	d
svr_pubkey_allows_tcpfwd	svr-authpubkeyoptions.c	/^int svr_pubkey_allows_tcpfwd() {$/;"	f
svr_pubkey_allows_x11fwd	auth.h	55;"	d
svr_pubkey_allows_x11fwd	svr-authpubkeyoptions.c	/^int svr_pubkey_allows_x11fwd() {$/;"	f
svr_pubkey_options_cleanup	auth.h	/^static inline void svr_pubkey_options_cleanup() { }$/;"	f
svr_pubkey_options_cleanup	svr-authpubkeyoptions.c	/^void svr_pubkey_options_cleanup() {$/;"	f
svr_pubkey_set_forced_command	auth.h	/^static inline void svr_pubkey_set_forced_command(struct ChanSess *chansess) { }$/;"	f
svr_pubkey_set_forced_command	svr-authpubkeyoptions.c	/^void svr_pubkey_set_forced_command(struct ChanSess *chansess) {$/;"	f
svr_remoteclosed	svr-session.c	/^static void svr_remoteclosed() {$/;"	f	file:
svr_remotetcpreq	svr-tcpfwd.c	/^static int svr_remotetcpreq() {$/;"	f	file:
svr_runopts	runopts.h	/^typedef struct svr_runopts {$/;"	s
svr_runopts	runopts.h	/^} svr_runopts;$/;"	t	typeref:struct:svr_runopts
svr_ses	svr-session.c	/^struct serversession svr_ses; \/* GLOBAL *\/$/;"	v	typeref:struct:serversession
svr_session	svr-session.c	/^void svr_session(int sock, int childpipe) {$/;"	f
svr_session_cleanup	svr-session.c	/^svr_session_cleanup(void)$/;"	f	file:
svrchansess	svr-chansession.c	/^const struct ChanType svrchansess = {$/;"	v	typeref:struct:ChanType
switch_keys	common-kex.c	/^static void switch_keys() {$/;"	f	file:
symmetric_CBC	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_CBC;$/;"	t	typeref:struct:__anon23
symmetric_CFB	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_CFB;$/;"	t	typeref:struct:__anon21
symmetric_CTR	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_CTR;$/;"	t	typeref:struct:__anon24
symmetric_ECB	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_ECB;$/;"	t	typeref:struct:__anon20
symmetric_F8	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_F8;$/;"	t	typeref:struct:__anon26
symmetric_LRW	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_LRW;$/;"	t	typeref:struct:__anon25
symmetric_OFB	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_OFB;$/;"	t	typeref:struct:__anon22
symmetric_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^} symmetric_key;$/;"	t	typeref:union:Symmetric_key
syslogin_perform_login	loginrec.c	/^syslogin_perform_login(struct logininfo *li)$/;"	f	file:
syslogin_perform_logout	loginrec.c	/^syslogin_perform_logout(struct logininfo *li)$/;"	f	file:
syslogin_write_entry	loginrec.c	/^syslogin_write_entry(struct logininfo *li)$/;"	f
t	libtommath/bn_mp_prime_rabin_miller_trials.c	/^   int k, t;$/;"	m	struct:__anon44	file:
t	libtommath/pre_gen/mpi.c	/^   int k, t;$/;"	m	struct:__anon41	file:
t1	libtomcrypt/src/hashes/tiger.c	39;"	d	file:
t2	libtomcrypt/src/hashes/tiger.c	40;"	d	file:
t3	libtomcrypt/src/hashes/tiger.c	41;"	d	file:
t4	libtomcrypt/src/hashes/tiger.c	42;"	d	file:
t_read	libtomcrypt/testprof/x86_prof.c	/^ulong64 t_read(void)$/;"	f
t_read	libtommath/etc/timer.asm	/^t_read:$/;"	l
t_read	libtommath/etc/tune.c	/^ulong64 t_read(void) { return TIMFUNC() - LBL_T; }$/;"	f
t_start	libtomcrypt/testprof/x86_prof.c	/^void t_start(void)$/;"	f
t_start	libtommath/etc/timer.asm	/^t_start:$/;"	l
t_start	libtommath/etc/tune.c	/^void t_start(void) { LBL_T = TIMFUNC(); }$/;"	f
table	libtomcrypt/src/hashes/tiger.c	/^static const ulong64 table[4*256] = {$/;"	v	file:
tail	queue.h	/^	struct Link* tail;$/;"	m	struct:Queue	typeref:struct:Queue::Link
tally_results	libtomcrypt/testprof/x86_prof.c	/^void tally_results(int type)$/;"	f
targetshouldbedirectory	scp.c	/^int pflag, iamremote, iamrecursive, targetshouldbedirectory;$/;"	v
tcp_acceptor	tcp-accept.c	/^static void tcp_acceptor(struct Listener *listener, int sock) {$/;"	f	file:
tcp_type	tcpfwd.h	/^	enum {direct, forwarded} tcp_type;$/;"	m	struct:TCPListener	typeref:enum:TCPListener::__anon46
term	chansession.h	/^	unsigned char * term;$/;"	m	struct:ChanSess
terma	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^   int ham, terma, termb;$/;"	m	struct:__anon38	file:
termb	libtomcrypt/src/math/fp/ltc_ecc_fp_mulmod.c	/^   int ham, terma, termb;$/;"	m	struct:__anon38	file:
termcodes	termcodes.c	/^const struct TermCode termcodes[MAX_TERMCODE+1] = {$/;"	v	typeref:struct:TermCode
termination	loginrec.h	/^	int        termination;                 \/* process termination status *\/$/;"	m	struct:logininfo
test	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*test)(void);$/;"	m	struct:ltc_cipher_descriptor
test	libtomcrypt/src/headers/tomcrypt_hash.h	/^    int (*test)(void);$/;"	m	struct:ltc_hash_descriptor
test	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int (*test)(void);$/;"	m	struct:ltc_prng_descriptor
test_entry	libtomcrypt/testprof/tomcrypt_test.h	/^} test_entry;$/;"	t	typeref:struct:__anon8
tfm_code	libtomcrypt/src/math/tfm_desc.c	/^    int tfm_code, ltc_code;$/;"	m	struct:__anon36	file:
tfm_desc	libtomcrypt/src/math/tfm_desc.c	/^const ltc_math_descriptor tfm_desc = {$/;"	v
tfm_ecc_projective_add_point	libtomcrypt/src/math/tfm_desc.c	/^static int tfm_ecc_projective_add_point(ecc_point *P, ecc_point *Q, ecc_point *R, void *modulus, void *Mp)$/;"	f	file:
tfm_ecc_projective_dbl_point	libtomcrypt/src/math/tfm_desc.c	/^static int tfm_ecc_projective_dbl_point(ecc_point *P, ecc_point *R, void *modulus, void *Mp)$/;"	f	file:
tfm_to_ltc_codes	libtomcrypt/src/math/tfm_desc.c	/^} tfm_to_ltc_codes[] = {$/;"	v	typeref:struct:__anon36	file:
tfm_to_ltc_error	libtomcrypt/src/math/tfm_desc.c	/^static int tfm_to_ltc_error(int err)$/;"	f	file:
them_firstfollows	kex.h	/^	unsigned them_firstfollows : 1; \/* true when first_kex_packet_follows is set *\/$/;"	m	struct:KEXState
theta_pi_gamma	libtomcrypt/src/hashes/whirl/whirl.c	46;"	d	file:
tiger	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct tiger_state  tiger;$/;"	m	union:Hash_state	typeref:struct:Hash_state::tiger_state
tiger_compress	libtomcrypt/src/hashes/tiger.c	/^static int tiger_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
tiger_desc	libtomcrypt/src/hashes/tiger.c	/^const struct ltc_hash_descriptor tiger_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
tiger_done	libtomcrypt/src/hashes/tiger.c	/^int tiger_done(hash_state * md, unsigned char *out)$/;"	f
tiger_init	libtomcrypt/src/hashes/tiger.c	/^int tiger_init(hash_state *md)$/;"	f
tiger_round	libtomcrypt/src/hashes/tiger.c	/^INLINE static void tiger_round(ulong64 *a, ulong64 *b, ulong64 *c, ulong64 x, int mul)$/;"	f	file:
tiger_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct tiger_state {$/;"	s
tiger_test	libtomcrypt/src/hashes/tiger.c	/^int  tiger_test(void)$/;"	f
time	libtommath/etc/timer.asm	/^time dd 0, 0$/;"	d
time_cipher	libtomcrypt/testprof/x86_prof.c	/^int time_cipher(void)$/;"	f
time_cipher2	libtomcrypt/testprof/x86_prof.c	/^int time_cipher2(void) { fprintf(stderr, "NO CBC\\n"); return 0; }$/;"	f
time_cipher2	libtomcrypt/testprof/x86_prof.c	/^int time_cipher2(void)$/;"	f
time_cipher3	libtomcrypt/testprof/x86_prof.c	/^int time_cipher3(void) { fprintf(stderr, "NO CTR\\n"); return 0; }$/;"	f
time_cipher3	libtomcrypt/testprof/x86_prof.c	/^int time_cipher3(void)$/;"	f
time_cipher4	libtomcrypt/testprof/x86_prof.c	/^int time_cipher4(void) { fprintf(stderr, "NO LRW\\n"); return 0; }$/;"	f
time_cipher4	libtomcrypt/testprof/x86_prof.c	/^int time_cipher4(void)$/;"	f
time_dsa	libtomcrypt/testprof/x86_prof.c	/^void time_dsa(void)$/;"	f
time_ecc	libtomcrypt/testprof/x86_prof.c	/^void time_ecc(void) { fprintf(stderr, "NO ECC\\n"); }$/;"	f
time_ecc	libtomcrypt/testprof/x86_prof.c	/^void time_ecc(void)$/;"	f
time_encmacs	libtomcrypt/testprof/x86_prof.c	/^void time_encmacs(void)$/;"	f
time_encmacs_	libtomcrypt/testprof/x86_prof.c	/^void time_encmacs_(unsigned long MAC_SIZE)$/;"	f
time_hash	libtomcrypt/testprof/x86_prof.c	/^int time_hash(void)$/;"	f
time_katja	libtomcrypt/testprof/x86_prof.c	/^void time_katja(void) { fprintf(stderr, "NO Katja\\n"); }$/;"	f
time_katja	libtomcrypt/testprof/x86_prof.c	/^void time_katja(void)$/;"	f
time_keysched	libtomcrypt/testprof/x86_prof.c	/^int time_keysched(void)$/;"	f
time_macs	libtomcrypt/testprof/x86_prof.c	/^void time_macs(void)$/;"	f
time_macs_	libtomcrypt/testprof/x86_prof.c	/^void time_macs_(unsigned long MAC_SIZE)$/;"	f
time_mult	libtomcrypt/testprof/x86_prof.c	/^void time_mult(void) { fprintf(stderr, "NO MULT\\n"); }$/;"	f
time_mult	libtomcrypt/testprof/x86_prof.c	/^void time_mult(void)$/;"	f
time_mult	libtommath/etc/tune.c	/^ulong64 time_mult(int size, int s)$/;"	f
time_prng	libtomcrypt/testprof/x86_prof.c	/^void time_prng(void)$/;"	f
time_rsa	libtomcrypt/testprof/x86_prof.c	/^void time_rsa(void) { fprintf(stderr, "NO RSA\\n"); }$/;"	f
time_rsa	libtomcrypt/testprof/x86_prof.c	/^void time_rsa(void)$/;"	f
time_sqr	libtomcrypt/testprof/x86_prof.c	/^void time_sqr(void) { fprintf(stderr, "NO SQR\\n"); }$/;"	f
time_sqr	libtomcrypt/testprof/x86_prof.c	/^void time_sqr(void)$/;"	f
time_sqr	libtommath/etc/tune.c	/^ulong64 time_sqr(int size, int s)$/;"	f
timer	libtomcrypt/testprof/x86_prof.c	/^static ulong64 timer, skew = 0;$/;"	v	file:
timersub	scpmisc.h	52;"	d
tolocal	scp.c	/^tolocal(int argc, char **argv)$/;"	f
toremote	scp.c	/^toremote(char *targ, int argc, char **argv)$/;"	f
totlen	libtomcrypt/src/headers/tomcrypt_mac.h	/^   ulong64             totlen,       \/* 64-bit counter used for IV and AAD *\/$/;"	m	struct:__anon17
totrot	libtomcrypt/src/ciphers/des.c	/^static const unsigned char totrot[16] = {$/;"	v	file:
trans	session.h	/^	struct key_context_directional trans;$/;"	m	struct:key_context	typeref:struct:key_context::key_context_directional
transkexinit	session.h	/^	buffer* transkexinit; \/* the kexinit packet we send should be kept so we$/;"	m	struct:sshsession
transmaxpacket	channel.h	/^	unsigned int recvmaxpacket, transmaxpacket;$/;"	m	struct:Channel
transseq	session.h	/^	unsigned int transseq, recvseq; \/* Sequence IDs *\/$/;"	m	struct:sshsession
transwindow	channel.h	/^	unsigned int recvwindow, transwindow;$/;"	m	struct:Channel
try_add_algo	common-algo.c	/^try_add_algo(const char *algo_name, algo_type *algos, $/;"	f	file:
tty	chansession.h	/^	unsigned char * tty;$/;"	m	struct:ChanSess
tty_raw_mode	session.h	/^	int tty_raw_mode; \/* Whether we're in raw mode (and have to clean up) *\/$/;"	m	struct:clientsession
tv_sec	loginrec.h	/^	unsigned int tv_sec;$/;"	m	struct:logininfo
tv_usec	loginrec.h	/^	unsigned int tv_usec;$/;"	m	struct:logininfo
tweak	libtomcrypt/src/headers/tomcrypt_cipher.h	/^                      tweak[16],$/;"	m	struct:__anon25
twoexpt	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*twoexpt)(void *a , int n);$/;"	m	struct:__anon11
twoexpt	libtomcrypt/src/math/gmp_desc.c	/^static int twoexpt(void *a, int n)$/;"	f	file:
twoexpt	libtomcrypt/src/math/ltm_desc.c	/^static int twoexpt(void *a, int n)$/;"	f	file:
twoexpt	libtomcrypt/src/math/tfm_desc.c	/^static int twoexpt(void *a, int n)$/;"	f	file:
twofish	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct twofish_key  twofish;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::twofish_key
twofish_desc	libtomcrypt/src/ciphers/twofish/twofish.c	/^const struct ltc_cipher_descriptor twofish_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
twofish_done	libtomcrypt/src/ciphers/twofish/twofish.c	/^void twofish_done(symmetric_key *skey)$/;"	f
twofish_ecb_decrypt	libtomcrypt/src/ciphers/twofish/twofish.c	/^int twofish_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
twofish_ecb_encrypt	libtomcrypt/src/ciphers/twofish/twofish.c	/^int twofish_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
twofish_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct twofish_key {$/;"	s
twofish_keysize	libtomcrypt/src/ciphers/twofish/twofish.c	/^int twofish_keysize(int *keysize)$/;"	f
twofish_setup	libtomcrypt/src/ciphers/twofish/twofish.c	/^int twofish_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
twofish_test	libtomcrypt/src/ciphers/twofish/twofish.c	/^int twofish_test(void)$/;"	f
type	channel.h	/^	const struct ChanType* type;$/;"	m	struct:Channel	typeref:struct:Channel::ChanType
type	keyimport.c	/^	int type;$/;"	m	struct:openssh_key	file:
type	libtomcrypt/src/headers/tomcrypt_pk.h	/^    int type;$/;"	m	struct:KAT_key
type	libtomcrypt/src/headers/tomcrypt_pk.h	/^    int type;$/;"	m	struct:Rsa_key
type	libtomcrypt/src/headers/tomcrypt_pk.h	/^    int type;$/;"	m	struct:__anon30
type	libtomcrypt/src/headers/tomcrypt_pk.h	/^   int           type;$/;"	m	struct:ltc_asn1_list_
type	libtomcrypt/src/headers/tomcrypt_pk.h	/^   int type; $/;"	m	struct:__anon31
type	listener.h	/^	int type; \/* CHANNEL_ID_X11, CHANNEL_ID_AGENT, $/;"	m	struct:Listener
type	loginrec.h	/^	short int  type;                         \/* type of login (LTYPE_*) *\/$/;"	m	struct:logininfo
type	packet.h	/^	unsigned char type; \/* SSH_MSG_FOO *\/$/;"	m	struct:PacketType
type	signkey.h	/^	int type; \/* The type of key (dss or rsa) *\/$/;"	m	struct:SIGN_key
type	termcodes.h	/^	unsigned char type;$/;"	m	struct:TermCode
typedata	channel.h	/^	void* typedata; \/* a pointer to type specific data *\/$/;"	m	struct:Channel
typedata	listener.h	/^	void *typedata;$/;"	m	struct:Listener
u16	libtomcrypt/src/ciphers/kasumi.c	/^typedef unsigned u16;$/;"	t	file:
u_int16_t	includes.h	/^typedef unsigned short u_int16_t;$/;"	t
uid	loginrec.h	/^	int        uid;                          \/* UID of this user *\/$/;"	m	struct:logininfo
uint16_t	includes.h	/^typedef u_int16_t uint16_t;$/;"	t
ulong32	libtomcrypt/src/headers/tomcrypt_macros.h	/^   typedef unsigned long ulong32;$/;"	t
ulong32	libtomcrypt/src/headers/tomcrypt_macros.h	/^   typedef unsigned ulong32;$/;"	t
ulong64	libtomcrypt/src/headers/tomcrypt_macros.h	/^   typedef unsigned __int64 ulong64;$/;"	t
ulong64	libtomcrypt/src/headers/tomcrypt_macros.h	/^   typedef unsigned long long ulong64;$/;"	t
ulong64	libtommath/tommath.h	/^      typedef unsigned __int64   ulong64;$/;"	t
ulong64	libtommath/tommath.h	/^      typedef unsigned long long ulong64;$/;"	t
ulong64	libtommath/tommath.h	/^   typedef unsigned long long ulong64;$/;"	t
unit	progressmeter.c	/^static const char unit[] = " KMGT";$/;"	v	file:
unregister_cipher	libtomcrypt/src/misc/crypt/crypt_unregister_cipher.c	/^int unregister_cipher(const struct ltc_cipher_descriptor *cipher)$/;"	f
unregister_hash	libtomcrypt/src/misc/crypt/crypt_unregister_hash.c	/^int unregister_hash(const struct ltc_hash_descriptor *hash)$/;"	f
unregister_prng	libtomcrypt/src/misc/crypt/crypt_unregister_prng.c	/^int unregister_prng(const struct ltc_prng_descriptor *prng)$/;"	f
unsigned_read	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*unsigned_read)(void *dst, unsigned char *src, unsigned long len);$/;"	m	struct:__anon11
unsigned_read	libtomcrypt/src/math/gmp_desc.c	/^static int unsigned_read(void *a, unsigned char *b, unsigned long len)$/;"	f	file:
unsigned_read	libtomcrypt/src/math/ltm_desc.c	/^static int unsigned_read(void *a, unsigned char *b, unsigned long len)$/;"	f	file:
unsigned_read	libtomcrypt/src/math/tfm_desc.c	/^static int unsigned_read(void *a, unsigned char *b, unsigned long len)$/;"	f	file:
unsigned_size	libtomcrypt/src/headers/tomcrypt_math.h	/^   unsigned long (*unsigned_size)(void *a);$/;"	m	struct:__anon11
unsigned_size	libtomcrypt/src/math/gmp_desc.c	/^static unsigned long unsigned_size(void *a)$/;"	f	file:
unsigned_size	libtomcrypt/src/math/ltm_desc.c	/^static unsigned long unsigned_size(void *a)$/;"	f	file:
unsigned_size	libtomcrypt/src/math/tfm_desc.c	/^static unsigned long unsigned_size(void *a)$/;"	f	file:
unsigned_write	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*unsigned_write)(void *src, unsigned char *dst);$/;"	m	struct:__anon11
unsigned_write	libtomcrypt/src/math/gmp_desc.c	/^static int unsigned_write(void *a, unsigned char *b)$/;"	f	file:
unsigned_write	libtomcrypt/src/math/ltm_desc.c	/^static int unsigned_write(void *a, unsigned char *b)$/;"	f	file:
unsigned_write	libtomcrypt/src/math/tfm_desc.c	/^static int unsigned_write(void *a, unsigned char *b)$/;"	f	file:
update_progress_meter	progressmeter.c	/^update_progress_meter(int ignore)$/;"	f	file:
usable	algo.h	/^	char usable; \/* whether we can use this algorithm *\/$/;"	m	struct:Algo_Type
usage	libtomcrypt/demos/encrypt.c	/^int usage(char *name) $/;"	f
usage	scp.c	/^usage(void)$/;"	f
used	circbuffer.h	/^	unsigned int used;$/;"	m	struct:circbuf
used	libtomcrypt/src/headers/tomcrypt_pk.h	/^   int           used;$/;"	m	struct:ltc_asn1_list_
used	libtommath/mtest/mpi.h	/^  mp_size       used;    \/* how many digits used       *\/$/;"	m	struct:__anon42
used	libtommath/tommath.h	/^    int used, alloc, sign;$/;"	m	struct:__anon43
user	svr-authpam.c	/^	char* user;$/;"	m	struct:UserDataS	file:
userid	scp.c	/^uid_t userid;$/;"	v
username	auth.h	/^	char *username; \/* This is the username the client presents to check. It$/;"	m	struct:AuthState
username	loginrec.h	/^	char       username[LINFO_NAMESIZE];     \/* login username *\/$/;"	m	struct:logininfo
username	runopts.h	/^	char *username;$/;"	m	struct:cli_runopts
usingsyslog	runopts.h	/^	int usingsyslog;$/;"	m	struct:svr_runopts
utmp_perform_login	loginrec.c	/^utmp_perform_login(struct logininfo *li)$/;"	f	file:
utmp_perform_logout	loginrec.c	/^utmp_perform_logout(struct logininfo *li)$/;"	f	file:
utmp_write_direct	loginrec.c	/^utmp_write_direct(struct logininfo *li, struct utmp *ut)$/;"	f	file:
utmp_write_entry	loginrec.c	/^utmp_write_entry(struct logininfo *li)$/;"	f
utmp_write_library	loginrec.c	/^utmp_write_library(struct logininfo *li, struct utmp *ut)$/;"	f	file:
utmpx_perform_login	loginrec.c	/^utmpx_perform_login(struct logininfo *li)$/;"	f	file:
utmpx_perform_logout	loginrec.c	/^utmpx_perform_logout(struct logininfo *li)$/;"	f	file:
utmpx_write_direct	loginrec.c	/^utmpx_write_direct(struct logininfo *li, struct utmpx *utx)$/;"	f	file:
utmpx_write_entry	loginrec.c	/^utmpx_write_entry(struct logininfo *li)$/;"	f
utmpx_write_library	loginrec.c	/^utmpx_write_library(struct logininfo *li, struct utmpx *utx)$/;"	f	file:
val	algo.h	/^	char val; \/* a value for this cipher, or -1 for invalid *\/$/;"	m	struct:Algo_Type
valid	session.h	/^	int valid;$/;"	m	struct:key_context_directional
value	libtomcrypt/src/pk/asn1/der/ia5/der_length_ia5_string.c	/^   int code, value;$/;"	m	struct:__anon9	file:
value	libtomcrypt/src/pk/asn1/der/printable_string/der_length_printable_string.c	/^   int code, value;$/;"	m	struct:__anon10	file:
verbose_mode	scp.c	/^int verbose_mode = 0;$/;"	v
verifydir	scp.c	/^verifydir(char *cp)$/;"	f
void_cipher	common-algo.c	/^static int void_cipher(const unsigned char* in, unsigned char* out,$/;"	f	file:
void_start	common-algo.c	/^static int void_start(int cipher, const unsigned char *IV, $/;"	f	file:
vwrite	scpmisc.h	16;"	d
want_askpass	cli-authpasswd.c	/^static int want_askpass()$/;"	f	file:
wantpty	runopts.h	/^	int wantpty;$/;"	m	struct:cli_runopts
wd	libtomcrypt/src/headers/tomcrypt_prng.h	/^                  wd;            $/;"	m	struct:fortuna_prng
whirlpool	libtomcrypt/src/headers/tomcrypt_hash.h	/^    struct whirlpool_state whirlpool;$/;"	m	union:Hash_state	typeref:struct:Hash_state::whirlpool_state
whirlpool_compress	libtomcrypt/src/hashes/whirl/whirl.c	/^static int whirlpool_compress(hash_state *md, unsigned char *buf)$/;"	f	file:
whirlpool_desc	libtomcrypt/src/hashes/whirl/whirl.c	/^const struct ltc_hash_descriptor whirlpool_desc =$/;"	v	typeref:struct:ltc_hash_descriptor
whirlpool_done	libtomcrypt/src/hashes/whirl/whirl.c	/^int whirlpool_done(hash_state * md, unsigned char *out)$/;"	f
whirlpool_init	libtomcrypt/src/hashes/whirl/whirl.c	/^int whirlpool_init(hash_state * md)$/;"	f
whirlpool_state	libtomcrypt/src/headers/tomcrypt_hash.h	/^struct whirlpool_state {$/;"	s
whirlpool_test	libtomcrypt/src/hashes/whirl/whirl.c	/^int  whirlpool_test(void)$/;"	f
win_resized	progressmeter.c	/^static volatile sig_atomic_t win_resized; \/* for window resizing *\/$/;"	v	file:
win_size	progressmeter.c	/^static int win_size;		\/* terminal window size *\/$/;"	v	file:
winchange	session.h	/^	int winchange; \/* Set to 1 when a windowchange signal happens *\/$/;"	m	struct:clientsession
write_packet	packet.c	/^void write_packet() {$/;"	f
write_pending	common-channel.c	/^static unsigned int write_pending(struct Channel * channel) {$/;"	f	file:
write_radix	libtomcrypt/src/headers/tomcrypt_math.h	/^   int (*write_radix)(void *a, char *str, int radix);$/;"	m	struct:__anon11
write_radix	libtomcrypt/src/math/gmp_desc.c	/^static int write_radix(void *a, char *b, int radix)$/;"	f	file:
write_radix	libtomcrypt/src/math/ltm_desc.c	/^static int write_radix(void *a, char *b, int radix)$/;"	f	file:
write_radix	libtomcrypt/src/math/tfm_desc.c	/^static int write_radix(void *a, char *b, int radix)$/;"	f	file:
write_urandom	random.c	/^static void write_urandom()$/;"	f	file:
writebuf	channel.h	/^	circbuffer *writebuf; \/* data from the wire, for local consumption. Can be$/;"	m	struct:Channel
writechannel	common-channel.c	/^static void writechannel(struct Channel* channel, int fd, circbuffer *cbuf) {$/;"	f	file:
writefd	channel.h	/^	int writefd; \/* read from wire, written to insecure side *\/$/;"	m	struct:Channel
writepayload	session.h	/^	buffer *writepayload; \/* Unencrypted payload to write - this is used$/;"	m	struct:sshsession
writepos	circbuffer.h	/^	unsigned int writepos;$/;"	m	struct:circbuf
writequeue	session.h	/^	struct Queue writequeue; \/* A queue of encrypted packets to send *\/$/;"	m	struct:sshsession	typeref:struct:sshsession::Queue
wtmp_get_entry	loginrec.c	/^wtmp_get_entry(struct logininfo *li)$/;"	f
wtmp_islogin	loginrec.c	/^wtmp_islogin(struct logininfo *li, struct utmp *ut)$/;"	f	file:
wtmp_perform_login	loginrec.c	/^wtmp_perform_login(struct logininfo *li)$/;"	f	file:
wtmp_perform_logout	loginrec.c	/^wtmp_perform_logout(struct logininfo *li)$/;"	f	file:
wtmp_write	loginrec.c	/^wtmp_write(struct logininfo *li, struct utmp *ut)$/;"	f	file:
wtmp_write_entry	loginrec.c	/^wtmp_write_entry(struct logininfo *li)$/;"	f
wtmpx_get_entry	loginrec.c	/^wtmpx_get_entry(struct logininfo *li)$/;"	f
wtmpx_islogin	loginrec.c	/^wtmpx_islogin(struct logininfo *li, struct utmpx *utx)$/;"	f	file:
wtmpx_perform_login	loginrec.c	/^wtmpx_perform_login(struct logininfo *li)$/;"	f	file:
wtmpx_perform_logout	loginrec.c	/^wtmpx_perform_logout(struct logininfo *li)$/;"	f	file:
wtmpx_write	loginrec.c	/^wtmpx_write(struct logininfo *li, struct utmpx *utx)$/;"	f	file:
wtmpx_write_entry	loginrec.c	/^wtmpx_write_entry(struct logininfo *li)$/;"	f
x	dss.h	/^	mp_int* x;$/;"	m	struct:__anon6
x	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *x;$/;"	m	struct:__anon29
x	libtomcrypt/src/headers/tomcrypt_pk.h	/^   void *x;$/;"	m	struct:__anon31
x	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int x, y;$/;"	m	struct:rc4_prng
x11accept	svr-x11fwd.c	/^static void x11accept(struct Listener* listener, int sock) {$/;"	f	file:
x11authcookie	chansession.h	/^	char * x11authcookie;$/;"	m	struct:ChanSess
x11authprot	chansession.h	/^	char * x11authprot;$/;"	m	struct:ChanSess
x11cleanup	svr-x11fwd.c	/^void x11cleanup(struct ChanSess *chansess) {$/;"	f
x11listener	chansession.h	/^	struct Listener * x11listener;$/;"	m	struct:ChanSess	typeref:struct:ChanSess::Listener
x11port	chansession.h	/^	int x11port;$/;"	m	struct:ChanSess
x11req	svr-x11fwd.c	/^int x11req(struct ChanSess * chansess) {$/;"	f
x11screennum	chansession.h	/^	unsigned int x11screennum;$/;"	m	struct:ChanSess
x11setauth	svr-x11fwd.c	/^void x11setauth(struct ChanSess *chansess) {$/;"	f
x11singleconn	chansession.h	/^	unsigned char x11singleconn;$/;"	m	struct:ChanSess
xcbc_done	libtomcrypt/src/mac/xcbc/xcbc_done.c	/^int xcbc_done(xcbc_state *xcbc, unsigned char *out, unsigned long *outlen)$/;"	f
xcbc_file	libtomcrypt/src/mac/xcbc/xcbc_file.c	/^int xcbc_file(int cipher, $/;"	f
xcbc_init	libtomcrypt/src/mac/xcbc/xcbc_init.c	/^int xcbc_init(xcbc_state *xcbc, int cipher, const unsigned char *key, unsigned long keylen)$/;"	f
xcbc_memory	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   int (*xcbc_memory)($/;"	m	struct:ltc_cipher_descriptor
xcbc_memory	libtomcrypt/src/mac/xcbc/xcbc_memory.c	/^int xcbc_memory(int cipher, $/;"	f
xcbc_memory_multi	libtomcrypt/src/mac/xcbc/xcbc_memory_multi.c	/^int xcbc_memory_multi(int cipher, $/;"	f
xcbc_process	libtomcrypt/src/mac/xcbc/xcbc_process.c	/^int xcbc_process(xcbc_state *xcbc, const unsigned char *in, unsigned long inlen)$/;"	f
xcbc_state	libtomcrypt/src/headers/tomcrypt_mac.h	/^} xcbc_state;$/;"	t	typeref:struct:__anon18
xcbc_test	libtomcrypt/src/mac/xcbc/xcbc_test.c	/^int xcbc_test(void)$/;"	f
xfree	scpmisc.c	/^xfree(void *ptr)$/;"	f
xkey	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct rc2_key { unsigned xkey[64]; };$/;"	m	struct:rc2_key
xmalloc	scpmisc.c	/^xmalloc(size_t size)$/;"	f
xrealloc	scpmisc.c	/^xrealloc(void *ptr, size_t new_size)$/;"	f
xstrdup	scpmisc.c	/^xstrdup(const char *str)$/;"	f
xtea	libtomcrypt/src/headers/tomcrypt_cipher.h	/^   struct xtea_key     xtea;$/;"	m	union:Symmetric_key	typeref:struct:Symmetric_key::xtea_key
xtea_desc	libtomcrypt/src/ciphers/xtea.c	/^const struct ltc_cipher_descriptor xtea_desc =$/;"	v	typeref:struct:ltc_cipher_descriptor
xtea_done	libtomcrypt/src/ciphers/xtea.c	/^void xtea_done(symmetric_key *skey)$/;"	f
xtea_ecb_decrypt	libtomcrypt/src/ciphers/xtea.c	/^int xtea_ecb_decrypt(const unsigned char *ct, unsigned char *pt, symmetric_key *skey)$/;"	f
xtea_ecb_encrypt	libtomcrypt/src/ciphers/xtea.c	/^int xtea_ecb_encrypt(const unsigned char *pt, unsigned char *ct, symmetric_key *skey)$/;"	f
xtea_key	libtomcrypt/src/headers/tomcrypt_cipher.h	/^struct xtea_key {$/;"	s
xtea_keysize	libtomcrypt/src/ciphers/xtea.c	/^int xtea_keysize(int *keysize)$/;"	f
xtea_setup	libtomcrypt/src/ciphers/xtea.c	/^int xtea_setup(const unsigned char *key, int keylen, int num_rounds, symmetric_key *skey)$/;"	f
xtea_test	libtomcrypt/src/ciphers/xtea.c	/^int xtea_test(void)$/;"	f
y	dss.h	/^	mp_int* y;$/;"	m	struct:__anon6
y	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *y;$/;"	m	struct:__anon29
y	libtomcrypt/src/headers/tomcrypt_pk.h	/^   void *y;$/;"	m	struct:__anon31
y	libtomcrypt/src/headers/tomcrypt_prng.h	/^    int x, y;$/;"	m	struct:rc4_prng
yarrow	libtomcrypt/src/headers/tomcrypt_prng.h	/^    struct yarrow_prng    yarrow;$/;"	m	union:Prng_state	typeref:struct:Prng_state::yarrow_prng
yarrow_add_entropy	libtomcrypt/src/prngs/yarrow.c	/^int yarrow_add_entropy(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
yarrow_desc	libtomcrypt/src/prngs/yarrow.c	/^const struct ltc_prng_descriptor yarrow_desc =$/;"	v	typeref:struct:ltc_prng_descriptor
yarrow_done	libtomcrypt/src/prngs/yarrow.c	/^int yarrow_done(prng_state *prng)$/;"	f
yarrow_export	libtomcrypt/src/prngs/yarrow.c	/^int yarrow_export(unsigned char *out, unsigned long *outlen, prng_state *prng)$/;"	f
yarrow_import	libtomcrypt/src/prngs/yarrow.c	/^int yarrow_import(const unsigned char *in, unsigned long inlen, prng_state *prng)$/;"	f
yarrow_prng	libtomcrypt/src/headers/tomcrypt_prng.h	/^struct yarrow_prng {$/;"	s
yarrow_prng	libtomcrypt/testprof/x86_prof.c	/^prng_state yarrow_prng;$/;"	v
yarrow_read	libtomcrypt/src/prngs/yarrow.c	/^unsigned long yarrow_read(unsigned char *out, unsigned long outlen, prng_state *prng)$/;"	f
yarrow_ready	libtomcrypt/src/prngs/yarrow.c	/^int yarrow_ready(prng_state *prng)$/;"	f
yarrow_start	libtomcrypt/src/prngs/yarrow.c	/^int yarrow_start(prng_state *prng)$/;"	f
yarrow_test	libtomcrypt/src/prngs/yarrow.c	/^int yarrow_test(void)$/;"	f
z	libtomcrypt/src/headers/tomcrypt_pk.h	/^    void *z;$/;"	m	struct:__anon29
zeromem	libtomcrypt/src/misc/zeromem.c	/^void zeromem(void *out, size_t outlen)$/;"	f
zstream	session.h	/^	z_streamp zstream;$/;"	m	struct:key_context_directional
